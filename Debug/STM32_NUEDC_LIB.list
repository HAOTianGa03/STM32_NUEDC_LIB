
STM32_NUEDC_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f55c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800f740  0800f740  00010740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fca8  0800fca8  000111d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fca8  0800fca8  00010ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fcb0  0800fcb0  000111d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fcb0  0800fcb0  00010cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800fcb8  0800fcb8  00010cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800fcc0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  200001d4  0800fe94  000111d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  0800fe94  000117bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021768  00000000  00000000  00011204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dad  00000000  00000000  0003296c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00036720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001301  00000000  00000000  00037fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e4cc  00000000  00000000  000392d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de6f  00000000  00000000  000677a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012c943  00000000  00000000  00085614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b1f57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081fc  00000000  00000000  001b1f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001ba198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f724 	.word	0x0800f724

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800f724 	.word	0x0800f724

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	223c      	movs	r2, #60	@ 0x3c
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00b f8e2 	bl	800c218 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	2220      	movs	r2, #32
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00b f8dc 	bl	800c218 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b53      	ldr	r3, [pc, #332]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001068:	4b51      	ldr	r3, [pc, #324]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 800106a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b4f      	ldr	r3, [pc, #316]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b4e      	ldr	r3, [pc, #312]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b4c      	ldr	r3, [pc, #304]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b4b      	ldr	r3, [pc, #300]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001088:	4b49      	ldr	r3, [pc, #292]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 800108a:	2208      	movs	r2, #8
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b48      	ldr	r3, [pc, #288]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001094:	4b46      	ldr	r3, [pc, #280]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 8001096:	2201      	movs	r2, #1
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800109a:	4b45      	ldr	r3, [pc, #276]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 800109c:	2202      	movs	r2, #2
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b43      	ldr	r3, [pc, #268]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b41      	ldr	r3, [pc, #260]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b40      	ldr	r3, [pc, #256]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010b4:	4b3e      	ldr	r3, [pc, #248]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b3c      	ldr	r3, [pc, #240]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b3b      	ldr	r3, [pc, #236]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	4839      	ldr	r0, [pc, #228]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 80010cc:	f002 fd10 	bl	8003af0 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f001 f9ab 	bl	8002430 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	4832      	ldr	r0, [pc, #200]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 80010e6:	f004 fec9 	bl	8005e7c <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f001 f99e 	bl	8002430 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80010f4:	4b2f      	ldr	r3, [pc, #188]	@ (80011b4 <MX_ADC1_Init+0x180>)
 80010f6:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80010f8:	2309      	movs	r3, #9
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80010fc:	2304      	movs	r3, #4
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjectedOffset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigInjected.InjectedNbrOfConversion = 2;
 800110c:	2302      	movs	r3, #2
 800110e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  sConfigInjected.QueueInjectedContext = DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_HRTIM_TRG2;
 8001122:	23cc      	movs	r3, #204	@ 0xcc
 8001124:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001126:	2380      	movs	r3, #128	@ 0x80
 8001128:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001130:	f107 0320 	add.w	r3, r7, #32
 8001134:	4619      	mov	r1, r3
 8001136:	481e      	ldr	r0, [pc, #120]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 8001138:	f004 f974 	bl	8005424 <HAL_ADCEx_InjectedConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001142:	f001 f975 	bl	8002430 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001146:	f240 130f 	movw	r3, #271	@ 0x10f
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4619      	mov	r1, r3
 8001152:	4817      	ldr	r0, [pc, #92]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 8001154:	f004 f966 	bl	8005424 <HAL_ADCEx_InjectedConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 800115e:	f001 f967 	bl	8002430 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001162:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <MX_ADC1_Init+0x180>)
 8001164:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001166:	2306      	movs	r3, #6
 8001168:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800116a:	2304      	movs	r3, #4
 800116c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800116e:	237f      	movs	r3, #127	@ 0x7f
 8001170:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001172:	2304      	movs	r3, #4
 8001174:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 8001180:	f003 f8e6 	bl	8004350 <HAL_ADC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 800118a:	f001 f951 	bl	8002430 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800118e:	230c      	movs	r3, #12
 8001190:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001192:	463b      	mov	r3, r7
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	@ (80011b0 <MX_ADC1_Init+0x17c>)
 8001198:	f003 f8da 	bl	8004350 <HAL_ADC_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 80011a2:	f001 f945 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3768      	adds	r7, #104	@ 0x68
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200001f0 	.word	0x200001f0
 80011b4:	19200040 	.word	0x19200040

080011b8 <HAL_ADC_MspInit>:
}

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b0a4      	sub	sp, #144	@ 0x90
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011d4:	2254      	movs	r2, #84	@ 0x54
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f00b f81d 	bl	800c218 <memset>
  if(adcHandle->Instance==ADC1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011e6:	f040 80a9 	bne.w	800133c <HAL_ADC_MspInit+0x184>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011f0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011fa:	4618      	mov	r0, r3
 80011fc:	f007 ff3e 	bl	800907c <HAL_RCCEx_PeriphCLKConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001206:	f001 f913 	bl	8002430 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800120a:	4b97      	ldr	r3, [pc, #604]	@ (8001468 <HAL_ADC_MspInit+0x2b0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	4a95      	ldr	r2, [pc, #596]	@ (8001468 <HAL_ADC_MspInit+0x2b0>)
 8001212:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001214:	4b94      	ldr	r3, [pc, #592]	@ (8001468 <HAL_ADC_MspInit+0x2b0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d10b      	bne.n	8001234 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800121c:	4b93      	ldr	r3, [pc, #588]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001220:	4a92      	ldr	r2, [pc, #584]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 8001222:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001226:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001228:	4b90      	ldr	r3, [pc, #576]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 800122a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
 8001232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001234:	4b8d      	ldr	r3, [pc, #564]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001238:	4a8c      	ldr	r2, [pc, #560]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001240:	4b8a      	ldr	r3, [pc, #552]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	623b      	str	r3, [r7, #32]
 800124a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	4b87      	ldr	r3, [pc, #540]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001250:	4a86      	ldr	r2, [pc, #536]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001258:	4b84      	ldr	r3, [pc, #528]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001264:	4b81      	ldr	r3, [pc, #516]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001268:	4a80      	ldr	r2, [pc, #512]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 800126a:	f043 0302 	orr.w	r3, r3, #2
 800126e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001270:	4b7e      	ldr	r3, [pc, #504]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800127c:	2301      	movs	r3, #1
 800127e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001280:	2303      	movs	r3, #3
 8001282:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001290:	4619      	mov	r1, r3
 8001292:	4877      	ldr	r0, [pc, #476]	@ (8001470 <HAL_ADC_MspInit+0x2b8>)
 8001294:	f005 fb3c 	bl	8006910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001298:	2308      	movs	r3, #8
 800129a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129c:	2303      	movs	r3, #3
 800129e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012ac:	4619      	mov	r1, r3
 80012ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b2:	f005 fb2d 	bl	8006910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012bc:	2303      	movs	r3, #3
 80012be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012cc:	4619      	mov	r1, r3
 80012ce:	4869      	ldr	r0, [pc, #420]	@ (8001474 <HAL_ADC_MspInit+0x2bc>)
 80012d0:	f005 fb1e 	bl	8006910 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 80012d4:	4b68      	ldr	r3, [pc, #416]	@ (8001478 <HAL_ADC_MspInit+0x2c0>)
 80012d6:	4a69      	ldr	r2, [pc, #420]	@ (800147c <HAL_ADC_MspInit+0x2c4>)
 80012d8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012da:	4b67      	ldr	r3, [pc, #412]	@ (8001478 <HAL_ADC_MspInit+0x2c0>)
 80012dc:	2205      	movs	r2, #5
 80012de:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012e0:	4b65      	ldr	r3, [pc, #404]	@ (8001478 <HAL_ADC_MspInit+0x2c0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e6:	4b64      	ldr	r3, [pc, #400]	@ (8001478 <HAL_ADC_MspInit+0x2c0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ec:	4b62      	ldr	r3, [pc, #392]	@ (8001478 <HAL_ADC_MspInit+0x2c0>)
 80012ee:	2280      	movs	r2, #128	@ 0x80
 80012f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012f2:	4b61      	ldr	r3, [pc, #388]	@ (8001478 <HAL_ADC_MspInit+0x2c0>)
 80012f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001478 <HAL_ADC_MspInit+0x2c0>)
 80012fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001300:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001302:	4b5d      	ldr	r3, [pc, #372]	@ (8001478 <HAL_ADC_MspInit+0x2c0>)
 8001304:	2220      	movs	r2, #32
 8001306:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001308:	4b5b      	ldr	r3, [pc, #364]	@ (8001478 <HAL_ADC_MspInit+0x2c0>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800130e:	485a      	ldr	r0, [pc, #360]	@ (8001478 <HAL_ADC_MspInit+0x2c0>)
 8001310:	f004 ffcc 	bl	80062ac <HAL_DMA_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_ADC_MspInit+0x166>
    {
      Error_Handler();
 800131a:	f001 f889 	bl	8002430 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a55      	ldr	r2, [pc, #340]	@ (8001478 <HAL_ADC_MspInit+0x2c0>)
 8001322:	655a      	str	r2, [r3, #84]	@ 0x54
 8001324:	4a54      	ldr	r2, [pc, #336]	@ (8001478 <HAL_ADC_MspInit+0x2c0>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	2012      	movs	r0, #18
 8001330:	f004 ff87 	bl	8006242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001334:	2012      	movs	r0, #18
 8001336:	f004 ff9e 	bl	8006276 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800133a:	e090      	b.n	800145e <HAL_ADC_MspInit+0x2a6>
  else if(adcHandle->Instance==ADC2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a4f      	ldr	r2, [pc, #316]	@ (8001480 <HAL_ADC_MspInit+0x2c8>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d148      	bne.n	80013d8 <HAL_ADC_MspInit+0x220>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800134a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800134c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001350:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001352:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001356:	4618      	mov	r0, r3
 8001358:	f007 fe90 	bl	800907c <HAL_RCCEx_PeriphCLKConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 8001362:	f001 f865 	bl	8002430 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001366:	4b40      	ldr	r3, [pc, #256]	@ (8001468 <HAL_ADC_MspInit+0x2b0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4a3e      	ldr	r2, [pc, #248]	@ (8001468 <HAL_ADC_MspInit+0x2b0>)
 800136e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001370:	4b3d      	ldr	r3, [pc, #244]	@ (8001468 <HAL_ADC_MspInit+0x2b0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d10b      	bne.n	8001390 <HAL_ADC_MspInit+0x1d8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001378:	4b3c      	ldr	r3, [pc, #240]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 800137a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137c:	4a3b      	ldr	r2, [pc, #236]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 800137e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001382:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001384:	4b39      	ldr	r3, [pc, #228]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001388:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b36      	ldr	r3, [pc, #216]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001394:	4a35      	ldr	r2, [pc, #212]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139c:	4b33      	ldr	r3, [pc, #204]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
 80013a8:	2343      	movs	r3, #67	@ 0x43
 80013aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ac:	2303      	movs	r3, #3
 80013ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013bc:	4619      	mov	r1, r3
 80013be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c2:	f005 faa5 	bl	8006910 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	2012      	movs	r0, #18
 80013cc:	f004 ff39 	bl	8006242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013d0:	2012      	movs	r0, #18
 80013d2:	f004 ff50 	bl	8006276 <HAL_NVIC_EnableIRQ>
}
 80013d6:	e042      	b.n	800145e <HAL_ADC_MspInit+0x2a6>
  else if(adcHandle->Instance==ADC3)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a29      	ldr	r2, [pc, #164]	@ (8001484 <HAL_ADC_MspInit+0x2cc>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d13d      	bne.n	800145e <HAL_ADC_MspInit+0x2a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80013e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80013e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80013ec:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013f2:	4618      	mov	r0, r3
 80013f4:	f007 fe42 	bl	800907c <HAL_RCCEx_PeriphCLKConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_ADC_MspInit+0x24a>
      Error_Handler();
 80013fe:	f001 f817 	bl	8002430 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001402:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	4a19      	ldr	r2, [pc, #100]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 8001408:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800140c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140e:	4b17      	ldr	r3, [pc, #92]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	4b14      	ldr	r3, [pc, #80]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	4a13      	ldr	r2, [pc, #76]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <HAL_ADC_MspInit+0x2b4>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001432:	2303      	movs	r3, #3
 8001434:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001436:	2303      	movs	r3, #3
 8001438:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001442:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001446:	4619      	mov	r1, r3
 8001448:	480a      	ldr	r0, [pc, #40]	@ (8001474 <HAL_ADC_MspInit+0x2bc>)
 800144a:	f005 fa61 	bl	8006910 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	202f      	movs	r0, #47	@ 0x2f
 8001454:	f004 fef5 	bl	8006242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001458:	202f      	movs	r0, #47	@ 0x2f
 800145a:	f004 ff0c 	bl	8006276 <HAL_NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3790      	adds	r7, #144	@ 0x90
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000394 	.word	0x20000394
 800146c:	40021000 	.word	0x40021000
 8001470:	48000800 	.word	0x48000800
 8001474:	48000400 	.word	0x48000400
 8001478:	20000334 	.word	0x20000334
 800147c:	40020030 	.word	0x40020030
 8001480:	50000100 	.word	0x50000100
 8001484:	50000400 	.word	0x50000400

08001488 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800148e:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <MX_DMA_Init+0x70>)
 8001490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001492:	4a19      	ldr	r2, [pc, #100]	@ (80014f8 <MX_DMA_Init+0x70>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6493      	str	r3, [r2, #72]	@ 0x48
 800149a:	4b17      	ldr	r3, [pc, #92]	@ (80014f8 <MX_DMA_Init+0x70>)
 800149c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a6:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <MX_DMA_Init+0x70>)
 80014a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014aa:	4a13      	ldr	r2, [pc, #76]	@ (80014f8 <MX_DMA_Init+0x70>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80014b2:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <MX_DMA_Init+0x70>)
 80014b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	200b      	movs	r0, #11
 80014c4:	f004 febd 	bl	8006242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014c8:	200b      	movs	r0, #11
 80014ca:	f004 fed4 	bl	8006276 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	200c      	movs	r0, #12
 80014d4:	f004 feb5 	bl	8006242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014d8:	200c      	movs	r0, #12
 80014da:	f004 fecc 	bl	8006276 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	200d      	movs	r0, #13
 80014e4:	f004 fead 	bl	8006242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014e8:	200d      	movs	r0, #13
 80014ea:	f004 fec4 	bl	8006276 <HAL_NVIC_EnableIRQ>

}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000

080014fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	@ 0x28
 8001500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001512:	4b24      	ldr	r3, [pc, #144]	@ (80015a4 <MX_GPIO_Init+0xa8>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001516:	4a23      	ldr	r2, [pc, #140]	@ (80015a4 <MX_GPIO_Init+0xa8>)
 8001518:	f043 0320 	orr.w	r3, r3, #32
 800151c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800151e:	4b21      	ldr	r3, [pc, #132]	@ (80015a4 <MX_GPIO_Init+0xa8>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001522:	f003 0320 	and.w	r3, r3, #32
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	4b1e      	ldr	r3, [pc, #120]	@ (80015a4 <MX_GPIO_Init+0xa8>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	4a1d      	ldr	r2, [pc, #116]	@ (80015a4 <MX_GPIO_Init+0xa8>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001536:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <MX_GPIO_Init+0xa8>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <MX_GPIO_Init+0xa8>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	4a17      	ldr	r2, [pc, #92]	@ (80015a4 <MX_GPIO_Init+0xa8>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <MX_GPIO_Init+0xa8>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <MX_GPIO_Init+0xa8>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	4a11      	ldr	r2, [pc, #68]	@ (80015a4 <MX_GPIO_Init+0xa8>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001566:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <MX_GPIO_Init+0xa8>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001578:	480b      	ldr	r0, [pc, #44]	@ (80015a8 <MX_GPIO_Init+0xac>)
 800157a:	f005 fb4b 	bl	8006c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY1_Pin;
 800157e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY1_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4804      	ldr	r0, [pc, #16]	@ (80015a8 <MX_GPIO_Init+0xac>)
 8001598:	f005 f9ba 	bl	8006910 <HAL_GPIO_Init>

}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	@ 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48000800 	.word	0x48000800

080015ac <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b0ba      	sub	sp, #232	@ 0xe8
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 80015b2:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80015bc:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 80015ca:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
 80015da:	615a      	str	r2, [r3, #20]
 80015dc:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80015de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015e2:	2260      	movs	r2, #96	@ 0x60
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f00a fe16 	bl	800c218 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80015ec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 80015f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015fc:	2224      	movs	r2, #36	@ 0x24
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f00a fe09 	bl	800c218 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2220      	movs	r2, #32
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f00a fe03 	bl	800c218 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8001612:	4bc7      	ldr	r3, [pc, #796]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 8001614:	4ac7      	ldr	r2, [pc, #796]	@ (8001934 <MX_HRTIM1_Init+0x388>)
 8001616:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001618:	4bc5      	ldr	r3, [pc, #788]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 800161a:	2200      	movs	r2, #0
 800161c:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800161e:	4bc4      	ldr	r3, [pc, #784]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8001624:	48c2      	ldr	r0, [pc, #776]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 8001626:	f005 fb0d 	bl	8006c44 <HAL_HRTIM_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8001630:	f000 fefe 	bl	8002430 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8001634:	210c      	movs	r1, #12
 8001636:	48be      	ldr	r0, [pc, #760]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 8001638:	f005 fbd4 	bl	8006de4 <HAL_HRTIM_DLLCalibrationStart>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 8001642:	f000 fef5 	bl	8002430 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8001646:	210a      	movs	r1, #10
 8001648:	48b9      	ldr	r0, [pc, #740]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 800164a:	f005 fc23 	bl	8006e94 <HAL_HRTIM_PollForDLLCalibration>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 8001654:	f000 feec 	bl	8002430 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_A;
 8001658:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800165c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT24_TIMERA_CMP2;
 8001660:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001664:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_2, &pADCTriggerCfg) != HAL_OK)
 8001668:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800166c:	461a      	mov	r2, r3
 800166e:	2102      	movs	r1, #2
 8001670:	48af      	ldr	r0, [pc, #700]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 8001672:	f005 fc6b 	bl	8006f4c <HAL_HRTIM_ADCTriggerConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_HRTIM1_Init+0xd4>
  {
    Error_Handler();
 800167c:	f000 fed8 	bl	8002430 <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_2, 0) != HAL_OK)
 8001680:	2200      	movs	r2, #0
 8001682:	2102      	movs	r1, #2
 8001684:	48aa      	ldr	r0, [pc, #680]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 8001686:	f005 fe4d 	bl	8007324 <HAL_HRTIM_ADCPostScalerConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_HRTIM1_Init+0xe8>
  {
    Error_Handler();
 8001690:	f000 fece 	bl	8002430 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_C;
 8001694:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001698:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERC_CMP3;
 800169c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80016a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, &pADCTriggerCfg) != HAL_OK)
 80016a4:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80016a8:	461a      	mov	r2, r3
 80016aa:	2104      	movs	r1, #4
 80016ac:	48a0      	ldr	r0, [pc, #640]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 80016ae:	f005 fc4d 	bl	8006f4c <HAL_HRTIM_ADCTriggerConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_HRTIM1_Init+0x110>
  {
    Error_Handler();
 80016b8:	f000 feba 	bl	8002430 <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, 0x0) != HAL_OK)
 80016bc:	2200      	movs	r2, #0
 80016be:	2104      	movs	r1, #4
 80016c0:	489b      	ldr	r0, [pc, #620]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 80016c2:	f005 fe2f 	bl	8007324 <HAL_HRTIM_ADCPostScalerConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_HRTIM1_Init+0x124>
  {
    Error_Handler();
 80016cc:	f000 feb0 	bl	8002430 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_B;
 80016d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT24_TIMERB_CMP4;
 80016d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_4, &pADCTriggerCfg) != HAL_OK)
 80016e0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80016e4:	461a      	mov	r2, r3
 80016e6:	2108      	movs	r1, #8
 80016e8:	4891      	ldr	r0, [pc, #580]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 80016ea:	f005 fc2f 	bl	8006f4c <HAL_HRTIM_ADCTriggerConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_HRTIM1_Init+0x14c>
  {
    Error_Handler();
 80016f4:	f000 fe9c 	bl	8002430 <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_4, 0x0) != HAL_OK)
 80016f8:	2200      	movs	r2, #0
 80016fa:	2108      	movs	r1, #8
 80016fc:	488c      	ldr	r0, [pc, #560]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 80016fe:	f005 fe11 	bl	8007324 <HAL_HRTIM_ADCPostScalerConfig>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_HRTIM1_Init+0x160>
  {
    Error_Handler();
 8001708:	f000 fe92 	bl	8002430 <Error_Handler>
  }
  pTimeBaseCfg.Period = 10000;
 800170c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001710:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 800171a:	2305      	movs	r3, #5
 800171c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001720:	2308      	movs	r3, #8
 8001722:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001726:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800172a:	461a      	mov	r2, r3
 800172c:	2100      	movs	r1, #0
 800172e:	4880      	ldr	r0, [pc, #512]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 8001730:	f005 fbe4 	bl	8006efc <HAL_HRTIM_TimeBaseConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_HRTIM1_Init+0x192>
  {
    Error_Handler();
 800173a:	f000 fe79 	bl	8002430 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 8001744:	2300      	movs	r3, #0
 8001746:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8001750:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001754:	461a      	mov	r2, r3
 8001756:	2100      	movs	r1, #0
 8001758:	4875      	ldr	r0, [pc, #468]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 800175a:	f005 ffba 	bl	80076d2 <HAL_HRTIM_WaveformTimerControl>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_HRTIM1_Init+0x1bc>
  {
    Error_Handler();
 8001764:	f000 fe64 	bl	8002430 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8001768:	2300      	movs	r3, #0
 800176a:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800176c:	2300      	movs	r3, #0
 800176e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.DMASrcAddress = 0x0000;
 8001770:	2300      	movs	r3, #0
 8001772:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.DMADstAddress = 0x0000;
 8001774:	2300      	movs	r3, #0
 8001776:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.DMASize = 0x1;
 8001778:	2301      	movs	r3, #1
 800177a:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800177c:	2300      	movs	r3, #0
 800177e:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8001780:	2300      	movs	r3, #0
 8001782:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001784:	2300      	movs	r3, #0
 8001786:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001788:	2300      	movs	r3, #0
 800178a:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800178c:	2300      	movs	r3, #0
 800178e:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001790:	2300      	movs	r3, #0
 8001792:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800179a:	2300      	movs	r3, #0
 800179c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 80017b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80017de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017e2:	461a      	mov	r2, r3
 80017e4:	2100      	movs	r1, #0
 80017e6:	4852      	ldr	r0, [pc, #328]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 80017e8:	f005 fee6 	bl	80075b8 <HAL_HRTIM_WaveformTimerConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_HRTIM1_Init+0x24a>
  {
    Error_Handler();
 80017f2:	f000 fe1d 	bl	8002430 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80017f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017fa:	461a      	mov	r2, r3
 80017fc:	2101      	movs	r1, #1
 80017fe:	484c      	ldr	r0, [pc, #304]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 8001800:	f005 feda 	bl	80075b8 <HAL_HRTIM_WaveformTimerConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_HRTIM1_Init+0x262>
  {
    Error_Handler();
 800180a:	f000 fe11 	bl	8002430 <Error_Handler>
  }
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8001814:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001818:	461a      	mov	r2, r3
 800181a:	2102      	movs	r1, #2
 800181c:	4844      	ldr	r0, [pc, #272]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 800181e:	f005 fecb 	bl	80075b8 <HAL_HRTIM_WaveformTimerConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_HRTIM1_Init+0x280>
  {
    Error_Handler();
 8001828:	f000 fe02 	bl	8002430 <Error_Handler>
  }
  pCompareCfg.CompareValue = 10000;
 800182c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001830:	64bb      	str	r3, [r7, #72]	@ 0x48
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8001832:	2300      	movs	r3, #0
 8001834:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8001836:	2300      	movs	r3, #0
 8001838:	653b      	str	r3, [r7, #80]	@ 0x50

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 800183a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800183e:	2202      	movs	r2, #2
 8001840:	2100      	movs	r1, #0
 8001842:	483b      	ldr	r0, [pc, #236]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 8001844:	f005 fff8 	bl	8007838 <HAL_HRTIM_WaveformCompareConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_HRTIM1_Init+0x2a6>
  {
    Error_Handler();
 800184e:	f000 fdef 	bl	8002430 <Error_Handler>
  }
  pCompareCfg.CompareValue = 5000;
 8001852:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001856:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8001858:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800185c:	2208      	movs	r2, #8
 800185e:	2101      	movs	r1, #1
 8001860:	4833      	ldr	r0, [pc, #204]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 8001862:	f005 ffe9 	bl	8007838 <HAL_HRTIM_WaveformCompareConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_HRTIM1_Init+0x2c4>
  {
    Error_Handler();
 800186c:	f000 fde0 	bl	8002430 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_DIV1;
 8001870:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
  pDeadTimeCfg.RisingValue = 50;
 8001876:	2332      	movs	r3, #50	@ 0x32
 8001878:	62bb      	str	r3, [r7, #40]	@ 0x28
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 800187e:	2300      	movs	r3, #0
 8001880:	633b      	str	r3, [r7, #48]	@ 0x30
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8001882:	2300      	movs	r3, #0
 8001884:	637b      	str	r3, [r7, #52]	@ 0x34
  pDeadTimeCfg.FallingValue = 50;
 8001886:	2332      	movs	r3, #50	@ 0x32
 8001888:	63bb      	str	r3, [r7, #56]	@ 0x38
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 800188a:	2300      	movs	r3, #0
 800188c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 800188e:	2300      	movs	r3, #0
 8001890:	643b      	str	r3, [r7, #64]	@ 0x40
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8001892:	2300      	movs	r3, #0
 8001894:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8001896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800189a:	461a      	mov	r2, r3
 800189c:	2100      	movs	r1, #0
 800189e:	4824      	ldr	r0, [pc, #144]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 80018a0:	f005 ff4a 	bl	8007738 <HAL_HRTIM_DeadTimeConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_HRTIM1_Init+0x302>
  {
    Error_Handler();
 80018aa:	f000 fdc1 	bl	8002430 <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pDeadTimeCfg) != HAL_OK)
 80018ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b2:	461a      	mov	r2, r3
 80018b4:	2101      	movs	r1, #1
 80018b6:	481e      	ldr	r0, [pc, #120]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 80018b8:	f005 ff3e 	bl	8007738 <HAL_HRTIM_DeadTimeConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_HRTIM1_Init+0x31a>
  {
    Error_Handler();
 80018c2:	f000 fdb5 	bl	8002430 <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pDeadTimeCfg) != HAL_OK)
 80018c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ca:	461a      	mov	r2, r3
 80018cc:	2102      	movs	r1, #2
 80018ce:	4818      	ldr	r0, [pc, #96]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 80018d0:	f005 ff32 	bl	8007738 <HAL_HRTIM_DeadTimeConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_HRTIM1_Init+0x332>
  {
    Error_Handler();
 80018da:	f000 fda9 	bl	8002430 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 80018e2:	2304      	movs	r3, #4
 80018e4:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 80018e6:	2310      	movs	r3, #16
 80018e8:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2201      	movs	r2, #1
 8001902:	2100      	movs	r1, #0
 8001904:	480a      	ldr	r0, [pc, #40]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 8001906:	f006 f905 	bl	8007b14 <HAL_HRTIM_WaveformOutputConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_HRTIM1_Init+0x368>
  {
    Error_Handler();
 8001910:	f000 fd8e 	bl	8002430 <Error_Handler>
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	2204      	movs	r2, #4
 800191c:	2101      	movs	r1, #1
 800191e:	4804      	ldr	r0, [pc, #16]	@ (8001930 <MX_HRTIM1_Init+0x384>)
 8001920:	f006 f8f8 	bl	8007b14 <HAL_HRTIM_WaveformOutputConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d006      	beq.n	8001938 <MX_HRTIM1_Init+0x38c>
  {
    Error_Handler();
 800192a:	f000 fd81 	bl	8002430 <Error_Handler>
 800192e:	e003      	b.n	8001938 <MX_HRTIM1_Init+0x38c>
 8001930:	20000398 	.word	0x20000398
 8001934:	40016800 	.word	0x40016800
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMPER;
 8001938:	2304      	movs	r3, #4
 800193a:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	2210      	movs	r2, #16
 8001940:	2102      	movs	r1, #2
 8001942:	483f      	ldr	r0, [pc, #252]	@ (8001a40 <MX_HRTIM1_Init+0x494>)
 8001944:	f006 f8e6 	bl	8007b14 <HAL_HRTIM_WaveformOutputConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_HRTIM1_Init+0x3a6>
  {
    Error_Handler();
 800194e:	f000 fd6f 	bl	8002430 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2202      	movs	r2, #2
 800195e:	2100      	movs	r1, #0
 8001960:	4837      	ldr	r0, [pc, #220]	@ (8001a40 <MX_HRTIM1_Init+0x494>)
 8001962:	f006 f8d7 	bl	8007b14 <HAL_HRTIM_WaveformOutputConfig>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_HRTIM1_Init+0x3c4>
  {
    Error_Handler();
 800196c:	f000 fd60 	bl	8002430 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2208      	movs	r2, #8
 8001974:	2101      	movs	r1, #1
 8001976:	4832      	ldr	r0, [pc, #200]	@ (8001a40 <MX_HRTIM1_Init+0x494>)
 8001978:	f006 f8cc 	bl	8007b14 <HAL_HRTIM_WaveformOutputConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_HRTIM1_Init+0x3da>
  {
    Error_Handler();
 8001982:	f000 fd55 	bl	8002430 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2220      	movs	r2, #32
 800198a:	2102      	movs	r1, #2
 800198c:	482c      	ldr	r0, [pc, #176]	@ (8001a40 <MX_HRTIM1_Init+0x494>)
 800198e:	f006 f8c1 	bl	8007b14 <HAL_HRTIM_WaveformOutputConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_HRTIM1_Init+0x3f0>
  {
    Error_Handler();
 8001998:	f000 fd4a 	bl	8002430 <Error_Handler>
  }
  pTimeBaseCfg.Period = 5000;
 800199c:	f241 3388 	movw	r3, #5000	@ 0x1388
 80019a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 80019a4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80019a8:	461a      	mov	r2, r3
 80019aa:	2101      	movs	r1, #1
 80019ac:	4824      	ldr	r0, [pc, #144]	@ (8001a40 <MX_HRTIM1_Init+0x494>)
 80019ae:	f005 faa5 	bl	8006efc <HAL_HRTIM_TimeBaseConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_HRTIM1_Init+0x410>
  {
    Error_Handler();
 80019b8:	f000 fd3a 	bl	8002430 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 80019bc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80019c0:	461a      	mov	r2, r3
 80019c2:	2101      	movs	r1, #1
 80019c4:	481e      	ldr	r0, [pc, #120]	@ (8001a40 <MX_HRTIM1_Init+0x494>)
 80019c6:	f005 fe84 	bl	80076d2 <HAL_HRTIM_WaveformTimerControl>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_HRTIM1_Init+0x428>
  {
    Error_Handler();
 80019d0:	f000 fd2e 	bl	8002430 <Error_Handler>
  }
  pTimeBaseCfg.Period = 2000;
 80019d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80019d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 80019dc:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80019e0:	461a      	mov	r2, r3
 80019e2:	2102      	movs	r1, #2
 80019e4:	4816      	ldr	r0, [pc, #88]	@ (8001a40 <MX_HRTIM1_Init+0x494>)
 80019e6:	f005 fa89 	bl	8006efc <HAL_HRTIM_TimeBaseConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_HRTIM1_Init+0x448>
  {
    Error_Handler();
 80019f0:	f000 fd1e 	bl	8002430 <Error_Handler>
  }
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 80019fa:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80019fe:	461a      	mov	r2, r3
 8001a00:	2102      	movs	r1, #2
 8001a02:	480f      	ldr	r0, [pc, #60]	@ (8001a40 <MX_HRTIM1_Init+0x494>)
 8001a04:	f005 fe65 	bl	80076d2 <HAL_HRTIM_WaveformTimerControl>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_HRTIM1_Init+0x466>
  {
    Error_Handler();
 8001a0e:	f000 fd0f 	bl	8002430 <Error_Handler>
  }
  pCompareCfg.CompareValue = 2000;
 8001a12:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a16:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001a18:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	2102      	movs	r1, #2
 8001a20:	4807      	ldr	r0, [pc, #28]	@ (8001a40 <MX_HRTIM1_Init+0x494>)
 8001a22:	f005 ff09 	bl	8007838 <HAL_HRTIM_WaveformCompareConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_HRTIM1_Init+0x484>
  {
    Error_Handler();
 8001a2c:	f000 fd00 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001a30:	4803      	ldr	r0, [pc, #12]	@ (8001a40 <MX_HRTIM1_Init+0x494>)
 8001a32:	f000 f827 	bl	8001a84 <HAL_HRTIM_MspPostInit>

}
 8001a36:	bf00      	nop
 8001a38:	37e8      	adds	r7, #232	@ 0xe8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000398 	.word	0x20000398

08001a44 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0a      	ldr	r2, [pc, #40]	@ (8001a7c <HAL_HRTIM_MspInit+0x38>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d10b      	bne.n	8001a6e <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001a56:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <HAL_HRTIM_MspInit+0x3c>)
 8001a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5a:	4a09      	ldr	r2, [pc, #36]	@ (8001a80 <HAL_HRTIM_MspInit+0x3c>)
 8001a5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a60:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a62:	4b07      	ldr	r3, [pc, #28]	@ (8001a80 <HAL_HRTIM_MspInit+0x3c>)
 8001a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40016800 	.word	0x40016800
 8001a80:	40021000 	.word	0x40021000

08001a84 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	@ 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a20      	ldr	r2, [pc, #128]	@ (8001b24 <HAL_HRTIM_MspPostInit+0xa0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d13a      	bne.n	8001b1c <HAL_HRTIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <HAL_HRTIM_MspPostInit+0xa4>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8001b28 <HAL_HRTIM_MspPostInit+0xa4>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <HAL_HRTIM_MspPostInit+0xa4>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <HAL_HRTIM_MspPostInit+0xa4>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac2:	4a19      	ldr	r2, [pc, #100]	@ (8001b28 <HAL_HRTIM_MspPostInit+0xa4>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aca:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <HAL_HRTIM_MspPostInit+0xa4>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ad6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001ae8:	230d      	movs	r3, #13
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	4619      	mov	r1, r3
 8001af2:	480e      	ldr	r0, [pc, #56]	@ (8001b2c <HAL_HRTIM_MspPostInit+0xa8>)
 8001af4:	f004 ff0c 	bl	8006910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001af8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afe:	2302      	movs	r3, #2
 8001b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b06:	2303      	movs	r3, #3
 8001b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001b0a:	230d      	movs	r3, #13
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4619      	mov	r1, r3
 8001b14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b18:	f004 fefa 	bl	8006910 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001b1c:	bf00      	nop
 8001b1e:	3728      	adds	r7, #40	@ 0x28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40016800 	.word	0x40016800
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	48000400 	.word	0x48000400

08001b30 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8001b34:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <_ZSt21is_constant_evaluatedv>:

  /// Returns true only when called during constant evaluation.
  /// @since C++20
  constexpr inline bool
  is_constant_evaluated() noexcept
  {
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
    if consteval { return true; } else { return false; }
#else
    return __builtin_is_constant_evaluated();
 8001b44:	2300      	movs	r3, #0
#endif
  }
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t>:

////sysclk到tim不要分频！！！注意
class Hardware_STM32_HRTIM_PWM
{
public:
  void begin(HRTIM_HandleTypeDef *hhrtim,hw_port_hrtim_pwm_channel_t hrtim_timer_id,hw_port_hrtim_pwm_compare_unit_t compare_unit) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	70fb      	strb	r3, [r7, #3]
    if (hhrtim == nullptr) {
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 8088 	beq.w	8001c76 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0x126>
	return;
    }
    hhrtim_ = hhrtim;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	601a      	str	r2, [r3, #0]
    channel_=hrtim_timer_id;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	60da      	str	r2, [r3, #12]
    compare_unit_=compare_unit;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	78fa      	ldrb	r2, [r7, #3]
 8001b76:	745a      	strb	r2, [r3, #17]
    sysclk_frequency_=HAL_RCC_GetSysClockFreq();
 8001b78:	f007 f9a0 	bl	8008ebc <HAL_RCC_GetSysClockFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	615a      	str	r2, [r3, #20]
    //启动互补输出
    switch (channel_) {
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b8a:	d053      	beq.n	8001c34 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xe4>
 8001b8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b90:	dc5c      	bgt.n	8001c4c <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
 8001b92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b96:	d042      	beq.n	8001c1e <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xce>
 8001b98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b9c:	dc56      	bgt.n	8001c4c <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
 8001b9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ba2:	d032      	beq.n	8001c0a <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xba>
 8001ba4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ba8:	dc50      	bgt.n	8001c4c <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
 8001baa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001bae:	d022      	beq.n	8001bf6 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xa6>
 8001bb0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001bb4:	dc4a      	bgt.n	8001c4c <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
 8001bb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001bba:	d012      	beq.n	8001be2 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0x92>
 8001bbc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001bc0:	dc44      	bgt.n	8001c4c <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
 8001bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bc6:	d040      	beq.n	8001c4a <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfa>
 8001bc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001bcc:	d13e      	bne.n	8001c4c <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
      case HRTIM_TIMER_MASTER:
	break;
      case HRTIM_TIMER_A:
	HAL_HRTIM_WaveformOutputStart(hhrtim_, HRTIM_OUTPUT_TA1|HRTIM_OUTPUT_TA2);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f005 ffce 	bl	8007b76 <HAL_HRTIM_WaveformOutputStart>
	id_=HRTIM_TIMER_A_ID;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	741a      	strb	r2, [r3, #16]
	break;
 8001be0:	e034      	b.n	8001c4c <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
      case HRTIM_TIMER_B:
	HAL_HRTIM_WaveformOutputStart(hhrtim_,
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	210c      	movs	r1, #12
 8001be8:	4618      	mov	r0, r3
 8001bea:	f005 ffc4 	bl	8007b76 <HAL_HRTIM_WaveformOutputStart>
				      HRTIM_OUTPUT_TB1 | HRTIM_OUTPUT_TB2);
	id_=HRTIM_TIMER_B_ID;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	741a      	strb	r2, [r3, #16]
	break;
 8001bf4:	e02a      	b.n	8001c4c <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
      case HRTIM_TIMER_C:
	HAL_HRTIM_WaveformOutputStart(hhrtim_,
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2130      	movs	r1, #48	@ 0x30
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f005 ffba 	bl	8007b76 <HAL_HRTIM_WaveformOutputStart>
				      HRTIM_OUTPUT_TC1 | HRTIM_OUTPUT_TC2);
	id_=HRTIM_TIMER_C_ID;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2202      	movs	r2, #2
 8001c06:	741a      	strb	r2, [r3, #16]
	break;
 8001c08:	e020      	b.n	8001c4c <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
      case HRTIM_TIMER_D:
	HAL_HRTIM_WaveformOutputStart(hhrtim_,
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	21c0      	movs	r1, #192	@ 0xc0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f005 ffb0 	bl	8007b76 <HAL_HRTIM_WaveformOutputStart>
				      HRTIM_OUTPUT_TD1 | HRTIM_OUTPUT_TD2);
	id_=HRTIM_TIMER_D_ID;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2203      	movs	r2, #3
 8001c1a:	741a      	strb	r2, [r3, #16]
	break;
 8001c1c:	e016      	b.n	8001c4c <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
      case HRTIM_TIMER_E:
	HAL_HRTIM_WaveformOutputStart(hhrtim_,
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001c26:	4618      	mov	r0, r3
 8001c28:	f005 ffa5 	bl	8007b76 <HAL_HRTIM_WaveformOutputStart>
				      HRTIM_OUTPUT_TE1 | HRTIM_OUTPUT_TE2);
	id_=HRTIM_TIMER_E_ID;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2204      	movs	r2, #4
 8001c30:	741a      	strb	r2, [r3, #16]
	break;
 8001c32:	e00b      	b.n	8001c4c <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
      case HRTIM_TIMER_F:
	HAL_HRTIM_WaveformOutputStart(hhrtim_,
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f005 ff9a 	bl	8007b76 <HAL_HRTIM_WaveformOutputStart>
				      HRTIM_OUTPUT_TF1 | HRTIM_OUTPUT_TF2);
	id_=HRTIM_TIMER_F_ID;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2205      	movs	r2, #5
 8001c46:	741a      	strb	r2, [r3, #16]
	break;
 8001c48:	e000      	b.n	8001c4c <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
	break;
 8001c4a:	bf00      	nop
    }
    period_=__HAL_HRTIM_GETPERIOD(hhrtim_, id_);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	7c1b      	ldrb	r3, [r3, #16]
 8001c50:	2b06      	cmp	r3, #6
 8001c52:	d104      	bne.n	8001c5e <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0x10e>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	e008      	b.n	8001c70 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0x120>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	7c1b      	ldrb	r3, [r3, #16]
 8001c68:	01db      	lsls	r3, r3, #7
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3394      	adds	r3, #148	@ 0x94
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	6053      	str	r3, [r2, #4]
 8001c74:	e000      	b.n	8001c78 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0x128>
	return;
 8001c76:	bf00      	nop
  }
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_ZN24Hardware_STM32_HRTIM_PWM9setOutputEv>:

  void setOutput()
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  {
    HAL_HRTIM_WaveformCounterStart(hhrtim_, channel_);  // Start the counter of the Timer
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4610      	mov	r0, r2
 8001c92:	f005 ff9d 	bl	8007bd0 <HAL_HRTIM_WaveformCountStart>
  }
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf>:
  float getMaxFrequency()
  {
    return sysclk_frequency_ / period_ * 1.0f;
  }

  void setDutyCycle(float duty) {
 8001c9e:	b480      	push	{r7}
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	ed87 0a00 	vstr	s0, [r7]
    duty_=duty;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	609a      	str	r2, [r3, #8]
    uint32_t newCompareValue = period_* duty_;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cca:	ee17 3a90 	vmov	r3, s15
 8001cce:	60fb      	str	r3, [r7, #12]
    __HAL_HRTIM_SETCOMPARE(hhrtim_, id_, compare_unit_,newCompareValue );//timer参数可能要改一下
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7c1b      	ldrb	r3, [r3, #16]
 8001cd4:	2b06      	cmp	r3, #6
 8001cd6:	d123      	bne.n	8001d20 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0x82>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7c5b      	ldrb	r3, [r3, #17]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d105      	bne.n	8001cec <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0x4e>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	61da      	str	r2, [r3, #28]
  }
 8001cea:	e050      	b.n	8001d8e <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xf0>
    __HAL_HRTIM_SETCOMPARE(hhrtim_, id_, compare_unit_,newCompareValue );//timer参数可能要改一下
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7c5b      	ldrb	r3, [r3, #17]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d105      	bne.n	8001d00 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0x62>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  }
 8001cfe:	e046      	b.n	8001d8e <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xf0>
    __HAL_HRTIM_SETCOMPARE(hhrtim_, id_, compare_unit_,newCompareValue );//timer参数可能要改一下
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7c5b      	ldrb	r3, [r3, #17]
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d105      	bne.n	8001d14 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0x76>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	629a      	str	r2, [r3, #40]	@ 0x28
  }
 8001d12:	e03c      	b.n	8001d8e <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xf0>
    __HAL_HRTIM_SETCOMPARE(hhrtim_, id_, compare_unit_,newCompareValue );//timer参数可能要改一下
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
 8001d1e:	e036      	b.n	8001d8e <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xf0>
    __HAL_HRTIM_SETCOMPARE(hhrtim_, id_, compare_unit_,newCompareValue );//timer参数可能要改一下
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7c5b      	ldrb	r3, [r3, #17]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d10a      	bne.n	8001d3e <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xa0>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7c1b      	ldrb	r3, [r3, #16]
 8001d32:	01db      	lsls	r3, r3, #7
 8001d34:	4413      	add	r3, r2
 8001d36:	339c      	adds	r3, #156	@ 0x9c
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	601a      	str	r2, [r3, #0]
  }
 8001d3c:	e027      	b.n	8001d8e <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xf0>
    __HAL_HRTIM_SETCOMPARE(hhrtim_, id_, compare_unit_,newCompareValue );//timer参数可能要改一下
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7c5b      	ldrb	r3, [r3, #17]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d10a      	bne.n	8001d5c <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xbe>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7c1b      	ldrb	r3, [r3, #16]
 8001d50:	01db      	lsls	r3, r3, #7
 8001d52:	4413      	add	r3, r2
 8001d54:	33a4      	adds	r3, #164	@ 0xa4
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	601a      	str	r2, [r3, #0]
  }
 8001d5a:	e018      	b.n	8001d8e <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xf0>
    __HAL_HRTIM_SETCOMPARE(hhrtim_, id_, compare_unit_,newCompareValue );//timer参数可能要改一下
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7c5b      	ldrb	r3, [r3, #17]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d10a      	bne.n	8001d7a <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xdc>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7c1b      	ldrb	r3, [r3, #16]
 8001d6e:	01db      	lsls	r3, r3, #7
 8001d70:	4413      	add	r3, r2
 8001d72:	33a8      	adds	r3, #168	@ 0xa8
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	601a      	str	r2, [r3, #0]
  }
 8001d78:	e009      	b.n	8001d8e <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xf0>
    __HAL_HRTIM_SETCOMPARE(hhrtim_, id_, compare_unit_,newCompareValue );//timer参数可能要改一下
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7c1b      	ldrb	r3, [r3, #16]
 8001d84:	01db      	lsls	r3, r3, #7
 8001d86:	4413      	add	r3, r2
 8001d88:	33ac      	adds	r3, #172	@ 0xac
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	601a      	str	r2, [r3, #0]
  }
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <_ZN15stm32_hrtim_pwm15getTimerAOutputEv>:
#include "hw_port_hrtim_pwm.h"

namespace stm32_hrtim_pwm
{
  Hardware_STM32_HRTIM_PWM getTimerAOutput()
  {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
    Hardware_STM32_HRTIM_PWM hrtim_pwm;
    hrtim_pwm.begin(&hhrtim1, HRTIM_TIMER_A, HRTIM_COMPARE_EVENT_2);
 8001da4:	2302      	movs	r3, #2
 8001da6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001daa:	4904      	ldr	r1, [pc, #16]	@ (8001dbc <_ZN15stm32_hrtim_pwm15getTimerAOutputEv+0x20>)
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff fecf 	bl	8001b50 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t>
    return hrtim_pwm;
 8001db2:	bf00      	nop
  }
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000398 	.word	0x20000398

08001dc0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fb30 	bl	800245c <_ZNSaImED1Ev>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 fb13 	bl	800243c <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <_ZNSt6vectorImSaImEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ffeb 	bl	8001e06 <_ZNSt12_Vector_baseImSaImEEC1Ev>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_ZN18Hardware_STM32_ADCC1Ev>:


class Hardware_STM32_ADC
{
public:
  Hardware_STM32_ADC(){}
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ffeb 	bl	8001e20 <_ZNSt6vectorImSaImEEC1Ev>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	741a      	strb	r2, [r3, #16]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	745a      	strb	r2, [r3, #17]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <_ZN18Hardware_STM32_ADCaSEOS_>:

  // 移动构造函数
  Hardware_STM32_ADC(Hardware_STM32_ADC&& other)noexcept = default;

  Hardware_STM32_ADC& operator=(Hardware_STM32_ADC&& other) noexcept
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  {
    // 自我赋值检查
    if (this == &other)
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d101      	bne.n	8001e76 <_ZN18Hardware_STM32_ADCaSEOS_+0x16>
      {
	return *this;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	e021      	b.n	8001eba <_ZN18Hardware_STM32_ADCaSEOS_+0x5a>
      }

    // 使用 std::swap 交换资源
    std::swap(hadc_, other.hadc_);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f103 020c 	add.w	r2, r3, #12
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	330c      	adds	r3, #12
 8001e80:	4619      	mov	r1, r3
 8001e82:	4610      	mov	r0, r2
 8001e84:	f000 fb29 	bl	80024da <_ZSt4swapIP17ADC_HandleTypeDefENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
    std::swap(isDataReady_, other.isDataReady_);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f103 0210 	add.w	r2, r3, #16
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	3310      	adds	r3, #16
 8001e92:	4619      	mov	r1, r3
 8001e94:	4610      	mov	r0, r2
 8001e96:	f000 fb3f 	bl	8002518 <_ZSt4swapI24hw_stm32_adc_dma_ready_tENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
    std::swap(isDataReady_IT_, other.isDataReady_IT_);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f103 0211 	add.w	r2, r3, #17
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	3311      	adds	r3, #17
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f000 fb55 	bl	8002556 <_ZSt4swapI23hw_stm32_adc_it_ready_tENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
    std::swap(readData_, other.readData_);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fb6e 	bl	8002594 <_ZSt4swapImSaImEEvRSt6vectorIT_T0_ES5_>

    return *this;
 8001eb8:	687b      	ldr	r3, [r7, #4]
  }
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_ZN18Hardware_STM32_ADC5beginEP17ADC_HandleTypeDef19hw_stm32_adc_mode_t>:
  void begin(ADC_HandleTypeDef *hadc,hw_stm32_adc_mode_t mode) {
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b08a      	sub	sp, #40	@ 0x28
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
    if (hadc == nullptr) {
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d02a      	beq.n	8001f2a <_ZN18Hardware_STM32_ADC5beginEP17ADC_HandleTypeDef19hw_stm32_adc_mode_t+0x68>
	return;
    }
    hadc_ = hadc;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
    readData_=std::vector<uint32_t>(2,0);
 8001eda:	2300      	movs	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
 8001ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fb63 	bl	80025ae <_ZNSaImEC1Ev>
 8001ee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eec:	f107 0220 	add.w	r2, r7, #32
 8001ef0:	f107 0014 	add.w	r0, r7, #20
 8001ef4:	2102      	movs	r1, #2
 8001ef6:	f000 fb66 	bl	80025c6 <_ZNSt6vectorImSaImEEC1EjRKmRKS0_>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f107 0214 	add.w	r2, r7, #20
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fb7b 	bl	80025fe <_ZNSt6vectorImSaImEEaSEOS1_>
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 fac9 	bl	80024a4 <_ZNSt6vectorImSaImEED1Ev>
 8001f12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 faa0 	bl	800245c <_ZNSaImED1Ev>
    HAL_ADCEx_Calibration_Start(hadc_,mode);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 f8ee 	bl	8005104 <HAL_ADCEx_Calibration_Start>
 8001f28:	e000      	b.n	8001f2c <_ZN18Hardware_STM32_ADC5beginEP17ADC_HandleTypeDef19hw_stm32_adc_mode_t+0x6a>
	return;
 8001f2a:	bf00      	nop
  }
 8001f2c:	3728      	adds	r7, #40	@ 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <_ZN18Hardware_STM32_ADC14startSample_ITEv>:
    }
    hadc_ = hadc;
    HAL_ADCEx_Calibration_Start(hadc_,mode);
  }

  void startSample_IT()
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  {
    HAL_ADCEx_InjectedStart_IT(hadc_);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 f942 	bl	80051c8 <HAL_ADCEx_InjectedStart_IT>
  }
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <_ZN18Hardware_STM32_ADC14readVoltage_ITEv>:
    isDataReady_=STM32_ADC_DMA_NOT_READY;
    //		HAL_ADC_Start_DMA(hadc_,readData_,(sizeof(readData_)/sizeof(readData_[0])));
    return readData_[1] / 4096.0f * 3.3f;
  }

  float readVoltage_IT() {
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
    while (isDataReady_IT_ != STM32_ADC_IT_READY) {}
 8001f54:	bf00      	nop
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	7c5b      	ldrb	r3, [r3, #17]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d1fb      	bne.n	8001f56 <_ZN18Hardware_STM32_ADC14readVoltage_ITEv+0xa>
    isDataReady_IT_=STM32_ADC_IT_NOT_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	745a      	strb	r2, [r3, #17]
    //    HAL_ADCEx_InjectedStart_IT(hadc_);
    return hadc_->Instance->JDR1 / 4096.0f * 3.3f;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f76:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001f94 <_ZN18Hardware_STM32_ADC14readVoltage_ITEv+0x48>
 8001f7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f7e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001f98 <_ZN18Hardware_STM32_ADC14readVoltage_ITEv+0x4c>
 8001f82:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
 8001f86:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	45800000 	.word	0x45800000
 8001f98:	40533333 	.word	0x40533333

08001f9c <_ZN18Hardware_STM32_ADC14readCurrent_ITEv>:

  float readCurrent_IT() {
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
    while (isDataReady_IT_ != STM32_ADC_IT_READY) {}
 8001fa4:	bf00      	nop
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7c5b      	ldrb	r3, [r3, #17]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d1fb      	bne.n	8001fa6 <_ZN18Hardware_STM32_ADC14readCurrent_ITEv+0xa>
    isDataReady_IT_=STM32_ADC_IT_NOT_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	745a      	strb	r2, [r3, #17]
    //    HAL_ADCEx_InjectedStart_IT(hadc_);
    return hadc_->Instance->JDR2 / 4096.0f * 3.3f;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fc6:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001fe4 <_ZN18Hardware_STM32_ADC14readCurrent_ITEv+0x48>
 8001fca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fce:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001fe8 <_ZN18Hardware_STM32_ADC14readCurrent_ITEv+0x4c>
 8001fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
 8001fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	45800000 	.word	0x45800000
 8001fe8:	40533333 	.word	0x40533333

08001fec <_ZN18Hardware_STM32_ADCD1Ev>:
class Hardware_STM32_ADC
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fa54 	bl	80024a4 <_ZNSt6vectorImSaImEED1Ev>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <_ZN9stm32_adc7getADC1Ev>:
#include "adc.h"

namespace stm32_adc
{
  Hardware_STM32_ADC getADC1()
  {
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
    Hardware_STM32_ADC adc;
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ff12 	bl	8001e3a <_ZN18Hardware_STM32_ADCC1Ev>
    adc.begin(&hadc1, STM32_ADC_SINGLE_ENDED);
 8002016:	227f      	movs	r2, #127	@ 0x7f
 8002018:	4904      	ldr	r1, [pc, #16]	@ (800202c <_ZN9stm32_adc7getADC1Ev+0x24>)
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ff51 	bl	8001ec2 <_ZN18Hardware_STM32_ADC5beginEP17ADC_HandleTypeDef19hw_stm32_adc_mode_t>
    return adc;
 8002020:	bf00      	nop
  }
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200001f0 	.word	0x200001f0

08002030 <_ZN20Hardware_STM32_Relay5beginEP12GPIO_TypeDefth>:
#include "hw_hal_relay.h"

class Hardware_STM32_Relay
{
public:
  void begin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin ,uint8_t active_level) {
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	4611      	mov	r1, r2
 800203c:	461a      	mov	r2, r3
 800203e:	460b      	mov	r3, r1
 8002040:	80fb      	strh	r3, [r7, #6]
 8002042:	4613      	mov	r3, r2
 8002044:	717b      	strb	r3, [r7, #5]
    if (GPIOx == nullptr) {
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d009      	beq.n	8002060 <_ZN20Hardware_STM32_Relay5beginEP12GPIO_TypeDefth+0x30>
	return;
    }
    GPIOx_ = GPIOx;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	601a      	str	r2, [r3, #0]
    GPIO_Pin_ = GPIO_Pin;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	88fa      	ldrh	r2, [r7, #6]
 8002056:	809a      	strh	r2, [r3, #4]
    active_level_=active_level;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	797a      	ldrb	r2, [r7, #5]
 800205c:	719a      	strb	r2, [r3, #6]
 800205e:	e000      	b.n	8002062 <_ZN20Hardware_STM32_Relay5beginEP12GPIO_TypeDefth+0x32>
	return;
 8002060:	bf00      	nop
  }
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <_ZN11stm32_relay9getRelay1Ev>:
#include"hw_port_relay.h"

namespace stm32_relay
{
  Hardware_STM32_Relay getRelay1()
  {
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
    Hardware_STM32_Relay relay;
    relay.begin(RELAY1_GPIO_Port,RELAY1_Pin,1);
 8002074:	2301      	movs	r3, #1
 8002076:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800207a:	4904      	ldr	r1, [pc, #16]	@ (800208c <_ZN11stm32_relay9getRelay1Ev+0x20>)
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ffd7 	bl	8002030 <_ZN20Hardware_STM32_Relay5beginEP12GPIO_TypeDefth>
    return relay;
 8002082:	bf00      	nop
  }
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	48000800 	.word	0x48000800

08002090 <_ZN13stm32_dc_buck10getDCBuck1EP24Hardware_STM32_HRTIM_PWMP18Hardware_STM32_ADCP20Hardware_STM32_Relay>:
namespace stm32_dc_buck
{
  Algorithim_DC_Buck<Hardware_STM32_HRTIM_PWM, Hardware_STM32_ADC,
  Hardware_STM32_Relay>
  getDCBuck1(Hardware_STM32_HRTIM_PWM *pwm, Hardware_STM32_ADC *adc, Hardware_STM32_Relay *relay)
  {
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
    Algorithim_DC_Buck<Hardware_STM32_HRTIM_PWM, Hardware_STM32_ADC,
    Hardware_STM32_Relay>
    dc_buck;
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 fac2 	bl	8002628 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayEC1Ev>
    dc_buck.begin(pwm, 0, 0,
 80020a4:	2300      	movs	r3, #0
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 80020cc <_ZN13stm32_dc_buck10getDCBuck1EP24Hardware_STM32_HRTIM_PWMP18Hardware_STM32_ADCP20Hardware_STM32_Relay+0x3c>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	eddf 0a06 	vldr	s1, [pc, #24]	@ 80020cc <_ZN13stm32_dc_buck10getDCBuck1EP24Hardware_STM32_HRTIM_PWMP18Hardware_STM32_ADCP20Hardware_STM32_Relay+0x3c>
 80020b4:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 80020cc <_ZN13stm32_dc_buck10getDCBuck1EP24Hardware_STM32_HRTIM_PWMP18Hardware_STM32_ADCP20Hardware_STM32_Relay+0x3c>
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 fac2 	bl	8002644 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE5beginEPS0_ffPS1_PS2_fS5_>
		  adc, relay, 0);
    return dc_buck;
 80020c0:	bf00      	nop
  }
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	00000000 	.word	0x00000000

080020d0 <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef>:
typedef void (*MessageCallback)(uint8_t *data, uint16_t len);

class Hardware_STM32_Message
{
public:
  void begin(uint16_t buffer_num, size_t buffer_len, UART_HandleTypeDef *huart)
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	460b      	mov	r3, r1
 80020de:	817b      	strh	r3, [r7, #10]
  {
    if (!huart) {
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d036      	beq.n	8002154 <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x84>
	return;
    }
    if (buffer_num == 0 || buffer_len == 0) {
 80020e6:	897b      	ldrh	r3, [r7, #10]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d035      	beq.n	8002158 <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x88>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d032      	beq.n	8002158 <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x88>
	return;
    }
    _buffer_num = buffer_num;
 80020f2:	897b      	ldrh	r3, [r7, #10]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	721a      	strb	r2, [r3, #8]
    _buffer_len = buffer_len;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	725a      	strb	r2, [r3, #9]
    _huart = huart;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	601a      	str	r2, [r3, #0]
    _buffer = new uint8_t*[buffer_num];
 8002108:	897b      	ldrh	r3, [r7, #10]
 800210a:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 800210e:	4293      	cmp	r3, r2
 8002110:	d201      	bcs.n	8002116 <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x46>
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	e001      	b.n	800211a <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x4a>
 8002116:	f04f 33ff 	mov.w	r3, #4294967295
 800211a:	4618      	mov	r0, r3
 800211c:	f008 ff7d 	bl	800b01a <_Znaj>
 8002120:	4603      	mov	r3, r0
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < buffer_num; i++) {
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	e00d      	b.n	800214a <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x7a>
	_buffer[i] = new uint8_t[buffer_len];
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	18d4      	adds	r4, r2, r3
 800213a:	4608      	mov	r0, r1
 800213c:	f008 ff6d 	bl	800b01a <_Znaj>
 8002140:	4603      	mov	r3, r0
 8002142:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < buffer_num; i++) {
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3301      	adds	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	897b      	ldrh	r3, [r7, #10]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	429a      	cmp	r2, r3
 8002150:	dbed      	blt.n	800212e <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x5e>
 8002152:	e002      	b.n	800215a <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x8a>
	return;
 8002154:	bf00      	nop
 8002156:	e000      	b.n	800215a <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x8a>
	return;
 8002158:	bf00      	nop
    }
  }
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd90      	pop	{r4, r7, pc}

08002160 <_ZN22Hardware_STM32_Message12startReceiveEv>:

  void startReceive()
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  {
    _startDMA();
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f804 	bl	8002176 <_ZN22Hardware_STM32_Message9_startDMAEv>
  }
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_ZN22Hardware_STM32_Message9_startDMAEv>:
  bool _new_data_available = 0;
  uint8_t _receiveBufferIndex = 0;
  int8_t _processBufferIndex = -1;
  MessageCallback _cb[number_of_event];

  void _startDMA()
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  {
    HAL_UARTEx_ReceiveToIdle_DMA(_huart, _buffer[_receiveBufferIndex], 2 * _buffer_len);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7c5b      	ldrb	r3, [r3, #17]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	6819      	ldr	r1, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	7a5b      	ldrb	r3, [r3, #9]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	b29b      	uxth	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	f008 fe0d 	bl	800adb8 <HAL_UARTEx_ReceiveToIdle_DMA>
  }
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_ZN22Hardware_STM32_MessageC1Ev>:
class Hardware_STM32_Message
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	741a      	strb	r2, [r3, #16]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	745a      	strb	r2, [r3, #17]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	22ff      	movs	r2, #255	@ 0xff
 80021be:	749a      	strb	r2, [r3, #18]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <_ZN13stm32_message8getUART1Ev>:
#include "string.h"

namespace stm32_message
{
  Hardware_STM32_Message getUART1()
  {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
    Hardware_STM32_Message message;
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ffe4 	bl	80021a6 <_ZN22Hardware_STM32_MessageC1Ev>
    message.begin(2, 20, &huart1);
 80021de:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <_ZN13stm32_message8getUART1Ev+0x24>)
 80021e0:	2214      	movs	r2, #20
 80021e2:	2102      	movs	r1, #2
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff73 	bl	80020d0 <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef>
    return message;
 80021ea:	bf00      	nop
  }
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000514 	.word	0x20000514

080021f8 <_ZN10stm32_test15timerA_pwm_testEv>:
extern Algorithim_PID g_current_pid;

namespace stm32_test
{
  void timerA_pwm_test ()
  {
 80021f8:	b5b0      	push	{r4, r5, r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
    g_hrtimerA_pwm_handler=stm32_hrtim_pwm::getTimerAOutput();
 80021fe:	4c0c      	ldr	r4, [pc, #48]	@ (8002230 <_ZN10stm32_test15timerA_pwm_testEv+0x38>)
 8002200:	463b      	mov	r3, r7
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fdca 	bl	8001d9c <_ZN15stm32_hrtim_pwm15getTimerAOutputEv>
 8002208:	4625      	mov	r5, r4
 800220a:	463c      	mov	r4, r7
 800220c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800220e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002210:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002214:	e885 0003 	stmia.w	r5, {r0, r1}
    g_hrtimerA_pwm_handler.setDutyCycle(0.3);
 8002218:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8002234 <_ZN10stm32_test15timerA_pwm_testEv+0x3c>
 800221c:	4804      	ldr	r0, [pc, #16]	@ (8002230 <_ZN10stm32_test15timerA_pwm_testEv+0x38>)
 800221e:	f7ff fd3e 	bl	8001c9e <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf>
    g_hrtimerA_pwm_handler.setOutput();
 8002222:	4803      	ldr	r0, [pc, #12]	@ (8002230 <_ZN10stm32_test15timerA_pwm_testEv+0x38>)
 8002224:	f7ff fd2b 	bl	8001c7e <_ZN24Hardware_STM32_HRTIM_PWM9setOutputEv>
  }
 8002228:	bf00      	nop
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bdb0      	pop	{r4, r5, r7, pc}
 8002230:	2000049c 	.word	0x2000049c
 8002234:	3e99999a 	.word	0x3e99999a

08002238 <_ZN10stm32_test11adc_it_testEv>:
	current=g_adc1_handler.readCurrent();
      }
  }

  void adc_it_test()
  {
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
    //adc注入组测试需要先开启PWM输出
    timerA_pwm_test();
 800223e:	f7ff ffdb 	bl	80021f8 <_ZN10stm32_test15timerA_pwm_testEv>
    g_adc1_handler=stm32_adc::getADC1();
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fedf 	bl	8002008 <_ZN9stm32_adc7getADC1Ev>
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	4619      	mov	r1, r3
 800224e:	480e      	ldr	r0, [pc, #56]	@ (8002288 <_ZN10stm32_test11adc_it_testEv+0x50>)
 8002250:	f7ff fe06 	bl	8001e60 <_ZN18Hardware_STM32_ADCaSEOS_>
 8002254:	1d3b      	adds	r3, r7, #4
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fec8 	bl	8001fec <_ZN18Hardware_STM32_ADCD1Ev>
    g_adc1_handler.startSample_IT();
 800225c:	480a      	ldr	r0, [pc, #40]	@ (8002288 <_ZN10stm32_test11adc_it_testEv+0x50>)
 800225e:	f7ff fe68 	bl	8001f32 <_ZN18Hardware_STM32_ADC14startSample_ITEv>
    while(1)
      {
	static float voltage = 0;
	static float current = 0;
	voltage = g_adc1_handler.readVoltage_IT ();
 8002262:	4809      	ldr	r0, [pc, #36]	@ (8002288 <_ZN10stm32_test11adc_it_testEv+0x50>)
 8002264:	f7ff fe72 	bl	8001f4c <_ZN18Hardware_STM32_ADC14readVoltage_ITEv>
 8002268:	eef0 7a40 	vmov.f32	s15, s0
 800226c:	4b07      	ldr	r3, [pc, #28]	@ (800228c <_ZN10stm32_test11adc_it_testEv+0x54>)
 800226e:	edc3 7a00 	vstr	s15, [r3]
	current = g_adc1_handler.readCurrent_IT ();
 8002272:	4805      	ldr	r0, [pc, #20]	@ (8002288 <_ZN10stm32_test11adc_it_testEv+0x50>)
 8002274:	f7ff fe92 	bl	8001f9c <_ZN18Hardware_STM32_ADC14readCurrent_ITEv>
 8002278:	eef0 7a40 	vmov.f32	s15, s0
 800227c:	4b04      	ldr	r3, [pc, #16]	@ (8002290 <_ZN10stm32_test11adc_it_testEv+0x58>)
 800227e:	edc3 7a00 	vstr	s15, [r3]
      }
 8002282:	bf00      	nop
 8002284:	e7ed      	b.n	8002262 <_ZN10stm32_test11adc_it_testEv+0x2a>
 8002286:	bf00      	nop
 8002288:	200004b4 	.word	0x200004b4
 800228c:	20000494 	.word	0x20000494
 8002290:	20000498 	.word	0x20000498

08002294 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002294:	b5b0      	push	{r4, r5, r7, lr}
 8002296:	b096      	sub	sp, #88	@ 0x58
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800229a:	f001 f966 	bl	800356a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800229e:	f000 f871 	bl	8002384 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022a2:	f7ff f92b 	bl	80014fc <MX_GPIO_Init>
  MX_DMA_Init();
 80022a6:	f7ff f8ef 	bl	8001488 <MX_DMA_Init>
  MX_ADC1_Init();
 80022aa:	f7fe fec3 	bl	8001034 <MX_ADC1_Init>
  MX_HRTIM1_Init();
 80022ae:	f7ff f97d 	bl	80015ac <MX_HRTIM1_Init>
  MX_USART1_UART_Init();
 80022b2:	f001 f817 	bl	80032e4 <MX_USART1_UART_Init>


  /* USER CODE BEGIN 2 */
  //串口抽象层初始化
  g_message_handler=stm32_message::getUART1();
 80022b6:	4c2d      	ldr	r4, [pc, #180]	@ (800236c <main+0xd8>)
 80022b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff87 	bl	80021d0 <_ZN13stm32_message8getUART1Ev>
 80022c2:	4625      	mov	r5, r4
 80022c4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80022c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022d0:	e885 0003 	stmia.w	r5, {r0, r1}
  g_message_handler.startReceive();
 80022d4:	4825      	ldr	r0, [pc, #148]	@ (800236c <main+0xd8>)
 80022d6:	f7ff ff43 	bl	8002160 <_ZN22Hardware_STM32_Message12startReceiveEv>

  //高级定时器抽象层初始化
  g_hrtimerA_pwm_handler=stm32_hrtim_pwm::getTimerAOutput();
 80022da:	4c25      	ldr	r4, [pc, #148]	@ (8002370 <main+0xdc>)
 80022dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fd5b 	bl	8001d9c <_ZN15stm32_hrtim_pwm15getTimerAOutputEv>
 80022e6:	4625      	mov	r5, r4
 80022e8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80022ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022f4:	e885 0003 	stmia.w	r5, {r0, r1}
  g_hrtimerA_pwm_handler.setOutput();
 80022f8:	481d      	ldr	r0, [pc, #116]	@ (8002370 <main+0xdc>)
 80022fa:	f7ff fcc0 	bl	8001c7e <_ZN24Hardware_STM32_HRTIM_PWM9setOutputEv>
  g_hrtimerA_pwm_handler.setDutyCycle(0.3);
 80022fe:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8002374 <main+0xe0>
 8002302:	481b      	ldr	r0, [pc, #108]	@ (8002370 <main+0xdc>)
 8002304:	f7ff fccb 	bl	8001c9e <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf>

  //ADC抽象层初始化
  g_adc1_handler=stm32_adc::getADC1();
 8002308:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fe7b 	bl	8002008 <_ZN9stm32_adc7getADC1Ev>
 8002312:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002316:	4619      	mov	r1, r3
 8002318:	4817      	ldr	r0, [pc, #92]	@ (8002378 <main+0xe4>)
 800231a:	f7ff fda1 	bl	8001e60 <_ZN18Hardware_STM32_ADCaSEOS_>
 800231e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fe62 	bl	8001fec <_ZN18Hardware_STM32_ADCD1Ev>

  //继电器抽象层初始化
  g_relay1_handler=stm32_relay::getRelay1();
 8002328:	4c14      	ldr	r4, [pc, #80]	@ (800237c <main+0xe8>)
 800232a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fe9c 	bl	800206c <_ZN11stm32_relay9getRelay1Ev>
 8002334:	4622      	mov	r2, r4
 8002336:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800233a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800233e:	e882 0003 	stmia.w	r2, {r0, r1}

  //算法抽象层初始化
  g_dc_buck_handler=stm32_dc_buck::getDCBuck1(&g_hrtimerA_pwm_handler,&g_adc1_handler,&g_relay1_handler);
 8002342:	4c0f      	ldr	r4, [pc, #60]	@ (8002380 <main+0xec>)
 8002344:	4638      	mov	r0, r7
 8002346:	4b0d      	ldr	r3, [pc, #52]	@ (800237c <main+0xe8>)
 8002348:	4a0b      	ldr	r2, [pc, #44]	@ (8002378 <main+0xe4>)
 800234a:	4909      	ldr	r1, [pc, #36]	@ (8002370 <main+0xdc>)
 800234c:	f7ff fea0 	bl	8002090 <_ZN13stm32_dc_buck10getDCBuck1EP24Hardware_STM32_HRTIM_PWMP18Hardware_STM32_ADCP20Hardware_STM32_Relay>
 8002350:	4625      	mov	r5, r4
 8002352:	463c      	mov	r4, r7
 8002354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002356:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800235a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800235c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002360:	e885 0003 	stmia.w	r5, {r0, r1}
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
      /* USER CODE END WHILE */
      stm32_test::adc_it_test();
 8002364:	f7ff ff68 	bl	8002238 <_ZN10stm32_test11adc_it_testEv>
 8002368:	e7fc      	b.n	8002364 <main+0xd0>
 800236a:	bf00      	nop
 800236c:	200004d0 	.word	0x200004d0
 8002370:	2000049c 	.word	0x2000049c
 8002374:	3e99999a 	.word	0x3e99999a
 8002378:	200004b4 	.word	0x200004b4
 800237c:	200004c8 	.word	0x200004c8
 8002380:	200004e8 	.word	0x200004e8

08002384 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b094      	sub	sp, #80	@ 0x50
 8002388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800238a:	f107 0318 	add.w	r3, r7, #24
 800238e:	2238      	movs	r2, #56	@ 0x38
 8002390:	2100      	movs	r1, #0
 8002392:	4618      	mov	r0, r3
 8002394:	f009 ff40 	bl	800c218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	60da      	str	r2, [r3, #12]
 80023a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80023aa:	f006 f885 	bl	80084b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023ae:	2302      	movs	r3, #2
 80023b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023b8:	2340      	movs	r3, #64	@ 0x40
 80023ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023bc:	2302      	movs	r3, #2
 80023be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023c0:	2302      	movs	r3, #2
 80023c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80023c4:	2304      	movs	r3, #4
 80023c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80023c8:	234b      	movs	r3, #75	@ 0x4b
 80023ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023cc:	2302      	movs	r3, #2
 80023ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80023d0:	2302      	movs	r3, #2
 80023d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023d4:	2302      	movs	r3, #2
 80023d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023d8:	f107 0318 	add.w	r3, r7, #24
 80023dc:	4618      	mov	r0, r3
 80023de:	f006 f91f 	bl	8008620 <HAL_RCC_OscConfig>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf14      	ite	ne
 80023e8:	2301      	movne	r3, #1
 80023ea:	2300      	moveq	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <_Z18SystemClock_Configv+0x72>
    {
      Error_Handler();
 80023f2:	f000 f81d 	bl	8002430 <Error_Handler>
    }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023f6:	230f      	movs	r3, #15
 80023f8:	607b      	str	r3, [r7, #4]
      |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023fa:	2303      	movs	r3, #3
 80023fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	2104      	movs	r1, #4
 800240e:	4618      	mov	r0, r3
 8002410:	f006 fc18 	bl	8008c44 <HAL_RCC_ClockConfig>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	bf14      	ite	ne
 800241a:	2301      	movne	r3, #1
 800241c:	2300      	moveq	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <_Z18SystemClock_Configv+0xa4>
    {
      Error_Handler();
 8002424:	f000 f804 	bl	8002430 <Error_Handler>
    }
}
 8002428:	bf00      	nop
 800242a:	3750      	adds	r7, #80	@ 0x50
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002434:	b672      	cpsid	i
}
 8002436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <Error_Handler+0x8>

0800243c <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f8b2 	bl	80025ae <_ZNSaImEC1Ev>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4618      	mov	r0, r3
 800244e:	f000 f921 	bl	8002694 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <_ZNSaImED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800248a:	461a      	mov	r2, r3
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f915 	bl	80026bc <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fcaa 	bl	8001dee <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <_ZNSt6vectorImSaImEED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 80024a4:	b5b0      	push	{r4, r5, r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681c      	ldr	r4, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f913 	bl	80026e2 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80024bc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80024be:	461a      	mov	r2, r3
 80024c0:	4629      	mov	r1, r5
 80024c2:	4620      	mov	r0, r4
 80024c4:	f000 f918 	bl	80026f8 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff ffd1 	bl	8002472 <_ZNSt12_Vector_baseImSaImEED1Ev>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bdb0      	pop	{r4, r5, r7, pc}

080024da <_ZSt4swapIP17ADC_HandleTypeDefENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f915 	bl	8002714 <_ZSt4moveIRP17ADC_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 80024ea:	4603      	mov	r3, r0
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80024f0:	6838      	ldr	r0, [r7, #0]
 80024f2:	f000 f90f 	bl	8002714 <_ZSt4moveIRP17ADC_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 80024f6:	4603      	mov	r3, r0
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80024fe:	f107 030c 	add.w	r3, r7, #12
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f906 	bl	8002714 <_ZSt4moveIRP17ADC_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 8002508:	4603      	mov	r3, r0
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	601a      	str	r2, [r3, #0]
    }
 8002510:	bf00      	nop
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <_ZSt4swapI24hw_stm32_adc_dma_ready_tENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f901 	bl	800272a <_ZSt4moveIR24hw_stm32_adc_dma_ready_tEONSt16remove_referenceIT_E4typeEOS3_>
 8002528:	4603      	mov	r3, r0
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	73fb      	strb	r3, [r7, #15]
      __a = _GLIBCXX_MOVE(__b);
 800252e:	6838      	ldr	r0, [r7, #0]
 8002530:	f000 f8fb 	bl	800272a <_ZSt4moveIR24hw_stm32_adc_dma_ready_tEONSt16remove_referenceIT_E4typeEOS3_>
 8002534:	4603      	mov	r3, r0
 8002536:	781a      	ldrb	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	701a      	strb	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800253c:	f107 030f 	add.w	r3, r7, #15
 8002540:	4618      	mov	r0, r3
 8002542:	f000 f8f2 	bl	800272a <_ZSt4moveIR24hw_stm32_adc_dma_ready_tEONSt16remove_referenceIT_E4typeEOS3_>
 8002546:	4603      	mov	r3, r0
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	701a      	strb	r2, [r3, #0]
    }
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <_ZSt4swapI23hw_stm32_adc_it_ready_tENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f8ed 	bl	8002740 <_ZSt4moveIR23hw_stm32_adc_it_ready_tEONSt16remove_referenceIT_E4typeEOS3_>
 8002566:	4603      	mov	r3, r0
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	73fb      	strb	r3, [r7, #15]
      __a = _GLIBCXX_MOVE(__b);
 800256c:	6838      	ldr	r0, [r7, #0]
 800256e:	f000 f8e7 	bl	8002740 <_ZSt4moveIR23hw_stm32_adc_it_ready_tEONSt16remove_referenceIT_E4typeEOS3_>
 8002572:	4603      	mov	r3, r0
 8002574:	781a      	ldrb	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	701a      	strb	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800257a:	f107 030f 	add.w	r3, r7, #15
 800257e:	4618      	mov	r0, r3
 8002580:	f000 f8de 	bl	8002740 <_ZSt4moveIR23hw_stm32_adc_it_ready_tEONSt16remove_referenceIT_E4typeEOS3_>
 8002584:	4603      	mov	r3, r0
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	701a      	strb	r2, [r3, #0]
    }
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <_ZSt4swapImSaImEEvRSt6vectorIT_T0_ES5_>:

  /// See std::vector::swap().
  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))
    { __x.swap(__y); }
 800259e:	6839      	ldr	r1, [r7, #0]
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f8d8 	bl	8002756 <_ZNSt6vectorImSaImEE4swapERS1_>
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_ZNSaImEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f907 	bl	80027ca <_ZNSt15__new_allocatorImEC1Ev>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_ZNSt6vectorImSaImEEC1EjRKmRKS0_>:
      vector(size_type __n, const value_type& __value,
 80025c6:	b590      	push	{r4, r7, lr}
 80025c8:	b085      	sub	sp, #20
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	603b      	str	r3, [r7, #0]
      : _Base(_S_check_init_len(__n, __a), __a)
 80025d4:	68fc      	ldr	r4, [r7, #12]
 80025d6:	6839      	ldr	r1, [r7, #0]
 80025d8:	68b8      	ldr	r0, [r7, #8]
 80025da:	f000 f901 	bl	80027e0 <_ZNSt6vectorImSaImEE17_S_check_init_lenEjRKS0_>
 80025de:	4603      	mov	r3, r0
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	4619      	mov	r1, r3
 80025e4:	4620      	mov	r0, r4
 80025e6:	f000 f923 	bl	8002830 <_ZNSt12_Vector_baseImSaImEEC1EjRKS0_>
      { _M_fill_initialize(__n, __value); }
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f932 	bl	8002858 <_ZNSt6vectorImSaImEE18_M_fill_initializeEjRKm>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd90      	pop	{r4, r7, pc}

080025fe <_ZNSt6vectorImSaImEEaSEOS1_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80025fe:	b590      	push	{r4, r7, lr}
 8002600:	b085      	sub	sp, #20
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 800260c:	6838      	ldr	r0, [r7, #0]
 800260e:	f000 f93c 	bl	800288a <_ZSt4moveIRSt6vectorImSaImEEEONSt16remove_referenceIT_E4typeEOS5_>
 8002612:	4603      	mov	r3, r0
 8002614:	4622      	mov	r2, r4
 8002616:	4619      	mov	r1, r3
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f941 	bl	80028a0 <_ZNSt6vectorImSaImEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 800261e:	687b      	ldr	r3, [r7, #4]
      }
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	bd90      	pop	{r4, r7, pc}

08002628 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayEC1Ev>:
#else
template <class PWM, class ADC, class RELAY>
#endif
class Algorithim_DC_Buck {
public:
  Algorithim_DC_Buck(){}
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	761a      	strb	r2, [r3, #24]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE5beginEPS0_ffPS1_PS2_fS5_>:
  void begin(PWM *pwm,float vout,float current,ADC *adc_out = nullptr ,RELAY *relay = nullptr, float vin=0 , ADC *adc_in = nullptr)
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	@ 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	61f8      	str	r0, [r7, #28]
 800264c:	61b9      	str	r1, [r7, #24]
 800264e:	ed87 0a05 	vstr	s0, [r7, #20]
 8002652:	edc7 0a04 	vstr	s1, [r7, #16]
 8002656:	60fa      	str	r2, [r7, #12]
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	ed87 1a01 	vstr	s2, [r7, #4]
  {
    pwm_ = pwm;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	601a      	str	r2, [r3, #0]
    adc_out_ = adc_out;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	605a      	str	r2, [r3, #4]
    adc_in_ = adc_in;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800266e:	609a      	str	r2, [r3, #8]
    relay_= relay;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	60da      	str	r2, [r3, #12]
    vin_ = vin;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	61da      	str	r2, [r3, #28]
    vout_ = vout;
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	621a      	str	r2, [r3, #32]
    current_ = current;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	625a      	str	r2, [r3, #36]	@ 0x24
  }
 8002688:	bf00      	nop
 800268a:	3724      	adds	r7, #36	@ 0x24
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
	{ }
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
	if (__p)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 f92e 	bl	8002936 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f934 	bl	8002974 <_ZSt8_DestroyIPmEvT_S1_>
    }
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <_ZSt4moveIRP17ADC_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <_ZSt4moveIR24hw_stm32_adc_dma_ready_tEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_ZSt4moveIR23hw_stm32_adc_it_ready_tEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <_ZNSt6vectorImSaImEE4swapERS1_>:
      swap(vector& __x) _GLIBCXX_NOEXCEPT
 8002756:	b590      	push	{r4, r7, lr}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
	__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
 8002760:	f7ff f9e6 	bl	8001b30 <_ZSt23__is_constant_evaluatedv>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d015      	beq.n	8002796 <_ZNSt6vectorImSaImEE4swapERS1_+0x40>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ffb8 	bl	80026e2 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8002772:	4604      	mov	r4, r0
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ffb3 	bl	80026e2 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 800277c:	4603      	mov	r3, r0
 800277e:	4619      	mov	r1, r3
 8002780:	4620      	mov	r0, r4
 8002782:	f000 f90d 	bl	80029a0 <_ZSteqRKSaImES1_>
 8002786:	4603      	mov	r3, r0
 8002788:	f083 0301 	eor.w	r3, r3, #1
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <_ZNSt6vectorImSaImEE4swapERS1_+0x40>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <_ZNSt6vectorImSaImEE4swapERS1_+0x42>
 8002796:	2300      	movs	r3, #0
 8002798:	2b00      	cmp	r3, #0
	this->_M_impl._M_swap_data(__x._M_impl);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f909 	bl	80029b8 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_data12_M_swap_dataERS2_>
	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff9a 	bl	80026e2 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80027ae:	4604      	mov	r4, r0
				  __x._M_get_Tp_allocator());
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff ff95 	bl	80026e2 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80027b8:	4603      	mov	r3, r0
	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
 80027ba:	4619      	mov	r1, r3
 80027bc:	4620      	mov	r0, r4
 80027be:	f000 f91a 	bl	80029f6 <_ZN9__gnu_cxx14__alloc_traitsISaImEmE10_S_on_swapERS1_S3_>
      }
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd90      	pop	{r4, r7, pc}

080027ca <_ZNSt15__new_allocatorImEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <_ZNSt6vectorImSaImEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80027ea:	f107 030c 	add.w	r3, r7, #12
 80027ee:	6839      	ldr	r1, [r7, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 f892 	bl	800291a <_ZNSaImEC1ERKS_>
 80027f6:	f107 030c 	add.w	r3, r7, #12
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f914 	bl	8002a28 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>
 8002800:	4602      	mov	r2, r0
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4293      	cmp	r3, r2
 8002806:	bf8c      	ite	hi
 8002808:	2301      	movhi	r3, #1
 800280a:	2300      	movls	r3, #0
 800280c:	b2dc      	uxtb	r4, r3
 800280e:	f107 030c 	add.w	r3, r7, #12
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fe22 	bl	800245c <_ZNSaImED1Ev>
 8002818:	2c00      	cmp	r4, #0
 800281a:	d002      	beq.n	8002822 <_ZNSt6vectorImSaImEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 800281c:	4803      	ldr	r0, [pc, #12]	@ (800282c <_ZNSt6vectorImSaImEE17_S_check_init_lenEjRKS0_+0x4c>)
 800281e:	f008 fc04 	bl	800b02a <_ZSt20__throw_length_errorPKc>
	return __n;
 8002822:	687b      	ldr	r3, [r7, #4]
      }
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	bd90      	pop	{r4, r7, pc}
 800282c:	0800f804 	.word	0x0800f804

08002830 <_ZNSt12_Vector_baseImSaImEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4618      	mov	r0, r3
 8002842:	f000 f90b 	bl	8002a5c <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f919 	bl	8002a80 <_ZNSt12_Vector_baseImSaImEE17_M_create_storageEj>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <_ZNSt6vectorImSaImEE18_M_fill_initializeEjRKm>:
      _M_fill_initialize(size_type __n, const value_type& __value)
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff39 	bl	80026e2 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8002870:	4603      	mov	r3, r0
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	4620      	mov	r0, r4
 8002878:	f000 f91d 	bl	8002ab6 <_ZSt24__uninitialized_fill_n_aIPmjmmET_S1_T0_RKT1_RSaIT2_E>
 800287c:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	605a      	str	r2, [r3, #4]
      }
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bd90      	pop	{r4, r7, pc}

0800288a <_ZSt4moveIRSt6vectorImSaImEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <_ZNSt6vectorImSaImEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
      _M_move_assign(vector&& __x, true_type) noexcept
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b089      	sub	sp, #36	@ 0x24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	713a      	strb	r2, [r7, #4]
	vector __tmp(get_allocator());
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	f107 031c 	add.w	r3, r7, #28
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 f91c 	bl	8002af2 <_ZNKSt12_Vector_baseImSaImEE13get_allocatorEv>
 80028ba:	f107 021c 	add.w	r2, r7, #28
 80028be:	f107 0310 	add.w	r3, r7, #16
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 f925 	bl	8002b14 <_ZNSt6vectorImSaImEEC1ERKS0_>
 80028ca:	f107 031c 	add.w	r3, r7, #28
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fdc4 	bl	800245c <_ZNSaImED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	4611      	mov	r1, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f86c 	bl	80029b8 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	f107 0310 	add.w	r3, r7, #16
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f865 	bl	80029b8 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fef6 	bl	80026e2 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80028f6:	4604      	mov	r4, r0
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fef1 	bl	80026e2 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8002900:	4603      	mov	r3, r0
 8002902:	4619      	mov	r1, r3
 8002904:	4620      	mov	r0, r4
 8002906:	f000 f914 	bl	8002b32 <_ZSt15__alloc_on_moveISaImEEvRT_S2_>
      }
 800290a:	f107 0310 	add.w	r3, r7, #16
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fdc8 	bl	80024a4 <_ZNSt6vectorImSaImEED1Ev>
 8002914:	3724      	adds	r7, #36	@ 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd90      	pop	{r4, r7, pc}

0800291a <_ZNSaImEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002924:	6839      	ldr	r1, [r7, #0]
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f90f 	bl	8002b4a <_ZNSt15__new_allocatorImEC1ERKS0_>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002936:	b580      	push	{r7, lr}
 8002938:	b088      	sub	sp, #32
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	617b      	str	r3, [r7, #20]

      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
	if (std::__is_constant_evaluated())
 800294e:	f7ff f8ef 	bl	8001b30 <_ZSt23__is_constant_evaluatedv>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj+0x2a>
	  {
	    ::operator delete(__p);
 8002958:	69b8      	ldr	r0, [r7, #24]
 800295a:	f008 fb49 	bl	800aff0 <_ZdlPv>
	    return;
 800295e:	e005      	b.n	800296c <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj+0x36>
	  }
	__allocator_base<_Tp>::deallocate(__p, __n);
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	69b9      	ldr	r1, [r7, #24]
 8002964:	69f8      	ldr	r0, [r7, #28]
 8002966:	f000 f9c0 	bl	8002cea <_ZNSt15__new_allocatorImE10deallocateEPmj>
      { __a.deallocate(__p, __n); }
 800296a:	bf00      	nop
 800296c:	bf00      	nop
 800296e:	3720      	adds	r7, #32
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <_ZSt8_DestroyIPmEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
 800297e:	f7ff f8d7 	bl	8001b30 <_ZSt23__is_constant_evaluatedv>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d004      	beq.n	8002992 <_ZSt8_DestroyIPmEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8002988:	6839      	ldr	r1, [r7, #0]
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8e9 	bl	8002b62 <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_>
 8002990:	e003      	b.n	800299a <_ZSt8_DestroyIPmEvT_S1_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002992:	6839      	ldr	r1, [r7, #0]
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f8fd 	bl	8002b94 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_ZSteqRKSaImES1_>:
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
      { return true; }
 80029aa:	2301      	movs	r3, #1
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
	  __tmp._M_copy_data(*this);
 80029ce:	f107 030c 	add.w	r3, r7, #12
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 f8e8 	bl	8002baa <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 80029da:	6839      	ldr	r1, [r7, #0]
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f8e4 	bl	8002baa <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 80029e2:	f107 030c 	add.w	r3, r7, #12
 80029e6:	4619      	mov	r1, r3
 80029e8:	6838      	ldr	r0, [r7, #0]
 80029ea:	f000 f8de 	bl	8002baa <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 80029ee:	bf00      	nop
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <_ZN9__gnu_cxx14__alloc_traitsISaImEmE10_S_on_swapERS1_S3_>:
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
    { std::__alloc_on_swap(__a, __b); }
 8002a00:	6839      	ldr	r1, [r7, #0]
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f8e8 	bl	8002bd8 <_ZSt15__alloc_on_swapISaImEEvRT_S2_>
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8002a18:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      }
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002a30:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8002a34:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff ffea 	bl	8002a10 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002a40:	f107 0208 	add.w	r2, r7, #8
 8002a44:	f107 030c 	add.w	r3, r7, #12
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 f8cf 	bl	8002bee <_ZSt3minIjERKT_S2_S2_>
 8002a50:	4603      	mov	r3, r0
 8002a52:	681b      	ldr	r3, [r3, #0]
      }
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8002a66:	6839      	ldr	r1, [r7, #0]
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff56 	bl	800291a <_ZNSaImEC1ERKS_>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fe0f 	bl	8002694 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <_ZNSt12_Vector_baseImSaImEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8002a8a:	6839      	ldr	r1, [r7, #0]
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f8c2 	bl	8002c16 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 8002a92:	4602      	mov	r2, r0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	441a      	add	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	609a      	str	r2, [r3, #8]
      }
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <_ZSt24__uninitialized_fill_n_aIPmjmmET_S1_T0_RKT1_RSaIT2_E>:

  template<typename _ForwardIterator, typename _Size, typename _Tp,
	   typename _Tp2>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	603b      	str	r3, [r7, #0]
			     const _Tp& __x, allocator<_Tp2>&)
    {
#ifdef __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 8002ac4:	f7ff f83c 	bl	8001b40 <_ZSt21is_constant_evaluatedv>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d006      	beq.n	8002adc <_ZSt24__uninitialized_fill_n_aIPmjmmET_S1_T0_RKT1_RSaIT2_E+0x26>
	return std::__do_uninit_fill_n(__first, __n, __x);
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f8b3 	bl	8002c3e <_ZSt18__do_uninit_fill_nIPmjmET_S1_T0_RKT1_>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	e006      	b.n	8002aea <_ZSt24__uninitialized_fill_n_aIPmjmmET_S1_T0_RKT1_RSaIT2_E+0x34>
#endif
      return std::uninitialized_fill_n(__first, __n, __x);
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	68b9      	ldr	r1, [r7, #8]
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f8cb 	bl	8002c7c <_ZSt20uninitialized_fill_nIPmjmET_S1_T0_RKT1_>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	bf00      	nop
    }
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <_ZNKSt12_Vector_baseImSaImEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8002afc:	6838      	ldr	r0, [r7, #0]
 8002afe:	f000 f8cf 	bl	8002ca0 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8002b02:	4603      	mov	r3, r0
 8002b04:	4619      	mov	r1, r3
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ff07 	bl	800291a <_ZNSaImEC1ERKS_>
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <_ZNSt6vectorImSaImEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6839      	ldr	r1, [r7, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f8c7 	bl	8002cb6 <_ZNSt12_Vector_baseImSaImEEC1ERKS0_>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <_ZSt15__alloc_on_moveISaImEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]
	__one = std::move(__two);
 8002b3c:	6838      	ldr	r0, [r7, #0]
 8002b3e:	f000 f8c9 	bl	8002cd4 <_ZSt4moveIRSaImEEONSt16remove_referenceIT_E4typeEOS3_>
    }
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <_ZNSt15__new_allocatorImEC1ERKS0_>:

      _GLIBCXX20_CONSTEXPR
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002b6c:	e009      	b.n	8002b82 <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f8ca 	bl	8002d08 <_ZSt11__addressofImEPT_RS0_>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f8d1 	bl	8002d1e <_ZSt8_DestroyImEvPT_>
	  for (; __first != __last; ++__first)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3304      	adds	r3, #4
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d1f1      	bne.n	8002b6e <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_+0xc>
	}
 8002b8a:	bf00      	nop
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	609a      	str	r2, [r3, #8]
	}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <_ZSt15__alloc_on_swapISaImEEvRT_S2_>:
    __alloc_on_swap(_Alloc& __one, _Alloc& __two)
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
    }
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d201      	bcs.n	8002c08 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	e000      	b.n	8002c0a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002c08:	687b      	ldr	r3, [r7, #4]
    }
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d006      	beq.n	8002c34 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x1e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6839      	ldr	r1, [r7, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f882 	bl	8002d34 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 8002c30:	4603      	mov	r3, r0
 8002c32:	e000      	b.n	8002c36 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x20>
 8002c34:	2300      	movs	r3, #0
      }
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <_ZSt18__do_uninit_fill_nIPmjmET_S1_T0_RKT1_>:
    __do_uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __first;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n, (void) ++__cur)
 8002c4e:	e00d      	b.n	8002c6c <_ZSt18__do_uninit_fill_nIPmjmET_S1_T0_RKT1_+0x2e>
	    std::_Construct(std::__addressof(*__cur), __x);
 8002c50:	6978      	ldr	r0, [r7, #20]
 8002c52:	f000 f859 	bl	8002d08 <_ZSt11__addressofImEPT_RS0_>
 8002c56:	4603      	mov	r3, r0
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 f89b 	bl	8002d96 <_ZSt10_ConstructImJRKmEEvPT_DpOT0_>
	  for (; __n > 0; --__n, (void) ++__cur)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1ee      	bne.n	8002c50 <_ZSt18__do_uninit_fill_nIPmjmET_S1_T0_RKT1_+0x12>
	  return __cur;
 8002c72:	697b      	ldr	r3, [r7, #20]
    }
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <_ZSt20uninitialized_fill_nIPmjmET_S1_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
      const bool __can_fill
 8002c88:	2301      	movs	r3, #1
 8002c8a:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f8a2 	bl	8002dda <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPmjmEET_S3_T0_RKT1_>
 8002c96:	4603      	mov	r3, r0
    }
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <_ZNSt12_Vector_baseImSaImEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6839      	ldr	r1, [r7, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fec9 	bl	8002a5c <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <_ZSt4moveIRSaImEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <_ZNSt15__new_allocatorImE10deallocateEPmj>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	68b8      	ldr	r0, [r7, #8]
 8002cfe:	f008 f979 	bl	800aff4 <_ZdlPvj>
      }
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <_ZSt8_DestroyImEvPT_>:
    _Destroy(_Tp* __pointer)
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f867 	bl	8002dfa <_ZSt10destroy_atImEvPT_>
    }
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 8002d46:	f7fe fef3 	bl	8001b30 <_ZSt23__is_constant_evaluatedv>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d016      	beq.n	8002d7e <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x4a>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2200      	movs	r2, #0
 8002d54:	0099      	lsls	r1, r3, #2
 8002d56:	0f9b      	lsrs	r3, r3, #30
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d000      	beq.n	8002d5e <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x2a>
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	460b      	mov	r3, r1
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	4613      	mov	r3, r2
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x3e>
	      std::__throw_bad_array_new_length();
 8002d6e:	f008 f959 	bl	800b024 <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f008 f93f 	bl	800aff8 <_Znwj>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	e007      	b.n	8002d8e <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x5a>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2200      	movs	r2, #0
 8002d82:	4619      	mov	r1, r3
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f87e 	bl	8002e86 <_ZNSt15__new_allocatorImE8allocateEjPKv>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	bf00      	nop
      { return __a.allocate(__n); }
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <_ZSt10_ConstructImJRKmEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8002d96:	b590      	push	{r4, r7, lr}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	6039      	str	r1, [r7, #0]
      if (std::__is_constant_evaluated())
 8002da0:	f7fe fec6 	bl	8001b30 <_ZSt23__is_constant_evaluatedv>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d008      	beq.n	8002dbc <_ZSt10_ConstructImJRKmEEvPT_DpOT0_+0x26>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8002daa:	6838      	ldr	r0, [r7, #0]
 8002dac:	f000 f82f 	bl	8002e0e <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4619      	mov	r1, r3
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f835 	bl	8002e24 <_ZSt12construct_atImJRKmEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
 8002dba:	e00b      	b.n	8002dd4 <_ZSt10_ConstructImJRKmEEvPT_DpOT0_+0x3e>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	2004      	movs	r0, #4
 8002dc2:	f7fe fffd 	bl	8001dc0 <_ZnwjPv>
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	6838      	ldr	r0, [r7, #0]
 8002dca:	f000 f820 	bl	8002e0e <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6023      	str	r3, [r4, #0]
    }
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd90      	pop	{r4, r7, pc}

08002dda <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPmjmEET_S3_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
        { return std::fill_n(__first, __n, __x); }
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f830 	bl	8002e50 <_ZSt6fill_nIPmjmET_S1_T0_RKT1_>
 8002df0:	4603      	mov	r3, r0
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <_ZSt10destroy_atImEvPT_>:
    destroy_at(_Tp* __location)
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
    }
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <_ZSt12construct_atImJRKmEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4619      	mov	r1, r3
 8002e32:	2004      	movs	r0, #4
 8002e34:	f7fe ffc4 	bl	8001dc0 <_ZnwjPv>
 8002e38:	4604      	mov	r4, r0
 8002e3a:	6838      	ldr	r0, [r7, #0]
 8002e3c:	f7ff ffe7 	bl	8002e0e <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8002e40:	4603      	mov	r3, r0
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6023      	str	r3, [r4, #0]
 8002e46:	4623      	mov	r3, r4
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd90      	pop	{r4, r7, pc}

08002e50 <_ZSt6fill_nIPmjmET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8002e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, const _Tp&>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8002e5c:	68fc      	ldr	r4, [r7, #12]
 8002e5e:	68b8      	ldr	r0, [r7, #8]
 8002e60:	f7fe ffba 	bl	8001dd8 <_ZSt17__size_to_integerj>
 8002e64:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8002e66:	f107 030c 	add.w	r3, r7, #12
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 f835 	bl	8002eda <_ZSt19__iterator_categoryIPmENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8002e70:	4633      	mov	r3, r6
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	4629      	mov	r1, r5
 8002e76:	4620      	mov	r0, r4
 8002e78:	f000 f839 	bl	8002eee <_ZSt10__fill_n_aIPmjmET_S1_T0_RKT1_St26random_access_iterator_tag>
 8002e7c:	4603      	mov	r3, r0
    }
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e86 <_ZNSt15__new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f848 	bl	8002f28 <_ZNKSt15__new_allocatorImE11_M_max_sizeEv>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	bf8c      	ite	hi
 8002ea0:	2301      	movhi	r3, #1
 8002ea2:	2300      	movls	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	bf14      	ite	ne
 8002eaa:	2301      	movne	r3, #1
 8002eac:	2300      	moveq	r3, #0
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d007      	beq.n	8002ec4 <_ZNSt15__new_allocatorImE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eba:	d301      	bcc.n	8002ec0 <_ZNSt15__new_allocatorImE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8002ebc:	f008 f8b2 	bl	800b024 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002ec0:	f008 f8ad 	bl	800b01e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f008 f895 	bl	800aff8 <_Znwj>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	bf00      	nop
      }
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <_ZSt19__iterator_categoryIPmENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <_ZSt10__fill_n_aIPmjmET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <_ZSt10__fill_n_aIPmjmET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	e00c      	b.n	8002f20 <_ZSt10__fill_n_aIPmjmET_S1_T0_RKT1_St26random_access_iterator_tag+0x32>
      std::__fill_a(__first, __first + __n, __value);
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	4619      	mov	r1, r3
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f814 	bl	8002f40 <_ZSt8__fill_aIPmmEvT_S1_RKT0_>
      return __first + __n;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4413      	add	r3, r2
    }
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <_ZNKSt15__new_allocatorImE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002f30:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <_ZSt8__fill_aIPmmEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f804 	bl	8002f5e <_ZSt9__fill_a1IPmmEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <_ZSt9__fill_a1IPmmEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8002f5e:	b480      	push	{r7}
 8002f60:	b087      	sub	sp, #28
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8002f70:	e005      	b.n	8002f7e <_ZSt9__fill_a1IPmmEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x20>
	*__first = __tmp;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d1f5      	bne.n	8002f72 <_ZSt9__fill_a1IPmmEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x14>
    }
 8002f86:	bf00      	nop
 8002f88:	bf00      	nop
 8002f8a:	371c      	adds	r7, #28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <_Z41__static_initialization_and_destruction_0ii>:
    {
    }
  /* USER CODE END Error_Handler_Debug */
}
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d10d      	bne.n	8002fc0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d108      	bne.n	8002fc0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
Hardware_STM32_ADC g_adc1_handler;
 8002fae:	480c      	ldr	r0, [pc, #48]	@ (8002fe0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002fb0:	f7fe ff43 	bl	8001e3a <_ZN18Hardware_STM32_ADCC1Ev>
Hardware_STM32_Message g_message_handler;
 8002fb4:	480b      	ldr	r0, [pc, #44]	@ (8002fe4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002fb6:	f7ff f8f6 	bl	80021a6 <_ZN22Hardware_STM32_MessageC1Ev>
Algorithim_DC_Buck<Hardware_STM32_HRTIM_PWM, Hardware_STM32_ADC,Hardware_STM32_Relay>g_dc_buck_handler;
 8002fba:	480b      	ldr	r0, [pc, #44]	@ (8002fe8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002fbc:	f7ff fb34 	bl	8002628 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayEC1Ev>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d107      	bne.n	8002fd6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d102      	bne.n	8002fd6 <_Z41__static_initialization_and_destruction_0ii+0x42>
Hardware_STM32_ADC g_adc1_handler;
 8002fd0:	4803      	ldr	r0, [pc, #12]	@ (8002fe0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002fd2:	f7ff f80b 	bl	8001fec <_ZN18Hardware_STM32_ADCD1Ev>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	200004b4 	.word	0x200004b4
 8002fe4:	200004d0 	.word	0x200004d0
 8002fe8:	200004e8 	.word	0x200004e8

08002fec <_GLOBAL__sub_I__ZN15stm32_hrtim_pwm15getTimerAOutputEv>:
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	f7ff ffcd 	bl	8002f94 <_Z41__static_initialization_and_destruction_0ii>
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <_GLOBAL__sub_D__ZN15stm32_hrtim_pwm15getTimerAOutputEv>:
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003004:	2000      	movs	r0, #0
 8003006:	f7ff ffc5 	bl	8002f94 <_Z41__static_initialization_and_destruction_0ii>
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003012:	4b0f      	ldr	r3, [pc, #60]	@ (8003050 <HAL_MspInit+0x44>)
 8003014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003016:	4a0e      	ldr	r2, [pc, #56]	@ (8003050 <HAL_MspInit+0x44>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6613      	str	r3, [r2, #96]	@ 0x60
 800301e:	4b0c      	ldr	r3, [pc, #48]	@ (8003050 <HAL_MspInit+0x44>)
 8003020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800302a:	4b09      	ldr	r3, [pc, #36]	@ (8003050 <HAL_MspInit+0x44>)
 800302c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302e:	4a08      	ldr	r2, [pc, #32]	@ (8003050 <HAL_MspInit+0x44>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003034:	6593      	str	r3, [r2, #88]	@ 0x58
 8003036:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <HAL_MspInit+0x44>)
 8003038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003042:	f005 fadd 	bl	8008600 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000

08003054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <NMI_Handler+0x4>

0800305c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003060:	bf00      	nop
 8003062:	e7fd      	b.n	8003060 <HardFault_Handler+0x4>

08003064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003068:	bf00      	nop
 800306a:	e7fd      	b.n	8003068 <MemManage_Handler+0x4>

0800306c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003070:	bf00      	nop
 8003072:	e7fd      	b.n	8003070 <BusFault_Handler+0x4>

08003074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003078:	bf00      	nop
 800307a:	e7fd      	b.n	8003078 <UsageFault_Handler+0x4>

0800307c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030aa:	f000 fab1 	bl	8003610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80030b8:	4802      	ldr	r0, [pc, #8]	@ (80030c4 <DMA1_Channel1_IRQHandler+0x10>)
 80030ba:	f003 fada 	bl	8006672 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	200005a8 	.word	0x200005a8

080030c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80030cc:	4802      	ldr	r0, [pc, #8]	@ (80030d8 <DMA1_Channel2_IRQHandler+0x10>)
 80030ce:	f003 fad0 	bl	8006672 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000608 	.word	0x20000608

080030dc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030e0:	4802      	ldr	r0, [pc, #8]	@ (80030ec <DMA1_Channel3_IRQHandler+0x10>)
 80030e2:	f003 fac6 	bl	8006672 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000334 	.word	0x20000334

080030f0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80030f4:	4803      	ldr	r0, [pc, #12]	@ (8003104 <ADC1_2_IRQHandler+0x14>)
 80030f6:	f000 feb7 	bl	8003e68 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80030fa:	4803      	ldr	r0, [pc, #12]	@ (8003108 <ADC1_2_IRQHandler+0x18>)
 80030fc:	f000 feb4 	bl	8003e68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}
 8003104:	200001f0 	.word	0x200001f0
 8003108:	2000025c 	.word	0x2000025c

0800310c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003110:	4802      	ldr	r0, [pc, #8]	@ (800311c <USART1_IRQHandler+0x10>)
 8003112:	f006 fadf 	bl	80096d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000514 	.word	0x20000514

08003120 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003124:	4802      	ldr	r0, [pc, #8]	@ (8003130 <ADC3_IRQHandler+0x10>)
 8003126:	f000 fe9f 	bl	8003e68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	200002c8 	.word	0x200002c8

08003134 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return 1;
 8003138:	2301      	movs	r3, #1
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <_kill>:

int _kill(int pid, int sig)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800314e:	f009 f909 	bl	800c364 <__errno>
 8003152:	4603      	mov	r3, r0
 8003154:	2216      	movs	r2, #22
 8003156:	601a      	str	r2, [r3, #0]
  return -1;
 8003158:	f04f 33ff 	mov.w	r3, #4294967295
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <_exit>:

void _exit (int status)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800316c:	f04f 31ff 	mov.w	r1, #4294967295
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ffe7 	bl	8003144 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003176:	bf00      	nop
 8003178:	e7fd      	b.n	8003176 <_exit+0x12>

0800317a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b086      	sub	sp, #24
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	e00a      	b.n	80031a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800318c:	f3af 8000 	nop.w
 8003190:	4601      	mov	r1, r0
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	60ba      	str	r2, [r7, #8]
 8003198:	b2ca      	uxtb	r2, r1
 800319a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	3301      	adds	r3, #1
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	dbf0      	blt.n	800318c <_read+0x12>
  }

  return len;
 80031aa:	687b      	ldr	r3, [r7, #4]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	e009      	b.n	80031da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	60ba      	str	r2, [r7, #8]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 f990 	bl	80034f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	3301      	adds	r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	429a      	cmp	r2, r3
 80031e0:	dbf1      	blt.n	80031c6 <_write+0x12>
  }
  return len;
 80031e2:	687b      	ldr	r3, [r7, #4]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <_close>:

int _close(int file)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003214:	605a      	str	r2, [r3, #4]
  return 0;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <_isatty>:

int _isatty(int file)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800322c:	2301      	movs	r3, #1
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800325c:	4a14      	ldr	r2, [pc, #80]	@ (80032b0 <_sbrk+0x5c>)
 800325e:	4b15      	ldr	r3, [pc, #84]	@ (80032b4 <_sbrk+0x60>)
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003268:	4b13      	ldr	r3, [pc, #76]	@ (80032b8 <_sbrk+0x64>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d102      	bne.n	8003276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003270:	4b11      	ldr	r3, [pc, #68]	@ (80032b8 <_sbrk+0x64>)
 8003272:	4a12      	ldr	r2, [pc, #72]	@ (80032bc <_sbrk+0x68>)
 8003274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003276:	4b10      	ldr	r3, [pc, #64]	@ (80032b8 <_sbrk+0x64>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	429a      	cmp	r2, r3
 8003282:	d207      	bcs.n	8003294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003284:	f009 f86e 	bl	800c364 <__errno>
 8003288:	4603      	mov	r3, r0
 800328a:	220c      	movs	r2, #12
 800328c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800328e:	f04f 33ff 	mov.w	r3, #4294967295
 8003292:	e009      	b.n	80032a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003294:	4b08      	ldr	r3, [pc, #32]	@ (80032b8 <_sbrk+0x64>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800329a:	4b07      	ldr	r3, [pc, #28]	@ (80032b8 <_sbrk+0x64>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	4a05      	ldr	r2, [pc, #20]	@ (80032b8 <_sbrk+0x64>)
 80032a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032a6:	68fb      	ldr	r3, [r7, #12]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20020000 	.word	0x20020000
 80032b4:	00000400 	.word	0x00000400
 80032b8:	20000510 	.word	0x20000510
 80032bc:	200007c0 	.word	0x200007c0

080032c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80032c4:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <SystemInit+0x20>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ca:	4a05      	ldr	r2, [pc, #20]	@ (80032e0 <SystemInit+0x20>)
 80032cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032e8:	4b22      	ldr	r3, [pc, #136]	@ (8003374 <MX_USART1_UART_Init+0x90>)
 80032ea:	4a23      	ldr	r2, [pc, #140]	@ (8003378 <MX_USART1_UART_Init+0x94>)
 80032ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80032ee:	4b21      	ldr	r3, [pc, #132]	@ (8003374 <MX_USART1_UART_Init+0x90>)
 80032f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003374 <MX_USART1_UART_Init+0x90>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003374 <MX_USART1_UART_Init+0x90>)
 80032fe:	2200      	movs	r2, #0
 8003300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003302:	4b1c      	ldr	r3, [pc, #112]	@ (8003374 <MX_USART1_UART_Init+0x90>)
 8003304:	2200      	movs	r2, #0
 8003306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003308:	4b1a      	ldr	r3, [pc, #104]	@ (8003374 <MX_USART1_UART_Init+0x90>)
 800330a:	220c      	movs	r2, #12
 800330c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800330e:	4b19      	ldr	r3, [pc, #100]	@ (8003374 <MX_USART1_UART_Init+0x90>)
 8003310:	2200      	movs	r2, #0
 8003312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003314:	4b17      	ldr	r3, [pc, #92]	@ (8003374 <MX_USART1_UART_Init+0x90>)
 8003316:	2200      	movs	r2, #0
 8003318:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800331a:	4b16      	ldr	r3, [pc, #88]	@ (8003374 <MX_USART1_UART_Init+0x90>)
 800331c:	2200      	movs	r2, #0
 800331e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003320:	4b14      	ldr	r3, [pc, #80]	@ (8003374 <MX_USART1_UART_Init+0x90>)
 8003322:	2200      	movs	r2, #0
 8003324:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003326:	4b13      	ldr	r3, [pc, #76]	@ (8003374 <MX_USART1_UART_Init+0x90>)
 8003328:	2200      	movs	r2, #0
 800332a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800332c:	4811      	ldr	r0, [pc, #68]	@ (8003374 <MX_USART1_UART_Init+0x90>)
 800332e:	f006 f8f3 	bl	8009518 <HAL_UART_Init>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003338:	f7ff f87a 	bl	8002430 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800333c:	2100      	movs	r1, #0
 800333e:	480d      	ldr	r0, [pc, #52]	@ (8003374 <MX_USART1_UART_Init+0x90>)
 8003340:	f007 fcbe 	bl	800acc0 <HAL_UARTEx_SetTxFifoThreshold>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800334a:	f7ff f871 	bl	8002430 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800334e:	2100      	movs	r1, #0
 8003350:	4808      	ldr	r0, [pc, #32]	@ (8003374 <MX_USART1_UART_Init+0x90>)
 8003352:	f007 fcf3 	bl	800ad3c <HAL_UARTEx_SetRxFifoThreshold>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800335c:	f7ff f868 	bl	8002430 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003360:	4804      	ldr	r0, [pc, #16]	@ (8003374 <MX_USART1_UART_Init+0x90>)
 8003362:	f007 fc74 	bl	800ac4e <HAL_UARTEx_DisableFifoMode>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800336c:	f7ff f860 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003370:	bf00      	nop
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20000514 	.word	0x20000514
 8003378:	40013800 	.word	0x40013800

0800337c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b09e      	sub	sp, #120	@ 0x78
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003384:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003394:	f107 0310 	add.w	r3, r7, #16
 8003398:	2254      	movs	r2, #84	@ 0x54
 800339a:	2100      	movs	r1, #0
 800339c:	4618      	mov	r0, r3
 800339e:	f008 ff3b 	bl	800c218 <memset>
  if(uartHandle->Instance==USART1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a4c      	ldr	r2, [pc, #304]	@ (80034d8 <HAL_UART_MspInit+0x15c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	f040 8091 	bne.w	80034d0 <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033ae:	2301      	movs	r3, #1
 80033b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033b6:	f107 0310 	add.w	r3, r7, #16
 80033ba:	4618      	mov	r0, r3
 80033bc:	f005 fe5e 	bl	800907c <HAL_RCCEx_PeriphCLKConfig>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80033c6:	f7ff f833 	bl	8002430 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033ca:	4b44      	ldr	r3, [pc, #272]	@ (80034dc <HAL_UART_MspInit+0x160>)
 80033cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ce:	4a43      	ldr	r2, [pc, #268]	@ (80034dc <HAL_UART_MspInit+0x160>)
 80033d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80033d6:	4b41      	ldr	r3, [pc, #260]	@ (80034dc <HAL_UART_MspInit+0x160>)
 80033d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e2:	4b3e      	ldr	r3, [pc, #248]	@ (80034dc <HAL_UART_MspInit+0x160>)
 80033e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e6:	4a3d      	ldr	r2, [pc, #244]	@ (80034dc <HAL_UART_MspInit+0x160>)
 80033e8:	f043 0302 	orr.w	r3, r3, #2
 80033ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033ee:	4b3b      	ldr	r3, [pc, #236]	@ (80034dc <HAL_UART_MspInit+0x160>)
 80033f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033fa:	23c0      	movs	r3, #192	@ 0xc0
 80033fc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fe:	2302      	movs	r3, #2
 8003400:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003406:	2300      	movs	r3, #0
 8003408:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800340a:	2307      	movs	r3, #7
 800340c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003412:	4619      	mov	r1, r3
 8003414:	4832      	ldr	r0, [pc, #200]	@ (80034e0 <HAL_UART_MspInit+0x164>)
 8003416:	f003 fa7b 	bl	8006910 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800341a:	4b32      	ldr	r3, [pc, #200]	@ (80034e4 <HAL_UART_MspInit+0x168>)
 800341c:	4a32      	ldr	r2, [pc, #200]	@ (80034e8 <HAL_UART_MspInit+0x16c>)
 800341e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003420:	4b30      	ldr	r3, [pc, #192]	@ (80034e4 <HAL_UART_MspInit+0x168>)
 8003422:	2218      	movs	r2, #24
 8003424:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003426:	4b2f      	ldr	r3, [pc, #188]	@ (80034e4 <HAL_UART_MspInit+0x168>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800342c:	4b2d      	ldr	r3, [pc, #180]	@ (80034e4 <HAL_UART_MspInit+0x168>)
 800342e:	2200      	movs	r2, #0
 8003430:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003432:	4b2c      	ldr	r3, [pc, #176]	@ (80034e4 <HAL_UART_MspInit+0x168>)
 8003434:	2280      	movs	r2, #128	@ 0x80
 8003436:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003438:	4b2a      	ldr	r3, [pc, #168]	@ (80034e4 <HAL_UART_MspInit+0x168>)
 800343a:	2200      	movs	r2, #0
 800343c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800343e:	4b29      	ldr	r3, [pc, #164]	@ (80034e4 <HAL_UART_MspInit+0x168>)
 8003440:	2200      	movs	r2, #0
 8003442:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003444:	4b27      	ldr	r3, [pc, #156]	@ (80034e4 <HAL_UART_MspInit+0x168>)
 8003446:	2200      	movs	r2, #0
 8003448:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800344a:	4b26      	ldr	r3, [pc, #152]	@ (80034e4 <HAL_UART_MspInit+0x168>)
 800344c:	2200      	movs	r2, #0
 800344e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003450:	4824      	ldr	r0, [pc, #144]	@ (80034e4 <HAL_UART_MspInit+0x168>)
 8003452:	f002 ff2b 	bl	80062ac <HAL_DMA_Init>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800345c:	f7fe ffe8 	bl	8002430 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a20      	ldr	r2, [pc, #128]	@ (80034e4 <HAL_UART_MspInit+0x168>)
 8003464:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003468:	4a1e      	ldr	r2, [pc, #120]	@ (80034e4 <HAL_UART_MspInit+0x168>)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800346e:	4b1f      	ldr	r3, [pc, #124]	@ (80034ec <HAL_UART_MspInit+0x170>)
 8003470:	4a1f      	ldr	r2, [pc, #124]	@ (80034f0 <HAL_UART_MspInit+0x174>)
 8003472:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003474:	4b1d      	ldr	r3, [pc, #116]	@ (80034ec <HAL_UART_MspInit+0x170>)
 8003476:	2219      	movs	r2, #25
 8003478:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800347a:	4b1c      	ldr	r3, [pc, #112]	@ (80034ec <HAL_UART_MspInit+0x170>)
 800347c:	2210      	movs	r2, #16
 800347e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003480:	4b1a      	ldr	r3, [pc, #104]	@ (80034ec <HAL_UART_MspInit+0x170>)
 8003482:	2200      	movs	r2, #0
 8003484:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003486:	4b19      	ldr	r3, [pc, #100]	@ (80034ec <HAL_UART_MspInit+0x170>)
 8003488:	2280      	movs	r2, #128	@ 0x80
 800348a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800348c:	4b17      	ldr	r3, [pc, #92]	@ (80034ec <HAL_UART_MspInit+0x170>)
 800348e:	2200      	movs	r2, #0
 8003490:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003492:	4b16      	ldr	r3, [pc, #88]	@ (80034ec <HAL_UART_MspInit+0x170>)
 8003494:	2200      	movs	r2, #0
 8003496:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003498:	4b14      	ldr	r3, [pc, #80]	@ (80034ec <HAL_UART_MspInit+0x170>)
 800349a:	2200      	movs	r2, #0
 800349c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800349e:	4b13      	ldr	r3, [pc, #76]	@ (80034ec <HAL_UART_MspInit+0x170>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80034a4:	4811      	ldr	r0, [pc, #68]	@ (80034ec <HAL_UART_MspInit+0x170>)
 80034a6:	f002 ff01 	bl	80062ac <HAL_DMA_Init>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80034b0:	f7fe ffbe 	bl	8002430 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a0d      	ldr	r2, [pc, #52]	@ (80034ec <HAL_UART_MspInit+0x170>)
 80034b8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80034ba:	4a0c      	ldr	r2, [pc, #48]	@ (80034ec <HAL_UART_MspInit+0x170>)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034c0:	2200      	movs	r2, #0
 80034c2:	2100      	movs	r1, #0
 80034c4:	2025      	movs	r0, #37	@ 0x25
 80034c6:	f002 febc 	bl	8006242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034ca:	2025      	movs	r0, #37	@ 0x25
 80034cc:	f002 fed3 	bl	8006276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80034d0:	bf00      	nop
 80034d2:	3778      	adds	r7, #120	@ 0x78
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40013800 	.word	0x40013800
 80034dc:	40021000 	.word	0x40021000
 80034e0:	48000400 	.word	0x48000400
 80034e4:	200005a8 	.word	0x200005a8
 80034e8:	40020008 	.word	0x40020008
 80034ec:	20000608 	.word	0x20000608
 80034f0:	4002001c 	.word	0x4002001c

080034f4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 80034fc:	1d39      	adds	r1, r7, #4
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003502:	2201      	movs	r2, #1
 8003504:	4803      	ldr	r0, [pc, #12]	@ (8003514 <__io_putchar+0x20>)
 8003506:	f006 f857 	bl	80095b8 <HAL_UART_Transmit>
	return ch;
 800350a:	687b      	ldr	r3, [r7, #4]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20000514 	.word	0x20000514

08003518 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003518:	480d      	ldr	r0, [pc, #52]	@ (8003550 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800351a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800351c:	f7ff fed0 	bl	80032c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003520:	480c      	ldr	r0, [pc, #48]	@ (8003554 <LoopForever+0x6>)
  ldr r1, =_edata
 8003522:	490d      	ldr	r1, [pc, #52]	@ (8003558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003524:	4a0d      	ldr	r2, [pc, #52]	@ (800355c <LoopForever+0xe>)
  movs r3, #0
 8003526:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003528:	e002      	b.n	8003530 <LoopCopyDataInit>

0800352a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800352a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800352c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800352e:	3304      	adds	r3, #4

08003530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003534:	d3f9      	bcc.n	800352a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003536:	4a0a      	ldr	r2, [pc, #40]	@ (8003560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003538:	4c0a      	ldr	r4, [pc, #40]	@ (8003564 <LoopForever+0x16>)
  movs r3, #0
 800353a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800353c:	e001      	b.n	8003542 <LoopFillZerobss>

0800353e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800353e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003540:	3204      	adds	r2, #4

08003542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003544:	d3fb      	bcc.n	800353e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003546:	f008 ff13 	bl	800c370 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800354a:	f7fe fea3 	bl	8002294 <main>

0800354e <LoopForever>:

LoopForever:
    b LoopForever
 800354e:	e7fe      	b.n	800354e <LoopForever>
  ldr   r0, =_estack
 8003550:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003558:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800355c:	0800fcc0 	.word	0x0800fcc0
  ldr r2, =_sbss
 8003560:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003564:	200007bc 	.word	0x200007bc

08003568 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003568:	e7fe      	b.n	8003568 <ADC4_IRQHandler>

0800356a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003574:	2003      	movs	r0, #3
 8003576:	f002 fe59 	bl	800622c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800357a:	200f      	movs	r0, #15
 800357c:	f000 f80e 	bl	800359c <HAL_InitTick>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	71fb      	strb	r3, [r7, #7]
 800358a:	e001      	b.n	8003590 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800358c:	f7ff fd3e 	bl	800300c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003590:	79fb      	ldrb	r3, [r7, #7]

}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80035a8:	4b16      	ldr	r3, [pc, #88]	@ (8003604 <HAL_InitTick+0x68>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d022      	beq.n	80035f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80035b0:	4b15      	ldr	r3, [pc, #84]	@ (8003608 <HAL_InitTick+0x6c>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b13      	ldr	r3, [pc, #76]	@ (8003604 <HAL_InitTick+0x68>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80035bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 fe64 	bl	8006292 <HAL_SYSTICK_Config>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10f      	bne.n	80035f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b0f      	cmp	r3, #15
 80035d4:	d809      	bhi.n	80035ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035d6:	2200      	movs	r2, #0
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	f04f 30ff 	mov.w	r0, #4294967295
 80035de:	f002 fe30 	bl	8006242 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035e2:	4a0a      	ldr	r2, [pc, #40]	@ (800360c <HAL_InitTick+0x70>)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	e007      	b.n	80035fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
 80035ee:	e004      	b.n	80035fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	e001      	b.n	80035fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	20000008 	.word	0x20000008
 8003608:	20000000 	.word	0x20000000
 800360c:	20000004 	.word	0x20000004

08003610 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003614:	4b05      	ldr	r3, [pc, #20]	@ (800362c <HAL_IncTick+0x1c>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4b05      	ldr	r3, [pc, #20]	@ (8003630 <HAL_IncTick+0x20>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4413      	add	r3, r2
 800361e:	4a03      	ldr	r2, [pc, #12]	@ (800362c <HAL_IncTick+0x1c>)
 8003620:	6013      	str	r3, [r2, #0]
}
 8003622:	bf00      	nop
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	20000668 	.word	0x20000668
 8003630:	20000008 	.word	0x20000008

08003634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return uwTick;
 8003638:	4b03      	ldr	r3, [pc, #12]	@ (8003648 <HAL_GetTick+0x14>)
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	4618      	mov	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000668 	.word	0x20000668

0800364c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	609a      	str	r2, [r3, #8]
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	609a      	str	r2, [r3, #8]
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3360      	adds	r3, #96	@ 0x60
 80036c6:	461a      	mov	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4b08      	ldr	r3, [pc, #32]	@ (80036f8 <LL_ADC_SetOffset+0x44>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80036ec:	bf00      	nop
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	03fff000 	.word	0x03fff000

080036fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3360      	adds	r3, #96	@ 0x60
 800370a:	461a      	mov	r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3360      	adds	r3, #96	@ 0x60
 8003738:	461a      	mov	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	431a      	orrs	r2, r3
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800375e:	b480      	push	{r7}
 8003760:	b087      	sub	sp, #28
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	3360      	adds	r3, #96	@ 0x60
 800376e:	461a      	mov	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	431a      	orrs	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003788:	bf00      	nop
 800378a:	371c      	adds	r7, #28
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3360      	adds	r3, #96	@ 0x60
 80037a4:	461a      	mov	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	615a      	str	r2, [r3, #20]
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003816:	b480      	push	{r7}
 8003818:	b087      	sub	sp, #28
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3330      	adds	r3, #48	@ 0x30
 8003826:	461a      	mov	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	0a1b      	lsrs	r3, r3, #8
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	4413      	add	r3, r2
 8003834:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	211f      	movs	r1, #31
 8003842:	fa01 f303 	lsl.w	r3, r1, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	401a      	ands	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	0e9b      	lsrs	r3, r3, #26
 800384e:	f003 011f 	and.w	r1, r3, #31
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	431a      	orrs	r2, r3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003862:	bf00      	nop
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3314      	adds	r3, #20
 80038a4:	461a      	mov	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	0e5b      	lsrs	r3, r3, #25
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	4413      	add	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	0d1b      	lsrs	r3, r3, #20
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	2107      	movs	r1, #7
 80038c2:	fa01 f303 	lsl.w	r3, r1, r3
 80038c6:	43db      	mvns	r3, r3
 80038c8:	401a      	ands	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	0d1b      	lsrs	r3, r3, #20
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	fa01 f303 	lsl.w	r3, r1, r3
 80038d8:	431a      	orrs	r2, r3
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003904:	43db      	mvns	r3, r3
 8003906:	401a      	ands	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f003 0318 	and.w	r3, r3, #24
 800390e:	4908      	ldr	r1, [pc, #32]	@ (8003930 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003910:	40d9      	lsrs	r1, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	400b      	ands	r3, r1
 8003916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800391a:	431a      	orrs	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003922:	bf00      	nop
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	0007ffff 	.word	0x0007ffff

08003934 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 031f 	and.w	r3, r3, #31
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800397c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6093      	str	r3, [r2, #8]
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a4:	d101      	bne.n	80039aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80039c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039f4:	d101      	bne.n	80039fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a1c:	f043 0201 	orr.w	r2, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a44:	f043 0202 	orr.w	r2, r3, #2
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <LL_ADC_IsEnabled+0x18>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <LL_ADC_IsEnabled+0x1a>
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d101      	bne.n	8003a96 <LL_ADC_IsDisableOngoing+0x18>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <LL_ADC_IsDisableOngoing+0x1a>
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d101      	bne.n	8003abc <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d101      	bne.n	8003ae2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b089      	sub	sp, #36	@ 0x24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e1a9      	b.n	8003e5e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7fd fb4d 	bl	80011b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff2d 	bl	8003990 <LL_ADC_IsDeepPowerDownEnabled>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d004      	beq.n	8003b46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff ff13 	bl	800396c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff ff48 	bl	80039e0 <LL_ADC_IsInternalRegulatorEnabled>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d115      	bne.n	8003b82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff ff2c 	bl	80039b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b60:	4b9c      	ldr	r3, [pc, #624]	@ (8003dd4 <HAL_ADC_Init+0x2e4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	099b      	lsrs	r3, r3, #6
 8003b66:	4a9c      	ldr	r2, [pc, #624]	@ (8003dd8 <HAL_ADC_Init+0x2e8>)
 8003b68:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6c:	099b      	lsrs	r3, r3, #6
 8003b6e:	3301      	adds	r3, #1
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b74:	e002      	b.n	8003b7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f9      	bne.n	8003b76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff ff2a 	bl	80039e0 <LL_ADC_IsInternalRegulatorEnabled>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10d      	bne.n	8003bae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b96:	f043 0210 	orr.w	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba2:	f043 0201 	orr.w	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff ff76 	bl	8003aa4 <LL_ADC_REG_IsConversionOngoing>
 8003bb8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f040 8142 	bne.w	8003e4c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f040 813e 	bne.w	8003e4c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003bd8:	f043 0202 	orr.w	r2, r3, #2
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff37 	bl	8003a58 <LL_ADC_IsEnabled>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d141      	bne.n	8003c74 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bf8:	d004      	beq.n	8003c04 <HAL_ADC_Init+0x114>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a77      	ldr	r2, [pc, #476]	@ (8003ddc <HAL_ADC_Init+0x2ec>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10f      	bne.n	8003c24 <HAL_ADC_Init+0x134>
 8003c04:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c08:	f7ff ff26 	bl	8003a58 <LL_ADC_IsEnabled>
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	4873      	ldr	r0, [pc, #460]	@ (8003ddc <HAL_ADC_Init+0x2ec>)
 8003c10:	f7ff ff22 	bl	8003a58 <LL_ADC_IsEnabled>
 8003c14:	4603      	mov	r3, r0
 8003c16:	4323      	orrs	r3, r4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	e012      	b.n	8003c4a <HAL_ADC_Init+0x15a>
 8003c24:	486e      	ldr	r0, [pc, #440]	@ (8003de0 <HAL_ADC_Init+0x2f0>)
 8003c26:	f7ff ff17 	bl	8003a58 <LL_ADC_IsEnabled>
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	486d      	ldr	r0, [pc, #436]	@ (8003de4 <HAL_ADC_Init+0x2f4>)
 8003c2e:	f7ff ff13 	bl	8003a58 <LL_ADC_IsEnabled>
 8003c32:	4603      	mov	r3, r0
 8003c34:	431c      	orrs	r4, r3
 8003c36:	486c      	ldr	r0, [pc, #432]	@ (8003de8 <HAL_ADC_Init+0x2f8>)
 8003c38:	f7ff ff0e 	bl	8003a58 <LL_ADC_IsEnabled>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	4323      	orrs	r3, r4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d012      	beq.n	8003c74 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c56:	d004      	beq.n	8003c62 <HAL_ADC_Init+0x172>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a5f      	ldr	r2, [pc, #380]	@ (8003ddc <HAL_ADC_Init+0x2ec>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d101      	bne.n	8003c66 <HAL_ADC_Init+0x176>
 8003c62:	4a62      	ldr	r2, [pc, #392]	@ (8003dec <HAL_ADC_Init+0x2fc>)
 8003c64:	e000      	b.n	8003c68 <HAL_ADC_Init+0x178>
 8003c66:	4a62      	ldr	r2, [pc, #392]	@ (8003df0 <HAL_ADC_Init+0x300>)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4610      	mov	r0, r2
 8003c70:	f7ff fcec 	bl	800364c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	7f5b      	ldrb	r3, [r3, #29]
 8003c78:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c7e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003c84:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003c8a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c92:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c94:	4313      	orrs	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d106      	bne.n	8003cb0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	045b      	lsls	r3, r3, #17
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d009      	beq.n	8003ccc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	4b48      	ldr	r3, [pc, #288]	@ (8003df4 <HAL_ADC_Init+0x304>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	69b9      	ldr	r1, [r7, #24]
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fee5 	bl	8003aca <LL_ADC_INJ_IsConversionOngoing>
 8003d00:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d17f      	bne.n	8003e08 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d17c      	bne.n	8003e08 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d12:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d1a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d2a:	f023 0302 	bic.w	r3, r3, #2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	69b9      	ldr	r1, [r7, #24]
 8003d34:	430b      	orrs	r3, r1
 8003d36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d017      	beq.n	8003d70 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003d4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003d58:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003d5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6911      	ldr	r1, [r2, #16]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6812      	ldr	r2, [r2, #0]
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003d6e:	e013      	b.n	8003d98 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691a      	ldr	r2, [r3, #16]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003d7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6812      	ldr	r2, [r2, #0]
 8003d8c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003d90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d94:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d12a      	bne.n	8003df8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003dac:	f023 0304 	bic.w	r3, r3, #4
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003db8:	4311      	orrs	r1, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003dbe:	4311      	orrs	r1, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	611a      	str	r2, [r3, #16]
 8003dd2:	e019      	b.n	8003e08 <HAL_ADC_Init+0x318>
 8003dd4:	20000000 	.word	0x20000000
 8003dd8:	053e2d63 	.word	0x053e2d63
 8003ddc:	50000100 	.word	0x50000100
 8003de0:	50000400 	.word	0x50000400
 8003de4:	50000500 	.word	0x50000500
 8003de8:	50000600 	.word	0x50000600
 8003dec:	50000300 	.word	0x50000300
 8003df0:	50000700 	.word	0x50000700
 8003df4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d10c      	bne.n	8003e2a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e16:	f023 010f 	bic.w	r1, r3, #15
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	1e5a      	subs	r2, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e28:	e007      	b.n	8003e3a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 020f 	bic.w	r2, r2, #15
 8003e38:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3e:	f023 0303 	bic.w	r3, r3, #3
 8003e42:	f043 0201 	orr.w	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e4a:	e007      	b.n	8003e5c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e50:	f043 0210 	orr.w	r2, r3, #16
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3724      	adds	r7, #36	@ 0x24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd90      	pop	{r4, r7, pc}
 8003e66:	bf00      	nop

08003e68 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08a      	sub	sp, #40	@ 0x28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003e70:	2300      	movs	r3, #0
 8003e72:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e8c:	d004      	beq.n	8003e98 <HAL_ADC_IRQHandler+0x30>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a8e      	ldr	r2, [pc, #568]	@ (80040cc <HAL_ADC_IRQHandler+0x264>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d101      	bne.n	8003e9c <HAL_ADC_IRQHandler+0x34>
 8003e98:	4b8d      	ldr	r3, [pc, #564]	@ (80040d0 <HAL_ADC_IRQHandler+0x268>)
 8003e9a:	e000      	b.n	8003e9e <HAL_ADC_IRQHandler+0x36>
 8003e9c:	4b8d      	ldr	r3, [pc, #564]	@ (80040d4 <HAL_ADC_IRQHandler+0x26c>)
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fd48 	bl	8003934 <LL_ADC_GetMultimode>
 8003ea4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d017      	beq.n	8003ee0 <HAL_ADC_IRQHandler+0x78>
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d012      	beq.n	8003ee0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d105      	bne.n	8003ed2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eca:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f001 fa9c 	bl	8005410 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2202      	movs	r2, #2
 8003ede:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d004      	beq.n	8003ef4 <HAL_ADC_IRQHandler+0x8c>
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10b      	bne.n	8003f0c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 8094 	beq.w	8004028 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 808e 	beq.w	8004028 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d105      	bne.n	8003f24 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f1c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fc61 	bl	80037f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d072      	beq.n	800401a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a64      	ldr	r2, [pc, #400]	@ (80040cc <HAL_ADC_IRQHandler+0x264>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_ADC_IRQHandler+0xea>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a65      	ldr	r2, [pc, #404]	@ (80040d8 <HAL_ADC_IRQHandler+0x270>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d002      	beq.n	8003f4e <HAL_ADC_IRQHandler+0xe6>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	e003      	b.n	8003f56 <HAL_ADC_IRQHandler+0xee>
 8003f4e:	4b63      	ldr	r3, [pc, #396]	@ (80040dc <HAL_ADC_IRQHandler+0x274>)
 8003f50:	e001      	b.n	8003f56 <HAL_ADC_IRQHandler+0xee>
 8003f52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d008      	beq.n	8003f70 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2b05      	cmp	r3, #5
 8003f68:	d002      	beq.n	8003f70 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b09      	cmp	r3, #9
 8003f6e:	d104      	bne.n	8003f7a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	623b      	str	r3, [r7, #32]
 8003f78:	e014      	b.n	8003fa4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a53      	ldr	r2, [pc, #332]	@ (80040cc <HAL_ADC_IRQHandler+0x264>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d009      	beq.n	8003f98 <HAL_ADC_IRQHandler+0x130>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a53      	ldr	r2, [pc, #332]	@ (80040d8 <HAL_ADC_IRQHandler+0x270>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d002      	beq.n	8003f94 <HAL_ADC_IRQHandler+0x12c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	e003      	b.n	8003f9c <HAL_ADC_IRQHandler+0x134>
 8003f94:	4b51      	ldr	r3, [pc, #324]	@ (80040dc <HAL_ADC_IRQHandler+0x274>)
 8003f96:	e001      	b.n	8003f9c <HAL_ADC_IRQHandler+0x134>
 8003f98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f9c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d135      	bne.n	800401a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d12e      	bne.n	800401a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fd6f 	bl	8003aa4 <LL_ADC_REG_IsConversionOngoing>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d11a      	bne.n	8004002 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 020c 	bic.w	r2, r2, #12
 8003fda:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d112      	bne.n	800401a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff8:	f043 0201 	orr.w	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004000:	e00b      	b.n	800401a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004006:	f043 0210 	orr.w	r2, r3, #16
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004012:	f043 0201 	orr.w	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f006 ffba 	bl	800af94 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	220c      	movs	r2, #12
 8004026:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d004      	beq.n	800403c <HAL_ADC_IRQHandler+0x1d4>
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f003 0320 	and.w	r3, r3, #32
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10b      	bne.n	8004054 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 80b3 	beq.w	80041ae <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 80ad 	beq.w	80041ae <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004064:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fbfc 	bl	800386e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004076:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff fbb7 	bl	80037f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004082:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a10      	ldr	r2, [pc, #64]	@ (80040cc <HAL_ADC_IRQHandler+0x264>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d009      	beq.n	80040a2 <HAL_ADC_IRQHandler+0x23a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a11      	ldr	r2, [pc, #68]	@ (80040d8 <HAL_ADC_IRQHandler+0x270>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d002      	beq.n	800409e <HAL_ADC_IRQHandler+0x236>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	e003      	b.n	80040a6 <HAL_ADC_IRQHandler+0x23e>
 800409e:	4b0f      	ldr	r3, [pc, #60]	@ (80040dc <HAL_ADC_IRQHandler+0x274>)
 80040a0:	e001      	b.n	80040a6 <HAL_ADC_IRQHandler+0x23e>
 80040a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d008      	beq.n	80040c0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2b06      	cmp	r3, #6
 80040b8:	d002      	beq.n	80040c0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b07      	cmp	r3, #7
 80040be:	d10f      	bne.n	80040e0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	623b      	str	r3, [r7, #32]
 80040c8:	e01f      	b.n	800410a <HAL_ADC_IRQHandler+0x2a2>
 80040ca:	bf00      	nop
 80040cc:	50000100 	.word	0x50000100
 80040d0:	50000300 	.word	0x50000300
 80040d4:	50000700 	.word	0x50000700
 80040d8:	50000500 	.word	0x50000500
 80040dc:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a8b      	ldr	r2, [pc, #556]	@ (8004314 <HAL_ADC_IRQHandler+0x4ac>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d009      	beq.n	80040fe <HAL_ADC_IRQHandler+0x296>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a8a      	ldr	r2, [pc, #552]	@ (8004318 <HAL_ADC_IRQHandler+0x4b0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d002      	beq.n	80040fa <HAL_ADC_IRQHandler+0x292>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	e003      	b.n	8004102 <HAL_ADC_IRQHandler+0x29a>
 80040fa:	4b88      	ldr	r3, [pc, #544]	@ (800431c <HAL_ADC_IRQHandler+0x4b4>)
 80040fc:	e001      	b.n	8004102 <HAL_ADC_IRQHandler+0x29a>
 80040fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004102:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d047      	beq.n	80041a0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <HAL_ADC_IRQHandler+0x2c2>
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d03f      	beq.n	80041a0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004126:	2b00      	cmp	r3, #0
 8004128:	d13a      	bne.n	80041a0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004134:	2b40      	cmp	r3, #64	@ 0x40
 8004136:	d133      	bne.n	80041a0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d12e      	bne.n	80041a0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff fcbf 	bl	8003aca <LL_ADC_INJ_IsConversionOngoing>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d11a      	bne.n	8004188 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004160:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004166:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d112      	bne.n	80041a0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417e:	f043 0201 	orr.w	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004186:	e00b      	b.n	80041a0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418c:	f043 0210 	orr.w	r2, r3, #16
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004198:	f043 0201 	orr.w	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f006 ff05 	bl	800afb0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2260      	movs	r2, #96	@ 0x60
 80041ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d011      	beq.n	80041dc <HAL_ADC_IRQHandler+0x374>
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00c      	beq.n	80041dc <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f8aa 	bl	8004328 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2280      	movs	r2, #128	@ 0x80
 80041da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d012      	beq.n	800420c <HAL_ADC_IRQHandler+0x3a4>
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00d      	beq.n	800420c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f001 f8f3 	bl	80053e8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800420a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004212:	2b00      	cmp	r3, #0
 8004214:	d012      	beq.n	800423c <HAL_ADC_IRQHandler+0x3d4>
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00d      	beq.n	800423c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004224:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f001 f8e5 	bl	80053fc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800423a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	2b00      	cmp	r3, #0
 8004244:	d043      	beq.n	80042ce <HAL_ADC_IRQHandler+0x466>
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	f003 0310 	and.w	r3, r3, #16
 800424c:	2b00      	cmp	r3, #0
 800424e:	d03e      	beq.n	80042ce <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8004258:	2301      	movs	r3, #1
 800425a:	627b      	str	r3, [r7, #36]	@ 0x24
 800425c:	e021      	b.n	80042a2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d015      	beq.n	8004290 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800426c:	d004      	beq.n	8004278 <HAL_ADC_IRQHandler+0x410>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a28      	ldr	r2, [pc, #160]	@ (8004314 <HAL_ADC_IRQHandler+0x4ac>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d101      	bne.n	800427c <HAL_ADC_IRQHandler+0x414>
 8004278:	4b29      	ldr	r3, [pc, #164]	@ (8004320 <HAL_ADC_IRQHandler+0x4b8>)
 800427a:	e000      	b.n	800427e <HAL_ADC_IRQHandler+0x416>
 800427c:	4b29      	ldr	r3, [pc, #164]	@ (8004324 <HAL_ADC_IRQHandler+0x4bc>)
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff fb66 	bl	8003950 <LL_ADC_GetMultiDMATransfer>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800428a:	2301      	movs	r3, #1
 800428c:	627b      	str	r3, [r7, #36]	@ 0x24
 800428e:	e008      	b.n	80042a2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800429e:	2301      	movs	r3, #1
 80042a0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80042a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d10e      	bne.n	80042c6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ac:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b8:	f043 0202 	orr.w	r2, r3, #2
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f83b 	bl	800433c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2210      	movs	r2, #16
 80042cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d018      	beq.n	800430a <HAL_ADC_IRQHandler+0x4a2>
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d013      	beq.n	800430a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042f2:	f043 0208 	orr.w	r2, r3, #8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004302:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f001 f865 	bl	80053d4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800430a:	bf00      	nop
 800430c:	3728      	adds	r7, #40	@ 0x28
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	50000100 	.word	0x50000100
 8004318:	50000500 	.word	0x50000500
 800431c:	50000400 	.word	0x50000400
 8004320:	50000300 	.word	0x50000300
 8004324:	50000700 	.word	0x50000700

08004328 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b0b6      	sub	sp, #216	@ 0xd8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800436a:	2b01      	cmp	r3, #1
 800436c:	d102      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x24>
 800436e:	2302      	movs	r3, #2
 8004370:	f000 bc13 	b.w	8004b9a <HAL_ADC_ConfigChannel+0x84a>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fb8f 	bl	8003aa4 <LL_ADC_REG_IsConversionOngoing>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	f040 83f3 	bne.w	8004b74 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6859      	ldr	r1, [r3, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	f7ff fa3b 	bl	8003816 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff fb7d 	bl	8003aa4 <LL_ADC_REG_IsConversionOngoing>
 80043aa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff fb89 	bl	8003aca <LL_ADC_INJ_IsConversionOngoing>
 80043b8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f040 81d9 	bne.w	8004778 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f040 81d4 	bne.w	8004778 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043d8:	d10f      	bne.n	80043fa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2200      	movs	r2, #0
 80043e4:	4619      	mov	r1, r3
 80043e6:	f7ff fa55 	bl	8003894 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff f9e9 	bl	80037ca <LL_ADC_SetSamplingTimeCommonConfig>
 80043f8:	e00e      	b.n	8004418 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6819      	ldr	r1, [r3, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	461a      	mov	r2, r3
 8004408:	f7ff fa44 	bl	8003894 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2100      	movs	r1, #0
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff f9d9 	bl	80037ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	695a      	ldr	r2, [r3, #20]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	08db      	lsrs	r3, r3, #3
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b04      	cmp	r3, #4
 8004438:	d022      	beq.n	8004480 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6919      	ldr	r1, [r3, #16]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800444a:	f7ff f933 	bl	80036b4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6919      	ldr	r1, [r3, #16]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	461a      	mov	r2, r3
 800445c:	f7ff f97f 	bl	800375e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800446c:	2b01      	cmp	r3, #1
 800446e:	d102      	bne.n	8004476 <HAL_ADC_ConfigChannel+0x126>
 8004470:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004474:	e000      	b.n	8004478 <HAL_ADC_ConfigChannel+0x128>
 8004476:	2300      	movs	r3, #0
 8004478:	461a      	mov	r2, r3
 800447a:	f7ff f98b 	bl	8003794 <LL_ADC_SetOffsetSaturation>
 800447e:	e17b      	b.n	8004778 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2100      	movs	r1, #0
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff f938 	bl	80036fc <LL_ADC_GetOffsetChannel>
 800448c:	4603      	mov	r3, r0
 800448e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x15c>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff f92d 	bl	80036fc <LL_ADC_GetOffsetChannel>
 80044a2:	4603      	mov	r3, r0
 80044a4:	0e9b      	lsrs	r3, r3, #26
 80044a6:	f003 021f 	and.w	r2, r3, #31
 80044aa:	e01e      	b.n	80044ea <HAL_ADC_ConfigChannel+0x19a>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2100      	movs	r1, #0
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff f922 	bl	80036fc <LL_ADC_GetOffsetChannel>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80044c2:	fa93 f3a3 	rbit	r3, r3
 80044c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80044ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80044ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80044d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80044da:	2320      	movs	r3, #32
 80044dc:	e004      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80044de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044e2:	fab3 f383 	clz	r3, r3
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d105      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x1b2>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	0e9b      	lsrs	r3, r3, #26
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	e018      	b.n	8004534 <HAL_ADC_ConfigChannel+0x1e4>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800450e:	fa93 f3a3 	rbit	r3, r3
 8004512:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800451a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800451e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004526:	2320      	movs	r3, #32
 8004528:	e004      	b.n	8004534 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800452a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800452e:	fab3 f383 	clz	r3, r3
 8004532:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004534:	429a      	cmp	r2, r3
 8004536:	d106      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2200      	movs	r2, #0
 800453e:	2100      	movs	r1, #0
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff f8f1 	bl	8003728 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2101      	movs	r1, #1
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff f8d5 	bl	80036fc <LL_ADC_GetOffsetChannel>
 8004552:	4603      	mov	r3, r0
 8004554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10a      	bne.n	8004572 <HAL_ADC_ConfigChannel+0x222>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2101      	movs	r1, #1
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff f8ca 	bl	80036fc <LL_ADC_GetOffsetChannel>
 8004568:	4603      	mov	r3, r0
 800456a:	0e9b      	lsrs	r3, r3, #26
 800456c:	f003 021f 	and.w	r2, r3, #31
 8004570:	e01e      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x260>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2101      	movs	r1, #1
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff f8bf 	bl	80036fc <LL_ADC_GetOffsetChannel>
 800457e:	4603      	mov	r3, r0
 8004580:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004584:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004588:	fa93 f3a3 	rbit	r3, r3
 800458c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004590:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004594:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004598:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80045a0:	2320      	movs	r3, #32
 80045a2:	e004      	b.n	80045ae <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80045a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80045a8:	fab3 f383 	clz	r3, r3
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d105      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0x278>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	0e9b      	lsrs	r3, r3, #26
 80045c2:	f003 031f 	and.w	r3, r3, #31
 80045c6:	e018      	b.n	80045fa <HAL_ADC_ConfigChannel+0x2aa>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045d4:	fa93 f3a3 	rbit	r3, r3
 80045d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80045dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80045e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80045e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80045ec:	2320      	movs	r3, #32
 80045ee:	e004      	b.n	80045fa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80045f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045f4:	fab3 f383 	clz	r3, r3
 80045f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d106      	bne.n	800460c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2200      	movs	r2, #0
 8004604:	2101      	movs	r1, #1
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff f88e 	bl	8003728 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2102      	movs	r1, #2
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff f872 	bl	80036fc <LL_ADC_GetOffsetChannel>
 8004618:	4603      	mov	r3, r0
 800461a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10a      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x2e8>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2102      	movs	r1, #2
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff f867 	bl	80036fc <LL_ADC_GetOffsetChannel>
 800462e:	4603      	mov	r3, r0
 8004630:	0e9b      	lsrs	r3, r3, #26
 8004632:	f003 021f 	and.w	r2, r3, #31
 8004636:	e01e      	b.n	8004676 <HAL_ADC_ConfigChannel+0x326>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2102      	movs	r1, #2
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff f85c 	bl	80036fc <LL_ADC_GetOffsetChannel>
 8004644:	4603      	mov	r3, r0
 8004646:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800464e:	fa93 f3a3 	rbit	r3, r3
 8004652:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004656:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800465a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800465e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004666:	2320      	movs	r3, #32
 8004668:	e004      	b.n	8004674 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800466a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800466e:	fab3 f383 	clz	r3, r3
 8004672:	b2db      	uxtb	r3, r3
 8004674:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800467e:	2b00      	cmp	r3, #0
 8004680:	d105      	bne.n	800468e <HAL_ADC_ConfigChannel+0x33e>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	0e9b      	lsrs	r3, r3, #26
 8004688:	f003 031f 	and.w	r3, r3, #31
 800468c:	e016      	b.n	80046bc <HAL_ADC_ConfigChannel+0x36c>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800469a:	fa93 f3a3 	rbit	r3, r3
 800469e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80046a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80046a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80046ae:	2320      	movs	r3, #32
 80046b0:	e004      	b.n	80046bc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80046b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046b6:	fab3 f383 	clz	r3, r3
 80046ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046bc:	429a      	cmp	r2, r3
 80046be:	d106      	bne.n	80046ce <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2200      	movs	r2, #0
 80046c6:	2102      	movs	r1, #2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff f82d 	bl	8003728 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2103      	movs	r1, #3
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff f811 	bl	80036fc <LL_ADC_GetOffsetChannel>
 80046da:	4603      	mov	r3, r0
 80046dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10a      	bne.n	80046fa <HAL_ADC_ConfigChannel+0x3aa>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2103      	movs	r1, #3
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff f806 	bl	80036fc <LL_ADC_GetOffsetChannel>
 80046f0:	4603      	mov	r3, r0
 80046f2:	0e9b      	lsrs	r3, r3, #26
 80046f4:	f003 021f 	and.w	r2, r3, #31
 80046f8:	e017      	b.n	800472a <HAL_ADC_ConfigChannel+0x3da>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2103      	movs	r1, #3
 8004700:	4618      	mov	r0, r3
 8004702:	f7fe fffb 	bl	80036fc <LL_ADC_GetOffsetChannel>
 8004706:	4603      	mov	r3, r0
 8004708:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800470c:	fa93 f3a3 	rbit	r3, r3
 8004710:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004712:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004714:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004716:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800471c:	2320      	movs	r3, #32
 800471e:	e003      	b.n	8004728 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004720:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004722:	fab3 f383 	clz	r3, r3
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004732:	2b00      	cmp	r3, #0
 8004734:	d105      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x3f2>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	0e9b      	lsrs	r3, r3, #26
 800473c:	f003 031f 	and.w	r3, r3, #31
 8004740:	e011      	b.n	8004766 <HAL_ADC_ConfigChannel+0x416>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004750:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004752:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800475a:	2320      	movs	r3, #32
 800475c:	e003      	b.n	8004766 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800475e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004760:	fab3 f383 	clz	r3, r3
 8004764:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004766:	429a      	cmp	r2, r3
 8004768:	d106      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2200      	movs	r2, #0
 8004770:	2103      	movs	r1, #3
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe ffd8 	bl	8003728 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff f96b 	bl	8003a58 <LL_ADC_IsEnabled>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	f040 813d 	bne.w	8004a04 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6819      	ldr	r1, [r3, #0]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	461a      	mov	r2, r3
 8004798:	f7ff f8a8 	bl	80038ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4aa2      	ldr	r2, [pc, #648]	@ (8004a2c <HAL_ADC_ConfigChannel+0x6dc>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	f040 812e 	bne.w	8004a04 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x480>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	0e9b      	lsrs	r3, r3, #26
 80047be:	3301      	adds	r3, #1
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	2b09      	cmp	r3, #9
 80047c6:	bf94      	ite	ls
 80047c8:	2301      	movls	r3, #1
 80047ca:	2300      	movhi	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	e019      	b.n	8004804 <HAL_ADC_ConfigChannel+0x4b4>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047d8:	fa93 f3a3 	rbit	r3, r3
 80047dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80047de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047e0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80047e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80047e8:	2320      	movs	r3, #32
 80047ea:	e003      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80047ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047ee:	fab3 f383 	clz	r3, r3
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	3301      	adds	r3, #1
 80047f6:	f003 031f 	and.w	r3, r3, #31
 80047fa:	2b09      	cmp	r3, #9
 80047fc:	bf94      	ite	ls
 80047fe:	2301      	movls	r3, #1
 8004800:	2300      	movhi	r3, #0
 8004802:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004804:	2b00      	cmp	r3, #0
 8004806:	d079      	beq.n	80048fc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004810:	2b00      	cmp	r3, #0
 8004812:	d107      	bne.n	8004824 <HAL_ADC_ConfigChannel+0x4d4>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	0e9b      	lsrs	r3, r3, #26
 800481a:	3301      	adds	r3, #1
 800481c:	069b      	lsls	r3, r3, #26
 800481e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004822:	e015      	b.n	8004850 <HAL_ADC_ConfigChannel+0x500>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800482c:	fa93 f3a3 	rbit	r3, r3
 8004830:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004834:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800483c:	2320      	movs	r3, #32
 800483e:	e003      	b.n	8004848 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004842:	fab3 f383 	clz	r3, r3
 8004846:	b2db      	uxtb	r3, r3
 8004848:	3301      	adds	r3, #1
 800484a:	069b      	lsls	r3, r3, #26
 800484c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x520>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	0e9b      	lsrs	r3, r3, #26
 8004862:	3301      	adds	r3, #1
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	2101      	movs	r1, #1
 800486a:	fa01 f303 	lsl.w	r3, r1, r3
 800486e:	e017      	b.n	80048a0 <HAL_ADC_ConfigChannel+0x550>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004878:	fa93 f3a3 	rbit	r3, r3
 800487c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800487e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004880:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004888:	2320      	movs	r3, #32
 800488a:	e003      	b.n	8004894 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800488c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800488e:	fab3 f383 	clz	r3, r3
 8004892:	b2db      	uxtb	r3, r3
 8004894:	3301      	adds	r3, #1
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	2101      	movs	r1, #1
 800489c:	fa01 f303 	lsl.w	r3, r1, r3
 80048a0:	ea42 0103 	orr.w	r1, r2, r3
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x576>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	0e9b      	lsrs	r3, r3, #26
 80048b6:	3301      	adds	r3, #1
 80048b8:	f003 021f 	and.w	r2, r3, #31
 80048bc:	4613      	mov	r3, r2
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	4413      	add	r3, r2
 80048c2:	051b      	lsls	r3, r3, #20
 80048c4:	e018      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x5a8>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ce:	fa93 f3a3 	rbit	r3, r3
 80048d2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80048d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80048d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80048de:	2320      	movs	r3, #32
 80048e0:	e003      	b.n	80048ea <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80048e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048e4:	fab3 f383 	clz	r3, r3
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	3301      	adds	r3, #1
 80048ec:	f003 021f 	and.w	r2, r3, #31
 80048f0:	4613      	mov	r3, r2
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	4413      	add	r3, r2
 80048f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048f8:	430b      	orrs	r3, r1
 80048fa:	e07e      	b.n	80049fa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004904:	2b00      	cmp	r3, #0
 8004906:	d107      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x5c8>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	0e9b      	lsrs	r3, r3, #26
 800490e:	3301      	adds	r3, #1
 8004910:	069b      	lsls	r3, r3, #26
 8004912:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004916:	e015      	b.n	8004944 <HAL_ADC_ConfigChannel+0x5f4>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004920:	fa93 f3a3 	rbit	r3, r3
 8004924:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004928:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800492a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004930:	2320      	movs	r3, #32
 8004932:	e003      	b.n	800493c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004936:	fab3 f383 	clz	r3, r3
 800493a:	b2db      	uxtb	r3, r3
 800493c:	3301      	adds	r3, #1
 800493e:	069b      	lsls	r3, r3, #26
 8004940:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800494c:	2b00      	cmp	r3, #0
 800494e:	d109      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x614>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	0e9b      	lsrs	r3, r3, #26
 8004956:	3301      	adds	r3, #1
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	2101      	movs	r1, #1
 800495e:	fa01 f303 	lsl.w	r3, r1, r3
 8004962:	e017      	b.n	8004994 <HAL_ADC_ConfigChannel+0x644>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	fa93 f3a3 	rbit	r3, r3
 8004970:	61fb      	str	r3, [r7, #28]
  return result;
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800497c:	2320      	movs	r3, #32
 800497e:	e003      	b.n	8004988 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	fab3 f383 	clz	r3, r3
 8004986:	b2db      	uxtb	r3, r3
 8004988:	3301      	adds	r3, #1
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	2101      	movs	r1, #1
 8004990:	fa01 f303 	lsl.w	r3, r1, r3
 8004994:	ea42 0103 	orr.w	r1, r2, r3
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10d      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x670>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	0e9b      	lsrs	r3, r3, #26
 80049aa:	3301      	adds	r3, #1
 80049ac:	f003 021f 	and.w	r2, r3, #31
 80049b0:	4613      	mov	r3, r2
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	4413      	add	r3, r2
 80049b6:	3b1e      	subs	r3, #30
 80049b8:	051b      	lsls	r3, r3, #20
 80049ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049be:	e01b      	b.n	80049f8 <HAL_ADC_ConfigChannel+0x6a8>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	613b      	str	r3, [r7, #16]
  return result;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80049d8:	2320      	movs	r3, #32
 80049da:	e003      	b.n	80049e4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	fab3 f383 	clz	r3, r3
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	3301      	adds	r3, #1
 80049e6:	f003 021f 	and.w	r2, r3, #31
 80049ea:	4613      	mov	r3, r2
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	4413      	add	r3, r2
 80049f0:	3b1e      	subs	r3, #30
 80049f2:	051b      	lsls	r3, r3, #20
 80049f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049fe:	4619      	mov	r1, r3
 8004a00:	f7fe ff48 	bl	8003894 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	4b09      	ldr	r3, [pc, #36]	@ (8004a30 <HAL_ADC_ConfigChannel+0x6e0>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 80be 	beq.w	8004b8e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a1a:	d004      	beq.n	8004a26 <HAL_ADC_ConfigChannel+0x6d6>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a04      	ldr	r2, [pc, #16]	@ (8004a34 <HAL_ADC_ConfigChannel+0x6e4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d10a      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x6ec>
 8004a26:	4b04      	ldr	r3, [pc, #16]	@ (8004a38 <HAL_ADC_ConfigChannel+0x6e8>)
 8004a28:	e009      	b.n	8004a3e <HAL_ADC_ConfigChannel+0x6ee>
 8004a2a:	bf00      	nop
 8004a2c:	407f0000 	.word	0x407f0000
 8004a30:	80080000 	.word	0x80080000
 8004a34:	50000100 	.word	0x50000100
 8004a38:	50000300 	.word	0x50000300
 8004a3c:	4b59      	ldr	r3, [pc, #356]	@ (8004ba4 <HAL_ADC_ConfigChannel+0x854>)
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe fe2a 	bl	8003698 <LL_ADC_GetCommonPathInternalCh>
 8004a44:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a56      	ldr	r2, [pc, #344]	@ (8004ba8 <HAL_ADC_ConfigChannel+0x858>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d004      	beq.n	8004a5c <HAL_ADC_ConfigChannel+0x70c>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a55      	ldr	r2, [pc, #340]	@ (8004bac <HAL_ADC_ConfigChannel+0x85c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d13a      	bne.n	8004ad2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d134      	bne.n	8004ad2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a70:	d005      	beq.n	8004a7e <HAL_ADC_ConfigChannel+0x72e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a4e      	ldr	r2, [pc, #312]	@ (8004bb0 <HAL_ADC_ConfigChannel+0x860>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	f040 8085 	bne.w	8004b88 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a86:	d004      	beq.n	8004a92 <HAL_ADC_ConfigChannel+0x742>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a49      	ldr	r2, [pc, #292]	@ (8004bb4 <HAL_ADC_ConfigChannel+0x864>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d101      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0x746>
 8004a92:	4a49      	ldr	r2, [pc, #292]	@ (8004bb8 <HAL_ADC_ConfigChannel+0x868>)
 8004a94:	e000      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x748>
 8004a96:	4a43      	ldr	r2, [pc, #268]	@ (8004ba4 <HAL_ADC_ConfigChannel+0x854>)
 8004a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f7fe fde5 	bl	8003672 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004aa8:	4b44      	ldr	r3, [pc, #272]	@ (8004bbc <HAL_ADC_ConfigChannel+0x86c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	099b      	lsrs	r3, r3, #6
 8004aae:	4a44      	ldr	r2, [pc, #272]	@ (8004bc0 <HAL_ADC_ConfigChannel+0x870>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	099b      	lsrs	r3, r3, #6
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	4613      	mov	r3, r2
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ac2:	e002      	b.n	8004aca <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1f9      	bne.n	8004ac4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ad0:	e05a      	b.n	8004b88 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a3b      	ldr	r2, [pc, #236]	@ (8004bc4 <HAL_ADC_ConfigChannel+0x874>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d125      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004adc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ae0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d11f      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a31      	ldr	r2, [pc, #196]	@ (8004bb4 <HAL_ADC_ConfigChannel+0x864>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d104      	bne.n	8004afc <HAL_ADC_ConfigChannel+0x7ac>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a34      	ldr	r2, [pc, #208]	@ (8004bc8 <HAL_ADC_ConfigChannel+0x878>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d047      	beq.n	8004b8c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b04:	d004      	beq.n	8004b10 <HAL_ADC_ConfigChannel+0x7c0>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a2a      	ldr	r2, [pc, #168]	@ (8004bb4 <HAL_ADC_ConfigChannel+0x864>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d101      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x7c4>
 8004b10:	4a29      	ldr	r2, [pc, #164]	@ (8004bb8 <HAL_ADC_ConfigChannel+0x868>)
 8004b12:	e000      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x7c6>
 8004b14:	4a23      	ldr	r2, [pc, #140]	@ (8004ba4 <HAL_ADC_ConfigChannel+0x854>)
 8004b16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4610      	mov	r0, r2
 8004b22:	f7fe fda6 	bl	8003672 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b26:	e031      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a27      	ldr	r2, [pc, #156]	@ (8004bcc <HAL_ADC_ConfigChannel+0x87c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d12d      	bne.n	8004b8e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d127      	bne.n	8004b8e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb4 <HAL_ADC_ConfigChannel+0x864>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d022      	beq.n	8004b8e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b50:	d004      	beq.n	8004b5c <HAL_ADC_ConfigChannel+0x80c>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a17      	ldr	r2, [pc, #92]	@ (8004bb4 <HAL_ADC_ConfigChannel+0x864>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d101      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x810>
 8004b5c:	4a16      	ldr	r2, [pc, #88]	@ (8004bb8 <HAL_ADC_ConfigChannel+0x868>)
 8004b5e:	e000      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x812>
 8004b60:	4a10      	ldr	r2, [pc, #64]	@ (8004ba4 <HAL_ADC_ConfigChannel+0x854>)
 8004b62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	f7fe fd80 	bl	8003672 <LL_ADC_SetCommonPathInternalCh>
 8004b72:	e00c      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b78:	f043 0220 	orr.w	r2, r3, #32
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004b86:	e002      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b88:	bf00      	nop
 8004b8a:	e000      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b96:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	37d8      	adds	r7, #216	@ 0xd8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	50000700 	.word	0x50000700
 8004ba8:	c3210000 	.word	0xc3210000
 8004bac:	90c00010 	.word	0x90c00010
 8004bb0:	50000600 	.word	0x50000600
 8004bb4:	50000100 	.word	0x50000100
 8004bb8:	50000300 	.word	0x50000300
 8004bbc:	20000000 	.word	0x20000000
 8004bc0:	053e2d63 	.word	0x053e2d63
 8004bc4:	c7520000 	.word	0xc7520000
 8004bc8:	50000500 	.word	0x50000500
 8004bcc:	cb840000 	.word	0xcb840000

08004bd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fe ff39 	bl	8003a58 <LL_ADC_IsEnabled>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d176      	bne.n	8004cda <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	4b3c      	ldr	r3, [pc, #240]	@ (8004ce4 <ADC_Enable+0x114>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00d      	beq.n	8004c16 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bfe:	f043 0210 	orr.w	r2, r3, #16
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c0a:	f043 0201 	orr.w	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e062      	b.n	8004cdc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fe fef4 	bl	8003a08 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c28:	d004      	beq.n	8004c34 <ADC_Enable+0x64>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a2e      	ldr	r2, [pc, #184]	@ (8004ce8 <ADC_Enable+0x118>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <ADC_Enable+0x68>
 8004c34:	4b2d      	ldr	r3, [pc, #180]	@ (8004cec <ADC_Enable+0x11c>)
 8004c36:	e000      	b.n	8004c3a <ADC_Enable+0x6a>
 8004c38:	4b2d      	ldr	r3, [pc, #180]	@ (8004cf0 <ADC_Enable+0x120>)
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fe fd2c 	bl	8003698 <LL_ADC_GetCommonPathInternalCh>
 8004c40:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004c42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d013      	beq.n	8004c72 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8004cf4 <ADC_Enable+0x124>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	099b      	lsrs	r3, r3, #6
 8004c50:	4a29      	ldr	r2, [pc, #164]	@ (8004cf8 <ADC_Enable+0x128>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	099b      	lsrs	r3, r3, #6
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c64:	e002      	b.n	8004c6c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1f9      	bne.n	8004c66 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004c72:	f7fe fcdf 	bl	8003634 <HAL_GetTick>
 8004c76:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c78:	e028      	b.n	8004ccc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe feea 	bl	8003a58 <LL_ADC_IsEnabled>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d104      	bne.n	8004c94 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fe feba 	bl	8003a08 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c94:	f7fe fcce 	bl	8003634 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d914      	bls.n	8004ccc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d00d      	beq.n	8004ccc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb4:	f043 0210 	orr.w	r2, r3, #16
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc0:	f043 0201 	orr.w	r2, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e007      	b.n	8004cdc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d1cf      	bne.n	8004c7a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	8000003f 	.word	0x8000003f
 8004ce8:	50000100 	.word	0x50000100
 8004cec:	50000300 	.word	0x50000300
 8004cf0:	50000700 	.word	0x50000700
 8004cf4:	20000000 	.word	0x20000000
 8004cf8:	053e2d63 	.word	0x053e2d63

08004cfc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7fe feb8 	bl	8003a7e <LL_ADC_IsDisableOngoing>
 8004d0e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fe fe9f 	bl	8003a58 <LL_ADC_IsEnabled>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d047      	beq.n	8004db0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d144      	bne.n	8004db0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 030d 	and.w	r3, r3, #13
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d10c      	bne.n	8004d4e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fe fe79 	bl	8003a30 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2203      	movs	r2, #3
 8004d44:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d46:	f7fe fc75 	bl	8003634 <HAL_GetTick>
 8004d4a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d4c:	e029      	b.n	8004da2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d52:	f043 0210 	orr.w	r2, r3, #16
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d5e:	f043 0201 	orr.w	r2, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e023      	b.n	8004db2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d6a:	f7fe fc63 	bl	8003634 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d914      	bls.n	8004da2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00d      	beq.n	8004da2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8a:	f043 0210 	orr.w	r2, r3, #16
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d96:	f043 0201 	orr.w	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e007      	b.n	8004db2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1dc      	bne.n	8004d6a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <LL_ADC_SetCommonPathInternalCh>:
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	609a      	str	r2, [r3, #8]
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <LL_ADC_GetCommonPathInternalCh>:
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <LL_ADC_SetOffset>:
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3360      	adds	r3, #96	@ 0x60
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4b08      	ldr	r3, [pc, #32]	@ (8004e40 <LL_ADC_SetOffset+0x44>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	601a      	str	r2, [r3, #0]
}
 8004e34:	bf00      	nop
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	03fff000 	.word	0x03fff000

08004e44 <LL_ADC_GetOffsetChannel>:
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3360      	adds	r3, #96	@ 0x60
 8004e52:	461a      	mov	r2, r3
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <LL_ADC_SetOffsetState>:
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3360      	adds	r3, #96	@ 0x60
 8004e80:	461a      	mov	r2, r3
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	601a      	str	r2, [r3, #0]
}
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <LL_ADC_SetOffsetSign>:
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b087      	sub	sp, #28
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3360      	adds	r3, #96	@ 0x60
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	601a      	str	r2, [r3, #0]
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <LL_ADC_SetOffsetSaturation>:
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3360      	adds	r3, #96	@ 0x60
 8004eec:	461a      	mov	r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	431a      	orrs	r2, r3
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	601a      	str	r2, [r3, #0]
}
 8004f06:	bf00      	nop
 8004f08:	371c      	adds	r7, #28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	615a      	str	r2, [r3, #20]
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <LL_ADC_INJ_GetTrigAuto>:
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <LL_ADC_SetChannelSamplingTime>:
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3314      	adds	r3, #20
 8004f64:	461a      	mov	r2, r3
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	0e5b      	lsrs	r3, r3, #25
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	4413      	add	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	0d1b      	lsrs	r3, r3, #20
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	2107      	movs	r1, #7
 8004f82:	fa01 f303 	lsl.w	r3, r1, r3
 8004f86:	43db      	mvns	r3, r3
 8004f88:	401a      	ands	r2, r3
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	0d1b      	lsrs	r3, r3, #20
 8004f8e:	f003 031f 	and.w	r3, r3, #31
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	fa01 f303 	lsl.w	r3, r1, r3
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	601a      	str	r2, [r3, #0]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <LL_ADC_SetChannelSingleDiff>:
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f003 0318 	and.w	r3, r3, #24
 8004fce:	4908      	ldr	r1, [pc, #32]	@ (8004ff0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004fd0:	40d9      	lsrs	r1, r3
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	400b      	ands	r3, r1
 8004fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	0007ffff 	.word	0x0007ffff

08004ff4 <LL_ADC_GetMultimode>:
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 031f 	and.w	r3, r3, #31
}
 8005004:	4618      	mov	r0, r3
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <LL_ADC_IsEnabled>:
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <LL_ADC_IsEnabled+0x18>
 8005024:	2301      	movs	r3, #1
 8005026:	e000      	b.n	800502a <LL_ADC_IsEnabled+0x1a>
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <LL_ADC_StartCalibration>:
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005048:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005052:	4313      	orrs	r3, r2
 8005054:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	609a      	str	r2, [r3, #8]
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <LL_ADC_IsCalibrationOnGoing>:
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005078:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800507c:	d101      	bne.n	8005082 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <LL_ADC_REG_IsConversionOngoing>:
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d101      	bne.n	80050a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80050a4:	2301      	movs	r3, #1
 80050a6:	e000      	b.n	80050aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <LL_ADC_INJ_StartConversion>:
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050c6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80050ca:	f043 0208 	orr.w	r2, r3, #8
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	609a      	str	r2, [r3, #8]
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <LL_ADC_INJ_IsConversionOngoing>:
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d101      	bne.n	80050f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800510e:	2300      	movs	r3, #0
 8005110:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_ADCEx_Calibration_Start+0x1c>
 800511c:	2302      	movs	r3, #2
 800511e:	e04d      	b.n	80051bc <HAL_ADCEx_Calibration_Start+0xb8>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff fde7 	bl	8004cfc <ADC_Disable>
 800512e:	4603      	mov	r3, r0
 8005130:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005132:	7bfb      	ldrb	r3, [r7, #15]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d136      	bne.n	80051a6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800513c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005140:	f023 0302 	bic.w	r3, r3, #2
 8005144:	f043 0202 	orr.w	r2, r3, #2
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6839      	ldr	r1, [r7, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff ff6f 	bl	8005036 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005158:	e014      	b.n	8005184 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	3301      	adds	r3, #1
 800515e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4a18      	ldr	r2, [pc, #96]	@ (80051c4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d90d      	bls.n	8005184 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800516c:	f023 0312 	bic.w	r3, r3, #18
 8005170:	f043 0210 	orr.w	r2, r3, #16
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e01b      	b.n	80051bc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff ff6d 	bl	8005068 <LL_ADC_IsCalibrationOnGoing>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e2      	bne.n	800515a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005198:	f023 0303 	bic.w	r3, r3, #3
 800519c:	f043 0201 	orr.w	r2, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80051a4:	e005      	b.n	80051b2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051aa:	f043 0210 	orr.w	r2, r3, #16
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	0004de01 	.word	0x0004de01

080051c8 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051d8:	d004      	beq.n	80051e4 <HAL_ADCEx_InjectedStart_IT+0x1c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a78      	ldr	r2, [pc, #480]	@ (80053c0 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d101      	bne.n	80051e8 <HAL_ADCEx_InjectedStart_IT+0x20>
 80051e4:	4b77      	ldr	r3, [pc, #476]	@ (80053c4 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 80051e6:	e000      	b.n	80051ea <HAL_ADCEx_InjectedStart_IT+0x22>
 80051e8:	4b77      	ldr	r3, [pc, #476]	@ (80053c8 <HAL_ADCEx_InjectedStart_IT+0x200>)
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff ff02 	bl	8004ff4 <LL_ADC_GetMultimode>
 80051f0:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff ff71 	bl	80050de <LL_ADC_INJ_IsConversionOngoing>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 8005202:	2302      	movs	r3, #2
 8005204:	e0d8      	b.n	80053b8 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005210:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005218:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d107      	bne.n	8005236 <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800522a:	f043 0220 	orr.w	r2, r3, #32
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e0c0      	b.n	80053b8 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_ADCEx_InjectedStart_IT+0x7c>
 8005240:	2302      	movs	r3, #2
 8005242:	e0b9      	b.n	80053b8 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fcbf 	bl	8004bd0 <ADC_Enable>
 8005252:	4603      	mov	r3, r0
 8005254:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	2b00      	cmp	r3, #0
 800525a:	f040 80a8 	bne.w	80053ae <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005266:	2b00      	cmp	r3, #0
 8005268:	d006      	beq.n	8005278 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800526e:	f023 0208 	bic.w	r2, r3, #8
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	661a      	str	r2, [r3, #96]	@ 0x60
 8005276:	e002      	b.n	800527e <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005282:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005286:	f023 0301 	bic.w	r3, r3, #1
 800528a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a4a      	ldr	r2, [pc, #296]	@ (80053c0 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d009      	beq.n	80052b0 <HAL_ADCEx_InjectedStart_IT+0xe8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a4a      	ldr	r2, [pc, #296]	@ (80053cc <HAL_ADCEx_InjectedStart_IT+0x204>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d002      	beq.n	80052ac <HAL_ADCEx_InjectedStart_IT+0xe4>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	e003      	b.n	80052b4 <HAL_ADCEx_InjectedStart_IT+0xec>
 80052ac:	4b48      	ldr	r3, [pc, #288]	@ (80053d0 <HAL_ADCEx_InjectedStart_IT+0x208>)
 80052ae:	e001      	b.n	80052b4 <HAL_ADCEx_InjectedStart_IT+0xec>
 80052b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6812      	ldr	r2, [r2, #0]
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d002      	beq.n	80052c2 <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d105      	bne.n	80052ce <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2260      	movs	r2, #96	@ 0x60
 80052d4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d007      	beq.n	80052fc <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052fa:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	2b08      	cmp	r3, #8
 8005302:	d110      	bne.n	8005326 <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0220 	bic.w	r2, r2, #32
 8005312:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005322:	605a      	str	r2, [r3, #4]
          break;
 8005324:	e010      	b.n	8005348 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005334:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0220 	orr.w	r2, r2, #32
 8005344:	605a      	str	r2, [r3, #4]
          break;
 8005346:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1c      	ldr	r2, [pc, #112]	@ (80053c0 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d009      	beq.n	8005366 <HAL_ADCEx_InjectedStart_IT+0x19e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a1d      	ldr	r2, [pc, #116]	@ (80053cc <HAL_ADCEx_InjectedStart_IT+0x204>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d002      	beq.n	8005362 <HAL_ADCEx_InjectedStart_IT+0x19a>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	e003      	b.n	800536a <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8005362:	4b1b      	ldr	r3, [pc, #108]	@ (80053d0 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8005364:	e001      	b.n	800536a <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8005366:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6812      	ldr	r2, [r2, #0]
 800536e:	4293      	cmp	r3, r2
 8005370:	d008      	beq.n	8005384 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d005      	beq.n	8005384 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2b06      	cmp	r3, #6
 800537c:	d002      	beq.n	8005384 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b07      	cmp	r3, #7
 8005382:	d10d      	bne.n	80053a0 <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff fdd5 	bl	8004f38 <LL_ADC_INJ_GetTrigAuto>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d110      	bne.n	80053b6 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff fe8c 	bl	80050b6 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800539e:	e00a      	b.n	80053b6 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80053ac:	e003      	b.n	80053b6 <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	50000100 	.word	0x50000100
 80053c4:	50000300 	.word	0x50000300
 80053c8:	50000700 	.word	0x50000700
 80053cc:	50000500 	.word	0x50000500
 80053d0:	50000400 	.word	0x50000400

080053d4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b0b6      	sub	sp, #216	@ 0xd8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005444:	2b01      	cmp	r3, #1
 8005446:	d102      	bne.n	800544e <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8005448:	2302      	movs	r3, #2
 800544a:	f000 bcfd 	b.w	8005e48 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005462:	2b01      	cmp	r3, #1
 8005464:	d130      	bne.n	80054c8 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2b09      	cmp	r3, #9
 800546c:	d179      	bne.n	8005562 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005472:	2b00      	cmp	r3, #0
 8005474:	d010      	beq.n	8005498 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	0e9b      	lsrs	r3, r3, #26
 800547c:	025b      	lsls	r3, r3, #9
 800547e:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005486:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800548a:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005496:	e007      	b.n	80054a8 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	0e9b      	lsrs	r3, r3, #26
 800549e:	025b      	lsls	r3, r3, #9
 80054a0:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80054a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054ae:	4b84      	ldr	r3, [pc, #528]	@ (80056c0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6812      	ldr	r2, [r2, #0]
 80054b6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80054ba:	430b      	orrs	r3, r1
 80054bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80054c4:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80054c6:	e04c      	b.n	8005562 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d11d      	bne.n	800550c <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	6a1a      	ldr	r2, [r3, #32]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00d      	beq.n	8005502 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f0:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80054f4:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005500:	e004      	b.n	800550c <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	3b01      	subs	r3, #1
 8005508:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	0e9b      	lsrs	r3, r3, #26
 8005512:	f003 021f 	and.w	r2, r3, #31
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005526:	4313      	orrs	r3, r2
 8005528:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005530:	1e5a      	subs	r2, r3, #1
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800553a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10a      	bne.n	8005562 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005552:	4b5b      	ldr	r3, [pc, #364]	@ (80056c0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8005554:	4013      	ands	r3, r2
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6812      	ldr	r2, [r2, #0]
 800555e:	430b      	orrs	r3, r1
 8005560:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff fdb9 	bl	80050de <LL_ADC_INJ_IsConversionOngoing>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d124      	bne.n	80055bc <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005578:	2b00      	cmp	r3, #0
 800557a:	d112      	bne.n	80055a2 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800558c:	055a      	lsls	r2, r3, #21
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005594:	051b      	lsls	r3, r3, #20
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	60da      	str	r2, [r3, #12]
 80055a0:	e00c      	b.n	80055bc <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80055b2:	055a      	lsls	r2, r3, #21
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff fd65 	bl	8005090 <LL_ADC_REG_IsConversionOngoing>
 80055c6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff fd85 	bl	80050de <LL_ADC_INJ_IsConversionOngoing>
 80055d4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80055d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f040 822e 	bne.w	8005a3e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80055e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f040 8229 	bne.w	8005a3e <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d116      	bne.n	800562a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005602:	2b01      	cmp	r3, #1
 8005604:	d108      	bne.n	8005618 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8005614:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8005616:	e01f      	b.n	8005658 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8005626:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8005628:	e016      	b.n	8005658 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005630:	2b01      	cmp	r3, #1
 8005632:	d109      	bne.n	8005648 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005638:	f043 0220 	orr.w	r2, r3, #32
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005646:	e007      	b.n	8005658 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8005656:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800565e:	2b01      	cmp	r3, #1
 8005660:	d110      	bne.n	8005684 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005674:	430b      	orrs	r3, r1
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f042 0202 	orr.w	r2, r2, #2
 8005680:	611a      	str	r2, [r3, #16]
 8005682:	e007      	b.n	8005694 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0202 	bic.w	r2, r2, #2
 8005692:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800569c:	d112      	bne.n	80056c4 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2200      	movs	r2, #0
 80056a8:	4619      	mov	r1, r3
 80056aa:	f7ff fc53 	bl	8004f54 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff fc2b 	bl	8004f12 <LL_ADC_SetSamplingTimeCommonConfig>
 80056bc:	e011      	b.n	80056e2 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80056be:	bf00      	nop
 80056c0:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6818      	ldr	r0, [r3, #0]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80056d0:	461a      	mov	r2, r3
 80056d2:	f7ff fc3f 	bl	8004f54 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2100      	movs	r1, #0
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff fc18 	bl	8004f12 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	695a      	ldr	r2, [r3, #20]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	08db      	lsrs	r3, r3, #3
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	fa02 f303 	lsl.w	r3, r2, r3
 80056f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	2b04      	cmp	r3, #4
 8005702:	d022      	beq.n	800574a <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6818      	ldr	r0, [r3, #0]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	6919      	ldr	r1, [r3, #16]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005714:	f7ff fb72 	bl	8004dfc <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	6919      	ldr	r1, [r3, #16]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	461a      	mov	r2, r3
 8005726:	f7ff fbbe 	bl	8004ea6 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6818      	ldr	r0, [r3, #0]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8005736:	2b01      	cmp	r3, #1
 8005738:	d102      	bne.n	8005740 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 800573a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800573e:	e000      	b.n	8005742 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8005740:	2300      	movs	r3, #0
 8005742:	461a      	mov	r2, r3
 8005744:	f7ff fbca 	bl	8004edc <LL_ADC_SetOffsetSaturation>
 8005748:	e179      	b.n	8005a3e <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2100      	movs	r1, #0
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff fb77 	bl	8004e44 <LL_ADC_GetOffsetChannel>
 8005756:	4603      	mov	r3, r0
 8005758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10a      	bne.n	8005776 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2100      	movs	r1, #0
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff fb6c 	bl	8004e44 <LL_ADC_GetOffsetChannel>
 800576c:	4603      	mov	r3, r0
 800576e:	0e9b      	lsrs	r3, r3, #26
 8005770:	f003 021f 	and.w	r2, r3, #31
 8005774:	e01e      	b.n	80057b4 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2100      	movs	r1, #0
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff fb61 	bl	8004e44 <LL_ADC_GetOffsetChannel>
 8005782:	4603      	mov	r3, r0
 8005784:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005788:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800578c:	fa93 f3a3 	rbit	r3, r3
 8005790:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8005794:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005798:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800579c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 80057a4:	2320      	movs	r3, #32
 80057a6:	e004      	b.n	80057b2 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 80057a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80057ac:	fab3 f383 	clz	r3, r3
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d105      	bne.n	80057cc <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	0e9b      	lsrs	r3, r3, #26
 80057c6:	f003 031f 	and.w	r3, r3, #31
 80057ca:	e018      	b.n	80057fe <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057d8:	fa93 f3a3 	rbit	r3, r3
 80057dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80057e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80057e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80057f0:	2320      	movs	r3, #32
 80057f2:	e004      	b.n	80057fe <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80057f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80057f8:	fab3 f383 	clz	r3, r3
 80057fc:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80057fe:	429a      	cmp	r2, r3
 8005800:	d106      	bne.n	8005810 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2200      	movs	r2, #0
 8005808:	2100      	movs	r1, #0
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff fb30 	bl	8004e70 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2101      	movs	r1, #1
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff fb14 	bl	8004e44 <LL_ADC_GetOffsetChannel>
 800581c:	4603      	mov	r3, r0
 800581e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10a      	bne.n	800583c <HAL_ADCEx_InjectedConfigChannel+0x418>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2101      	movs	r1, #1
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff fb09 	bl	8004e44 <LL_ADC_GetOffsetChannel>
 8005832:	4603      	mov	r3, r0
 8005834:	0e9b      	lsrs	r3, r3, #26
 8005836:	f003 021f 	and.w	r2, r3, #31
 800583a:	e01e      	b.n	800587a <HAL_ADCEx_InjectedConfigChannel+0x456>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2101      	movs	r1, #1
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff fafe 	bl	8004e44 <LL_ADC_GetOffsetChannel>
 8005848:	4603      	mov	r3, r0
 800584a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800584e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005852:	fa93 f3a3 	rbit	r3, r3
 8005856:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800585a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800585e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 800586a:	2320      	movs	r3, #32
 800586c:	e004      	b.n	8005878 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 800586e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005872:	fab3 f383 	clz	r3, r3
 8005876:	b2db      	uxtb	r3, r3
 8005878:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005882:	2b00      	cmp	r3, #0
 8005884:	d105      	bne.n	8005892 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	0e9b      	lsrs	r3, r3, #26
 800588c:	f003 031f 	and.w	r3, r3, #31
 8005890:	e018      	b.n	80058c4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800589e:	fa93 f3a3 	rbit	r3, r3
 80058a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80058a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80058aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80058ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80058b6:	2320      	movs	r3, #32
 80058b8:	e004      	b.n	80058c4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80058ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058be:	fab3 f383 	clz	r3, r3
 80058c2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d106      	bne.n	80058d6 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2200      	movs	r2, #0
 80058ce:	2101      	movs	r1, #1
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff facd 	bl	8004e70 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2102      	movs	r1, #2
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff fab1 	bl	8004e44 <LL_ADC_GetOffsetChannel>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2102      	movs	r1, #2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff faa6 	bl	8004e44 <LL_ADC_GetOffsetChannel>
 80058f8:	4603      	mov	r3, r0
 80058fa:	0e9b      	lsrs	r3, r3, #26
 80058fc:	f003 021f 	and.w	r2, r3, #31
 8005900:	e01e      	b.n	8005940 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2102      	movs	r1, #2
 8005908:	4618      	mov	r0, r3
 800590a:	f7ff fa9b 	bl	8004e44 <LL_ADC_GetOffsetChannel>
 800590e:	4603      	mov	r3, r0
 8005910:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005914:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005918:	fa93 f3a3 	rbit	r3, r3
 800591c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005920:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005924:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005928:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8005930:	2320      	movs	r3, #32
 8005932:	e004      	b.n	800593e <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8005934:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005938:	fab3 f383 	clz	r3, r3
 800593c:	b2db      	uxtb	r3, r3
 800593e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005948:	2b00      	cmp	r3, #0
 800594a:	d105      	bne.n	8005958 <HAL_ADCEx_InjectedConfigChannel+0x534>
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	0e9b      	lsrs	r3, r3, #26
 8005952:	f003 031f 	and.w	r3, r3, #31
 8005956:	e014      	b.n	8005982 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800595e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005960:	fa93 f3a3 	rbit	r3, r3
 8005964:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8005966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005968:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800596c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8005974:	2320      	movs	r3, #32
 8005976:	e004      	b.n	8005982 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8005978:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800597c:	fab3 f383 	clz	r3, r3
 8005980:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005982:	429a      	cmp	r2, r3
 8005984:	d106      	bne.n	8005994 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2200      	movs	r2, #0
 800598c:	2102      	movs	r1, #2
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff fa6e 	bl	8004e70 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2103      	movs	r1, #3
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff fa52 	bl	8004e44 <LL_ADC_GetOffsetChannel>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10a      	bne.n	80059c0 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2103      	movs	r1, #3
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fa47 	bl	8004e44 <LL_ADC_GetOffsetChannel>
 80059b6:	4603      	mov	r3, r0
 80059b8:	0e9b      	lsrs	r3, r3, #26
 80059ba:	f003 021f 	and.w	r2, r3, #31
 80059be:	e017      	b.n	80059f0 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2103      	movs	r1, #3
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff fa3c 	bl	8004e44 <LL_ADC_GetOffsetChannel>
 80059cc:	4603      	mov	r3, r0
 80059ce:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059d2:	fa93 f3a3 	rbit	r3, r3
 80059d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80059d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059da:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80059dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80059e2:	2320      	movs	r3, #32
 80059e4:	e003      	b.n	80059ee <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80059e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059e8:	fab3 f383 	clz	r3, r3
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d105      	bne.n	8005a08 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	0e9b      	lsrs	r3, r3, #26
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	e011      	b.n	8005a2c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a10:	fa93 f3a3 	rbit	r3, r3
 8005a14:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005a16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a18:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005a1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8005a20:	2320      	movs	r3, #32
 8005a22:	e003      	b.n	8005a2c <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8005a24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a26:	fab3 f383 	clz	r3, r3
 8005a2a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d106      	bne.n	8005a3e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2200      	movs	r2, #0
 8005a36:	2103      	movs	r1, #3
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff fa19 	bl	8004e70 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff fae4 	bl	8005010 <LL_ADC_IsEnabled>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f040 813d 	bne.w	8005cca <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6818      	ldr	r0, [r3, #0]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	6819      	ldr	r1, [r3, #0]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f7ff faa5 	bl	8004fac <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	4aa2      	ldr	r2, [pc, #648]	@ (8005cf0 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	f040 812e 	bne.w	8005cca <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10b      	bne.n	8005a96 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	0e9b      	lsrs	r3, r3, #26
 8005a84:	3301      	adds	r3, #1
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	2b09      	cmp	r3, #9
 8005a8c:	bf94      	ite	ls
 8005a8e:	2301      	movls	r3, #1
 8005a90:	2300      	movhi	r3, #0
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	e019      	b.n	8005aca <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a9e:	fa93 f3a3 	rbit	r3, r3
 8005aa2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005aa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8005aae:	2320      	movs	r3, #32
 8005ab0:	e003      	b.n	8005aba <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8005ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ab4:	fab3 f383 	clz	r3, r3
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	3301      	adds	r3, #1
 8005abc:	f003 031f 	and.w	r3, r3, #31
 8005ac0:	2b09      	cmp	r3, #9
 8005ac2:	bf94      	ite	ls
 8005ac4:	2301      	movls	r3, #1
 8005ac6:	2300      	movhi	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d079      	beq.n	8005bc2 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d107      	bne.n	8005aea <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	0e9b      	lsrs	r3, r3, #26
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	069b      	lsls	r3, r3, #26
 8005ae4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ae8:	e015      	b.n	8005b16 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005af2:	fa93 f3a3 	rbit	r3, r3
 8005af6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005af8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005afa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005afc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8005b02:	2320      	movs	r3, #32
 8005b04:	e003      	b.n	8005b0e <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8005b06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b08:	fab3 f383 	clz	r3, r3
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	3301      	adds	r3, #1
 8005b10:	069b      	lsls	r3, r3, #26
 8005b12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d109      	bne.n	8005b36 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	0e9b      	lsrs	r3, r3, #26
 8005b28:	3301      	adds	r3, #1
 8005b2a:	f003 031f 	and.w	r3, r3, #31
 8005b2e:	2101      	movs	r1, #1
 8005b30:	fa01 f303 	lsl.w	r3, r1, r3
 8005b34:	e017      	b.n	8005b66 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b3e:	fa93 f3a3 	rbit	r3, r3
 8005b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b46:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005b48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8005b4e:	2320      	movs	r3, #32
 8005b50:	e003      	b.n	8005b5a <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8005b52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b54:	fab3 f383 	clz	r3, r3
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	f003 031f 	and.w	r3, r3, #31
 8005b60:	2101      	movs	r1, #1
 8005b62:	fa01 f303 	lsl.w	r3, r1, r3
 8005b66:	ea42 0103 	orr.w	r1, r2, r3
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10a      	bne.n	8005b8c <HAL_ADCEx_InjectedConfigChannel+0x768>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	0e9b      	lsrs	r3, r3, #26
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	f003 021f 	and.w	r2, r3, #31
 8005b82:	4613      	mov	r3, r2
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	4413      	add	r3, r2
 8005b88:	051b      	lsls	r3, r3, #20
 8005b8a:	e018      	b.n	8005bbe <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b94:	fa93 f3a3 	rbit	r3, r3
 8005b98:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8005ba4:	2320      	movs	r3, #32
 8005ba6:	e003      	b.n	8005bb0 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005baa:	fab3 f383 	clz	r3, r3
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	f003 021f 	and.w	r2, r3, #31
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	4413      	add	r3, r2
 8005bbc:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	e07e      	b.n	8005cc0 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	0e9b      	lsrs	r3, r3, #26
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	069b      	lsls	r3, r3, #26
 8005bd8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005bdc:	e015      	b.n	8005c0a <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be6:	fa93 f3a3 	rbit	r3, r3
 8005bea:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8005bf6:	2320      	movs	r3, #32
 8005bf8:	e003      	b.n	8005c02 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8005bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bfc:	fab3 f383 	clz	r3, r3
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	3301      	adds	r3, #1
 8005c04:	069b      	lsls	r3, r3, #26
 8005c06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <HAL_ADCEx_InjectedConfigChannel+0x806>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	0e9b      	lsrs	r3, r3, #26
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	2101      	movs	r1, #1
 8005c24:	fa01 f303 	lsl.w	r3, r1, r3
 8005c28:	e017      	b.n	8005c5a <HAL_ADCEx_InjectedConfigChannel+0x836>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	fa93 f3a3 	rbit	r3, r3
 8005c36:	61bb      	str	r3, [r7, #24]
  return result;
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8005c42:	2320      	movs	r3, #32
 8005c44:	e003      	b.n	8005c4e <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	fab3 f383 	clz	r3, r3
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	3301      	adds	r3, #1
 8005c50:	f003 031f 	and.w	r3, r3, #31
 8005c54:	2101      	movs	r1, #1
 8005c56:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5a:	ea42 0103 	orr.w	r1, r2, r3
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10d      	bne.n	8005c86 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	0e9b      	lsrs	r3, r3, #26
 8005c70:	3301      	adds	r3, #1
 8005c72:	f003 021f 	and.w	r2, r3, #31
 8005c76:	4613      	mov	r3, r2
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3b1e      	subs	r3, #30
 8005c7e:	051b      	lsls	r3, r3, #20
 8005c80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005c84:	e01b      	b.n	8005cbe <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	fa93 f3a3 	rbit	r3, r3
 8005c92:	60fb      	str	r3, [r7, #12]
  return result;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8005c9e:	2320      	movs	r3, #32
 8005ca0:	e003      	b.n	8005caa <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	fab3 f383 	clz	r3, r3
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	3301      	adds	r3, #1
 8005cac:	f003 021f 	and.w	r2, r3, #31
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	4413      	add	r3, r2
 8005cb6:	3b1e      	subs	r3, #30
 8005cb8:	051b      	lsls	r3, r3, #20
 8005cba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cbe:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	f7ff f945 	bl	8004f54 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	4b09      	ldr	r3, [pc, #36]	@ (8005cf4 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 80b2 	beq.w	8005e3c <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ce0:	d004      	beq.n	8005cec <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a04      	ldr	r2, [pc, #16]	@ (8005cf8 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d109      	bne.n	8005d00 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8005cec:	4b03      	ldr	r3, [pc, #12]	@ (8005cfc <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8005cee:	e008      	b.n	8005d02 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8005cf0:	407f0000 	.word	0x407f0000
 8005cf4:	80080000 	.word	0x80080000
 8005cf8:	50000100 	.word	0x50000100
 8005cfc:	50000300 	.word	0x50000300
 8005d00:	4b53      	ldr	r3, [pc, #332]	@ (8005e50 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff f86c 	bl	8004de0 <LL_ADC_GetCommonPathInternalCh>
 8005d08:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a50      	ldr	r2, [pc, #320]	@ (8005e54 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d004      	beq.n	8005d20 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a4f      	ldr	r2, [pc, #316]	@ (8005e58 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d139      	bne.n	8005d94 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005d20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d133      	bne.n	8005d94 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d34:	d004      	beq.n	8005d40 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a48      	ldr	r2, [pc, #288]	@ (8005e5c <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d17a      	bne.n	8005e36 <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d48:	d004      	beq.n	8005d54 <HAL_ADCEx_InjectedConfigChannel+0x930>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a44      	ldr	r2, [pc, #272]	@ (8005e60 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d101      	bne.n	8005d58 <HAL_ADCEx_InjectedConfigChannel+0x934>
 8005d54:	4a43      	ldr	r2, [pc, #268]	@ (8005e64 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8005d56:	e000      	b.n	8005d5a <HAL_ADCEx_InjectedConfigChannel+0x936>
 8005d58:	4a3d      	ldr	r2, [pc, #244]	@ (8005e50 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005d5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d62:	4619      	mov	r1, r3
 8005d64:	4610      	mov	r0, r2
 8005d66:	f7ff f828 	bl	8004dba <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8005d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8005e68 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	099b      	lsrs	r3, r3, #6
 8005d70:	4a3e      	ldr	r2, [pc, #248]	@ (8005e6c <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 8005d72:	fba2 2303 	umull	r2, r3, r2, r3
 8005d76:	099a      	lsrs	r2, r3, #6
 8005d78:	4613      	mov	r3, r2
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8005d82:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8005d84:	e002      	b.n	8005d8c <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1f9      	bne.n	8005d86 <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d92:	e050      	b.n	8005e36 <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a35      	ldr	r2, [pc, #212]	@ (8005e70 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d125      	bne.n	8005dea <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005d9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005da2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d11f      	bne.n	8005dea <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a2c      	ldr	r2, [pc, #176]	@ (8005e60 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d104      	bne.n	8005dbe <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a2e      	ldr	r2, [pc, #184]	@ (8005e74 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d03d      	beq.n	8005e3a <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005dc6:	d004      	beq.n	8005dd2 <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a24      	ldr	r2, [pc, #144]	@ (8005e60 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d101      	bne.n	8005dd6 <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8005dd2:	4a24      	ldr	r2, [pc, #144]	@ (8005e64 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8005dd4:	e000      	b.n	8005dd8 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 8005dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005e50 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005dd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005ddc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005de0:	4619      	mov	r1, r3
 8005de2:	4610      	mov	r0, r2
 8005de4:	f7fe ffe9 	bl	8004dba <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005de8:	e027      	b.n	8005e3a <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a22      	ldr	r2, [pc, #136]	@ (8005e78 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d123      	bne.n	8005e3c <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005df4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005df8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d11d      	bne.n	8005e3c <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a16      	ldr	r2, [pc, #88]	@ (8005e60 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d018      	beq.n	8005e3c <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e12:	d004      	beq.n	8005e1e <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a11      	ldr	r2, [pc, #68]	@ (8005e60 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d101      	bne.n	8005e22 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8005e1e:	4a11      	ldr	r2, [pc, #68]	@ (8005e64 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8005e20:	e000      	b.n	8005e24 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8005e22:	4a0b      	ldr	r2, [pc, #44]	@ (8005e50 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005e24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005e28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4610      	mov	r0, r2
 8005e30:	f7fe ffc3 	bl	8004dba <LL_ADC_SetCommonPathInternalCh>
 8005e34:	e002      	b.n	8005e3c <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e36:	bf00      	nop
 8005e38:	e000      	b.n	8005e3c <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e3a:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005e44:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	37d8      	adds	r7, #216	@ 0xd8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	50000700 	.word	0x50000700
 8005e54:	c3210000 	.word	0xc3210000
 8005e58:	90c00010 	.word	0x90c00010
 8005e5c:	50000600 	.word	0x50000600
 8005e60:	50000100 	.word	0x50000100
 8005e64:	50000300 	.word	0x50000300
 8005e68:	20000000 	.word	0x20000000
 8005e6c:	053e2d63 	.word	0x053e2d63
 8005e70:	c7520000 	.word	0xc7520000
 8005e74:	50000500 	.word	0x50000500
 8005e78:	cb840000 	.word	0xcb840000

08005e7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005e7c:	b590      	push	{r4, r7, lr}
 8005e7e:	b0a1      	sub	sp, #132	@ 0x84
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e0e7      	b.n	800606a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005eb2:	d102      	bne.n	8005eba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005eb4:	4b6f      	ldr	r3, [pc, #444]	@ (8006074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005eb6:	60bb      	str	r3, [r7, #8]
 8005eb8:	e009      	b.n	8005ece <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a6e      	ldr	r2, [pc, #440]	@ (8006078 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d102      	bne.n	8005eca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005ec4:	4b6d      	ldr	r3, [pc, #436]	@ (800607c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005ec6:	60bb      	str	r3, [r7, #8]
 8005ec8:	e001      	b.n	8005ece <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10b      	bne.n	8005eec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed8:	f043 0220 	orr.w	r2, r3, #32
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e0be      	b.n	800606a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff f8ce 	bl	8005090 <LL_ADC_REG_IsConversionOngoing>
 8005ef4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff f8c8 	bl	8005090 <LL_ADC_REG_IsConversionOngoing>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f040 80a0 	bne.w	8006048 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005f08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f040 809c 	bne.w	8006048 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f18:	d004      	beq.n	8005f24 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a55      	ldr	r2, [pc, #340]	@ (8006074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d101      	bne.n	8005f28 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005f24:	4b56      	ldr	r3, [pc, #344]	@ (8006080 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005f26:	e000      	b.n	8005f2a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005f28:	4b56      	ldr	r3, [pc, #344]	@ (8006084 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005f2a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d04b      	beq.n	8005fcc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005f34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	6859      	ldr	r1, [r3, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f46:	035b      	lsls	r3, r3, #13
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f58:	d004      	beq.n	8005f64 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a45      	ldr	r2, [pc, #276]	@ (8006074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d10f      	bne.n	8005f84 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005f64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005f68:	f7ff f852 	bl	8005010 <LL_ADC_IsEnabled>
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	4841      	ldr	r0, [pc, #260]	@ (8006074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f70:	f7ff f84e 	bl	8005010 <LL_ADC_IsEnabled>
 8005f74:	4603      	mov	r3, r0
 8005f76:	4323      	orrs	r3, r4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	bf0c      	ite	eq
 8005f7c:	2301      	moveq	r3, #1
 8005f7e:	2300      	movne	r3, #0
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	e012      	b.n	8005faa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005f84:	483c      	ldr	r0, [pc, #240]	@ (8006078 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005f86:	f7ff f843 	bl	8005010 <LL_ADC_IsEnabled>
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	483b      	ldr	r0, [pc, #236]	@ (800607c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005f8e:	f7ff f83f 	bl	8005010 <LL_ADC_IsEnabled>
 8005f92:	4603      	mov	r3, r0
 8005f94:	431c      	orrs	r4, r3
 8005f96:	483c      	ldr	r0, [pc, #240]	@ (8006088 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005f98:	f7ff f83a 	bl	8005010 <LL_ADC_IsEnabled>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	4323      	orrs	r3, r4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	bf0c      	ite	eq
 8005fa4:	2301      	moveq	r3, #1
 8005fa6:	2300      	movne	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d056      	beq.n	800605c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005fae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005fb6:	f023 030f 	bic.w	r3, r3, #15
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	6811      	ldr	r1, [r2, #0]
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	6892      	ldr	r2, [r2, #8]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fc8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005fca:	e047      	b.n	800605c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005fcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005fd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fd6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fe0:	d004      	beq.n	8005fec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a23      	ldr	r2, [pc, #140]	@ (8006074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d10f      	bne.n	800600c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005fec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005ff0:	f7ff f80e 	bl	8005010 <LL_ADC_IsEnabled>
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	481f      	ldr	r0, [pc, #124]	@ (8006074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ff8:	f7ff f80a 	bl	8005010 <LL_ADC_IsEnabled>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	4323      	orrs	r3, r4
 8006000:	2b00      	cmp	r3, #0
 8006002:	bf0c      	ite	eq
 8006004:	2301      	moveq	r3, #1
 8006006:	2300      	movne	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	e012      	b.n	8006032 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800600c:	481a      	ldr	r0, [pc, #104]	@ (8006078 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800600e:	f7fe ffff 	bl	8005010 <LL_ADC_IsEnabled>
 8006012:	4604      	mov	r4, r0
 8006014:	4819      	ldr	r0, [pc, #100]	@ (800607c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006016:	f7fe fffb 	bl	8005010 <LL_ADC_IsEnabled>
 800601a:	4603      	mov	r3, r0
 800601c:	431c      	orrs	r4, r3
 800601e:	481a      	ldr	r0, [pc, #104]	@ (8006088 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006020:	f7fe fff6 	bl	8005010 <LL_ADC_IsEnabled>
 8006024:	4603      	mov	r3, r0
 8006026:	4323      	orrs	r3, r4
 8006028:	2b00      	cmp	r3, #0
 800602a:	bf0c      	ite	eq
 800602c:	2301      	moveq	r3, #1
 800602e:	2300      	movne	r3, #0
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d012      	beq.n	800605c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006036:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800603e:	f023 030f 	bic.w	r3, r3, #15
 8006042:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006044:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006046:	e009      	b.n	800605c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800604c:	f043 0220 	orr.w	r2, r3, #32
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800605a:	e000      	b.n	800605e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800605c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006066:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800606a:	4618      	mov	r0, r3
 800606c:	3784      	adds	r7, #132	@ 0x84
 800606e:	46bd      	mov	sp, r7
 8006070:	bd90      	pop	{r4, r7, pc}
 8006072:	bf00      	nop
 8006074:	50000100 	.word	0x50000100
 8006078:	50000400 	.word	0x50000400
 800607c:	50000500 	.word	0x50000500
 8006080:	50000300 	.word	0x50000300
 8006084:	50000700 	.word	0x50000700
 8006088:	50000600 	.word	0x50000600

0800608c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800609c:	4b0c      	ldr	r3, [pc, #48]	@ (80060d0 <__NVIC_SetPriorityGrouping+0x44>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80060a8:	4013      	ands	r3, r2
 80060aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80060b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060be:	4a04      	ldr	r2, [pc, #16]	@ (80060d0 <__NVIC_SetPriorityGrouping+0x44>)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	60d3      	str	r3, [r2, #12]
}
 80060c4:	bf00      	nop
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	e000ed00 	.word	0xe000ed00

080060d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060d8:	4b04      	ldr	r3, [pc, #16]	@ (80060ec <__NVIC_GetPriorityGrouping+0x18>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	0a1b      	lsrs	r3, r3, #8
 80060de:	f003 0307 	and.w	r3, r3, #7
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	e000ed00 	.word	0xe000ed00

080060f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	4603      	mov	r3, r0
 80060f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	db0b      	blt.n	800611a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006102:	79fb      	ldrb	r3, [r7, #7]
 8006104:	f003 021f 	and.w	r2, r3, #31
 8006108:	4907      	ldr	r1, [pc, #28]	@ (8006128 <__NVIC_EnableIRQ+0x38>)
 800610a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	2001      	movs	r0, #1
 8006112:	fa00 f202 	lsl.w	r2, r0, r2
 8006116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	e000e100 	.word	0xe000e100

0800612c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	6039      	str	r1, [r7, #0]
 8006136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800613c:	2b00      	cmp	r3, #0
 800613e:	db0a      	blt.n	8006156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	b2da      	uxtb	r2, r3
 8006144:	490c      	ldr	r1, [pc, #48]	@ (8006178 <__NVIC_SetPriority+0x4c>)
 8006146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800614a:	0112      	lsls	r2, r2, #4
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	440b      	add	r3, r1
 8006150:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006154:	e00a      	b.n	800616c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	b2da      	uxtb	r2, r3
 800615a:	4908      	ldr	r1, [pc, #32]	@ (800617c <__NVIC_SetPriority+0x50>)
 800615c:	79fb      	ldrb	r3, [r7, #7]
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	3b04      	subs	r3, #4
 8006164:	0112      	lsls	r2, r2, #4
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	440b      	add	r3, r1
 800616a:	761a      	strb	r2, [r3, #24]
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	e000e100 	.word	0xe000e100
 800617c:	e000ed00 	.word	0xe000ed00

08006180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006180:	b480      	push	{r7}
 8006182:	b089      	sub	sp, #36	@ 0x24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f1c3 0307 	rsb	r3, r3, #7
 800619a:	2b04      	cmp	r3, #4
 800619c:	bf28      	it	cs
 800619e:	2304      	movcs	r3, #4
 80061a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	3304      	adds	r3, #4
 80061a6:	2b06      	cmp	r3, #6
 80061a8:	d902      	bls.n	80061b0 <NVIC_EncodePriority+0x30>
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	3b03      	subs	r3, #3
 80061ae:	e000      	b.n	80061b2 <NVIC_EncodePriority+0x32>
 80061b0:	2300      	movs	r3, #0
 80061b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061b4:	f04f 32ff 	mov.w	r2, #4294967295
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	43da      	mvns	r2, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	401a      	ands	r2, r3
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061c8:	f04f 31ff 	mov.w	r1, #4294967295
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	fa01 f303 	lsl.w	r3, r1, r3
 80061d2:	43d9      	mvns	r1, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061d8:	4313      	orrs	r3, r2
         );
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3724      	adds	r7, #36	@ 0x24
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061f8:	d301      	bcc.n	80061fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061fa:	2301      	movs	r3, #1
 80061fc:	e00f      	b.n	800621e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006228 <SysTick_Config+0x40>)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3b01      	subs	r3, #1
 8006204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006206:	210f      	movs	r1, #15
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	f7ff ff8e 	bl	800612c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006210:	4b05      	ldr	r3, [pc, #20]	@ (8006228 <SysTick_Config+0x40>)
 8006212:	2200      	movs	r2, #0
 8006214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006216:	4b04      	ldr	r3, [pc, #16]	@ (8006228 <SysTick_Config+0x40>)
 8006218:	2207      	movs	r2, #7
 800621a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	e000e010 	.word	0xe000e010

0800622c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff ff29 	bl	800608c <__NVIC_SetPriorityGrouping>
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b086      	sub	sp, #24
 8006246:	af00      	add	r7, sp, #0
 8006248:	4603      	mov	r3, r0
 800624a:	60b9      	str	r1, [r7, #8]
 800624c:	607a      	str	r2, [r7, #4]
 800624e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006250:	f7ff ff40 	bl	80060d4 <__NVIC_GetPriorityGrouping>
 8006254:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	68b9      	ldr	r1, [r7, #8]
 800625a:	6978      	ldr	r0, [r7, #20]
 800625c:	f7ff ff90 	bl	8006180 <NVIC_EncodePriority>
 8006260:	4602      	mov	r2, r0
 8006262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006266:	4611      	mov	r1, r2
 8006268:	4618      	mov	r0, r3
 800626a:	f7ff ff5f 	bl	800612c <__NVIC_SetPriority>
}
 800626e:	bf00      	nop
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	4603      	mov	r3, r0
 800627e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff ff33 	bl	80060f0 <__NVIC_EnableIRQ>
}
 800628a:	bf00      	nop
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7ff ffa4 	bl	80061e8 <SysTick_Config>
 80062a0:	4603      	mov	r3, r0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e08d      	b.n	80063da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	4b47      	ldr	r3, [pc, #284]	@ (80063e4 <HAL_DMA_Init+0x138>)
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d80f      	bhi.n	80062ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	4b45      	ldr	r3, [pc, #276]	@ (80063e8 <HAL_DMA_Init+0x13c>)
 80062d2:	4413      	add	r3, r2
 80062d4:	4a45      	ldr	r2, [pc, #276]	@ (80063ec <HAL_DMA_Init+0x140>)
 80062d6:	fba2 2303 	umull	r2, r3, r2, r3
 80062da:	091b      	lsrs	r3, r3, #4
 80062dc:	009a      	lsls	r2, r3, #2
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a42      	ldr	r2, [pc, #264]	@ (80063f0 <HAL_DMA_Init+0x144>)
 80062e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80062e8:	e00e      	b.n	8006308 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	4b40      	ldr	r3, [pc, #256]	@ (80063f4 <HAL_DMA_Init+0x148>)
 80062f2:	4413      	add	r3, r2
 80062f4:	4a3d      	ldr	r2, [pc, #244]	@ (80063ec <HAL_DMA_Init+0x140>)
 80062f6:	fba2 2303 	umull	r2, r3, r2, r3
 80062fa:	091b      	lsrs	r3, r3, #4
 80062fc:	009a      	lsls	r2, r3, #2
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a3c      	ldr	r2, [pc, #240]	@ (80063f8 <HAL_DMA_Init+0x14c>)
 8006306:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800631e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006322:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800632c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fa76 	bl	800684c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006368:	d102      	bne.n	8006370 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006384:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d010      	beq.n	80063b0 <HAL_DMA_Init+0x104>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2b04      	cmp	r3, #4
 8006394:	d80c      	bhi.n	80063b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa96 	bl	80068c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80063ac:	605a      	str	r2, [r3, #4]
 80063ae:	e008      	b.n	80063c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40020407 	.word	0x40020407
 80063e8:	bffdfff8 	.word	0xbffdfff8
 80063ec:	cccccccd 	.word	0xcccccccd
 80063f0:	40020000 	.word	0x40020000
 80063f4:	bffdfbf8 	.word	0xbffdfbf8
 80063f8:	40020400 	.word	0x40020400

080063fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_DMA_Start_IT+0x20>
 8006418:	2302      	movs	r3, #2
 800641a:	e066      	b.n	80064ea <HAL_DMA_Start_IT+0xee>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b01      	cmp	r3, #1
 800642e:	d155      	bne.n	80064dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0201 	bic.w	r2, r2, #1
 800644c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	68b9      	ldr	r1, [r7, #8]
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 f9bb 	bl	80067d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645e:	2b00      	cmp	r3, #0
 8006460:	d008      	beq.n	8006474 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 020e 	orr.w	r2, r2, #14
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	e00f      	b.n	8006494 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0204 	bic.w	r2, r2, #4
 8006482:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 020a 	orr.w	r2, r2, #10
 8006492:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d007      	beq.n	80064ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f042 0201 	orr.w	r2, r2, #1
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	e005      	b.n	80064e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80064e4:	2302      	movs	r3, #2
 80064e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b085      	sub	sp, #20
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d005      	beq.n	8006516 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2204      	movs	r2, #4
 800650e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	73fb      	strb	r3, [r7, #15]
 8006514:	e037      	b.n	8006586 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 020e 	bic.w	r2, r2, #14
 8006524:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006530:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006534:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0201 	bic.w	r2, r2, #1
 8006544:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800654a:	f003 021f 	and.w	r2, r3, #31
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006552:	2101      	movs	r1, #1
 8006554:	fa01 f202 	lsl.w	r2, r1, r2
 8006558:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006562:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00c      	beq.n	8006586 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006576:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800657a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006584:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006596:	7bfb      	ldrb	r3, [r7, #15]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d00d      	beq.n	80065d8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2204      	movs	r2, #4
 80065c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	73fb      	strb	r3, [r7, #15]
 80065d6:	e047      	b.n	8006668 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 020e 	bic.w	r2, r2, #14
 80065e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0201 	bic.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006602:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006606:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660c:	f003 021f 	and.w	r2, r3, #31
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006614:	2101      	movs	r1, #1
 8006616:	fa01 f202 	lsl.w	r2, r1, r2
 800661a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006624:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00c      	beq.n	8006648 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006638:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800663c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006646:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	4798      	blx	r3
    }
  }
  return status;
 8006668:	7bfb      	ldrb	r3, [r7, #15]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668e:	f003 031f 	and.w	r3, r3, #31
 8006692:	2204      	movs	r2, #4
 8006694:	409a      	lsls	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4013      	ands	r3, r2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d026      	beq.n	80066ec <HAL_DMA_IRQHandler+0x7a>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d021      	beq.n	80066ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d107      	bne.n	80066c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0204 	bic.w	r2, r2, #4
 80066c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ca:	f003 021f 	and.w	r2, r3, #31
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d2:	2104      	movs	r1, #4
 80066d4:	fa01 f202 	lsl.w	r2, r1, r2
 80066d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d071      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80066ea:	e06c      	b.n	80067c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f0:	f003 031f 	and.w	r3, r3, #31
 80066f4:	2202      	movs	r2, #2
 80066f6:	409a      	lsls	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4013      	ands	r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d02e      	beq.n	800675e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d029      	beq.n	800675e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0320 	and.w	r3, r3, #32
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10b      	bne.n	8006730 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 020a 	bic.w	r2, r2, #10
 8006726:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006734:	f003 021f 	and.w	r2, r3, #31
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673c:	2102      	movs	r1, #2
 800673e:	fa01 f202 	lsl.w	r2, r1, r2
 8006742:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d038      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800675c:	e033      	b.n	80067c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006762:	f003 031f 	and.w	r3, r3, #31
 8006766:	2208      	movs	r2, #8
 8006768:	409a      	lsls	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4013      	ands	r3, r2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d02a      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	f003 0308 	and.w	r3, r3, #8
 8006778:	2b00      	cmp	r3, #0
 800677a:	d025      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 020e 	bic.w	r2, r2, #14
 800678a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006790:	f003 021f 	and.w	r2, r3, #31
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006798:	2101      	movs	r1, #1
 800679a:	fa01 f202 	lsl.w	r2, r1, r2
 800679e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d004      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80067c6:	bf00      	nop
 80067c8:	bf00      	nop
}
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80067e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80067f8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fe:	f003 021f 	and.w	r2, r3, #31
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006806:	2101      	movs	r1, #1
 8006808:	fa01 f202 	lsl.w	r2, r1, r2
 800680c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	2b10      	cmp	r3, #16
 800681c:	d108      	bne.n	8006830 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800682e:	e007      	b.n	8006840 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	60da      	str	r2, [r3, #12]
}
 8006840:	bf00      	nop
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	461a      	mov	r2, r3
 800685a:	4b16      	ldr	r3, [pc, #88]	@ (80068b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800685c:	429a      	cmp	r2, r3
 800685e:	d802      	bhi.n	8006866 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006860:	4b15      	ldr	r3, [pc, #84]	@ (80068b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006862:	617b      	str	r3, [r7, #20]
 8006864:	e001      	b.n	800686a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006866:	4b15      	ldr	r3, [pc, #84]	@ (80068bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006868:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	b2db      	uxtb	r3, r3
 8006874:	3b08      	subs	r3, #8
 8006876:	4a12      	ldr	r2, [pc, #72]	@ (80068c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006878:	fba2 2303 	umull	r2, r3, r2, r3
 800687c:	091b      	lsrs	r3, r3, #4
 800687e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006884:	089b      	lsrs	r3, r3, #2
 8006886:	009a      	lsls	r2, r3, #2
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	4413      	add	r3, r2
 800688c:	461a      	mov	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a0b      	ldr	r2, [pc, #44]	@ (80068c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006896:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f003 031f 	and.w	r3, r3, #31
 800689e:	2201      	movs	r2, #1
 80068a0:	409a      	lsls	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80068a6:	bf00      	nop
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	40020407 	.word	0x40020407
 80068b8:	40020800 	.word	0x40020800
 80068bc:	40020820 	.word	0x40020820
 80068c0:	cccccccd 	.word	0xcccccccd
 80068c4:	40020880 	.word	0x40020880

080068c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4b0b      	ldr	r3, [pc, #44]	@ (8006908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80068dc:	4413      	add	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	461a      	mov	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a08      	ldr	r2, [pc, #32]	@ (800690c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80068ea:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	f003 031f 	and.w	r3, r3, #31
 80068f4:	2201      	movs	r2, #1
 80068f6:	409a      	lsls	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80068fc:	bf00      	nop
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	1000823f 	.word	0x1000823f
 800690c:	40020940 	.word	0x40020940

08006910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800691a:	2300      	movs	r3, #0
 800691c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800691e:	e15a      	b.n	8006bd6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	2101      	movs	r1, #1
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	fa01 f303 	lsl.w	r3, r1, r3
 800692c:	4013      	ands	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 814c 	beq.w	8006bd0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f003 0303 	and.w	r3, r3, #3
 8006940:	2b01      	cmp	r3, #1
 8006942:	d005      	beq.n	8006950 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800694c:	2b02      	cmp	r3, #2
 800694e:	d130      	bne.n	80069b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	2203      	movs	r2, #3
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	43db      	mvns	r3, r3
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4013      	ands	r3, r2
 8006966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	fa02 f303 	lsl.w	r3, r2, r3
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	4313      	orrs	r3, r2
 8006978:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006986:	2201      	movs	r2, #1
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	fa02 f303 	lsl.w	r3, r2, r3
 800698e:	43db      	mvns	r3, r3
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	4013      	ands	r3, r2
 8006994:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	091b      	lsrs	r3, r3, #4
 800699c:	f003 0201 	and.w	r2, r3, #1
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	fa02 f303 	lsl.w	r3, r2, r3
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	2b03      	cmp	r3, #3
 80069bc:	d017      	beq.n	80069ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	2203      	movs	r2, #3
 80069ca:	fa02 f303 	lsl.w	r3, r2, r3
 80069ce:	43db      	mvns	r3, r3
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	4013      	ands	r3, r2
 80069d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	689a      	ldr	r2, [r3, #8]
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	fa02 f303 	lsl.w	r3, r2, r3
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f003 0303 	and.w	r3, r3, #3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d123      	bne.n	8006a42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	08da      	lsrs	r2, r3, #3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3208      	adds	r2, #8
 8006a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	220f      	movs	r2, #15
 8006a12:	fa02 f303 	lsl.w	r3, r2, r3
 8006a16:	43db      	mvns	r3, r3
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	691a      	ldr	r2, [r3, #16]
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f003 0307 	and.w	r3, r3, #7
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	08da      	lsrs	r2, r3, #3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3208      	adds	r2, #8
 8006a3c:	6939      	ldr	r1, [r7, #16]
 8006a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	2203      	movs	r2, #3
 8006a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a52:	43db      	mvns	r3, r3
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	4013      	ands	r3, r2
 8006a58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f003 0203 	and.w	r2, r3, #3
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 80a6 	beq.w	8006bd0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a84:	4b5b      	ldr	r3, [pc, #364]	@ (8006bf4 <HAL_GPIO_Init+0x2e4>)
 8006a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a88:	4a5a      	ldr	r2, [pc, #360]	@ (8006bf4 <HAL_GPIO_Init+0x2e4>)
 8006a8a:	f043 0301 	orr.w	r3, r3, #1
 8006a8e:	6613      	str	r3, [r2, #96]	@ 0x60
 8006a90:	4b58      	ldr	r3, [pc, #352]	@ (8006bf4 <HAL_GPIO_Init+0x2e4>)
 8006a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	60bb      	str	r3, [r7, #8]
 8006a9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a9c:	4a56      	ldr	r2, [pc, #344]	@ (8006bf8 <HAL_GPIO_Init+0x2e8>)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	089b      	lsrs	r3, r3, #2
 8006aa2:	3302      	adds	r3, #2
 8006aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f003 0303 	and.w	r3, r3, #3
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	220f      	movs	r2, #15
 8006ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab8:	43db      	mvns	r3, r3
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4013      	ands	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006ac6:	d01f      	beq.n	8006b08 <HAL_GPIO_Init+0x1f8>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a4c      	ldr	r2, [pc, #304]	@ (8006bfc <HAL_GPIO_Init+0x2ec>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d019      	beq.n	8006b04 <HAL_GPIO_Init+0x1f4>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a4b      	ldr	r2, [pc, #300]	@ (8006c00 <HAL_GPIO_Init+0x2f0>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d013      	beq.n	8006b00 <HAL_GPIO_Init+0x1f0>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a4a      	ldr	r2, [pc, #296]	@ (8006c04 <HAL_GPIO_Init+0x2f4>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00d      	beq.n	8006afc <HAL_GPIO_Init+0x1ec>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a49      	ldr	r2, [pc, #292]	@ (8006c08 <HAL_GPIO_Init+0x2f8>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d007      	beq.n	8006af8 <HAL_GPIO_Init+0x1e8>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a48      	ldr	r2, [pc, #288]	@ (8006c0c <HAL_GPIO_Init+0x2fc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d101      	bne.n	8006af4 <HAL_GPIO_Init+0x1e4>
 8006af0:	2305      	movs	r3, #5
 8006af2:	e00a      	b.n	8006b0a <HAL_GPIO_Init+0x1fa>
 8006af4:	2306      	movs	r3, #6
 8006af6:	e008      	b.n	8006b0a <HAL_GPIO_Init+0x1fa>
 8006af8:	2304      	movs	r3, #4
 8006afa:	e006      	b.n	8006b0a <HAL_GPIO_Init+0x1fa>
 8006afc:	2303      	movs	r3, #3
 8006afe:	e004      	b.n	8006b0a <HAL_GPIO_Init+0x1fa>
 8006b00:	2302      	movs	r3, #2
 8006b02:	e002      	b.n	8006b0a <HAL_GPIO_Init+0x1fa>
 8006b04:	2301      	movs	r3, #1
 8006b06:	e000      	b.n	8006b0a <HAL_GPIO_Init+0x1fa>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	f002 0203 	and.w	r2, r2, #3
 8006b10:	0092      	lsls	r2, r2, #2
 8006b12:	4093      	lsls	r3, r2
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b1a:	4937      	ldr	r1, [pc, #220]	@ (8006bf8 <HAL_GPIO_Init+0x2e8>)
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	089b      	lsrs	r3, r3, #2
 8006b20:	3302      	adds	r3, #2
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b28:	4b39      	ldr	r3, [pc, #228]	@ (8006c10 <HAL_GPIO_Init+0x300>)
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	43db      	mvns	r3, r3
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	4013      	ands	r3, r2
 8006b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006b4c:	4a30      	ldr	r2, [pc, #192]	@ (8006c10 <HAL_GPIO_Init+0x300>)
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006b52:	4b2f      	ldr	r3, [pc, #188]	@ (8006c10 <HAL_GPIO_Init+0x300>)
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	43db      	mvns	r3, r3
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006b76:	4a26      	ldr	r2, [pc, #152]	@ (8006c10 <HAL_GPIO_Init+0x300>)
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006b7c:	4b24      	ldr	r3, [pc, #144]	@ (8006c10 <HAL_GPIO_Init+0x300>)
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	43db      	mvns	r3, r3
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8006c10 <HAL_GPIO_Init+0x300>)
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8006c10 <HAL_GPIO_Init+0x300>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	43db      	mvns	r3, r3
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006bca:	4a11      	ldr	r2, [pc, #68]	@ (8006c10 <HAL_GPIO_Init+0x300>)
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f47f ae9d 	bne.w	8006920 <HAL_GPIO_Init+0x10>
  }
}
 8006be6:	bf00      	nop
 8006be8:	bf00      	nop
 8006bea:	371c      	adds	r7, #28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	40010000 	.word	0x40010000
 8006bfc:	48000400 	.word	0x48000400
 8006c00:	48000800 	.word	0x48000800
 8006c04:	48000c00 	.word	0x48000c00
 8006c08:	48001000 	.word	0x48001000
 8006c0c:	48001400 	.word	0x48001400
 8006c10:	40010400 	.word	0x40010400

08006c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	807b      	strh	r3, [r7, #2]
 8006c20:	4613      	mov	r3, r2
 8006c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c24:	787b      	ldrb	r3, [r7, #1]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c2a:	887a      	ldrh	r2, [r7, #2]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c30:	e002      	b.n	8006c38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c32:	887a      	ldrh	r2, [r7, #2]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e0be      	b.n	8006dd4 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d02e      	beq.n	8006d00 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a4d      	ldr	r2, [pc, #308]	@ (8006ddc <HAL_HRTIM_Init+0x198>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d10b      	bne.n	8006cc4 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8006cac:	4b4c      	ldr	r3, [pc, #304]	@ (8006de0 <HAL_HRTIM_Init+0x19c>)
 8006cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8006de0 <HAL_HRTIM_Init+0x19c>)
 8006cb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006cb6:	6613      	str	r3, [r2, #96]	@ 0x60
 8006cb8:	4b49      	ldr	r3, [pc, #292]	@ (8006de0 <HAL_HRTIM_Init+0x19c>)
 8006cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006cd2:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006ce8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7fa fe9f 	bl	8001a44 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d012      	beq.n	8006d38 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d20:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	75fb      	strb	r3, [r7, #23]
 8006d4c:	e03e      	b.n	8006dcc <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8006d4e:	7dfa      	ldrb	r2, [r7, #23]
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	4613      	mov	r3, r2
 8006d54:	00db      	lsls	r3, r3, #3
 8006d56:	1a9b      	subs	r3, r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	440b      	add	r3, r1
 8006d5c:	3318      	adds	r3, #24
 8006d5e:	2200      	movs	r2, #0
 8006d60:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8006d62:	7dfa      	ldrb	r2, [r7, #23]
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	4613      	mov	r3, r2
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	1a9b      	subs	r3, r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	440b      	add	r3, r1
 8006d70:	331c      	adds	r3, #28
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8006d76:	7dfa      	ldrb	r2, [r7, #23]
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	3320      	adds	r3, #32
 8006d86:	2200      	movs	r2, #0
 8006d88:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8006d8a:	7dfa      	ldrb	r2, [r7, #23]
 8006d8c:	6879      	ldr	r1, [r7, #4]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	1a9b      	subs	r3, r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	440b      	add	r3, r1
 8006d98:	3324      	adds	r3, #36	@ 0x24
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8006d9e:	7dfa      	ldrb	r2, [r7, #23]
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	4613      	mov	r3, r2
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	1a9b      	subs	r3, r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	440b      	add	r3, r1
 8006dac:	3328      	adds	r3, #40	@ 0x28
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8006db2:	7dfa      	ldrb	r2, [r7, #23]
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	4613      	mov	r3, r2
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	1a9b      	subs	r3, r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	3330      	adds	r3, #48	@ 0x30
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
 8006dce:	2b06      	cmp	r3, #6
 8006dd0:	d9bd      	bls.n	8006d4e <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	40016800 	.word	0x40016800
 8006de0:	40021000 	.word	0x40021000

08006de4 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t CalibrationRate)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d101      	bne.n	8006dfc <HAL_HRTIM_DLLCalibrationStart+0x18>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e045      	b.n	8006e88 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e12:	d114      	bne.n	8006e3e <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0202 	bic.w	r2, r2, #2
 8006e24:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f042 0201 	orr.w	r2, r2, #1
 8006e38:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8006e3c:	e01f      	b.n	8006e7e <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0202 	orr.w	r2, r2, #2
 8006e4e:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8006e5a:	f023 010c 	bic.w	r1, r3, #12
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f042 0201 	orr.w	r2, r2, #1
 8006e7a:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t Timeout)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8006e9e:	f7fc fbc9 	bl	8003634 <HAL_GetTick>
 8006ea2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8006ea4:	e014      	b.n	8006ed0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eac:	d010      	beq.n	8006ed0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006eae:	f7fc fbc1 	bl	8003634 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d302      	bcc.n	8006ec4 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d105      	bne.n	8006ed0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2207      	movs	r2, #7
 8006ec8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e011      	b.n	8006ef4 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8006ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ee0:	d1e1      	bne.n	8006ea6 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d101      	bne.n	8006f18 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 8006f14:	2302      	movs	r3, #2
 8006f16:	e015      	b.n	8006f44 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b06      	cmp	r3, #6
 8006f24:	d104      	bne.n	8006f30 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8006f26:	6879      	ldr	r1, [r7, #4]
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 fe7c 	bl	8007c26 <HRTIM_MasterBase_Config>
 8006f2e:	e004      	b.n	8006f3a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	68b9      	ldr	r1, [r7, #8]
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 fea5 	bl	8007c84 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t ADCTrigger,
                                             const HRTIM_ADCTriggerCfgTypeDef *pADCTriggerCfg)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d101      	bne.n	8006f68 <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
    return HAL_BUSY;
 8006f64:	2302      	movs	r3, #2
 8006f66:	e1d7      	b.n	8007318 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d101      	bne.n	8006f76 <HAL_HRTIM_ADCTriggerConfig+0x2a>
 8006f72:	2302      	movs	r3, #2
 8006f74:	e1d0      	b.n	8007318 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2202      	movs	r2, #2
 8006f82:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006f8e:	617b      	str	r3, [r7, #20]
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8006f98:	613b      	str	r3, [r7, #16]

  switch (ADCTrigger)
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fa0:	f000 816d 	beq.w	800727e <HAL_HRTIM_ADCTriggerConfig+0x332>
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006faa:	f200 818d 	bhi.w	80072c8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fb4:	f000 813f 	beq.w	8007236 <HAL_HRTIM_ADCTriggerConfig+0x2ea>
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fbe:	f200 8183 	bhi.w	80072c8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2b80      	cmp	r3, #128	@ 0x80
 8006fc6:	f000 8111 	beq.w	80071ec <HAL_HRTIM_ADCTriggerConfig+0x2a0>
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2b80      	cmp	r3, #128	@ 0x80
 8006fce:	f200 817b 	bhi.w	80072c8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2b20      	cmp	r3, #32
 8006fd6:	d84b      	bhi.n	8007070 <HAL_HRTIM_ADCTriggerConfig+0x124>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 8174 	beq.w	80072c8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	2b1f      	cmp	r3, #31
 8006fe6:	f200 816f 	bhi.w	80072c8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006fea:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff0 <HAL_HRTIM_ADCTriggerConfig+0xa4>)
 8006fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff0:	0800707b 	.word	0x0800707b
 8006ff4:	0800709f 	.word	0x0800709f
 8006ff8:	080072c9 	.word	0x080072c9
 8006ffc:	080070c5 	.word	0x080070c5
 8007000:	080072c9 	.word	0x080072c9
 8007004:	080072c9 	.word	0x080072c9
 8007008:	080072c9 	.word	0x080072c9
 800700c:	080070eb 	.word	0x080070eb
 8007010:	080072c9 	.word	0x080072c9
 8007014:	080072c9 	.word	0x080072c9
 8007018:	080072c9 	.word	0x080072c9
 800701c:	080072c9 	.word	0x080072c9
 8007020:	080072c9 	.word	0x080072c9
 8007024:	080072c9 	.word	0x080072c9
 8007028:	080072c9 	.word	0x080072c9
 800702c:	08007111 	.word	0x08007111
 8007030:	080072c9 	.word	0x080072c9
 8007034:	080072c9 	.word	0x080072c9
 8007038:	080072c9 	.word	0x080072c9
 800703c:	080072c9 	.word	0x080072c9
 8007040:	080072c9 	.word	0x080072c9
 8007044:	080072c9 	.word	0x080072c9
 8007048:	080072c9 	.word	0x080072c9
 800704c:	080072c9 	.word	0x080072c9
 8007050:	080072c9 	.word	0x080072c9
 8007054:	080072c9 	.word	0x080072c9
 8007058:	080072c9 	.word	0x080072c9
 800705c:	080072c9 	.word	0x080072c9
 8007060:	080072c9 	.word	0x080072c9
 8007064:	080072c9 	.word	0x080072c9
 8007068:	080072c9 	.word	0x080072c9
 800706c:	08007159 	.word	0x08007159
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2b40      	cmp	r3, #64	@ 0x40
 8007074:	f000 8095 	beq.w	80071a2 <HAL_HRTIM_ADCTriggerConfig+0x256>
 8007078:	e126      	b.n	80072c8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
  {
    case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8007080:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	4313      	orrs	r3, r2
 800708e:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	6852      	ldr	r2, [r2, #4]
 8007098:	f8c3 23bc 	str.w	r2, [r3, #956]	@ 0x3bc
      break;
 800709c:	e11d      	b.n	80072da <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f423 1360 	bic.w	r3, r3, #3670016	@ 0x380000
 80070a4:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	00db      	lsls	r3, r3, #3
 80070ac:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	6852      	ldr	r2, [r2, #4]
 80070be:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0
      break;
 80070c2:	e10a      	b.n	80072da <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80070ca:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	019b      	lsls	r3, r3, #6
 80070d2:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	4313      	orrs	r3, r2
 80070da:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	6852      	ldr	r2, [r2, #4]
 80070e4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
      break;
 80070e8:	e0f7      	b.n	80072da <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80070f0:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	025b      	lsls	r3, r3, #9
 80070f8:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	4313      	orrs	r3, r2
 8007100:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	6852      	ldr	r2, [r2, #4]
 800710a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
      break;
 800710e:	e0e4      	b.n	80072da <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_5:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD5USRC);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f023 0307 	bic.w	r3, r3, #7
 8007116:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	0c1b      	lsrs	r3, r3, #16
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	4313      	orrs	r3, r2
 8007126:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 5 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 021f 	bic.w	r2, r2, #31
 8007138:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f003 021f 	and.w	r2, r3, #31
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8007156:	e0c0      	b.n	80072da <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_6:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800715e:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	0b1b      	lsrs	r3, r3, #12
 8007166:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 6 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8007180:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	015b      	lsls	r3, r3, #5
 8007192:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 80071a0:	e09b      	b.n	80072da <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_7:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80071a8:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	0a1b      	lsrs	r3, r3, #8
 80071b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 7 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 80071ca:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	029b      	lsls	r3, r3, #10
 80071dc:	f403 42f8 	and.w	r2, r3, #31744	@ 0x7c00
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 80071ea:	e076      	b.n	80072da <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_8:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071f2:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	091b      	lsrs	r3, r3, #4
 80071fa:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	4313      	orrs	r3, r2
 8007202:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 8 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8007214:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	041b      	lsls	r3, r3, #16
 8007226:	f403 12f8 	and.w	r2, r3, #2031616	@ 0x1f0000
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8007234:	e051      	b.n	80072da <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_9:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800723c:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	4313      	orrs	r3, r2
 800724a:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 9 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 7278 	bic.w	r2, r2, #65011712	@ 0x3e00000
 800725c:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	055b      	lsls	r3, r3, #21
 800726e:	f003 7278 	and.w	r2, r3, #65011712	@ 0x3e00000
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 800727c:	e02d      	b.n	80072da <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_10:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007284:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	011b      	lsls	r3, r3, #4
 800728c:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 10 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 80072a6:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	069b      	lsls	r3, r3, #26
 80072b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 80072c6:	e008      	b.n	80072da <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2207      	movs	r2, #7
 80072cc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 80072d8:	bf00      	nop
    }
  }

  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b07      	cmp	r3, #7
 80072e4:	d101      	bne.n	80072ea <HAL_HRTIM_ADCTriggerConfig+0x39e>
  {
    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e016      	b.n	8007318 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Update the HRTIM registers */
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2b0f      	cmp	r3, #15
 80072ee:	d805      	bhi.n	80072fc <HAL_HRTIM_ADCTriggerConfig+0x3b0>
  {
    hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
 80072fa:	e004      	b.n	8007306 <HAL_HRTIM_ADCTriggerConfig+0x3ba>
  }
  else
  {
    hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	371c      	adds	r7, #28
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_HRTIM_ADCPostScalerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCPostScalerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t ADCTrigger,
                                                uint32_t Postscaler)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	d101      	bne.n	8007340 <HAL_HRTIM_ADCPostScalerConfig+0x1c>
  {
    return HAL_BUSY;
 800733c:	2302      	movs	r3, #2
 800733e:	e135      	b.n	80075ac <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8007346:	2b01      	cmp	r3, #1
 8007348:	d101      	bne.n	800734e <HAL_HRTIM_ADCPostScalerConfig+0x2a>
 800734a:	2302      	movs	r3, #2
 800734c:	e12e      	b.n	80075ac <HAL_HRTIM_ADCPostScalerConfig+0x288>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2202      	movs	r2, #2
 800735a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  switch (ADCTrigger)
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007364:	f000 80f8 	beq.w	8007558 <HAL_HRTIM_ADCPostScalerConfig+0x234>
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800736e:	f200 8103 	bhi.w	8007578 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007378:	f000 80de 	beq.w	8007538 <HAL_HRTIM_ADCPostScalerConfig+0x214>
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007382:	f200 80f9 	bhi.w	8007578 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b80      	cmp	r3, #128	@ 0x80
 800738a:	f000 80c5 	beq.w	8007518 <HAL_HRTIM_ADCPostScalerConfig+0x1f4>
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b80      	cmp	r3, #128	@ 0x80
 8007392:	f200 80f1 	bhi.w	8007578 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2b20      	cmp	r3, #32
 800739a:	d84b      	bhi.n	8007434 <HAL_HRTIM_ADCPostScalerConfig+0x110>
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 80ea 	beq.w	8007578 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	2b1f      	cmp	r3, #31
 80073aa:	f200 80e5 	bhi.w	8007578 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 80073ae:	a201      	add	r2, pc, #4	@ (adr r2, 80073b4 <HAL_HRTIM_ADCPostScalerConfig+0x90>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	0800743d 	.word	0x0800743d
 80073b8:	0800745b 	.word	0x0800745b
 80073bc:	08007579 	.word	0x08007579
 80073c0:	0800747b 	.word	0x0800747b
 80073c4:	08007579 	.word	0x08007579
 80073c8:	08007579 	.word	0x08007579
 80073cc:	08007579 	.word	0x08007579
 80073d0:	0800749b 	.word	0x0800749b
 80073d4:	08007579 	.word	0x08007579
 80073d8:	08007579 	.word	0x08007579
 80073dc:	08007579 	.word	0x08007579
 80073e0:	08007579 	.word	0x08007579
 80073e4:	08007579 	.word	0x08007579
 80073e8:	08007579 	.word	0x08007579
 80073ec:	08007579 	.word	0x08007579
 80073f0:	080074bb 	.word	0x080074bb
 80073f4:	08007579 	.word	0x08007579
 80073f8:	08007579 	.word	0x08007579
 80073fc:	08007579 	.word	0x08007579
 8007400:	08007579 	.word	0x08007579
 8007404:	08007579 	.word	0x08007579
 8007408:	08007579 	.word	0x08007579
 800740c:	08007579 	.word	0x08007579
 8007410:	08007579 	.word	0x08007579
 8007414:	08007579 	.word	0x08007579
 8007418:	08007579 	.word	0x08007579
 800741c:	08007579 	.word	0x08007579
 8007420:	08007579 	.word	0x08007579
 8007424:	08007579 	.word	0x08007579
 8007428:	08007579 	.word	0x08007579
 800742c:	08007579 	.word	0x08007579
 8007430:	080074db 	.word	0x080074db
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2b40      	cmp	r3, #64	@ 0x40
 8007438:	d05e      	beq.n	80074f8 <HAL_HRTIM_ADCPostScalerConfig+0x1d4>
 800743a:	e09d      	b.n	8007578 <HAL_HRTIM_ADCPostScalerConfig+0x254>
  {
    case HRTIM_ADCTRIGGER_1:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007444:	f023 011f 	bic.w	r1, r3, #31
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f003 021f 	and.w	r2, r3, #31
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8007458:	e097      	b.n	800758a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_2:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007462:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	019b      	lsls	r3, r3, #6
 800746a:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8007478:	e087      	b.n	800758a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_3:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007482:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	031b      	lsls	r3, r3, #12
 800748a:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8007498:	e077      	b.n	800758a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_4:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80074a2:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	049b      	lsls	r3, r3, #18
 80074aa:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 80074b8:	e067      	b.n	800758a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80074c2:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	061b      	lsls	r3, r3, #24
 80074ca:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 80074d8:	e057      	b.n	800758a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80074e2:	f023 011f 	bic.w	r1, r3, #31
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f003 021f 	and.w	r2, r3, #31
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 80074f6:	e048      	b.n	800758a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_7:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007500:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	019b      	lsls	r3, r3, #6
 8007508:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	430a      	orrs	r2, r1
 8007512:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8007516:	e038      	b.n	800758a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_8:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007520:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	031b      	lsls	r3, r3, #12
 8007528:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8007536:	e028      	b.n	800758a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_9:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007540:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	049b      	lsls	r3, r3, #18
 8007548:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8007556:	e018      	b.n	800758a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_10:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007560:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	061b      	lsls	r3, r3, #24
 8007568:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8007576:	e008      	b.n	800758a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2207      	movs	r2, #7
 800757c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 8007588:	bf00      	nop
    }
  }

  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b07      	cmp	r3, #7
 8007594:	d101      	bne.n	800759a <HAL_HRTIM_ADCPostScalerConfig+0x276>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e008      	b.n	80075ac <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d101      	bne.n	80075d4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 80075d0:	2302      	movs	r3, #2
 80075d2:	e07a      	b.n	80076ca <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d101      	bne.n	80075e2 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80075de:	2302      	movs	r3, #2
 80075e0:	e073      	b.n	80076ca <HAL_HRTIM_WaveformTimerConfig+0x112>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2202      	movs	r2, #2
 80075ee:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2b06      	cmp	r3, #6
 80075f6:	d104      	bne.n	8007602 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80075f8:	6879      	ldr	r1, [r7, #4]
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f000 fb82 	bl	8007d04 <HRTIM_MasterWaveform_Config>
 8007600:	e004      	b.n	800760c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 fc1a 	bl	8007e40 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6819      	ldr	r1, [r3, #0]
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	4613      	mov	r3, r2
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	1a9b      	subs	r3, r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4403      	add	r3, r0
 800761e:	3320      	adds	r3, #32
 8007620:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6859      	ldr	r1, [r3, #4]
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	4613      	mov	r3, r2
 800762c:	00db      	lsls	r3, r3, #3
 800762e:	1a9b      	subs	r3, r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4403      	add	r3, r0
 8007634:	3324      	adds	r3, #36	@ 0x24
 8007636:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6899      	ldr	r1, [r3, #8]
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	4613      	mov	r3, r2
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4403      	add	r3, r0
 800764a:	3328      	adds	r3, #40	@ 0x28
 800764c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68d9      	ldr	r1, [r3, #12]
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	4613      	mov	r3, r2
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	1a9b      	subs	r3, r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4403      	add	r3, r0
 8007660:	332c      	adds	r3, #44	@ 0x2c
 8007662:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6919      	ldr	r1, [r3, #16]
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	4613      	mov	r3, r2
 800766e:	00db      	lsls	r3, r3, #3
 8007670:	1a9b      	subs	r3, r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4403      	add	r3, r0
 8007676:	3330      	adds	r3, #48	@ 0x30
 8007678:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800767a:	68b9      	ldr	r1, [r7, #8]
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 fead 	bl	80083dc <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b06      	cmp	r3, #6
 8007686:	d017      	beq.n	80076b8 <HAL_HRTIM_WaveformTimerConfig+0x100>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d113      	bne.n	80076b8 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	3301      	adds	r3, #1
 8007698:	01db      	lsls	r3, r3, #7
 800769a:	4413      	add	r3, r2
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076a6:	025b      	lsls	r3, r3, #9
 80076a8:	68f9      	ldr	r1, [r7, #12]
 80076aa:	6809      	ldr	r1, [r1, #0]
 80076ac:	431a      	orrs	r2, r3
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	3301      	adds	r3, #1
 80076b2:	01db      	lsls	r3, r3, #7
 80076b4:	440b      	add	r3, r1
 80076b6:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b084      	sub	sp, #16
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
  assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
  assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
  assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d101      	bne.n	80076ee <HAL_HRTIM_WaveformTimerControl+0x1c>
  {
    return HAL_BUSY;
 80076ea:	2302      	movs	r3, #2
 80076ec:	e020      	b.n	8007730 <HAL_HRTIM_WaveformTimerControl+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d101      	bne.n	80076fc <HAL_HRTIM_WaveformTimerControl+0x2a>
 80076f8:	2302      	movs	r3, #2
 80076fa:	e019      	b.n	8007730 <HAL_HRTIM_WaveformTimerControl+0x5e>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2202      	movs	r2, #2
 8007708:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure timing unit */
  HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	68b9      	ldr	r1, [r7, #8]
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 fd1b 	bl	800814c <HRTIM_TimingUnitWaveform_Control>

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8007716:	68b9      	ldr	r1, [r7, #8]
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 fe5f 	bl	80083dc <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_DeadTimeCfgTypeDef *pDeadTimeCfg)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d101      	bne.n	8007754 <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
    return HAL_BUSY;
 8007750:	2302      	movs	r3, #2
 8007752:	e067      	b.n	8007824 <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800775a:	2b01      	cmp	r3, #1
 800775c:	d101      	bne.n	8007762 <HAL_HRTIM_DeadTimeConfig+0x2a>
 800775e:	2302      	movs	r3, #2
 8007760:	e060      	b.n	8007824 <HAL_HRTIM_DeadTimeConfig+0xec>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2202      	movs	r2, #2
 800776e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800777a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	4313      	orrs	r3, r2
 8007788:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	4313      	orrs	r3, r2
 8007796:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	041a      	lsls	r2, r3, #16
 80077ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007830 <HAL_HRTIM_DeadTimeConfig+0xf8>)
 80077bc:	4013      	ands	r3, r2
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	01db      	lsls	r3, r3, #7
 80077f6:	4413      	add	r3, r2
 80077f8:	33b8      	adds	r3, #184	@ 0xb8
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007834 <HAL_HRTIM_DeadTimeConfig+0xfc>)
 80077fe:	4013      	ands	r3, r2
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	6811      	ldr	r1, [r2, #0]
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	431a      	orrs	r2, r3
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	01db      	lsls	r3, r3, #7
 800780c:	440b      	add	r3, r1
 800780e:	33b8      	adds	r3, #184	@ 0xb8
 8007810:	601a      	str	r2, [r3, #0]
               HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
               HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
               HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	371c      	adds	r7, #28
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	01ff0000 	.word	0x01ff0000
 8007834:	3c002000 	.word	0x3c002000

08007838 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef *pCompareCfg)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
 8007844:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b02      	cmp	r3, #2
 8007850:	d101      	bne.n	8007856 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
    return HAL_BUSY;
 8007852:	2302      	movs	r3, #2
 8007854:	e157      	b.n	8007b06 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800785c:	2b01      	cmp	r3, #1
 800785e:	d101      	bne.n	8007864 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8007860:	2302      	movs	r3, #2
 8007862:	e150      	b.n	8007b06 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b06      	cmp	r3, #6
 8007878:	d140      	bne.n	80078fc <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	3b01      	subs	r3, #1
 800787e:	2b07      	cmp	r3, #7
 8007880:	d82a      	bhi.n	80078d8 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8007882:	a201      	add	r2, pc, #4	@ (adr r2, 8007888 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8007884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007888:	080078a9 	.word	0x080078a9
 800788c:	080078b5 	.word	0x080078b5
 8007890:	080078d9 	.word	0x080078d9
 8007894:	080078c1 	.word	0x080078c1
 8007898:	080078d9 	.word	0x080078d9
 800789c:	080078d9 	.word	0x080078d9
 80078a0:	080078d9 	.word	0x080078d9
 80078a4:	080078cd 	.word	0x080078cd
    {
      case HRTIM_COMPAREUNIT_1:
      {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	683a      	ldr	r2, [r7, #0]
 80078ae:	6812      	ldr	r2, [r2, #0]
 80078b0:	61da      	str	r2, [r3, #28]
        break;
 80078b2:	e01a      	b.n	80078ea <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_2:
      {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	6812      	ldr	r2, [r2, #0]
 80078bc:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 80078be:	e014      	b.n	80078ea <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	6812      	ldr	r2, [r2, #0]
 80078c8:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 80078ca:	e00e      	b.n	80078ea <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_4:
      {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	6812      	ldr	r2, [r2, #0]
 80078d4:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 80078d6:	e008      	b.n	80078ea <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2207      	movs	r2, #7
 80078dc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 80078e8:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b07      	cmp	r3, #7
 80078f4:	f040 80fe 	bne.w	8007af4 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e104      	b.n	8007b06 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3b01      	subs	r3, #1
 8007900:	2b07      	cmp	r3, #7
 8007902:	f200 80e3 	bhi.w	8007acc <HAL_HRTIM_WaveformCompareConfig+0x294>
 8007906:	a201      	add	r2, pc, #4	@ (adr r2, 800790c <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8007908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790c:	0800792d 	.word	0x0800792d
 8007910:	08007941 	.word	0x08007941
 8007914:	08007acd 	.word	0x08007acd
 8007918:	080079fd 	.word	0x080079fd
 800791c:	08007acd 	.word	0x08007acd
 8007920:	08007acd 	.word	0x08007acd
 8007924:	08007acd 	.word	0x08007acd
 8007928:	08007a11 	.word	0x08007a11
    {
      case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6819      	ldr	r1, [r3, #0]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	01db      	lsls	r3, r3, #7
 8007938:	440b      	add	r3, r1
 800793a:	339c      	adds	r3, #156	@ 0x9c
 800793c:	601a      	str	r2, [r3, #0]
        break;
 800793e:	e0d1      	b.n	8007ae4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6819      	ldr	r1, [r3, #0]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	01db      	lsls	r3, r3, #7
 800794c:	440b      	add	r3, r1
 800794e:	33a4      	adds	r3, #164	@ 0xa4
 8007950:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d03f      	beq.n	80079da <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	3301      	adds	r3, #1
 8007962:	01db      	lsls	r3, r3, #7
 8007964:	4413      	add	r3, r2
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	6811      	ldr	r1, [r2, #0]
 800796c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	3301      	adds	r3, #1
 8007974:	01db      	lsls	r3, r3, #7
 8007976:	440b      	add	r3, r1
 8007978:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	3301      	adds	r3, #1
 8007982:	01db      	lsls	r3, r3, #7
 8007984:	4413      	add	r3, r2
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	68f9      	ldr	r1, [r7, #12]
 800798e:	6809      	ldr	r1, [r1, #0]
 8007990:	431a      	orrs	r2, r3
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	3301      	adds	r3, #1
 8007996:	01db      	lsls	r3, r3, #7
 8007998:	440b      	add	r3, r1
 800799a:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079a4:	d109      	bne.n	80079ba <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6819      	ldr	r1, [r3, #0]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	01db      	lsls	r3, r3, #7
 80079b2:	440b      	add	r3, r1
 80079b4:	339c      	adds	r3, #156	@ 0x9c
 80079b6:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
        break;
 80079b8:	e091      	b.n	8007ade <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80079c2:	f040 808c 	bne.w	8007ade <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6819      	ldr	r1, [r3, #0]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	689a      	ldr	r2, [r3, #8]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	01db      	lsls	r3, r3, #7
 80079d2:	440b      	add	r3, r1
 80079d4:	33a8      	adds	r3, #168	@ 0xa8
 80079d6:	601a      	str	r2, [r3, #0]
        break;
 80079d8:	e081      	b.n	8007ade <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	3301      	adds	r3, #1
 80079e2:	01db      	lsls	r3, r3, #7
 80079e4:	4413      	add	r3, r2
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	6811      	ldr	r1, [r2, #0]
 80079ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	3301      	adds	r3, #1
 80079f4:	01db      	lsls	r3, r3, #7
 80079f6:	440b      	add	r3, r1
 80079f8:	601a      	str	r2, [r3, #0]
        break;
 80079fa:	e070      	b.n	8007ade <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6819      	ldr	r1, [r3, #0]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	01db      	lsls	r3, r3, #7
 8007a08:	440b      	add	r3, r1
 8007a0a:	33a8      	adds	r3, #168	@ 0xa8
 8007a0c:	601a      	str	r2, [r3, #0]
        break;
 8007a0e:	e069      	b.n	8007ae4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6819      	ldr	r1, [r3, #0]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	01db      	lsls	r3, r3, #7
 8007a1c:	440b      	add	r3, r1
 8007a1e:	33ac      	adds	r3, #172	@ 0xac
 8007a20:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d03f      	beq.n	8007aaa <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	3301      	adds	r3, #1
 8007a32:	01db      	lsls	r3, r3, #7
 8007a34:	4413      	add	r3, r2
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	6811      	ldr	r1, [r2, #0]
 8007a3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	3301      	adds	r3, #1
 8007a44:	01db      	lsls	r3, r3, #7
 8007a46:	440b      	add	r3, r1
 8007a48:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	3301      	adds	r3, #1
 8007a52:	01db      	lsls	r3, r3, #7
 8007a54:	4413      	add	r3, r2
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	68f9      	ldr	r1, [r7, #12]
 8007a60:	6809      	ldr	r1, [r1, #0]
 8007a62:	431a      	orrs	r2, r3
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	3301      	adds	r3, #1
 8007a68:	01db      	lsls	r3, r3, #7
 8007a6a:	440b      	add	r3, r1
 8007a6c:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a76:	d109      	bne.n	8007a8c <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6819      	ldr	r1, [r3, #0]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	01db      	lsls	r3, r3, #7
 8007a84:	440b      	add	r3, r1
 8007a86:	339c      	adds	r3, #156	@ 0x9c
 8007a88:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
        break;
 8007a8a:	e02a      	b.n	8007ae2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a94:	d125      	bne.n	8007ae2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6819      	ldr	r1, [r3, #0]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	689a      	ldr	r2, [r3, #8]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	01db      	lsls	r3, r3, #7
 8007aa2:	440b      	add	r3, r1
 8007aa4:	33a8      	adds	r3, #168	@ 0xa8
 8007aa6:	601a      	str	r2, [r3, #0]
        break;
 8007aa8:	e01b      	b.n	8007ae2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	01db      	lsls	r3, r3, #7
 8007ab4:	4413      	add	r3, r2
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	6811      	ldr	r1, [r2, #0]
 8007abc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	01db      	lsls	r3, r3, #7
 8007ac6:	440b      	add	r3, r1
 8007ac8:	601a      	str	r2, [r3, #0]
        break;
 8007aca:	e00a      	b.n	8007ae2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2207      	movs	r2, #7
 8007ad0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 8007adc:	e002      	b.n	8007ae4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 8007ade:	bf00      	nop
 8007ae0:	e000      	b.n	8007ae4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 8007ae2:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b07      	cmp	r3, #7
 8007aee:	d101      	bne.n	8007af4 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e008      	b.n	8007b06 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop

08007b14 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d101      	bne.n	8007b32 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e01d      	b.n	8007b6e <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d101      	bne.n	8007b40 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e016      	b.n	8007b6e <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	68b9      	ldr	r1, [r7, #8]
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 fb58 	bl	800820c <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t OutputsToStart)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b083      	sub	sp, #12
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <HAL_HRTIM_WaveformOutputStart+0x18>
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e01a      	b.n	8007bc4 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2202      	movs	r2, #2
 8007b9a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef *hhrtim,
                                               uint32_t Timers)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d101      	bne.n	8007be8 <HAL_HRTIM_WaveformCountStart+0x18>
 8007be4:	2302      	movs	r3, #2
 8007be6:	e018      	b.n	8007c1a <HAL_HRTIM_WaveformCountStart+0x4a>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6819      	ldr	r1, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	430a      	orrs	r2, r1
 8007c06:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b085      	sub	sp, #20
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 0307 	bic.w	r3, r3, #7
 8007c3e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f023 0318 	bic.w	r3, r3, #24
 8007c50:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	6812      	ldr	r2, [r2, #0]
 8007c6c:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	6852      	ldr	r2, [r2, #4]
 8007c76:	619a      	str	r2, [r3, #24]
}
 8007c78:	bf00      	nop
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	3301      	adds	r3, #1
 8007c98:	01db      	lsls	r3, r3, #7
 8007c9a:	4413      	add	r3, r2
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f023 0307 	bic.w	r3, r3, #7
 8007ca6:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f023 0318 	bic.w	r3, r3, #24
 8007cb8:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	01db      	lsls	r3, r3, #7
 8007cce:	4413      	add	r3, r2
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6819      	ldr	r1, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	01db      	lsls	r3, r3, #7
 8007ce0:	440b      	add	r3, r1
 8007ce2:	3394      	adds	r3, #148	@ 0x94
 8007ce4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6819      	ldr	r1, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	01db      	lsls	r3, r3, #7
 8007cf2:	440b      	add	r3, r1
 8007cf4:	3398      	adds	r3, #152	@ 0x98
 8007cf6:	601a      	str	r2, [r3, #0]
}
 8007cf8:	bf00      	nop
 8007cfa:	371c      	adds	r7, #28
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8007d1e:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 0320 	bic.w	r3, r3, #32
 8007d26:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007d38:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	2b20      	cmp	r3, #32
 8007d40:	d003      	beq.n	8007d4a <HRTIM_MasterWaveform_Config+0x46>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d108      	bne.n	8007d5c <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007d50:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f043 0320 	orr.w	r3, r3, #32
 8007d58:	60fb      	str	r3, [r7, #12]
 8007d5a:	e021      	b.n	8007da0 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d108      	bne.n	8007d76 <HRTIM_MasterWaveform_Config+0x72>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d6a:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	e014      	b.n	8007da0 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	d108      	bne.n	8007d90 <HRTIM_MasterWaveform_Config+0x8c>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d84:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d8c:	60fb      	str	r3, [r7, #12]
 8007d8e:	e007      	b.n	8007da0 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f023 0320 	bic.w	r3, r3, #32
 8007d96:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007da6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007db8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007dca:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8007ddc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007dee:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007e02:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e14:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8007e32:	bf00      	nop
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
	...

08007e40 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b08b      	sub	sp, #44	@ 0x2c
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	3301      	adds	r3, #1
 8007e54:	01db      	lsls	r3, r3, #7
 8007e56:	4413      	add	r3, r2
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	6811      	ldr	r1, [r2, #0]
 8007e5e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	3301      	adds	r3, #1
 8007e66:	01db      	lsls	r3, r3, #7
 8007e68:	440b      	add	r3, r1
 8007e6a:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	3301      	adds	r3, #1
 8007e74:	01db      	lsls	r3, r3, #7
 8007e76:	4413      	add	r3, r2
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	01db      	lsls	r3, r3, #7
 8007e84:	4413      	add	r3, r2
 8007e86:	33e8      	adds	r3, #232	@ 0xe8
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	01db      	lsls	r3, r3, #7
 8007e94:	4413      	add	r3, r2
 8007e96:	33e4      	adds	r3, #228	@ 0xe4
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8007ea4:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea8:	f023 0320 	bic.w	r3, r3, #32
 8007eac:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	2b20      	cmp	r3, #32
 8007ebe:	d003      	beq.n	8007ec8 <HRTIM_TimingUnitWaveform_Config+0x88>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d108      	bne.n	8007eda <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eca:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8007ece:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed2:	f043 0320 	orr.w	r3, r3, #32
 8007ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ed8:	e021      	b.n	8007f1e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d108      	bne.n	8007ef4 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8007eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ef2:	e014      	b.n	8007f1e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	d108      	bne.n	8007f0e <HRTIM_TimingUnitWaveform_Config+0xce>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8007efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f02:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8007f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f0c:	e007      	b.n	8007f1e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
    hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f10:	f023 0320 	bic.w	r3, r3, #32
 8007f14:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8007f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f18:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8007f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f24:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8007f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f36:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8007f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f44:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007f48:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f50:	4313      	orrs	r3, r2
 8007f52:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8007f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f62:	4313      	orrs	r3, r2
 8007f64:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8007f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f68:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f74:	4313      	orrs	r3, r2
 8007f76:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8007f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f88:	d103      	bne.n	8007f92 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f90:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8007f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f98:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007faa:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8007fbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007fd2:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fe8:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	61bb      	str	r3, [r7, #24]

  /* Enable/Disable dead time insertion at timer level */
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ffa:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008000:	6a3a      	ldr	r2, [r7, #32]
 8008002:	4313      	orrs	r3, r2
 8008004:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800800a:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 800800e:	d004      	beq.n	800801a <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008014:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8008018:	d103      	bne.n	8008022 <HRTIM_TimingUnitWaveform_Config+0x1e2>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801e:	2b40      	cmp	r3, #64	@ 0x40
 8008020:	d108      	bne.n	8008034 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 8008022:	6a3b      	ldr	r3, [r7, #32]
 8008024:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8008028:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800802e:	6a3a      	ldr	r2, [r7, #32]
 8008030:	4313      	orrs	r3, r2
 8008032:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800803a:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008040:	6a3a      	ldr	r2, [r7, #32]
 8008042:	4313      	orrs	r3, r2
 8008044:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800804a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2b05      	cmp	r3, #5
 8008050:	d850      	bhi.n	80080f4 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8008052:	a201      	add	r2, pc, #4	@ (adr r2, 8008058 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8008054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008058:	08008071 	.word	0x08008071
 800805c:	08008087 	.word	0x08008087
 8008060:	0800809d 	.word	0x0800809d
 8008064:	080080b3 	.word	0x080080b3
 8008068:	080080c9 	.word	0x080080c9
 800806c:	080080df 	.word	0x080080df
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008076:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800807c:	005b      	lsls	r3, r3, #1
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	4313      	orrs	r3, r2
 8008082:	61fb      	str	r3, [r7, #28]
      break;
 8008084:	e037      	b.n	80080f6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800808c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	69fa      	ldr	r2, [r7, #28]
 8008096:	4313      	orrs	r3, r2
 8008098:	61fb      	str	r3, [r7, #28]
      break;
 800809a:	e02c      	b.n	80080f6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80080a2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a8:	00db      	lsls	r3, r3, #3
 80080aa:	69fa      	ldr	r2, [r7, #28]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	61fb      	str	r3, [r7, #28]
      break;
 80080b0:	e021      	b.n	80080f6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80080b8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080be:	011b      	lsls	r3, r3, #4
 80080c0:	69fa      	ldr	r2, [r7, #28]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	61fb      	str	r3, [r7, #28]
      break;
 80080c6:	e016      	b.n	80080f6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80080ce:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d4:	015b      	lsls	r3, r3, #5
 80080d6:	69fa      	ldr	r2, [r7, #28]
 80080d8:	4313      	orrs	r3, r2
 80080da:	61fb      	str	r3, [r7, #28]
      break;
 80080dc:	e00b      	b.n	80080f6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80080e4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ea:	019b      	lsls	r3, r3, #6
 80080ec:	69fa      	ldr	r2, [r7, #28]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	61fb      	str	r3, [r7, #28]
      break;
 80080f2:	e000      	b.n	80080f6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    default:
      break;
 80080f4:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	3301      	adds	r3, #1
 80080fe:	01db      	lsls	r3, r3, #7
 8008100:	4413      	add	r3, r2
 8008102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008104:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	01db      	lsls	r3, r3, #7
 800810e:	4413      	add	r3, r2
 8008110:	33e8      	adds	r3, #232	@ 0xe8
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	01db      	lsls	r3, r3, #7
 800811e:	4413      	add	r3, r2
 8008120:	33e4      	adds	r3, #228	@ 0xe4
 8008122:	6a3a      	ldr	r2, [r7, #32]
 8008124:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	01db      	lsls	r3, r3, #7
 800812e:	4413      	add	r3, r2
 8008130:	33d4      	adds	r3, #212	@ 0xd4
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	69fa      	ldr	r2, [r7, #28]
 800813c:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8008140:	bf00      	nop
 8008142:	372c      	adds	r7, #44	@ 0x2c
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 800814c:	b480      	push	{r7}
 800814e:	b087      	sub	sp, #28
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr2;

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	01db      	lsls	r3, r3, #7
 8008160:	4413      	add	r3, r2
 8008162:	33ec      	adds	r3, #236	@ 0xec
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	617b      	str	r3, [r7, #20]

  /* Set the UpDown counting Mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	f023 0310 	bic.w	r3, r3, #16
 800816e:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	011b      	lsls	r3, r3, #4
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	4313      	orrs	r3, r2
 800817a:	617b      	str	r3, [r7, #20]

  /* Set the TrigHalf Mode : requires the counter to be disabled */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008182:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	4313      	orrs	r3, r2
 800818c:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008194:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	4313      	orrs	r3, r2
 800819e:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80081a6:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	617b      	str	r3, [r7, #20]

  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d11a      	bne.n	80081f0 <HRTIM_TimingUnitWaveform_Control+0xa4>
  {
    /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f023 0304 	bic.w	r3, r3, #4
 80081c0:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	617b      	str	r3, [r7, #20]

    /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	f023 0302 	bic.w	r3, r3, #2
 80081d2:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	4313      	orrs	r3, r2
 80081dc:	617b      	str	r3, [r7, #20]

    /* Enable the DualChannel DAC trigger */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f023 0301 	bic.w	r3, r3, #1
 80081e4:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	617b      	str	r3, [r7, #20]
  }
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	01db      	lsls	r3, r3, #7
 80081f8:	4413      	add	r3, r2
 80081fa:	33ec      	adds	r3, #236	@ 0xec
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	601a      	str	r2, [r3, #0]

}
 8008200:	bf00      	nop
 8008202:	371c      	adds	r7, #28
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 800820c:	b480      	push	{r7}
 800820e:	b089      	sub	sp, #36	@ 0x24
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
 8008218:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	01db      	lsls	r3, r3, #7
 8008226:	4413      	add	r3, r2
 8008228:	33e4      	adds	r3, #228	@ 0xe4
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	01db      	lsls	r3, r3, #7
 8008236:	4413      	add	r3, r2
 8008238:	33b8      	adds	r3, #184	@ 0xb8
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	617b      	str	r3, [r7, #20]

  switch (Output)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008244:	d05d      	beq.n	8008302 <HRTIM_OutputConfig+0xf6>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800824c:	d86e      	bhi.n	800832c <HRTIM_OutputConfig+0x120>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008254:	d042      	beq.n	80082dc <HRTIM_OutputConfig+0xd0>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800825c:	d866      	bhi.n	800832c <HRTIM_OutputConfig+0x120>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008264:	d04d      	beq.n	8008302 <HRTIM_OutputConfig+0xf6>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800826c:	d85e      	bhi.n	800832c <HRTIM_OutputConfig+0x120>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008274:	d032      	beq.n	80082dc <HRTIM_OutputConfig+0xd0>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800827c:	d856      	bhi.n	800832c <HRTIM_OutputConfig+0x120>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b80      	cmp	r3, #128	@ 0x80
 8008282:	d03e      	beq.n	8008302 <HRTIM_OutputConfig+0xf6>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b80      	cmp	r3, #128	@ 0x80
 8008288:	d850      	bhi.n	800832c <HRTIM_OutputConfig+0x120>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b40      	cmp	r3, #64	@ 0x40
 800828e:	d025      	beq.n	80082dc <HRTIM_OutputConfig+0xd0>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b40      	cmp	r3, #64	@ 0x40
 8008294:	d84a      	bhi.n	800832c <HRTIM_OutputConfig+0x120>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d01f      	beq.n	80082dc <HRTIM_OutputConfig+0xd0>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d044      	beq.n	800832c <HRTIM_OutputConfig+0x120>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	d841      	bhi.n	800832c <HRTIM_OutputConfig+0x120>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d33e      	bcc.n	800832c <HRTIM_OutputConfig+0x120>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3b02      	subs	r3, #2
 80082b2:	2201      	movs	r2, #1
 80082b4:	409a      	lsls	r2, r3
 80082b6:	4b48      	ldr	r3, [pc, #288]	@ (80083d8 <HRTIM_OutputConfig+0x1cc>)
 80082b8:	4013      	ands	r3, r2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	bf14      	ite	ne
 80082be:	2301      	movne	r3, #1
 80082c0:	2300      	moveq	r3, #0
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d11c      	bne.n	8008302 <HRTIM_OutputConfig+0xf6>
 80082c8:	f244 0304 	movw	r3, #16388	@ 0x4004
 80082cc:	4013      	ands	r3, r2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	bf14      	ite	ne
 80082d2:	2301      	movne	r3, #1
 80082d4:	2300      	moveq	r3, #0
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d027      	beq.n	800832c <HRTIM_OutputConfig+0x120>
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6819      	ldr	r1, [r3, #0]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	01db      	lsls	r3, r3, #7
 80082e8:	440b      	add	r3, r1
 80082ea:	33bc      	adds	r3, #188	@ 0xbc
 80082ec:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6819      	ldr	r1, [r3, #0]
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	689a      	ldr	r2, [r3, #8]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	01db      	lsls	r3, r3, #7
 80082fa:	440b      	add	r3, r1
 80082fc:	33c0      	adds	r3, #192	@ 0xc0
 80082fe:	601a      	str	r2, [r3, #0]
      break;
 8008300:	e015      	b.n	800832e <HRTIM_OutputConfig+0x122>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6819      	ldr	r1, [r3, #0]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	685a      	ldr	r2, [r3, #4]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	01db      	lsls	r3, r3, #7
 800830e:	440b      	add	r3, r1
 8008310:	33c4      	adds	r3, #196	@ 0xc4
 8008312:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6819      	ldr	r1, [r3, #0]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	689a      	ldr	r2, [r3, #8]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	01db      	lsls	r3, r3, #7
 8008320:	440b      	add	r3, r1
 8008322:	33c8      	adds	r3, #200	@ 0xc8
 8008324:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8008326:	2310      	movs	r3, #16
 8008328:	61bb      	str	r3, [r7, #24]
      break;
 800832a:	e000      	b.n	800832e <HRTIM_OutputConfig+0x122>
    }

    default:
      break;
 800832c:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 800832e:	22fe      	movs	r2, #254	@ 0xfe
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8008336:	43db      	mvns	r3, r3
 8008338:	69fa      	ldr	r2, [r7, #28]
 800833a:	4013      	ands	r3, r2
 800833c:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	fa02 f303 	lsl.w	r3, r2, r3
 8008348:	69fa      	ldr	r2, [r7, #28]
 800834a:	4313      	orrs	r3, r2
 800834c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	68da      	ldr	r2, [r3, #12]
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	fa02 f303 	lsl.w	r3, r2, r3
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	4313      	orrs	r3, r2
 800835c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	691a      	ldr	r2, [r3, #16]
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	fa02 f303 	lsl.w	r3, r2, r3
 8008368:	69fa      	ldr	r2, [r7, #28]
 800836a:	4313      	orrs	r3, r2
 800836c:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	695a      	ldr	r2, [r3, #20]
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	fa02 f303 	lsl.w	r3, r2, r3
 8008378:	69fa      	ldr	r2, [r7, #28]
 800837a:	4313      	orrs	r3, r2
 800837c:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	699a      	ldr	r2, [r3, #24]
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	fa02 f303 	lsl.w	r3, r2, r3
 8008388:	69fa      	ldr	r2, [r7, #28]
 800838a:	4313      	orrs	r3, r2
 800838c:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	2b08      	cmp	r3, #8
 8008394:	d111      	bne.n	80083ba <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10c      	bne.n	80083ba <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d107      	bne.n	80083ba <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	69da      	ldr	r2, [r3, #28]
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	fa02 f303 	lsl.w	r3, r2, r3
 80083b4:	69fa      	ldr	r2, [r7, #28]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	01db      	lsls	r3, r3, #7
 80083c2:	4413      	add	r3, r2
 80083c4:	33e4      	adds	r3, #228	@ 0xe4
 80083c6:	69fa      	ldr	r2, [r7, #28]
 80083c8:	601a      	str	r2, [r3, #0]
}
 80083ca:	bf00      	nop
 80083cc:	3724      	adds	r7, #36	@ 0x24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	40000041 	.word	0x40000041

080083dc <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b06      	cmp	r3, #6
 80083ea:	d85e      	bhi.n	80084aa <HRTIM_ForceRegistersUpdate+0xce>
 80083ec:	a201      	add	r2, pc, #4	@ (adr r2, 80083f4 <HRTIM_ForceRegistersUpdate+0x18>)
 80083ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f2:	bf00      	nop
 80083f4:	08008427 	.word	0x08008427
 80083f8:	0800843d 	.word	0x0800843d
 80083fc:	08008453 	.word	0x08008453
 8008400:	08008469 	.word	0x08008469
 8008404:	0800847f 	.word	0x0800847f
 8008408:	08008495 	.word	0x08008495
 800840c:	08008411 	.word	0x08008411
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f042 0201 	orr.w	r2, r2, #1
 8008420:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008424:	e042      	b.n	80084ac <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f042 0202 	orr.w	r2, r2, #2
 8008436:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800843a:	e037      	b.n	80084ac <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f042 0204 	orr.w	r2, r2, #4
 800844c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008450:	e02c      	b.n	80084ac <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0208 	orr.w	r2, r2, #8
 8008462:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008466:	e021      	b.n	80084ac <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f042 0210 	orr.w	r2, r2, #16
 8008478:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800847c:	e016      	b.n	80084ac <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f042 0220 	orr.w	r2, r2, #32
 800848e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008492:	e00b      	b.n	80084ac <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084a4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80084a8:	e000      	b.n	80084ac <HRTIM_ForceRegistersUpdate+0xd0>
    }

    default:
      break;
 80084aa:	bf00      	nop
  }
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d141      	bne.n	800854a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80084c6:	4b4b      	ldr	r3, [pc, #300]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80084ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084d2:	d131      	bne.n	8008538 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80084d4:	4b47      	ldr	r3, [pc, #284]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084da:	4a46      	ldr	r2, [pc, #280]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80084e4:	4b43      	ldr	r3, [pc, #268]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80084ec:	4a41      	ldr	r2, [pc, #260]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80084f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80084f4:	4b40      	ldr	r3, [pc, #256]	@ (80085f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2232      	movs	r2, #50	@ 0x32
 80084fa:	fb02 f303 	mul.w	r3, r2, r3
 80084fe:	4a3f      	ldr	r2, [pc, #252]	@ (80085fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008500:	fba2 2303 	umull	r2, r3, r2, r3
 8008504:	0c9b      	lsrs	r3, r3, #18
 8008506:	3301      	adds	r3, #1
 8008508:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800850a:	e002      	b.n	8008512 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3b01      	subs	r3, #1
 8008510:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008512:	4b38      	ldr	r3, [pc, #224]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800851a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800851e:	d102      	bne.n	8008526 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1f2      	bne.n	800850c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008526:	4b33      	ldr	r3, [pc, #204]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800852e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008532:	d158      	bne.n	80085e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e057      	b.n	80085e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008538:	4b2e      	ldr	r3, [pc, #184]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800853a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800853e:	4a2d      	ldr	r2, [pc, #180]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008544:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008548:	e04d      	b.n	80085e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008550:	d141      	bne.n	80085d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008552:	4b28      	ldr	r3, [pc, #160]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800855a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800855e:	d131      	bne.n	80085c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008560:	4b24      	ldr	r3, [pc, #144]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008566:	4a23      	ldr	r2, [pc, #140]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800856c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008570:	4b20      	ldr	r3, [pc, #128]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008578:	4a1e      	ldr	r2, [pc, #120]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800857a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800857e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008580:	4b1d      	ldr	r3, [pc, #116]	@ (80085f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2232      	movs	r2, #50	@ 0x32
 8008586:	fb02 f303 	mul.w	r3, r2, r3
 800858a:	4a1c      	ldr	r2, [pc, #112]	@ (80085fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800858c:	fba2 2303 	umull	r2, r3, r2, r3
 8008590:	0c9b      	lsrs	r3, r3, #18
 8008592:	3301      	adds	r3, #1
 8008594:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008596:	e002      	b.n	800859e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	3b01      	subs	r3, #1
 800859c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800859e:	4b15      	ldr	r3, [pc, #84]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085aa:	d102      	bne.n	80085b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1f2      	bne.n	8008598 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80085b2:	4b10      	ldr	r3, [pc, #64]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085be:	d112      	bne.n	80085e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e011      	b.n	80085e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80085c4:	4b0b      	ldr	r3, [pc, #44]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085ca:	4a0a      	ldr	r2, [pc, #40]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80085d4:	e007      	b.n	80085e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80085d6:	4b07      	ldr	r3, [pc, #28]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80085de:	4a05      	ldr	r2, [pc, #20]	@ (80085f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80085e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	40007000 	.word	0x40007000
 80085f8:	20000000 	.word	0x20000000
 80085fc:	431bde83 	.word	0x431bde83

08008600 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008600:	b480      	push	{r7}
 8008602:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008604:	4b05      	ldr	r3, [pc, #20]	@ (800861c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	4a04      	ldr	r2, [pc, #16]	@ (800861c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800860a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800860e:	6093      	str	r3, [r2, #8]
}
 8008610:	bf00      	nop
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	40007000 	.word	0x40007000

08008620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e2fe      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	d075      	beq.n	800872a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800863e:	4b97      	ldr	r3, [pc, #604]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f003 030c 	and.w	r3, r3, #12
 8008646:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008648:	4b94      	ldr	r3, [pc, #592]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	f003 0303 	and.w	r3, r3, #3
 8008650:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	2b0c      	cmp	r3, #12
 8008656:	d102      	bne.n	800865e <HAL_RCC_OscConfig+0x3e>
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	2b03      	cmp	r3, #3
 800865c:	d002      	beq.n	8008664 <HAL_RCC_OscConfig+0x44>
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	2b08      	cmp	r3, #8
 8008662:	d10b      	bne.n	800867c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008664:	4b8d      	ldr	r3, [pc, #564]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d05b      	beq.n	8008728 <HAL_RCC_OscConfig+0x108>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d157      	bne.n	8008728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e2d9      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008684:	d106      	bne.n	8008694 <HAL_RCC_OscConfig+0x74>
 8008686:	4b85      	ldr	r3, [pc, #532]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a84      	ldr	r2, [pc, #528]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 800868c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008690:	6013      	str	r3, [r2, #0]
 8008692:	e01d      	b.n	80086d0 <HAL_RCC_OscConfig+0xb0>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800869c:	d10c      	bne.n	80086b8 <HAL_RCC_OscConfig+0x98>
 800869e:	4b7f      	ldr	r3, [pc, #508]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a7e      	ldr	r2, [pc, #504]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 80086a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80086a8:	6013      	str	r3, [r2, #0]
 80086aa:	4b7c      	ldr	r3, [pc, #496]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a7b      	ldr	r2, [pc, #492]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 80086b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	e00b      	b.n	80086d0 <HAL_RCC_OscConfig+0xb0>
 80086b8:	4b78      	ldr	r3, [pc, #480]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a77      	ldr	r2, [pc, #476]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 80086be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	4b75      	ldr	r3, [pc, #468]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a74      	ldr	r2, [pc, #464]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 80086ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d013      	beq.n	8008700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086d8:	f7fa ffac 	bl	8003634 <HAL_GetTick>
 80086dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80086de:	e008      	b.n	80086f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086e0:	f7fa ffa8 	bl	8003634 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	2b64      	cmp	r3, #100	@ 0x64
 80086ec:	d901      	bls.n	80086f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e29e      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80086f2:	4b6a      	ldr	r3, [pc, #424]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d0f0      	beq.n	80086e0 <HAL_RCC_OscConfig+0xc0>
 80086fe:	e014      	b.n	800872a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008700:	f7fa ff98 	bl	8003634 <HAL_GetTick>
 8008704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008706:	e008      	b.n	800871a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008708:	f7fa ff94 	bl	8003634 <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	2b64      	cmp	r3, #100	@ 0x64
 8008714:	d901      	bls.n	800871a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	e28a      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800871a:	4b60      	ldr	r3, [pc, #384]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1f0      	bne.n	8008708 <HAL_RCC_OscConfig+0xe8>
 8008726:	e000      	b.n	800872a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d075      	beq.n	8008822 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008736:	4b59      	ldr	r3, [pc, #356]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f003 030c 	and.w	r3, r3, #12
 800873e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008740:	4b56      	ldr	r3, [pc, #344]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	f003 0303 	and.w	r3, r3, #3
 8008748:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	2b0c      	cmp	r3, #12
 800874e:	d102      	bne.n	8008756 <HAL_RCC_OscConfig+0x136>
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	2b02      	cmp	r3, #2
 8008754:	d002      	beq.n	800875c <HAL_RCC_OscConfig+0x13c>
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	2b04      	cmp	r3, #4
 800875a:	d11f      	bne.n	800879c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800875c:	4b4f      	ldr	r3, [pc, #316]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008764:	2b00      	cmp	r3, #0
 8008766:	d005      	beq.n	8008774 <HAL_RCC_OscConfig+0x154>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e25d      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008774:	4b49      	ldr	r3, [pc, #292]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	061b      	lsls	r3, r3, #24
 8008782:	4946      	ldr	r1, [pc, #280]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 8008784:	4313      	orrs	r3, r2
 8008786:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008788:	4b45      	ldr	r3, [pc, #276]	@ (80088a0 <HAL_RCC_OscConfig+0x280>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4618      	mov	r0, r3
 800878e:	f7fa ff05 	bl	800359c <HAL_InitTick>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d043      	beq.n	8008820 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e249      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d023      	beq.n	80087ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087a4:	4b3d      	ldr	r3, [pc, #244]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a3c      	ldr	r2, [pc, #240]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 80087aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b0:	f7fa ff40 	bl	8003634 <HAL_GetTick>
 80087b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80087b6:	e008      	b.n	80087ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087b8:	f7fa ff3c 	bl	8003634 <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d901      	bls.n	80087ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e232      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80087ca:	4b34      	ldr	r3, [pc, #208]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d0f0      	beq.n	80087b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087d6:	4b31      	ldr	r3, [pc, #196]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	061b      	lsls	r3, r3, #24
 80087e4:	492d      	ldr	r1, [pc, #180]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	604b      	str	r3, [r1, #4]
 80087ea:	e01a      	b.n	8008822 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087ec:	4b2b      	ldr	r3, [pc, #172]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a2a      	ldr	r2, [pc, #168]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 80087f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f8:	f7fa ff1c 	bl	8003634 <HAL_GetTick>
 80087fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80087fe:	e008      	b.n	8008812 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008800:	f7fa ff18 	bl	8003634 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	2b02      	cmp	r3, #2
 800880c:	d901      	bls.n	8008812 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e20e      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008812:	4b22      	ldr	r3, [pc, #136]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1f0      	bne.n	8008800 <HAL_RCC_OscConfig+0x1e0>
 800881e:	e000      	b.n	8008822 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008820:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0308 	and.w	r3, r3, #8
 800882a:	2b00      	cmp	r3, #0
 800882c:	d041      	beq.n	80088b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d01c      	beq.n	8008870 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008836:	4b19      	ldr	r3, [pc, #100]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 8008838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800883c:	4a17      	ldr	r2, [pc, #92]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 800883e:	f043 0301 	orr.w	r3, r3, #1
 8008842:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008846:	f7fa fef5 	bl	8003634 <HAL_GetTick>
 800884a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800884c:	e008      	b.n	8008860 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800884e:	f7fa fef1 	bl	8003634 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	2b02      	cmp	r3, #2
 800885a:	d901      	bls.n	8008860 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e1e7      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008860:	4b0e      	ldr	r3, [pc, #56]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 8008862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008866:	f003 0302 	and.w	r3, r3, #2
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0ef      	beq.n	800884e <HAL_RCC_OscConfig+0x22e>
 800886e:	e020      	b.n	80088b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008870:	4b0a      	ldr	r3, [pc, #40]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 8008872:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008876:	4a09      	ldr	r2, [pc, #36]	@ (800889c <HAL_RCC_OscConfig+0x27c>)
 8008878:	f023 0301 	bic.w	r3, r3, #1
 800887c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008880:	f7fa fed8 	bl	8003634 <HAL_GetTick>
 8008884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008886:	e00d      	b.n	80088a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008888:	f7fa fed4 	bl	8003634 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b02      	cmp	r3, #2
 8008894:	d906      	bls.n	80088a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e1ca      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
 800889a:	bf00      	nop
 800889c:	40021000 	.word	0x40021000
 80088a0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80088a4:	4b8c      	ldr	r3, [pc, #560]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 80088a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088aa:	f003 0302 	and.w	r3, r3, #2
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1ea      	bne.n	8008888 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0304 	and.w	r3, r3, #4
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 80a6 	beq.w	8008a0c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088c0:	2300      	movs	r3, #0
 80088c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80088c4:	4b84      	ldr	r3, [pc, #528]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 80088c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <HAL_RCC_OscConfig+0x2b4>
 80088d0:	2301      	movs	r3, #1
 80088d2:	e000      	b.n	80088d6 <HAL_RCC_OscConfig+0x2b6>
 80088d4:	2300      	movs	r3, #0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00d      	beq.n	80088f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088da:	4b7f      	ldr	r3, [pc, #508]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 80088dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088de:	4a7e      	ldr	r2, [pc, #504]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 80088e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80088e6:	4b7c      	ldr	r3, [pc, #496]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 80088e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088ee:	60fb      	str	r3, [r7, #12]
 80088f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80088f2:	2301      	movs	r3, #1
 80088f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088f6:	4b79      	ldr	r3, [pc, #484]	@ (8008adc <HAL_RCC_OscConfig+0x4bc>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d118      	bne.n	8008934 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008902:	4b76      	ldr	r3, [pc, #472]	@ (8008adc <HAL_RCC_OscConfig+0x4bc>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a75      	ldr	r2, [pc, #468]	@ (8008adc <HAL_RCC_OscConfig+0x4bc>)
 8008908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800890c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800890e:	f7fa fe91 	bl	8003634 <HAL_GetTick>
 8008912:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008914:	e008      	b.n	8008928 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008916:	f7fa fe8d 	bl	8003634 <HAL_GetTick>
 800891a:	4602      	mov	r2, r0
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	2b02      	cmp	r3, #2
 8008922:	d901      	bls.n	8008928 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e183      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008928:	4b6c      	ldr	r3, [pc, #432]	@ (8008adc <HAL_RCC_OscConfig+0x4bc>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008930:	2b00      	cmp	r3, #0
 8008932:	d0f0      	beq.n	8008916 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d108      	bne.n	800894e <HAL_RCC_OscConfig+0x32e>
 800893c:	4b66      	ldr	r3, [pc, #408]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 800893e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008942:	4a65      	ldr	r2, [pc, #404]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 8008944:	f043 0301 	orr.w	r3, r3, #1
 8008948:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800894c:	e024      	b.n	8008998 <HAL_RCC_OscConfig+0x378>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	2b05      	cmp	r3, #5
 8008954:	d110      	bne.n	8008978 <HAL_RCC_OscConfig+0x358>
 8008956:	4b60      	ldr	r3, [pc, #384]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 8008958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800895c:	4a5e      	ldr	r2, [pc, #376]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 800895e:	f043 0304 	orr.w	r3, r3, #4
 8008962:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008966:	4b5c      	ldr	r3, [pc, #368]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 8008968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800896c:	4a5a      	ldr	r2, [pc, #360]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 800896e:	f043 0301 	orr.w	r3, r3, #1
 8008972:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008976:	e00f      	b.n	8008998 <HAL_RCC_OscConfig+0x378>
 8008978:	4b57      	ldr	r3, [pc, #348]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 800897a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800897e:	4a56      	ldr	r2, [pc, #344]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 8008980:	f023 0301 	bic.w	r3, r3, #1
 8008984:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008988:	4b53      	ldr	r3, [pc, #332]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 800898a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800898e:	4a52      	ldr	r2, [pc, #328]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 8008990:	f023 0304 	bic.w	r3, r3, #4
 8008994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d016      	beq.n	80089ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089a0:	f7fa fe48 	bl	8003634 <HAL_GetTick>
 80089a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089a6:	e00a      	b.n	80089be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089a8:	f7fa fe44 	bl	8003634 <HAL_GetTick>
 80089ac:	4602      	mov	r2, r0
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d901      	bls.n	80089be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e138      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089be:	4b46      	ldr	r3, [pc, #280]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 80089c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089c4:	f003 0302 	and.w	r3, r3, #2
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d0ed      	beq.n	80089a8 <HAL_RCC_OscConfig+0x388>
 80089cc:	e015      	b.n	80089fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089ce:	f7fa fe31 	bl	8003634 <HAL_GetTick>
 80089d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80089d4:	e00a      	b.n	80089ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089d6:	f7fa fe2d 	bl	8003634 <HAL_GetTick>
 80089da:	4602      	mov	r2, r0
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d901      	bls.n	80089ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e121      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80089ec:	4b3a      	ldr	r3, [pc, #232]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 80089ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089f2:	f003 0302 	and.w	r3, r3, #2
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1ed      	bne.n	80089d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80089fa:	7ffb      	ldrb	r3, [r7, #31]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d105      	bne.n	8008a0c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a00:	4b35      	ldr	r3, [pc, #212]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 8008a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a04:	4a34      	ldr	r2, [pc, #208]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 8008a06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a0a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0320 	and.w	r3, r3, #32
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d03c      	beq.n	8008a92 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d01c      	beq.n	8008a5a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a20:	4b2d      	ldr	r3, [pc, #180]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 8008a22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a26:	4a2c      	ldr	r2, [pc, #176]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 8008a28:	f043 0301 	orr.w	r3, r3, #1
 8008a2c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a30:	f7fa fe00 	bl	8003634 <HAL_GetTick>
 8008a34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008a36:	e008      	b.n	8008a4a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a38:	f7fa fdfc 	bl	8003634 <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d901      	bls.n	8008a4a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e0f2      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008a4a:	4b23      	ldr	r3, [pc, #140]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 8008a4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a50:	f003 0302 	and.w	r3, r3, #2
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d0ef      	beq.n	8008a38 <HAL_RCC_OscConfig+0x418>
 8008a58:	e01b      	b.n	8008a92 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 8008a5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a60:	4a1d      	ldr	r2, [pc, #116]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 8008a62:	f023 0301 	bic.w	r3, r3, #1
 8008a66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a6a:	f7fa fde3 	bl	8003634 <HAL_GetTick>
 8008a6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008a70:	e008      	b.n	8008a84 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a72:	f7fa fddf 	bl	8003634 <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d901      	bls.n	8008a84 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e0d5      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008a84:	4b14      	ldr	r3, [pc, #80]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 8008a86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a8a:	f003 0302 	and.w	r3, r3, #2
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1ef      	bne.n	8008a72 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	69db      	ldr	r3, [r3, #28]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f000 80c9 	beq.w	8008c2e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f003 030c 	and.w	r3, r3, #12
 8008aa4:	2b0c      	cmp	r3, #12
 8008aa6:	f000 8083 	beq.w	8008bb0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d15e      	bne.n	8008b70 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ab2:	4b09      	ldr	r3, [pc, #36]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a08      	ldr	r2, [pc, #32]	@ (8008ad8 <HAL_RCC_OscConfig+0x4b8>)
 8008ab8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008abe:	f7fa fdb9 	bl	8003634 <HAL_GetTick>
 8008ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ac4:	e00c      	b.n	8008ae0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ac6:	f7fa fdb5 	bl	8003634 <HAL_GetTick>
 8008aca:	4602      	mov	r2, r0
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	1ad3      	subs	r3, r2, r3
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d905      	bls.n	8008ae0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e0ab      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
 8008ad8:	40021000 	.word	0x40021000
 8008adc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ae0:	4b55      	ldr	r3, [pc, #340]	@ (8008c38 <HAL_RCC_OscConfig+0x618>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1ec      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008aec:	4b52      	ldr	r3, [pc, #328]	@ (8008c38 <HAL_RCC_OscConfig+0x618>)
 8008aee:	68da      	ldr	r2, [r3, #12]
 8008af0:	4b52      	ldr	r3, [pc, #328]	@ (8008c3c <HAL_RCC_OscConfig+0x61c>)
 8008af2:	4013      	ands	r3, r2
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6a11      	ldr	r1, [r2, #32]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008afc:	3a01      	subs	r2, #1
 8008afe:	0112      	lsls	r2, r2, #4
 8008b00:	4311      	orrs	r1, r2
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008b06:	0212      	lsls	r2, r2, #8
 8008b08:	4311      	orrs	r1, r2
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008b0e:	0852      	lsrs	r2, r2, #1
 8008b10:	3a01      	subs	r2, #1
 8008b12:	0552      	lsls	r2, r2, #21
 8008b14:	4311      	orrs	r1, r2
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008b1a:	0852      	lsrs	r2, r2, #1
 8008b1c:	3a01      	subs	r2, #1
 8008b1e:	0652      	lsls	r2, r2, #25
 8008b20:	4311      	orrs	r1, r2
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008b26:	06d2      	lsls	r2, r2, #27
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	4943      	ldr	r1, [pc, #268]	@ (8008c38 <HAL_RCC_OscConfig+0x618>)
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b30:	4b41      	ldr	r3, [pc, #260]	@ (8008c38 <HAL_RCC_OscConfig+0x618>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a40      	ldr	r2, [pc, #256]	@ (8008c38 <HAL_RCC_OscConfig+0x618>)
 8008b36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b3a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008b3c:	4b3e      	ldr	r3, [pc, #248]	@ (8008c38 <HAL_RCC_OscConfig+0x618>)
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	4a3d      	ldr	r2, [pc, #244]	@ (8008c38 <HAL_RCC_OscConfig+0x618>)
 8008b42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b48:	f7fa fd74 	bl	8003634 <HAL_GetTick>
 8008b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b4e:	e008      	b.n	8008b62 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b50:	f7fa fd70 	bl	8003634 <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d901      	bls.n	8008b62 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e066      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b62:	4b35      	ldr	r3, [pc, #212]	@ (8008c38 <HAL_RCC_OscConfig+0x618>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0f0      	beq.n	8008b50 <HAL_RCC_OscConfig+0x530>
 8008b6e:	e05e      	b.n	8008c2e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b70:	4b31      	ldr	r3, [pc, #196]	@ (8008c38 <HAL_RCC_OscConfig+0x618>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a30      	ldr	r2, [pc, #192]	@ (8008c38 <HAL_RCC_OscConfig+0x618>)
 8008b76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b7c:	f7fa fd5a 	bl	8003634 <HAL_GetTick>
 8008b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b82:	e008      	b.n	8008b96 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b84:	f7fa fd56 	bl	8003634 <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d901      	bls.n	8008b96 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e04c      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b96:	4b28      	ldr	r3, [pc, #160]	@ (8008c38 <HAL_RCC_OscConfig+0x618>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1f0      	bne.n	8008b84 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008ba2:	4b25      	ldr	r3, [pc, #148]	@ (8008c38 <HAL_RCC_OscConfig+0x618>)
 8008ba4:	68da      	ldr	r2, [r3, #12]
 8008ba6:	4924      	ldr	r1, [pc, #144]	@ (8008c38 <HAL_RCC_OscConfig+0x618>)
 8008ba8:	4b25      	ldr	r3, [pc, #148]	@ (8008c40 <HAL_RCC_OscConfig+0x620>)
 8008baa:	4013      	ands	r3, r2
 8008bac:	60cb      	str	r3, [r1, #12]
 8008bae:	e03e      	b.n	8008c2e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d101      	bne.n	8008bbc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e039      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8008c38 <HAL_RCC_OscConfig+0x618>)
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	f003 0203 	and.w	r2, r3, #3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a1b      	ldr	r3, [r3, #32]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d12c      	bne.n	8008c2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d123      	bne.n	8008c2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d11b      	bne.n	8008c2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d113      	bne.n	8008c2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c0c:	085b      	lsrs	r3, r3, #1
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d109      	bne.n	8008c2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c20:	085b      	lsrs	r3, r3, #1
 8008c22:	3b01      	subs	r3, #1
 8008c24:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d001      	beq.n	8008c2e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e000      	b.n	8008c30 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3720      	adds	r7, #32
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	40021000 	.word	0x40021000
 8008c3c:	019f800c 	.word	0x019f800c
 8008c40:	feeefffc 	.word	0xfeeefffc

08008c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d101      	bne.n	8008c5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e11e      	b.n	8008e9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c5c:	4b91      	ldr	r3, [pc, #580]	@ (8008ea4 <HAL_RCC_ClockConfig+0x260>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 030f 	and.w	r3, r3, #15
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d910      	bls.n	8008c8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c6a:	4b8e      	ldr	r3, [pc, #568]	@ (8008ea4 <HAL_RCC_ClockConfig+0x260>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f023 020f 	bic.w	r2, r3, #15
 8008c72:	498c      	ldr	r1, [pc, #560]	@ (8008ea4 <HAL_RCC_ClockConfig+0x260>)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c7a:	4b8a      	ldr	r3, [pc, #552]	@ (8008ea4 <HAL_RCC_ClockConfig+0x260>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 030f 	and.w	r3, r3, #15
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d001      	beq.n	8008c8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e106      	b.n	8008e9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d073      	beq.n	8008d80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	2b03      	cmp	r3, #3
 8008c9e:	d129      	bne.n	8008cf4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ca0:	4b81      	ldr	r3, [pc, #516]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d101      	bne.n	8008cb0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e0f4      	b.n	8008e9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008cb0:	f000 f99e 	bl	8008ff0 <RCC_GetSysClockFreqFromPLLSource>
 8008cb4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	4a7c      	ldr	r2, [pc, #496]	@ (8008eac <HAL_RCC_ClockConfig+0x268>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d93f      	bls.n	8008d3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008cbe:	4b7a      	ldr	r3, [pc, #488]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d009      	beq.n	8008cde <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d033      	beq.n	8008d3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d12f      	bne.n	8008d3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008cde:	4b72      	ldr	r3, [pc, #456]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ce6:	4a70      	ldr	r2, [pc, #448]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008cee:	2380      	movs	r3, #128	@ 0x80
 8008cf0:	617b      	str	r3, [r7, #20]
 8008cf2:	e024      	b.n	8008d3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d107      	bne.n	8008d0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008cfc:	4b6a      	ldr	r3, [pc, #424]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d109      	bne.n	8008d1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e0c6      	b.n	8008e9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d0c:	4b66      	ldr	r3, [pc, #408]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d101      	bne.n	8008d1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e0be      	b.n	8008e9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008d1c:	f000 f8ce 	bl	8008ebc <HAL_RCC_GetSysClockFreq>
 8008d20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	4a61      	ldr	r2, [pc, #388]	@ (8008eac <HAL_RCC_ClockConfig+0x268>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d909      	bls.n	8008d3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d32:	4a5d      	ldr	r2, [pc, #372]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008d34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008d3a:	2380      	movs	r3, #128	@ 0x80
 8008d3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d3e:	4b5a      	ldr	r3, [pc, #360]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f023 0203 	bic.w	r2, r3, #3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	4957      	ldr	r1, [pc, #348]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d50:	f7fa fc70 	bl	8003634 <HAL_GetTick>
 8008d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d56:	e00a      	b.n	8008d6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d58:	f7fa fc6c 	bl	8003634 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d901      	bls.n	8008d6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e095      	b.n	8008e9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d6e:	4b4e      	ldr	r3, [pc, #312]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f003 020c 	and.w	r2, r3, #12
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d1eb      	bne.n	8008d58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0302 	and.w	r3, r3, #2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d023      	beq.n	8008dd4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d005      	beq.n	8008da4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d98:	4b43      	ldr	r3, [pc, #268]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	4a42      	ldr	r2, [pc, #264]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008d9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008da2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0308 	and.w	r3, r3, #8
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d007      	beq.n	8008dc0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008db0:	4b3d      	ldr	r3, [pc, #244]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008db8:	4a3b      	ldr	r2, [pc, #236]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008dba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008dbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dc0:	4b39      	ldr	r3, [pc, #228]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	4936      	ldr	r1, [pc, #216]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	608b      	str	r3, [r1, #8]
 8008dd2:	e008      	b.n	8008de6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	2b80      	cmp	r3, #128	@ 0x80
 8008dd8:	d105      	bne.n	8008de6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008dda:	4b33      	ldr	r3, [pc, #204]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	4a32      	ldr	r2, [pc, #200]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008de0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008de4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008de6:	4b2f      	ldr	r3, [pc, #188]	@ (8008ea4 <HAL_RCC_ClockConfig+0x260>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 030f 	and.w	r3, r3, #15
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d21d      	bcs.n	8008e30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008df4:	4b2b      	ldr	r3, [pc, #172]	@ (8008ea4 <HAL_RCC_ClockConfig+0x260>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f023 020f 	bic.w	r2, r3, #15
 8008dfc:	4929      	ldr	r1, [pc, #164]	@ (8008ea4 <HAL_RCC_ClockConfig+0x260>)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008e04:	f7fa fc16 	bl	8003634 <HAL_GetTick>
 8008e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e0a:	e00a      	b.n	8008e22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e0c:	f7fa fc12 	bl	8003634 <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d901      	bls.n	8008e22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e03b      	b.n	8008e9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e22:	4b20      	ldr	r3, [pc, #128]	@ (8008ea4 <HAL_RCC_ClockConfig+0x260>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 030f 	and.w	r3, r3, #15
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d1ed      	bne.n	8008e0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0304 	and.w	r3, r3, #4
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d008      	beq.n	8008e4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	4917      	ldr	r1, [pc, #92]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0308 	and.w	r3, r3, #8
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d009      	beq.n	8008e6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e5a:	4b13      	ldr	r3, [pc, #76]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	490f      	ldr	r1, [pc, #60]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008e6e:	f000 f825 	bl	8008ebc <HAL_RCC_GetSysClockFreq>
 8008e72:	4602      	mov	r2, r0
 8008e74:	4b0c      	ldr	r3, [pc, #48]	@ (8008ea8 <HAL_RCC_ClockConfig+0x264>)
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	091b      	lsrs	r3, r3, #4
 8008e7a:	f003 030f 	and.w	r3, r3, #15
 8008e7e:	490c      	ldr	r1, [pc, #48]	@ (8008eb0 <HAL_RCC_ClockConfig+0x26c>)
 8008e80:	5ccb      	ldrb	r3, [r1, r3]
 8008e82:	f003 031f 	and.w	r3, r3, #31
 8008e86:	fa22 f303 	lsr.w	r3, r2, r3
 8008e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8008eb4 <HAL_RCC_ClockConfig+0x270>)
 8008e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb8 <HAL_RCC_ClockConfig+0x274>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fa fb82 	bl	800359c <HAL_InitTick>
 8008e98:	4603      	mov	r3, r0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	40022000 	.word	0x40022000
 8008ea8:	40021000 	.word	0x40021000
 8008eac:	04c4b400 	.word	0x04c4b400
 8008eb0:	0800f838 	.word	0x0800f838
 8008eb4:	20000000 	.word	0x20000000
 8008eb8:	20000004 	.word	0x20000004

08008ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b087      	sub	sp, #28
 8008ec0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8008f74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	f003 030c 	and.w	r3, r3, #12
 8008eca:	2b04      	cmp	r3, #4
 8008ecc:	d102      	bne.n	8008ed4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008ece:	4b2a      	ldr	r3, [pc, #168]	@ (8008f78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008ed0:	613b      	str	r3, [r7, #16]
 8008ed2:	e047      	b.n	8008f64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008ed4:	4b27      	ldr	r3, [pc, #156]	@ (8008f74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f003 030c 	and.w	r3, r3, #12
 8008edc:	2b08      	cmp	r3, #8
 8008ede:	d102      	bne.n	8008ee6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008ee0:	4b26      	ldr	r3, [pc, #152]	@ (8008f7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008ee2:	613b      	str	r3, [r7, #16]
 8008ee4:	e03e      	b.n	8008f64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008ee6:	4b23      	ldr	r3, [pc, #140]	@ (8008f74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f003 030c 	and.w	r3, r3, #12
 8008eee:	2b0c      	cmp	r3, #12
 8008ef0:	d136      	bne.n	8008f60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008ef2:	4b20      	ldr	r3, [pc, #128]	@ (8008f74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	f003 0303 	and.w	r3, r3, #3
 8008efa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008efc:	4b1d      	ldr	r3, [pc, #116]	@ (8008f74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	091b      	lsrs	r3, r3, #4
 8008f02:	f003 030f 	and.w	r3, r3, #15
 8008f06:	3301      	adds	r3, #1
 8008f08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2b03      	cmp	r3, #3
 8008f0e:	d10c      	bne.n	8008f2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f10:	4a1a      	ldr	r2, [pc, #104]	@ (8008f7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f18:	4a16      	ldr	r2, [pc, #88]	@ (8008f74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f1a:	68d2      	ldr	r2, [r2, #12]
 8008f1c:	0a12      	lsrs	r2, r2, #8
 8008f1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008f22:	fb02 f303 	mul.w	r3, r2, r3
 8008f26:	617b      	str	r3, [r7, #20]
      break;
 8008f28:	e00c      	b.n	8008f44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f2a:	4a13      	ldr	r2, [pc, #76]	@ (8008f78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f32:	4a10      	ldr	r2, [pc, #64]	@ (8008f74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f34:	68d2      	ldr	r2, [r2, #12]
 8008f36:	0a12      	lsrs	r2, r2, #8
 8008f38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008f3c:	fb02 f303 	mul.w	r3, r2, r3
 8008f40:	617b      	str	r3, [r7, #20]
      break;
 8008f42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f44:	4b0b      	ldr	r3, [pc, #44]	@ (8008f74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	0e5b      	lsrs	r3, r3, #25
 8008f4a:	f003 0303 	and.w	r3, r3, #3
 8008f4e:	3301      	adds	r3, #1
 8008f50:	005b      	lsls	r3, r3, #1
 8008f52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f5c:	613b      	str	r3, [r7, #16]
 8008f5e:	e001      	b.n	8008f64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008f60:	2300      	movs	r3, #0
 8008f62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008f64:	693b      	ldr	r3, [r7, #16]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	371c      	adds	r7, #28
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	40021000 	.word	0x40021000
 8008f78:	00f42400 	.word	0x00f42400
 8008f7c:	007a1200 	.word	0x007a1200

08008f80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f80:	b480      	push	{r7}
 8008f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f84:	4b03      	ldr	r3, [pc, #12]	@ (8008f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f86:	681b      	ldr	r3, [r3, #0]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	20000000 	.word	0x20000000

08008f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008f9c:	f7ff fff0 	bl	8008f80 <HAL_RCC_GetHCLKFreq>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	4b06      	ldr	r3, [pc, #24]	@ (8008fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	0a1b      	lsrs	r3, r3, #8
 8008fa8:	f003 0307 	and.w	r3, r3, #7
 8008fac:	4904      	ldr	r1, [pc, #16]	@ (8008fc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008fae:	5ccb      	ldrb	r3, [r1, r3]
 8008fb0:	f003 031f 	and.w	r3, r3, #31
 8008fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	40021000 	.word	0x40021000
 8008fc0:	0800f848 	.word	0x0800f848

08008fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008fc8:	f7ff ffda 	bl	8008f80 <HAL_RCC_GetHCLKFreq>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	4b06      	ldr	r3, [pc, #24]	@ (8008fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	0adb      	lsrs	r3, r3, #11
 8008fd4:	f003 0307 	and.w	r3, r3, #7
 8008fd8:	4904      	ldr	r1, [pc, #16]	@ (8008fec <HAL_RCC_GetPCLK2Freq+0x28>)
 8008fda:	5ccb      	ldrb	r3, [r1, r3]
 8008fdc:	f003 031f 	and.w	r3, r3, #31
 8008fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	40021000 	.word	0x40021000
 8008fec:	0800f848 	.word	0x0800f848

08008ff0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8009070 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	f003 0303 	and.w	r3, r3, #3
 8008ffe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009000:	4b1b      	ldr	r3, [pc, #108]	@ (8009070 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	091b      	lsrs	r3, r3, #4
 8009006:	f003 030f 	and.w	r3, r3, #15
 800900a:	3301      	adds	r3, #1
 800900c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	2b03      	cmp	r3, #3
 8009012:	d10c      	bne.n	800902e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009014:	4a17      	ldr	r2, [pc, #92]	@ (8009074 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	fbb2 f3f3 	udiv	r3, r2, r3
 800901c:	4a14      	ldr	r2, [pc, #80]	@ (8009070 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800901e:	68d2      	ldr	r2, [r2, #12]
 8009020:	0a12      	lsrs	r2, r2, #8
 8009022:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009026:	fb02 f303 	mul.w	r3, r2, r3
 800902a:	617b      	str	r3, [r7, #20]
    break;
 800902c:	e00c      	b.n	8009048 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800902e:	4a12      	ldr	r2, [pc, #72]	@ (8009078 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	fbb2 f3f3 	udiv	r3, r2, r3
 8009036:	4a0e      	ldr	r2, [pc, #56]	@ (8009070 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009038:	68d2      	ldr	r2, [r2, #12]
 800903a:	0a12      	lsrs	r2, r2, #8
 800903c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009040:	fb02 f303 	mul.w	r3, r2, r3
 8009044:	617b      	str	r3, [r7, #20]
    break;
 8009046:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009048:	4b09      	ldr	r3, [pc, #36]	@ (8009070 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	0e5b      	lsrs	r3, r3, #25
 800904e:	f003 0303 	and.w	r3, r3, #3
 8009052:	3301      	adds	r3, #1
 8009054:	005b      	lsls	r3, r3, #1
 8009056:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009060:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009062:	687b      	ldr	r3, [r7, #4]
}
 8009064:	4618      	mov	r0, r3
 8009066:	371c      	adds	r7, #28
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	40021000 	.word	0x40021000
 8009074:	007a1200 	.word	0x007a1200
 8009078:	00f42400 	.word	0x00f42400

0800907c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009084:	2300      	movs	r3, #0
 8009086:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009088:	2300      	movs	r3, #0
 800908a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 8098 	beq.w	80091ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800909a:	2300      	movs	r3, #0
 800909c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800909e:	4b43      	ldr	r3, [pc, #268]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10d      	bne.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090aa:	4b40      	ldr	r3, [pc, #256]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ae:	4a3f      	ldr	r2, [pc, #252]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80090b6:	4b3d      	ldr	r3, [pc, #244]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090be:	60bb      	str	r3, [r7, #8]
 80090c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80090c2:	2301      	movs	r3, #1
 80090c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80090c6:	4b3a      	ldr	r3, [pc, #232]	@ (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a39      	ldr	r2, [pc, #228]	@ (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80090cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090d2:	f7fa faaf 	bl	8003634 <HAL_GetTick>
 80090d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090d8:	e009      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090da:	f7fa faab 	bl	8003634 <HAL_GetTick>
 80090de:	4602      	mov	r2, r0
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d902      	bls.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	74fb      	strb	r3, [r7, #19]
        break;
 80090ec:	e005      	b.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090ee:	4b30      	ldr	r3, [pc, #192]	@ (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d0ef      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80090fa:	7cfb      	ldrb	r3, [r7, #19]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d159      	bne.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009100:	4b2a      	ldr	r3, [pc, #168]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800910a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d01e      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	429a      	cmp	r2, r3
 800911a:	d019      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800911c:	4b23      	ldr	r3, [pc, #140]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800911e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009126:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009128:	4b20      	ldr	r3, [pc, #128]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800912a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800912e:	4a1f      	ldr	r2, [pc, #124]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009138:	4b1c      	ldr	r3, [pc, #112]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800913a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800913e:	4a1b      	ldr	r2, [pc, #108]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009140:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009148:	4a18      	ldr	r2, [pc, #96]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	2b00      	cmp	r3, #0
 8009158:	d016      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800915a:	f7fa fa6b 	bl	8003634 <HAL_GetTick>
 800915e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009160:	e00b      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009162:	f7fa fa67 	bl	8003634 <HAL_GetTick>
 8009166:	4602      	mov	r2, r0
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009170:	4293      	cmp	r3, r2
 8009172:	d902      	bls.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	74fb      	strb	r3, [r7, #19]
            break;
 8009178:	e006      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800917a:	4b0c      	ldr	r3, [pc, #48]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800917c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009180:	f003 0302 	and.w	r3, r3, #2
 8009184:	2b00      	cmp	r3, #0
 8009186:	d0ec      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009188:	7cfb      	ldrb	r3, [r7, #19]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10b      	bne.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800918e:	4b07      	ldr	r3, [pc, #28]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800919c:	4903      	ldr	r1, [pc, #12]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80091a4:	e008      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80091a6:	7cfb      	ldrb	r3, [r7, #19]
 80091a8:	74bb      	strb	r3, [r7, #18]
 80091aa:	e005      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80091ac:	40021000 	.word	0x40021000
 80091b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b4:	7cfb      	ldrb	r3, [r7, #19]
 80091b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80091b8:	7c7b      	ldrb	r3, [r7, #17]
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d105      	bne.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091be:	4ba7      	ldr	r3, [pc, #668]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091c2:	4aa6      	ldr	r2, [pc, #664]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00a      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80091d6:	4ba1      	ldr	r3, [pc, #644]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091dc:	f023 0203 	bic.w	r2, r3, #3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	499d      	ldr	r1, [pc, #628]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091e6:	4313      	orrs	r3, r2
 80091e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 0302 	and.w	r3, r3, #2
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00a      	beq.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80091f8:	4b98      	ldr	r3, [pc, #608]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091fe:	f023 020c 	bic.w	r2, r3, #12
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	4995      	ldr	r1, [pc, #596]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009208:	4313      	orrs	r3, r2
 800920a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f003 0304 	and.w	r3, r3, #4
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00a      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800921a:	4b90      	ldr	r3, [pc, #576]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800921c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009220:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	498c      	ldr	r1, [pc, #560]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800922a:	4313      	orrs	r3, r2
 800922c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0308 	and.w	r3, r3, #8
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00a      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800923c:	4b87      	ldr	r3, [pc, #540]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800923e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009242:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	4984      	ldr	r1, [pc, #528]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800924c:	4313      	orrs	r3, r2
 800924e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0310 	and.w	r3, r3, #16
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00a      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800925e:	4b7f      	ldr	r3, [pc, #508]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009264:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	695b      	ldr	r3, [r3, #20]
 800926c:	497b      	ldr	r1, [pc, #492]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800926e:	4313      	orrs	r3, r2
 8009270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f003 0320 	and.w	r3, r3, #32
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00a      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009280:	4b76      	ldr	r3, [pc, #472]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009286:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	4973      	ldr	r1, [pc, #460]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009290:	4313      	orrs	r3, r2
 8009292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80092a2:	4b6e      	ldr	r3, [pc, #440]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	69db      	ldr	r3, [r3, #28]
 80092b0:	496a      	ldr	r1, [pc, #424]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092b2:	4313      	orrs	r3, r2
 80092b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00a      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80092c4:	4b65      	ldr	r3, [pc, #404]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	4962      	ldr	r1, [pc, #392]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092d4:	4313      	orrs	r3, r2
 80092d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80092e6:	4b5d      	ldr	r3, [pc, #372]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f4:	4959      	ldr	r1, [pc, #356]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00a      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009308:	4b54      	ldr	r3, [pc, #336]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800930a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800930e:	f023 0203 	bic.w	r2, r3, #3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009316:	4951      	ldr	r1, [pc, #324]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009318:	4313      	orrs	r3, r2
 800931a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800932a:	4b4c      	ldr	r3, [pc, #304]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800932c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009330:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009338:	4948      	ldr	r1, [pc, #288]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800933a:	4313      	orrs	r3, r2
 800933c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009348:	2b00      	cmp	r3, #0
 800934a:	d015      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800934c:	4b43      	ldr	r3, [pc, #268]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800934e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009352:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800935a:	4940      	ldr	r1, [pc, #256]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800935c:	4313      	orrs	r3, r2
 800935e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800936a:	d105      	bne.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800936c:	4b3b      	ldr	r3, [pc, #236]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	4a3a      	ldr	r2, [pc, #232]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009376:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009380:	2b00      	cmp	r3, #0
 8009382:	d015      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009384:	4b35      	ldr	r3, [pc, #212]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800938a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009392:	4932      	ldr	r1, [pc, #200]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009394:	4313      	orrs	r3, r2
 8009396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800939e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80093a2:	d105      	bne.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093a4:	4b2d      	ldr	r3, [pc, #180]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	4a2c      	ldr	r2, [pc, #176]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093ae:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d015      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80093bc:	4b27      	ldr	r3, [pc, #156]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ca:	4924      	ldr	r1, [pc, #144]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093da:	d105      	bne.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093dc:	4b1f      	ldr	r3, [pc, #124]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	4a1e      	ldr	r2, [pc, #120]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d015      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80093f4:	4b19      	ldr	r3, [pc, #100]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009402:	4916      	ldr	r1, [pc, #88]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009404:	4313      	orrs	r3, r2
 8009406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800940e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009412:	d105      	bne.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009414:	4b11      	ldr	r3, [pc, #68]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	4a10      	ldr	r2, [pc, #64]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800941a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800941e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009428:	2b00      	cmp	r3, #0
 800942a:	d019      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800942c:	4b0b      	ldr	r3, [pc, #44]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800942e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009432:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943a:	4908      	ldr	r1, [pc, #32]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800943c:	4313      	orrs	r3, r2
 800943e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009446:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800944a:	d109      	bne.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800944c:	4b03      	ldr	r3, [pc, #12]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	4a02      	ldr	r2, [pc, #8]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009456:	60d3      	str	r3, [r2, #12]
 8009458:	e002      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800945a:	bf00      	nop
 800945c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d015      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800946c:	4b29      	ldr	r3, [pc, #164]	@ (8009514 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800946e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009472:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800947a:	4926      	ldr	r1, [pc, #152]	@ (8009514 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800947c:	4313      	orrs	r3, r2
 800947e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009486:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800948a:	d105      	bne.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800948c:	4b21      	ldr	r3, [pc, #132]	@ (8009514 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	4a20      	ldr	r2, [pc, #128]	@ (8009514 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009492:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009496:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d015      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80094a4:	4b1b      	ldr	r3, [pc, #108]	@ (8009514 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80094a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094aa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094b2:	4918      	ldr	r1, [pc, #96]	@ (8009514 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80094b4:	4313      	orrs	r3, r2
 80094b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094c2:	d105      	bne.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80094c4:	4b13      	ldr	r3, [pc, #76]	@ (8009514 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	4a12      	ldr	r2, [pc, #72]	@ (8009514 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80094ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094ce:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d015      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80094dc:	4b0d      	ldr	r3, [pc, #52]	@ (8009514 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80094de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80094e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094ea:	490a      	ldr	r1, [pc, #40]	@ (8009514 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80094ec:	4313      	orrs	r3, r2
 80094ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094fa:	d105      	bne.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094fc:	4b05      	ldr	r3, [pc, #20]	@ (8009514 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	4a04      	ldr	r2, [pc, #16]	@ (8009514 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009502:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009506:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009508:	7cbb      	ldrb	r3, [r7, #18]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	40021000 	.word	0x40021000

08009518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	e042      	b.n	80095b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009530:	2b00      	cmp	r3, #0
 8009532:	d106      	bne.n	8009542 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7f9 ff1d 	bl	800337c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2224      	movs	r2, #36	@ 0x24
 8009546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f022 0201 	bic.w	r2, r2, #1
 8009558:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955e:	2b00      	cmp	r3, #0
 8009560:	d002      	beq.n	8009568 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 ff1c 	bl	800a3a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fc1d 	bl	8009da8 <UART_SetConfig>
 800956e:	4603      	mov	r3, r0
 8009570:	2b01      	cmp	r3, #1
 8009572:	d101      	bne.n	8009578 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e01b      	b.n	80095b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	685a      	ldr	r2, [r3, #4]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	689a      	ldr	r2, [r3, #8]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f042 0201 	orr.w	r2, r2, #1
 80095a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 ff9b 	bl	800a4e4 <UART_CheckIdleState>
 80095ae:	4603      	mov	r3, r0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b08a      	sub	sp, #40	@ 0x28
 80095bc:	af02      	add	r7, sp, #8
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	603b      	str	r3, [r7, #0]
 80095c4:	4613      	mov	r3, r2
 80095c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095ce:	2b20      	cmp	r3, #32
 80095d0:	d17b      	bne.n	80096ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <HAL_UART_Transmit+0x26>
 80095d8:	88fb      	ldrh	r3, [r7, #6]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e074      	b.n	80096cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2221      	movs	r2, #33	@ 0x21
 80095ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095f2:	f7fa f81f 	bl	8003634 <HAL_GetTick>
 80095f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	88fa      	ldrh	r2, [r7, #6]
 80095fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	88fa      	ldrh	r2, [r7, #6]
 8009604:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009610:	d108      	bne.n	8009624 <HAL_UART_Transmit+0x6c>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d104      	bne.n	8009624 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800961a:	2300      	movs	r3, #0
 800961c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	61bb      	str	r3, [r7, #24]
 8009622:	e003      	b.n	800962c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009628:	2300      	movs	r3, #0
 800962a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800962c:	e030      	b.n	8009690 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	2200      	movs	r2, #0
 8009636:	2180      	movs	r1, #128	@ 0x80
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 fffd 	bl	800a638 <UART_WaitOnFlagUntilTimeout>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d005      	beq.n	8009650 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2220      	movs	r2, #32
 8009648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800964c:	2303      	movs	r3, #3
 800964e:	e03d      	b.n	80096cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10b      	bne.n	800966e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	881b      	ldrh	r3, [r3, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009664:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	3302      	adds	r3, #2
 800966a:	61bb      	str	r3, [r7, #24]
 800966c:	e007      	b.n	800967e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	781a      	ldrb	r2, [r3, #0]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	3301      	adds	r3, #1
 800967c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009684:	b29b      	uxth	r3, r3
 8009686:	3b01      	subs	r3, #1
 8009688:	b29a      	uxth	r2, r3
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009696:	b29b      	uxth	r3, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1c8      	bne.n	800962e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	2200      	movs	r2, #0
 80096a4:	2140      	movs	r1, #64	@ 0x40
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f000 ffc6 	bl	800a638 <UART_WaitOnFlagUntilTimeout>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d005      	beq.n	80096be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80096ba:	2303      	movs	r3, #3
 80096bc:	e006      	b.n	80096cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2220      	movs	r2, #32
 80096c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	e000      	b.n	80096cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80096ca:	2302      	movs	r3, #2
  }
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3720      	adds	r7, #32
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b0ba      	sub	sp, #232	@ 0xe8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80096fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80096fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009702:	4013      	ands	r3, r2
 8009704:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800970c:	2b00      	cmp	r3, #0
 800970e:	d11b      	bne.n	8009748 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009714:	f003 0320 	and.w	r3, r3, #32
 8009718:	2b00      	cmp	r3, #0
 800971a:	d015      	beq.n	8009748 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800971c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009720:	f003 0320 	and.w	r3, r3, #32
 8009724:	2b00      	cmp	r3, #0
 8009726:	d105      	bne.n	8009734 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800972c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009730:	2b00      	cmp	r3, #0
 8009732:	d009      	beq.n	8009748 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 8300 	beq.w	8009d3e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	4798      	blx	r3
      }
      return;
 8009746:	e2fa      	b.n	8009d3e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009748:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800974c:	2b00      	cmp	r3, #0
 800974e:	f000 8123 	beq.w	8009998 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009752:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009756:	4b8d      	ldr	r3, [pc, #564]	@ (800998c <HAL_UART_IRQHandler+0x2b8>)
 8009758:	4013      	ands	r3, r2
 800975a:	2b00      	cmp	r3, #0
 800975c:	d106      	bne.n	800976c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800975e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009762:	4b8b      	ldr	r3, [pc, #556]	@ (8009990 <HAL_UART_IRQHandler+0x2bc>)
 8009764:	4013      	ands	r3, r2
 8009766:	2b00      	cmp	r3, #0
 8009768:	f000 8116 	beq.w	8009998 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800976c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009770:	f003 0301 	and.w	r3, r3, #1
 8009774:	2b00      	cmp	r3, #0
 8009776:	d011      	beq.n	800979c <HAL_UART_IRQHandler+0xc8>
 8009778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800977c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00b      	beq.n	800979c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2201      	movs	r2, #1
 800978a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009792:	f043 0201 	orr.w	r2, r3, #1
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800979c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097a0:	f003 0302 	and.w	r3, r3, #2
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d011      	beq.n	80097cc <HAL_UART_IRQHandler+0xf8>
 80097a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097ac:	f003 0301 	and.w	r3, r3, #1
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00b      	beq.n	80097cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2202      	movs	r2, #2
 80097ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097c2:	f043 0204 	orr.w	r2, r3, #4
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097d0:	f003 0304 	and.w	r3, r3, #4
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d011      	beq.n	80097fc <HAL_UART_IRQHandler+0x128>
 80097d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097dc:	f003 0301 	and.w	r3, r3, #1
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00b      	beq.n	80097fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2204      	movs	r2, #4
 80097ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097f2:	f043 0202 	orr.w	r2, r3, #2
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80097fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009800:	f003 0308 	and.w	r3, r3, #8
 8009804:	2b00      	cmp	r3, #0
 8009806:	d017      	beq.n	8009838 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800980c:	f003 0320 	and.w	r3, r3, #32
 8009810:	2b00      	cmp	r3, #0
 8009812:	d105      	bne.n	8009820 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009814:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009818:	4b5c      	ldr	r3, [pc, #368]	@ (800998c <HAL_UART_IRQHandler+0x2b8>)
 800981a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00b      	beq.n	8009838 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2208      	movs	r2, #8
 8009826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800982e:	f043 0208 	orr.w	r2, r3, #8
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800983c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009840:	2b00      	cmp	r3, #0
 8009842:	d012      	beq.n	800986a <HAL_UART_IRQHandler+0x196>
 8009844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009848:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00c      	beq.n	800986a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009858:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009860:	f043 0220 	orr.w	r2, r3, #32
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009870:	2b00      	cmp	r3, #0
 8009872:	f000 8266 	beq.w	8009d42 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800987a:	f003 0320 	and.w	r3, r3, #32
 800987e:	2b00      	cmp	r3, #0
 8009880:	d013      	beq.n	80098aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009886:	f003 0320 	and.w	r3, r3, #32
 800988a:	2b00      	cmp	r3, #0
 800988c:	d105      	bne.n	800989a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800988e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d007      	beq.n	80098aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098be:	2b40      	cmp	r3, #64	@ 0x40
 80098c0:	d005      	beq.n	80098ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80098c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d054      	beq.n	8009978 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f001 f807 	bl	800a8e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098de:	2b40      	cmp	r3, #64	@ 0x40
 80098e0:	d146      	bne.n	8009970 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3308      	adds	r3, #8
 80098e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80098f0:	e853 3f00 	ldrex	r3, [r3]
 80098f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80098f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009900:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	3308      	adds	r3, #8
 800990a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800990e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009912:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009916:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800991a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800991e:	e841 2300 	strex	r3, r2, [r1]
 8009922:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1d9      	bne.n	80098e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009934:	2b00      	cmp	r3, #0
 8009936:	d017      	beq.n	8009968 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800993e:	4a15      	ldr	r2, [pc, #84]	@ (8009994 <HAL_UART_IRQHandler+0x2c0>)
 8009940:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009948:	4618      	mov	r0, r3
 800994a:	f7fc fe2b 	bl	80065a4 <HAL_DMA_Abort_IT>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d019      	beq.n	8009988 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800995a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009962:	4610      	mov	r0, r2
 8009964:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009966:	e00f      	b.n	8009988 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 fa13 	bl	8009d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800996e:	e00b      	b.n	8009988 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fa0f 	bl	8009d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009976:	e007      	b.n	8009988 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fa0b 	bl	8009d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009986:	e1dc      	b.n	8009d42 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009988:	bf00      	nop
    return;
 800998a:	e1da      	b.n	8009d42 <HAL_UART_IRQHandler+0x66e>
 800998c:	10000001 	.word	0x10000001
 8009990:	04000120 	.word	0x04000120
 8009994:	0800ab99 	.word	0x0800ab99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800999c:	2b01      	cmp	r3, #1
 800999e:	f040 8170 	bne.w	8009c82 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80099a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099a6:	f003 0310 	and.w	r3, r3, #16
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 8169 	beq.w	8009c82 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80099b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099b4:	f003 0310 	and.w	r3, r3, #16
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 8162 	beq.w	8009c82 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2210      	movs	r2, #16
 80099c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099d0:	2b40      	cmp	r3, #64	@ 0x40
 80099d2:	f040 80d8 	bne.w	8009b86 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80099e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 80af 	beq.w	8009b4c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099f8:	429a      	cmp	r2, r3
 80099fa:	f080 80a7 	bcs.w	8009b4c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 0320 	and.w	r3, r3, #32
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f040 8087 	bne.w	8009b2a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a28:	e853 3f00 	ldrex	r3, [r3]
 8009a2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	461a      	mov	r2, r3
 8009a42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009a46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a4a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009a52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009a56:	e841 2300 	strex	r3, r2, [r1]
 8009a5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1da      	bne.n	8009a1c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3308      	adds	r3, #8
 8009a6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a70:	e853 3f00 	ldrex	r3, [r3]
 8009a74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009a76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a78:	f023 0301 	bic.w	r3, r3, #1
 8009a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	3308      	adds	r3, #8
 8009a86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009a8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009a8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009a92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a96:	e841 2300 	strex	r3, r2, [r1]
 8009a9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1e1      	bne.n	8009a66 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009aac:	e853 3f00 	ldrex	r3, [r3]
 8009ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ab4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009ac6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009acc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009ace:	e841 2300 	strex	r3, r2, [r1]
 8009ad2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009ad4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1e3      	bne.n	8009aa2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2220      	movs	r2, #32
 8009ade:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009af0:	e853 3f00 	ldrex	r3, [r3]
 8009af4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009af8:	f023 0310 	bic.w	r3, r3, #16
 8009afc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	461a      	mov	r2, r3
 8009b06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b12:	e841 2300 	strex	r3, r2, [r1]
 8009b16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d1e4      	bne.n	8009ae8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fc fce4 	bl	80064f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2202      	movs	r2, #2
 8009b2e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	4619      	mov	r1, r3
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f001 fa41 	bl	800afcc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009b4a:	e0fc      	b.n	8009d46 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b56:	429a      	cmp	r2, r3
 8009b58:	f040 80f5 	bne.w	8009d46 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 0320 	and.w	r3, r3, #32
 8009b6a:	2b20      	cmp	r3, #32
 8009b6c:	f040 80eb 	bne.w	8009d46 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2202      	movs	r2, #2
 8009b74:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f001 fa24 	bl	800afcc <HAL_UARTEx_RxEventCallback>
      return;
 8009b84:	e0df      	b.n	8009d46 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f000 80d1 	beq.w	8009d4a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f000 80cc 	beq.w	8009d4a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bba:	e853 3f00 	ldrex	r3, [r3]
 8009bbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009bda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009bdc:	e841 2300 	strex	r3, r2, [r1]
 8009be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1e4      	bne.n	8009bb2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3308      	adds	r3, #8
 8009bee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf2:	e853 3f00 	ldrex	r3, [r3]
 8009bf6:	623b      	str	r3, [r7, #32]
   return(result);
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009bfe:	f023 0301 	bic.w	r3, r3, #1
 8009c02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3308      	adds	r3, #8
 8009c0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009c10:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c18:	e841 2300 	strex	r3, r2, [r1]
 8009c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1e1      	bne.n	8009be8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2220      	movs	r2, #32
 8009c28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	e853 3f00 	ldrex	r3, [r3]
 8009c44:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f023 0310 	bic.w	r3, r3, #16
 8009c4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	461a      	mov	r2, r3
 8009c56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009c5a:	61fb      	str	r3, [r7, #28]
 8009c5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5e:	69b9      	ldr	r1, [r7, #24]
 8009c60:	69fa      	ldr	r2, [r7, #28]
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	617b      	str	r3, [r7, #20]
   return(result);
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1e4      	bne.n	8009c38 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2202      	movs	r2, #2
 8009c72:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f001 f9a6 	bl	800afcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c80:	e063      	b.n	8009d4a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00e      	beq.n	8009cac <HAL_UART_IRQHandler+0x5d8>
 8009c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d008      	beq.n	8009cac <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009ca2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 ffb4 	bl	800ac12 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009caa:	e051      	b.n	8009d50 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d014      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d105      	bne.n	8009cd0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d008      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d03a      	beq.n	8009d4e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	4798      	blx	r3
    }
    return;
 8009ce0:	e035      	b.n	8009d4e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d009      	beq.n	8009d02 <HAL_UART_IRQHandler+0x62e>
 8009cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d003      	beq.n	8009d02 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 ff5e 	bl	800abbc <UART_EndTransmit_IT>
    return;
 8009d00:	e026      	b.n	8009d50 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d009      	beq.n	8009d22 <HAL_UART_IRQHandler+0x64e>
 8009d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d12:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d003      	beq.n	8009d22 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 ff8d 	bl	800ac3a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d20:	e016      	b.n	8009d50 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d010      	beq.n	8009d50 <HAL_UART_IRQHandler+0x67c>
 8009d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	da0c      	bge.n	8009d50 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 ff75 	bl	800ac26 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d3c:	e008      	b.n	8009d50 <HAL_UART_IRQHandler+0x67c>
      return;
 8009d3e:	bf00      	nop
 8009d40:	e006      	b.n	8009d50 <HAL_UART_IRQHandler+0x67c>
    return;
 8009d42:	bf00      	nop
 8009d44:	e004      	b.n	8009d50 <HAL_UART_IRQHandler+0x67c>
      return;
 8009d46:	bf00      	nop
 8009d48:	e002      	b.n	8009d50 <HAL_UART_IRQHandler+0x67c>
      return;
 8009d4a:	bf00      	nop
 8009d4c:	e000      	b.n	8009d50 <HAL_UART_IRQHandler+0x67c>
    return;
 8009d4e:	bf00      	nop
  }
}
 8009d50:	37e8      	adds	r7, #232	@ 0xe8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop

08009d58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d88:	bf00      	nop
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009dac:	b08c      	sub	sp, #48	@ 0x30
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	689a      	ldr	r2, [r3, #8]
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	431a      	orrs	r2, r3
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	695b      	ldr	r3, [r3, #20]
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	69db      	ldr	r3, [r3, #28]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	4baa      	ldr	r3, [pc, #680]	@ (800a080 <UART_SetConfig+0x2d8>)
 8009dd8:	4013      	ands	r3, r2
 8009dda:	697a      	ldr	r2, [r7, #20]
 8009ddc:	6812      	ldr	r2, [r2, #0]
 8009dde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009de0:	430b      	orrs	r3, r1
 8009de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	68da      	ldr	r2, [r3, #12]
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	699b      	ldr	r3, [r3, #24]
 8009dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a9f      	ldr	r2, [pc, #636]	@ (800a084 <UART_SetConfig+0x2dc>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d004      	beq.n	8009e14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	6a1b      	ldr	r3, [r3, #32]
 8009e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e10:	4313      	orrs	r3, r2
 8009e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009e1e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009e22:	697a      	ldr	r2, [r7, #20]
 8009e24:	6812      	ldr	r2, [r2, #0]
 8009e26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e28:	430b      	orrs	r3, r1
 8009e2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e32:	f023 010f 	bic.w	r1, r3, #15
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a90      	ldr	r2, [pc, #576]	@ (800a088 <UART_SetConfig+0x2e0>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d125      	bne.n	8009e98 <UART_SetConfig+0xf0>
 8009e4c:	4b8f      	ldr	r3, [pc, #572]	@ (800a08c <UART_SetConfig+0x2e4>)
 8009e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e52:	f003 0303 	and.w	r3, r3, #3
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d81a      	bhi.n	8009e90 <UART_SetConfig+0xe8>
 8009e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e60 <UART_SetConfig+0xb8>)
 8009e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e60:	08009e71 	.word	0x08009e71
 8009e64:	08009e81 	.word	0x08009e81
 8009e68:	08009e79 	.word	0x08009e79
 8009e6c:	08009e89 	.word	0x08009e89
 8009e70:	2301      	movs	r3, #1
 8009e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e76:	e116      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009e78:	2302      	movs	r3, #2
 8009e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e7e:	e112      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009e80:	2304      	movs	r3, #4
 8009e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e86:	e10e      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009e88:	2308      	movs	r3, #8
 8009e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e8e:	e10a      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009e90:	2310      	movs	r3, #16
 8009e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e96:	e106      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a7c      	ldr	r2, [pc, #496]	@ (800a090 <UART_SetConfig+0x2e8>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d138      	bne.n	8009f14 <UART_SetConfig+0x16c>
 8009ea2:	4b7a      	ldr	r3, [pc, #488]	@ (800a08c <UART_SetConfig+0x2e4>)
 8009ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ea8:	f003 030c 	and.w	r3, r3, #12
 8009eac:	2b0c      	cmp	r3, #12
 8009eae:	d82d      	bhi.n	8009f0c <UART_SetConfig+0x164>
 8009eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8009eb8 <UART_SetConfig+0x110>)
 8009eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb6:	bf00      	nop
 8009eb8:	08009eed 	.word	0x08009eed
 8009ebc:	08009f0d 	.word	0x08009f0d
 8009ec0:	08009f0d 	.word	0x08009f0d
 8009ec4:	08009f0d 	.word	0x08009f0d
 8009ec8:	08009efd 	.word	0x08009efd
 8009ecc:	08009f0d 	.word	0x08009f0d
 8009ed0:	08009f0d 	.word	0x08009f0d
 8009ed4:	08009f0d 	.word	0x08009f0d
 8009ed8:	08009ef5 	.word	0x08009ef5
 8009edc:	08009f0d 	.word	0x08009f0d
 8009ee0:	08009f0d 	.word	0x08009f0d
 8009ee4:	08009f0d 	.word	0x08009f0d
 8009ee8:	08009f05 	.word	0x08009f05
 8009eec:	2300      	movs	r3, #0
 8009eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ef2:	e0d8      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009ef4:	2302      	movs	r3, #2
 8009ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009efa:	e0d4      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009efc:	2304      	movs	r3, #4
 8009efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f02:	e0d0      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009f04:	2308      	movs	r3, #8
 8009f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f0a:	e0cc      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009f0c:	2310      	movs	r3, #16
 8009f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f12:	e0c8      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a5e      	ldr	r2, [pc, #376]	@ (800a094 <UART_SetConfig+0x2ec>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d125      	bne.n	8009f6a <UART_SetConfig+0x1c2>
 8009f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800a08c <UART_SetConfig+0x2e4>)
 8009f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009f28:	2b30      	cmp	r3, #48	@ 0x30
 8009f2a:	d016      	beq.n	8009f5a <UART_SetConfig+0x1b2>
 8009f2c:	2b30      	cmp	r3, #48	@ 0x30
 8009f2e:	d818      	bhi.n	8009f62 <UART_SetConfig+0x1ba>
 8009f30:	2b20      	cmp	r3, #32
 8009f32:	d00a      	beq.n	8009f4a <UART_SetConfig+0x1a2>
 8009f34:	2b20      	cmp	r3, #32
 8009f36:	d814      	bhi.n	8009f62 <UART_SetConfig+0x1ba>
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <UART_SetConfig+0x19a>
 8009f3c:	2b10      	cmp	r3, #16
 8009f3e:	d008      	beq.n	8009f52 <UART_SetConfig+0x1aa>
 8009f40:	e00f      	b.n	8009f62 <UART_SetConfig+0x1ba>
 8009f42:	2300      	movs	r3, #0
 8009f44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f48:	e0ad      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009f4a:	2302      	movs	r3, #2
 8009f4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f50:	e0a9      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009f52:	2304      	movs	r3, #4
 8009f54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f58:	e0a5      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009f5a:	2308      	movs	r3, #8
 8009f5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f60:	e0a1      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009f62:	2310      	movs	r3, #16
 8009f64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f68:	e09d      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a4a      	ldr	r2, [pc, #296]	@ (800a098 <UART_SetConfig+0x2f0>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d125      	bne.n	8009fc0 <UART_SetConfig+0x218>
 8009f74:	4b45      	ldr	r3, [pc, #276]	@ (800a08c <UART_SetConfig+0x2e4>)
 8009f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009f7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f80:	d016      	beq.n	8009fb0 <UART_SetConfig+0x208>
 8009f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f84:	d818      	bhi.n	8009fb8 <UART_SetConfig+0x210>
 8009f86:	2b80      	cmp	r3, #128	@ 0x80
 8009f88:	d00a      	beq.n	8009fa0 <UART_SetConfig+0x1f8>
 8009f8a:	2b80      	cmp	r3, #128	@ 0x80
 8009f8c:	d814      	bhi.n	8009fb8 <UART_SetConfig+0x210>
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d002      	beq.n	8009f98 <UART_SetConfig+0x1f0>
 8009f92:	2b40      	cmp	r3, #64	@ 0x40
 8009f94:	d008      	beq.n	8009fa8 <UART_SetConfig+0x200>
 8009f96:	e00f      	b.n	8009fb8 <UART_SetConfig+0x210>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f9e:	e082      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fa6:	e07e      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009fa8:	2304      	movs	r3, #4
 8009faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fae:	e07a      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009fb0:	2308      	movs	r3, #8
 8009fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fb6:	e076      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009fb8:	2310      	movs	r3, #16
 8009fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fbe:	e072      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a35      	ldr	r2, [pc, #212]	@ (800a09c <UART_SetConfig+0x2f4>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d12a      	bne.n	800a020 <UART_SetConfig+0x278>
 8009fca:	4b30      	ldr	r3, [pc, #192]	@ (800a08c <UART_SetConfig+0x2e4>)
 8009fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fd8:	d01a      	beq.n	800a010 <UART_SetConfig+0x268>
 8009fda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fde:	d81b      	bhi.n	800a018 <UART_SetConfig+0x270>
 8009fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fe4:	d00c      	beq.n	800a000 <UART_SetConfig+0x258>
 8009fe6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fea:	d815      	bhi.n	800a018 <UART_SetConfig+0x270>
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d003      	beq.n	8009ff8 <UART_SetConfig+0x250>
 8009ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ff4:	d008      	beq.n	800a008 <UART_SetConfig+0x260>
 8009ff6:	e00f      	b.n	800a018 <UART_SetConfig+0x270>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ffe:	e052      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 800a000:	2302      	movs	r3, #2
 800a002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a006:	e04e      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 800a008:	2304      	movs	r3, #4
 800a00a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a00e:	e04a      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 800a010:	2308      	movs	r3, #8
 800a012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a016:	e046      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 800a018:	2310      	movs	r3, #16
 800a01a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a01e:	e042      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a17      	ldr	r2, [pc, #92]	@ (800a084 <UART_SetConfig+0x2dc>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d13a      	bne.n	800a0a0 <UART_SetConfig+0x2f8>
 800a02a:	4b18      	ldr	r3, [pc, #96]	@ (800a08c <UART_SetConfig+0x2e4>)
 800a02c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a030:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a034:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a038:	d01a      	beq.n	800a070 <UART_SetConfig+0x2c8>
 800a03a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a03e:	d81b      	bhi.n	800a078 <UART_SetConfig+0x2d0>
 800a040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a044:	d00c      	beq.n	800a060 <UART_SetConfig+0x2b8>
 800a046:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a04a:	d815      	bhi.n	800a078 <UART_SetConfig+0x2d0>
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d003      	beq.n	800a058 <UART_SetConfig+0x2b0>
 800a050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a054:	d008      	beq.n	800a068 <UART_SetConfig+0x2c0>
 800a056:	e00f      	b.n	800a078 <UART_SetConfig+0x2d0>
 800a058:	2300      	movs	r3, #0
 800a05a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a05e:	e022      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 800a060:	2302      	movs	r3, #2
 800a062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a066:	e01e      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 800a068:	2304      	movs	r3, #4
 800a06a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a06e:	e01a      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 800a070:	2308      	movs	r3, #8
 800a072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a076:	e016      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 800a078:	2310      	movs	r3, #16
 800a07a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a07e:	e012      	b.n	800a0a6 <UART_SetConfig+0x2fe>
 800a080:	cfff69f3 	.word	0xcfff69f3
 800a084:	40008000 	.word	0x40008000
 800a088:	40013800 	.word	0x40013800
 800a08c:	40021000 	.word	0x40021000
 800a090:	40004400 	.word	0x40004400
 800a094:	40004800 	.word	0x40004800
 800a098:	40004c00 	.word	0x40004c00
 800a09c:	40005000 	.word	0x40005000
 800a0a0:	2310      	movs	r3, #16
 800a0a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4aae      	ldr	r2, [pc, #696]	@ (800a364 <UART_SetConfig+0x5bc>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	f040 8097 	bne.w	800a1e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a0b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a0b6:	2b08      	cmp	r3, #8
 800a0b8:	d823      	bhi.n	800a102 <UART_SetConfig+0x35a>
 800a0ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c0 <UART_SetConfig+0x318>)
 800a0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c0:	0800a0e5 	.word	0x0800a0e5
 800a0c4:	0800a103 	.word	0x0800a103
 800a0c8:	0800a0ed 	.word	0x0800a0ed
 800a0cc:	0800a103 	.word	0x0800a103
 800a0d0:	0800a0f3 	.word	0x0800a0f3
 800a0d4:	0800a103 	.word	0x0800a103
 800a0d8:	0800a103 	.word	0x0800a103
 800a0dc:	0800a103 	.word	0x0800a103
 800a0e0:	0800a0fb 	.word	0x0800a0fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0e4:	f7fe ff58 	bl	8008f98 <HAL_RCC_GetPCLK1Freq>
 800a0e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0ea:	e010      	b.n	800a10e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0ec:	4b9e      	ldr	r3, [pc, #632]	@ (800a368 <UART_SetConfig+0x5c0>)
 800a0ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0f0:	e00d      	b.n	800a10e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0f2:	f7fe fee3 	bl	8008ebc <HAL_RCC_GetSysClockFreq>
 800a0f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0f8:	e009      	b.n	800a10e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a100:	e005      	b.n	800a10e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a102:	2300      	movs	r3, #0
 800a104:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a10c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a110:	2b00      	cmp	r3, #0
 800a112:	f000 8130 	beq.w	800a376 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a11a:	4a94      	ldr	r2, [pc, #592]	@ (800a36c <UART_SetConfig+0x5c4>)
 800a11c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a120:	461a      	mov	r2, r3
 800a122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a124:	fbb3 f3f2 	udiv	r3, r3, r2
 800a128:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	4613      	mov	r3, r2
 800a130:	005b      	lsls	r3, r3, #1
 800a132:	4413      	add	r3, r2
 800a134:	69ba      	ldr	r2, [r7, #24]
 800a136:	429a      	cmp	r2, r3
 800a138:	d305      	bcc.n	800a146 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a140:	69ba      	ldr	r2, [r7, #24]
 800a142:	429a      	cmp	r2, r3
 800a144:	d903      	bls.n	800a14e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a14c:	e113      	b.n	800a376 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a150:	2200      	movs	r2, #0
 800a152:	60bb      	str	r3, [r7, #8]
 800a154:	60fa      	str	r2, [r7, #12]
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a15a:	4a84      	ldr	r2, [pc, #528]	@ (800a36c <UART_SetConfig+0x5c4>)
 800a15c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a160:	b29b      	uxth	r3, r3
 800a162:	2200      	movs	r2, #0
 800a164:	603b      	str	r3, [r7, #0]
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a16c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a170:	f7f6 fdb2 	bl	8000cd8 <__aeabi_uldivmod>
 800a174:	4602      	mov	r2, r0
 800a176:	460b      	mov	r3, r1
 800a178:	4610      	mov	r0, r2
 800a17a:	4619      	mov	r1, r3
 800a17c:	f04f 0200 	mov.w	r2, #0
 800a180:	f04f 0300 	mov.w	r3, #0
 800a184:	020b      	lsls	r3, r1, #8
 800a186:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a18a:	0202      	lsls	r2, r0, #8
 800a18c:	6979      	ldr	r1, [r7, #20]
 800a18e:	6849      	ldr	r1, [r1, #4]
 800a190:	0849      	lsrs	r1, r1, #1
 800a192:	2000      	movs	r0, #0
 800a194:	460c      	mov	r4, r1
 800a196:	4605      	mov	r5, r0
 800a198:	eb12 0804 	adds.w	r8, r2, r4
 800a19c:	eb43 0905 	adc.w	r9, r3, r5
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	469a      	mov	sl, r3
 800a1a8:	4693      	mov	fp, r2
 800a1aa:	4652      	mov	r2, sl
 800a1ac:	465b      	mov	r3, fp
 800a1ae:	4640      	mov	r0, r8
 800a1b0:	4649      	mov	r1, r9
 800a1b2:	f7f6 fd91 	bl	8000cd8 <__aeabi_uldivmod>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1c4:	d308      	bcc.n	800a1d8 <UART_SetConfig+0x430>
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1cc:	d204      	bcs.n	800a1d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	6a3a      	ldr	r2, [r7, #32]
 800a1d4:	60da      	str	r2, [r3, #12]
 800a1d6:	e0ce      	b.n	800a376 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a1de:	e0ca      	b.n	800a376 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	69db      	ldr	r3, [r3, #28]
 800a1e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1e8:	d166      	bne.n	800a2b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a1ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a1ee:	2b08      	cmp	r3, #8
 800a1f0:	d827      	bhi.n	800a242 <UART_SetConfig+0x49a>
 800a1f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f8 <UART_SetConfig+0x450>)
 800a1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f8:	0800a21d 	.word	0x0800a21d
 800a1fc:	0800a225 	.word	0x0800a225
 800a200:	0800a22d 	.word	0x0800a22d
 800a204:	0800a243 	.word	0x0800a243
 800a208:	0800a233 	.word	0x0800a233
 800a20c:	0800a243 	.word	0x0800a243
 800a210:	0800a243 	.word	0x0800a243
 800a214:	0800a243 	.word	0x0800a243
 800a218:	0800a23b 	.word	0x0800a23b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a21c:	f7fe febc 	bl	8008f98 <HAL_RCC_GetPCLK1Freq>
 800a220:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a222:	e014      	b.n	800a24e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a224:	f7fe fece 	bl	8008fc4 <HAL_RCC_GetPCLK2Freq>
 800a228:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a22a:	e010      	b.n	800a24e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a22c:	4b4e      	ldr	r3, [pc, #312]	@ (800a368 <UART_SetConfig+0x5c0>)
 800a22e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a230:	e00d      	b.n	800a24e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a232:	f7fe fe43 	bl	8008ebc <HAL_RCC_GetSysClockFreq>
 800a236:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a238:	e009      	b.n	800a24e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a23a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a23e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a240:	e005      	b.n	800a24e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a242:	2300      	movs	r3, #0
 800a244:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a24c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a250:	2b00      	cmp	r3, #0
 800a252:	f000 8090 	beq.w	800a376 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a25a:	4a44      	ldr	r2, [pc, #272]	@ (800a36c <UART_SetConfig+0x5c4>)
 800a25c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a260:	461a      	mov	r2, r3
 800a262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a264:	fbb3 f3f2 	udiv	r3, r3, r2
 800a268:	005a      	lsls	r2, r3, #1
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	085b      	lsrs	r3, r3, #1
 800a270:	441a      	add	r2, r3
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	fbb2 f3f3 	udiv	r3, r2, r3
 800a27a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a27c:	6a3b      	ldr	r3, [r7, #32]
 800a27e:	2b0f      	cmp	r3, #15
 800a280:	d916      	bls.n	800a2b0 <UART_SetConfig+0x508>
 800a282:	6a3b      	ldr	r3, [r7, #32]
 800a284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a288:	d212      	bcs.n	800a2b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	f023 030f 	bic.w	r3, r3, #15
 800a292:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a294:	6a3b      	ldr	r3, [r7, #32]
 800a296:	085b      	lsrs	r3, r3, #1
 800a298:	b29b      	uxth	r3, r3
 800a29a:	f003 0307 	and.w	r3, r3, #7
 800a29e:	b29a      	uxth	r2, r3
 800a2a0:	8bfb      	ldrh	r3, [r7, #30]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	8bfa      	ldrh	r2, [r7, #30]
 800a2ac:	60da      	str	r2, [r3, #12]
 800a2ae:	e062      	b.n	800a376 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2b6:	e05e      	b.n	800a376 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2bc:	2b08      	cmp	r3, #8
 800a2be:	d828      	bhi.n	800a312 <UART_SetConfig+0x56a>
 800a2c0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2c8 <UART_SetConfig+0x520>)
 800a2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c6:	bf00      	nop
 800a2c8:	0800a2ed 	.word	0x0800a2ed
 800a2cc:	0800a2f5 	.word	0x0800a2f5
 800a2d0:	0800a2fd 	.word	0x0800a2fd
 800a2d4:	0800a313 	.word	0x0800a313
 800a2d8:	0800a303 	.word	0x0800a303
 800a2dc:	0800a313 	.word	0x0800a313
 800a2e0:	0800a313 	.word	0x0800a313
 800a2e4:	0800a313 	.word	0x0800a313
 800a2e8:	0800a30b 	.word	0x0800a30b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2ec:	f7fe fe54 	bl	8008f98 <HAL_RCC_GetPCLK1Freq>
 800a2f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2f2:	e014      	b.n	800a31e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2f4:	f7fe fe66 	bl	8008fc4 <HAL_RCC_GetPCLK2Freq>
 800a2f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2fa:	e010      	b.n	800a31e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2fc:	4b1a      	ldr	r3, [pc, #104]	@ (800a368 <UART_SetConfig+0x5c0>)
 800a2fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a300:	e00d      	b.n	800a31e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a302:	f7fe fddb 	bl	8008ebc <HAL_RCC_GetSysClockFreq>
 800a306:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a308:	e009      	b.n	800a31e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a30a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a30e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a310:	e005      	b.n	800a31e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a312:	2300      	movs	r3, #0
 800a314:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a31c:	bf00      	nop
    }

    if (pclk != 0U)
 800a31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a320:	2b00      	cmp	r3, #0
 800a322:	d028      	beq.n	800a376 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a328:	4a10      	ldr	r2, [pc, #64]	@ (800a36c <UART_SetConfig+0x5c4>)
 800a32a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a32e:	461a      	mov	r2, r3
 800a330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a332:	fbb3 f2f2 	udiv	r2, r3, r2
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	085b      	lsrs	r3, r3, #1
 800a33c:	441a      	add	r2, r3
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	fbb2 f3f3 	udiv	r3, r2, r3
 800a346:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a348:	6a3b      	ldr	r3, [r7, #32]
 800a34a:	2b0f      	cmp	r3, #15
 800a34c:	d910      	bls.n	800a370 <UART_SetConfig+0x5c8>
 800a34e:	6a3b      	ldr	r3, [r7, #32]
 800a350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a354:	d20c      	bcs.n	800a370 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	b29a      	uxth	r2, r3
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	60da      	str	r2, [r3, #12]
 800a360:	e009      	b.n	800a376 <UART_SetConfig+0x5ce>
 800a362:	bf00      	nop
 800a364:	40008000 	.word	0x40008000
 800a368:	00f42400 	.word	0x00f42400
 800a36c:	0800f850 	.word	0x0800f850
      }
      else
      {
        ret = HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	2201      	movs	r2, #1
 800a37a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	2201      	movs	r2, #1
 800a382:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	2200      	movs	r2, #0
 800a38a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	2200      	movs	r2, #0
 800a390:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a392:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a396:	4618      	mov	r0, r3
 800a398:	3730      	adds	r7, #48	@ 0x30
 800a39a:	46bd      	mov	sp, r7
 800a39c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a3a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ac:	f003 0308 	and.w	r3, r3, #8
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d00a      	beq.n	800a3ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	430a      	orrs	r2, r1
 800a3c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00a      	beq.n	800a3ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	430a      	orrs	r2, r1
 800a3ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f0:	f003 0302 	and.w	r3, r3, #2
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00a      	beq.n	800a40e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	430a      	orrs	r2, r1
 800a40c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a412:	f003 0304 	and.w	r3, r3, #4
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00a      	beq.n	800a430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	430a      	orrs	r2, r1
 800a42e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a434:	f003 0310 	and.w	r3, r3, #16
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00a      	beq.n	800a452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	430a      	orrs	r2, r1
 800a450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a456:	f003 0320 	and.w	r3, r3, #32
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00a      	beq.n	800a474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	430a      	orrs	r2, r1
 800a472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d01a      	beq.n	800a4b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	430a      	orrs	r2, r1
 800a494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a49a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a49e:	d10a      	bne.n	800a4b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	430a      	orrs	r2, r1
 800a4b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00a      	beq.n	800a4d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	430a      	orrs	r2, r1
 800a4d6:	605a      	str	r2, [r3, #4]
  }
}
 800a4d8:	bf00      	nop
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b098      	sub	sp, #96	@ 0x60
 800a4e8:	af02      	add	r7, sp, #8
 800a4ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4f4:	f7f9 f89e 	bl	8003634 <HAL_GetTick>
 800a4f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 0308 	and.w	r3, r3, #8
 800a504:	2b08      	cmp	r3, #8
 800a506:	d12f      	bne.n	800a568 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a508:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a50c:	9300      	str	r3, [sp, #0]
 800a50e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a510:	2200      	movs	r2, #0
 800a512:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f88e 	bl	800a638 <UART_WaitOnFlagUntilTimeout>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d022      	beq.n	800a568 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52a:	e853 3f00 	ldrex	r3, [r3]
 800a52e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a532:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a536:	653b      	str	r3, [r7, #80]	@ 0x50
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	461a      	mov	r2, r3
 800a53e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a540:	647b      	str	r3, [r7, #68]	@ 0x44
 800a542:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a544:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a546:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a548:	e841 2300 	strex	r3, r2, [r1]
 800a54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a54e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1e6      	bne.n	800a522 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2220      	movs	r2, #32
 800a558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a564:	2303      	movs	r3, #3
 800a566:	e063      	b.n	800a630 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 0304 	and.w	r3, r3, #4
 800a572:	2b04      	cmp	r3, #4
 800a574:	d149      	bne.n	800a60a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a576:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a57e:	2200      	movs	r2, #0
 800a580:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f857 	bl	800a638 <UART_WaitOnFlagUntilTimeout>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d03c      	beq.n	800a60a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a598:	e853 3f00 	ldrex	r3, [r3]
 800a59c:	623b      	str	r3, [r7, #32]
   return(result);
 800a59e:	6a3b      	ldr	r3, [r7, #32]
 800a5a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5b6:	e841 2300 	strex	r3, r2, [r1]
 800a5ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1e6      	bne.n	800a590 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	3308      	adds	r3, #8
 800a5c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	e853 3f00 	ldrex	r3, [r3]
 800a5d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f023 0301 	bic.w	r3, r3, #1
 800a5d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	3308      	adds	r3, #8
 800a5e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5e2:	61fa      	str	r2, [r7, #28]
 800a5e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e6:	69b9      	ldr	r1, [r7, #24]
 800a5e8:	69fa      	ldr	r2, [r7, #28]
 800a5ea:	e841 2300 	strex	r3, r2, [r1]
 800a5ee:	617b      	str	r3, [r7, #20]
   return(result);
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d1e5      	bne.n	800a5c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2220      	movs	r2, #32
 800a5fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a606:	2303      	movs	r3, #3
 800a608:	e012      	b.n	800a630 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2220      	movs	r2, #32
 800a60e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2220      	movs	r2, #32
 800a616:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3758      	adds	r7, #88	@ 0x58
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	603b      	str	r3, [r7, #0]
 800a644:	4613      	mov	r3, r2
 800a646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a648:	e04f      	b.n	800a6ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a650:	d04b      	beq.n	800a6ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a652:	f7f8 ffef 	bl	8003634 <HAL_GetTick>
 800a656:	4602      	mov	r2, r0
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	69ba      	ldr	r2, [r7, #24]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d302      	bcc.n	800a668 <UART_WaitOnFlagUntilTimeout+0x30>
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d101      	bne.n	800a66c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a668:	2303      	movs	r3, #3
 800a66a:	e04e      	b.n	800a70a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 0304 	and.w	r3, r3, #4
 800a676:	2b00      	cmp	r3, #0
 800a678:	d037      	beq.n	800a6ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	2b80      	cmp	r3, #128	@ 0x80
 800a67e:	d034      	beq.n	800a6ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	2b40      	cmp	r3, #64	@ 0x40
 800a684:	d031      	beq.n	800a6ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	69db      	ldr	r3, [r3, #28]
 800a68c:	f003 0308 	and.w	r3, r3, #8
 800a690:	2b08      	cmp	r3, #8
 800a692:	d110      	bne.n	800a6b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2208      	movs	r2, #8
 800a69a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f000 f920 	bl	800a8e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2208      	movs	r2, #8
 800a6a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e029      	b.n	800a70a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	69db      	ldr	r3, [r3, #28]
 800a6bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6c4:	d111      	bne.n	800a6ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f000 f906 	bl	800a8e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2220      	movs	r2, #32
 800a6da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	e00f      	b.n	800a70a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	69da      	ldr	r2, [r3, #28]
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	4013      	ands	r3, r2
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	bf0c      	ite	eq
 800a6fa:	2301      	moveq	r3, #1
 800a6fc:	2300      	movne	r3, #0
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	461a      	mov	r2, r3
 800a702:	79fb      	ldrb	r3, [r7, #7]
 800a704:	429a      	cmp	r2, r3
 800a706:	d0a0      	beq.n	800a64a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b096      	sub	sp, #88	@ 0x58
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	4613      	mov	r3, r2
 800a720:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	88fa      	ldrh	r2, [r7, #6]
 800a72c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2222      	movs	r2, #34	@ 0x22
 800a73c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a746:	2b00      	cmp	r3, #0
 800a748:	d02d      	beq.n	800a7a6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a750:	4a40      	ldr	r2, [pc, #256]	@ (800a854 <UART_Start_Receive_DMA+0x140>)
 800a752:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a75a:	4a3f      	ldr	r2, [pc, #252]	@ (800a858 <UART_Start_Receive_DMA+0x144>)
 800a75c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a764:	4a3d      	ldr	r2, [pc, #244]	@ (800a85c <UART_Start_Receive_DMA+0x148>)
 800a766:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a76e:	2200      	movs	r2, #0
 800a770:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	3324      	adds	r3, #36	@ 0x24
 800a77e:	4619      	mov	r1, r3
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a784:	461a      	mov	r2, r3
 800a786:	88fb      	ldrh	r3, [r7, #6]
 800a788:	f7fb fe38 	bl	80063fc <HAL_DMA_Start_IT>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d009      	beq.n	800a7a6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2210      	movs	r2, #16
 800a796:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2220      	movs	r2, #32
 800a79e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e051      	b.n	800a84a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d018      	beq.n	800a7e0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7b6:	e853 3f00 	ldrex	r3, [r3]
 800a7ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7c2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7ce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a7d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7d4:	e841 2300 	strex	r3, r2, [r1]
 800a7d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a7da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d1e6      	bne.n	800a7ae <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3308      	adds	r3, #8
 800a7e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ea:	e853 3f00 	ldrex	r3, [r3]
 800a7ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f2:	f043 0301 	orr.w	r3, r3, #1
 800a7f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3308      	adds	r3, #8
 800a7fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a800:	637a      	str	r2, [r7, #52]	@ 0x34
 800a802:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a804:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a806:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a808:	e841 2300 	strex	r3, r2, [r1]
 800a80c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a80e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1e5      	bne.n	800a7e0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	3308      	adds	r3, #8
 800a81a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	e853 3f00 	ldrex	r3, [r3]
 800a822:	613b      	str	r3, [r7, #16]
   return(result);
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a82a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	3308      	adds	r3, #8
 800a832:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a834:	623a      	str	r2, [r7, #32]
 800a836:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a838:	69f9      	ldr	r1, [r7, #28]
 800a83a:	6a3a      	ldr	r2, [r7, #32]
 800a83c:	e841 2300 	strex	r3, r2, [r1]
 800a840:	61bb      	str	r3, [r7, #24]
   return(result);
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d1e5      	bne.n	800a814 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3758      	adds	r7, #88	@ 0x58
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	0800a9af 	.word	0x0800a9af
 800a858:	0800aadb 	.word	0x0800aadb
 800a85c:	0800ab19 	.word	0x0800ab19

0800a860 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a860:	b480      	push	{r7}
 800a862:	b08f      	sub	sp, #60	@ 0x3c
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86e:	6a3b      	ldr	r3, [r7, #32]
 800a870:	e853 3f00 	ldrex	r3, [r3]
 800a874:	61fb      	str	r3, [r7, #28]
   return(result);
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a87c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	461a      	mov	r2, r3
 800a884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a888:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a88c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a88e:	e841 2300 	strex	r3, r2, [r1]
 800a892:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1e6      	bne.n	800a868 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	3308      	adds	r3, #8
 800a8a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	e853 3f00 	ldrex	r3, [r3]
 800a8a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a8b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3308      	adds	r3, #8
 800a8b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8ba:	61ba      	str	r2, [r7, #24]
 800a8bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8be:	6979      	ldr	r1, [r7, #20]
 800a8c0:	69ba      	ldr	r2, [r7, #24]
 800a8c2:	e841 2300 	strex	r3, r2, [r1]
 800a8c6:	613b      	str	r3, [r7, #16]
   return(result);
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d1e5      	bne.n	800a89a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2220      	movs	r2, #32
 800a8d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a8d6:	bf00      	nop
 800a8d8:	373c      	adds	r7, #60	@ 0x3c
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b095      	sub	sp, #84	@ 0x54
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8f2:	e853 3f00 	ldrex	r3, [r3]
 800a8f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	461a      	mov	r2, r3
 800a906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a908:	643b      	str	r3, [r7, #64]	@ 0x40
 800a90a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a90e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a910:	e841 2300 	strex	r3, r2, [r1]
 800a914:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1e6      	bne.n	800a8ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	3308      	adds	r3, #8
 800a922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	e853 3f00 	ldrex	r3, [r3]
 800a92a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a932:	f023 0301 	bic.w	r3, r3, #1
 800a936:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	3308      	adds	r3, #8
 800a93e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a940:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a942:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a948:	e841 2300 	strex	r3, r2, [r1]
 800a94c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1e3      	bne.n	800a91c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d118      	bne.n	800a98e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	e853 3f00 	ldrex	r3, [r3]
 800a968:	60bb      	str	r3, [r7, #8]
   return(result);
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	f023 0310 	bic.w	r3, r3, #16
 800a970:	647b      	str	r3, [r7, #68]	@ 0x44
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	461a      	mov	r2, r3
 800a978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a97a:	61bb      	str	r3, [r7, #24]
 800a97c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97e:	6979      	ldr	r1, [r7, #20]
 800a980:	69ba      	ldr	r2, [r7, #24]
 800a982:	e841 2300 	strex	r3, r2, [r1]
 800a986:	613b      	str	r3, [r7, #16]
   return(result);
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1e6      	bne.n	800a95c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2220      	movs	r2, #32
 800a992:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a9a2:	bf00      	nop
 800a9a4:	3754      	adds	r7, #84	@ 0x54
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b09c      	sub	sp, #112	@ 0x70
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ba:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 0320 	and.w	r3, r3, #32
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d171      	bne.n	800aaae <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a9ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9da:	e853 3f00 	ldrex	r3, [r3]
 800a9de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a9e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a9e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a9e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a9f2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a9f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a9f8:	e841 2300 	strex	r3, r2, [r1]
 800a9fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a9fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1e6      	bne.n	800a9d2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	3308      	adds	r3, #8
 800aa0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0e:	e853 3f00 	ldrex	r3, [r3]
 800aa12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa16:	f023 0301 	bic.w	r3, r3, #1
 800aa1a:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	3308      	adds	r3, #8
 800aa22:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa24:	647a      	str	r2, [r7, #68]	@ 0x44
 800aa26:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa2c:	e841 2300 	strex	r3, r2, [r1]
 800aa30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1e5      	bne.n	800aa04 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	3308      	adds	r3, #8
 800aa3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa42:	e853 3f00 	ldrex	r3, [r3]
 800aa46:	623b      	str	r3, [r7, #32]
   return(result);
 800aa48:	6a3b      	ldr	r3, [r7, #32]
 800aa4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa4e:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	3308      	adds	r3, #8
 800aa56:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aa58:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa60:	e841 2300 	strex	r3, r2, [r1]
 800aa64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d1e5      	bne.n	800aa38 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa6e:	2220      	movs	r2, #32
 800aa70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d118      	bne.n	800aaae <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	e853 3f00 	ldrex	r3, [r3]
 800aa88:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f023 0310 	bic.w	r3, r3, #16
 800aa90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	461a      	mov	r2, r3
 800aa98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa9a:	61fb      	str	r3, [r7, #28]
 800aa9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9e:	69b9      	ldr	r1, [r7, #24]
 800aaa0:	69fa      	ldr	r2, [r7, #28]
 800aaa2:	e841 2300 	strex	r3, r2, [r1]
 800aaa6:	617b      	str	r3, [r7, #20]
   return(result);
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1e6      	bne.n	800aa7c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aaae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aab0:	2200      	movs	r2, #0
 800aab2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d107      	bne.n	800aacc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aabc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aabe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aac2:	4619      	mov	r1, r3
 800aac4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aac6:	f000 fa81 	bl	800afcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aaca:	e002      	b.n	800aad2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800aacc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aace:	f7ff f94d 	bl	8009d6c <HAL_UART_RxCpltCallback>
}
 800aad2:	bf00      	nop
 800aad4:	3770      	adds	r7, #112	@ 0x70
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b084      	sub	sp, #16
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2201      	movs	r2, #1
 800aaec:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d109      	bne.n	800ab0a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aafc:	085b      	lsrs	r3, r3, #1
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	4619      	mov	r1, r3
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f000 fa62 	bl	800afcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab08:	e002      	b.n	800ab10 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f7ff f938 	bl	8009d80 <HAL_UART_RxHalfCpltCallback>
}
 800ab10:	bf00      	nop
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b086      	sub	sp, #24
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab24:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab2c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab34:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab40:	2b80      	cmp	r3, #128	@ 0x80
 800ab42:	d109      	bne.n	800ab58 <UART_DMAError+0x40>
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	2b21      	cmp	r3, #33	@ 0x21
 800ab48:	d106      	bne.n	800ab58 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ab52:	6978      	ldr	r0, [r7, #20]
 800ab54:	f7ff fe84 	bl	800a860 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab62:	2b40      	cmp	r3, #64	@ 0x40
 800ab64:	d109      	bne.n	800ab7a <UART_DMAError+0x62>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2b22      	cmp	r3, #34	@ 0x22
 800ab6a:	d106      	bne.n	800ab7a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ab74:	6978      	ldr	r0, [r7, #20]
 800ab76:	f7ff feb4 	bl	800a8e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab80:	f043 0210 	orr.w	r2, r3, #16
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab8a:	6978      	ldr	r0, [r7, #20]
 800ab8c:	f7ff f902 	bl	8009d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab90:	bf00      	nop
 800ab92:	3718      	adds	r7, #24
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aba4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f7ff f8f0 	bl	8009d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abb4:	bf00      	nop
 800abb6:	3710      	adds	r7, #16
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b088      	sub	sp, #32
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	e853 3f00 	ldrex	r3, [r3]
 800abd0:	60bb      	str	r3, [r7, #8]
   return(result);
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abd8:	61fb      	str	r3, [r7, #28]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	461a      	mov	r2, r3
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	61bb      	str	r3, [r7, #24]
 800abe4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe6:	6979      	ldr	r1, [r7, #20]
 800abe8:	69ba      	ldr	r2, [r7, #24]
 800abea:	e841 2300 	strex	r3, r2, [r1]
 800abee:	613b      	str	r3, [r7, #16]
   return(result);
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1e6      	bne.n	800abc4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2220      	movs	r2, #32
 800abfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7ff f8a7 	bl	8009d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac0a:	bf00      	nop
 800ac0c:	3720      	adds	r7, #32
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ac12:	b480      	push	{r7}
 800ac14:	b083      	sub	sp, #12
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ac1a:	bf00      	nop
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b083      	sub	sp, #12
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ac2e:	bf00      	nop
 800ac30:	370c      	adds	r7, #12
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr

0800ac3a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ac3a:	b480      	push	{r7}
 800ac3c:	b083      	sub	sp, #12
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ac42:	bf00      	nop
 800ac44:	370c      	adds	r7, #12
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac4e:	b480      	push	{r7}
 800ac50:	b085      	sub	sp, #20
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d101      	bne.n	800ac64 <HAL_UARTEx_DisableFifoMode+0x16>
 800ac60:	2302      	movs	r3, #2
 800ac62:	e027      	b.n	800acb4 <HAL_UARTEx_DisableFifoMode+0x66>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2224      	movs	r2, #36	@ 0x24
 800ac70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f022 0201 	bic.w	r2, r2, #1
 800ac8a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ac92:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2220      	movs	r2, #32
 800aca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800acb2:	2300      	movs	r3, #0
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3714      	adds	r7, #20
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d101      	bne.n	800acd8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800acd4:	2302      	movs	r3, #2
 800acd6:	e02d      	b.n	800ad34 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2224      	movs	r2, #36	@ 0x24
 800ace4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f022 0201 	bic.w	r2, r2, #1
 800acfe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	683a      	ldr	r2, [r7, #0]
 800ad10:	430a      	orrs	r2, r1
 800ad12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 f8a3 	bl	800ae60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2220      	movs	r2, #32
 800ad26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d101      	bne.n	800ad54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad50:	2302      	movs	r3, #2
 800ad52:	e02d      	b.n	800adb0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2201      	movs	r2, #1
 800ad58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2224      	movs	r2, #36	@ 0x24
 800ad60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f022 0201 	bic.w	r2, r2, #1
 800ad7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	430a      	orrs	r2, r1
 800ad8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f865 	bl	800ae60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2220      	movs	r2, #32
 800ada2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08c      	sub	sp, #48	@ 0x30
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	4613      	mov	r3, r2
 800adc4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800adcc:	2b20      	cmp	r3, #32
 800adce:	d142      	bne.n	800ae56 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d002      	beq.n	800addc <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800add6:	88fb      	ldrh	r3, [r7, #6]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d101      	bne.n	800ade0 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	e03b      	b.n	800ae58 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2201      	movs	r2, #1
 800ade4:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2200      	movs	r2, #0
 800adea:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800adec:	88fb      	ldrh	r3, [r7, #6]
 800adee:	461a      	mov	r2, r3
 800adf0:	68b9      	ldr	r1, [r7, #8]
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f7ff fc8e 	bl	800a714 <UART_Start_Receive_DMA>
 800adf8:	4603      	mov	r3, r0
 800adfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800adfe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d124      	bne.n	800ae50 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d11d      	bne.n	800ae4a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2210      	movs	r2, #16
 800ae14:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	e853 3f00 	ldrex	r3, [r3]
 800ae22:	617b      	str	r3, [r7, #20]
   return(result);
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	f043 0310 	orr.w	r3, r3, #16
 800ae2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	461a      	mov	r2, r3
 800ae32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae34:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae36:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae38:	6a39      	ldr	r1, [r7, #32]
 800ae3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae3c:	e841 2300 	strex	r3, r2, [r1]
 800ae40:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d1e6      	bne.n	800ae16 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800ae48:	e002      	b.n	800ae50 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800ae50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ae54:	e000      	b.n	800ae58 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ae56:	2302      	movs	r3, #2
  }
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3730      	adds	r7, #48	@ 0x30
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d108      	bne.n	800ae82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae80:	e031      	b.n	800aee6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae82:	2308      	movs	r3, #8
 800ae84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae86:	2308      	movs	r3, #8
 800ae88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	0e5b      	lsrs	r3, r3, #25
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	f003 0307 	and.w	r3, r3, #7
 800ae98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	0f5b      	lsrs	r3, r3, #29
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	f003 0307 	and.w	r3, r3, #7
 800aea8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aeaa:	7bbb      	ldrb	r3, [r7, #14]
 800aeac:	7b3a      	ldrb	r2, [r7, #12]
 800aeae:	4911      	ldr	r1, [pc, #68]	@ (800aef4 <UARTEx_SetNbDataToProcess+0x94>)
 800aeb0:	5c8a      	ldrb	r2, [r1, r2]
 800aeb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aeb6:	7b3a      	ldrb	r2, [r7, #12]
 800aeb8:	490f      	ldr	r1, [pc, #60]	@ (800aef8 <UARTEx_SetNbDataToProcess+0x98>)
 800aeba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aebc:	fb93 f3f2 	sdiv	r3, r3, r2
 800aec0:	b29a      	uxth	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
 800aeca:	7b7a      	ldrb	r2, [r7, #13]
 800aecc:	4909      	ldr	r1, [pc, #36]	@ (800aef4 <UARTEx_SetNbDataToProcess+0x94>)
 800aece:	5c8a      	ldrb	r2, [r1, r2]
 800aed0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aed4:	7b7a      	ldrb	r2, [r7, #13]
 800aed6:	4908      	ldr	r1, [pc, #32]	@ (800aef8 <UARTEx_SetNbDataToProcess+0x98>)
 800aed8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aeda:	fb93 f3f2 	sdiv	r3, r3, r2
 800aede:	b29a      	uxth	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aee6:	bf00      	nop
 800aee8:	3714      	adds	r7, #20
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop
 800aef4:	0800f868 	.word	0x0800f868
 800aef8:	0800f870 	.word	0x0800f870

0800aefc <_ZN18Hardware_STM32_ADC18dmaCallbackHandlerEP17ADC_HandleTypeDef>:

  void dmaCallbackHandler(ADC_HandleTypeDef *hadc) {
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
    if (hadc == hadc_)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	683a      	ldr	r2, [r7, #0]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d102      	bne.n	800af16 <_ZN18Hardware_STM32_ADC18dmaCallbackHandlerEP17ADC_HandleTypeDef+0x1a>
      {
	//			if (hadc_->DMA_Handle->Instance->CNDTR == 0) {
	isDataReady_ = STM32_ADC_DMA_READY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	741a      	strb	r2, [r3, #16]
	//			}
      }
  }
 800af16:	bf00      	nop
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <_ZN18Hardware_STM32_ADC17iTCallbackHandlerEP17ADC_HandleTypeDef>:
  void iTCallbackHandler (ADC_HandleTypeDef *hadc)
 800af22:	b480      	push	{r7}
 800af24:	b083      	sub	sp, #12
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	6039      	str	r1, [r7, #0]
  {
    if (hadc == hadc_)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	429a      	cmp	r2, r3
 800af34:	d102      	bne.n	800af3c <_ZN18Hardware_STM32_ADC17iTCallbackHandlerEP17ADC_HandleTypeDef+0x1a>
      {
	isDataReady_IT_ = STM32_ADC_IT_READY;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2201      	movs	r2, #1
 800af3a:	745a      	strb	r2, [r3, #17]
      }
  }
 800af3c:	bf00      	nop
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <_ZN22Hardware_STM32_Message15callbackHandlerEP20__UART_HandleTypeDeft>:
  void callbackHandler(UART_HandleTypeDef *huart, uint16_t Size) {
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	4613      	mov	r3, r2
 800af54:	80fb      	strh	r3, [r7, #6]
    if (huart == _huart) {
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d115      	bne.n	800af8c <_ZN22Hardware_STM32_Message15callbackHandlerEP20__UART_HandleTypeDeft+0x44>
	_data_len = Size;
 800af60:	88fa      	ldrh	r2, [r7, #6]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	60da      	str	r2, [r3, #12]
	_new_data_available = true;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2201      	movs	r2, #1
 800af6a:	741a      	strb	r2, [r3, #16]
	_receiveBufferIndex = (_receiveBufferIndex + 1) % _buffer_num;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	7c5b      	ldrb	r3, [r3, #17]
 800af70:	3301      	adds	r3, #1
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	7a12      	ldrb	r2, [r2, #8]
 800af76:	fb93 f1f2 	sdiv	r1, r3, r2
 800af7a:	fb01 f202 	mul.w	r2, r1, r2
 800af7e:	1a9b      	subs	r3, r3, r2
 800af80:	b2da      	uxtb	r2, r3
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	745a      	strb	r2, [r3, #17]
	_startDMA();
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f7f7 f8f5 	bl	8002176 <_ZN22Hardware_STM32_Message9_startDMAEv>
  }
 800af8c:	bf00      	nop
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <HAL_ADC_ConvCpltCallback>:

extern Hardware_STM32_Message g_message_handler;
extern Hardware_STM32_ADC g_adc1_handler;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  g_adc1_handler.dmaCallbackHandler(hadc);
 800af9c:	6879      	ldr	r1, [r7, #4]
 800af9e:	4803      	ldr	r0, [pc, #12]	@ (800afac <HAL_ADC_ConvCpltCallback+0x18>)
 800afa0:	f7ff ffac 	bl	800aefc <_ZN18Hardware_STM32_ADC18dmaCallbackHandlerEP17ADC_HandleTypeDef>
}
 800afa4:	bf00      	nop
 800afa6:	3708      	adds	r7, #8
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	200004b4 	.word	0x200004b4

0800afb0 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  g_adc1_handler.iTCallbackHandler(hadc);
 800afb8:	6879      	ldr	r1, [r7, #4]
 800afba:	4803      	ldr	r0, [pc, #12]	@ (800afc8 <HAL_ADCEx_InjectedConvCpltCallback+0x18>)
 800afbc:	f7ff ffb1 	bl	800af22 <_ZN18Hardware_STM32_ADC17iTCallbackHandlerEP17ADC_HandleTypeDef>
}
 800afc0:	bf00      	nop
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	200004b4 	.word	0x200004b4

0800afcc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	460b      	mov	r3, r1
 800afd6:	807b      	strh	r3, [r7, #2]
  g_message_handler.callbackHandler(huart, Size);
 800afd8:	887b      	ldrh	r3, [r7, #2]
 800afda:	461a      	mov	r2, r3
 800afdc:	6879      	ldr	r1, [r7, #4]
 800afde:	4803      	ldr	r0, [pc, #12]	@ (800afec <HAL_UARTEx_RxEventCallback+0x20>)
 800afe0:	f7ff ffb2 	bl	800af48 <_ZN22Hardware_STM32_Message15callbackHandlerEP20__UART_HandleTypeDeft>
}
 800afe4:	bf00      	nop
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	200004d0 	.word	0x200004d0

0800aff0 <_ZdlPv>:
 800aff0:	f000 b836 	b.w	800b060 <free>

0800aff4 <_ZdlPvj>:
 800aff4:	f7ff bffc 	b.w	800aff0 <_ZdlPv>

0800aff8 <_Znwj>:
 800aff8:	2801      	cmp	r0, #1
 800affa:	bf38      	it	cc
 800affc:	2001      	movcc	r0, #1
 800affe:	b510      	push	{r4, lr}
 800b000:	4604      	mov	r4, r0
 800b002:	4620      	mov	r0, r4
 800b004:	f000 f824 	bl	800b050 <malloc>
 800b008:	b100      	cbz	r0, 800b00c <_Znwj+0x14>
 800b00a:	bd10      	pop	{r4, pc}
 800b00c:	f000 f810 	bl	800b030 <_ZSt15get_new_handlerv>
 800b010:	b908      	cbnz	r0, 800b016 <_Znwj+0x1e>
 800b012:	f000 f815 	bl	800b040 <abort>
 800b016:	4780      	blx	r0
 800b018:	e7f3      	b.n	800b002 <_Znwj+0xa>

0800b01a <_Znaj>:
 800b01a:	f7ff bfed 	b.w	800aff8 <_Znwj>

0800b01e <_ZSt17__throw_bad_allocv>:
 800b01e:	b508      	push	{r3, lr}
 800b020:	f000 f80e 	bl	800b040 <abort>

0800b024 <_ZSt28__throw_bad_array_new_lengthv>:
 800b024:	b508      	push	{r3, lr}
 800b026:	f000 f80b 	bl	800b040 <abort>

0800b02a <_ZSt20__throw_length_errorPKc>:
 800b02a:	b508      	push	{r3, lr}
 800b02c:	f000 f808 	bl	800b040 <abort>

0800b030 <_ZSt15get_new_handlerv>:
 800b030:	4b02      	ldr	r3, [pc, #8]	@ (800b03c <_ZSt15get_new_handlerv+0xc>)
 800b032:	6818      	ldr	r0, [r3, #0]
 800b034:	f3bf 8f5b 	dmb	ish
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	2000066c 	.word	0x2000066c

0800b040 <abort>:
 800b040:	b508      	push	{r3, lr}
 800b042:	2006      	movs	r0, #6
 800b044:	f001 f918 	bl	800c278 <raise>
 800b048:	2001      	movs	r0, #1
 800b04a:	f7f8 f88b 	bl	8003164 <_exit>
	...

0800b050 <malloc>:
 800b050:	4b02      	ldr	r3, [pc, #8]	@ (800b05c <malloc+0xc>)
 800b052:	4601      	mov	r1, r0
 800b054:	6818      	ldr	r0, [r3, #0]
 800b056:	f000 b82d 	b.w	800b0b4 <_malloc_r>
 800b05a:	bf00      	nop
 800b05c:	20000018 	.word	0x20000018

0800b060 <free>:
 800b060:	4b02      	ldr	r3, [pc, #8]	@ (800b06c <free+0xc>)
 800b062:	4601      	mov	r1, r0
 800b064:	6818      	ldr	r0, [r3, #0]
 800b066:	f002 b80b 	b.w	800d080 <_free_r>
 800b06a:	bf00      	nop
 800b06c:	20000018 	.word	0x20000018

0800b070 <sbrk_aligned>:
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	4e0f      	ldr	r6, [pc, #60]	@ (800b0b0 <sbrk_aligned+0x40>)
 800b074:	460c      	mov	r4, r1
 800b076:	6831      	ldr	r1, [r6, #0]
 800b078:	4605      	mov	r5, r0
 800b07a:	b911      	cbnz	r1, 800b082 <sbrk_aligned+0x12>
 800b07c:	f001 f950 	bl	800c320 <_sbrk_r>
 800b080:	6030      	str	r0, [r6, #0]
 800b082:	4621      	mov	r1, r4
 800b084:	4628      	mov	r0, r5
 800b086:	f001 f94b 	bl	800c320 <_sbrk_r>
 800b08a:	1c43      	adds	r3, r0, #1
 800b08c:	d103      	bne.n	800b096 <sbrk_aligned+0x26>
 800b08e:	f04f 34ff 	mov.w	r4, #4294967295
 800b092:	4620      	mov	r0, r4
 800b094:	bd70      	pop	{r4, r5, r6, pc}
 800b096:	1cc4      	adds	r4, r0, #3
 800b098:	f024 0403 	bic.w	r4, r4, #3
 800b09c:	42a0      	cmp	r0, r4
 800b09e:	d0f8      	beq.n	800b092 <sbrk_aligned+0x22>
 800b0a0:	1a21      	subs	r1, r4, r0
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	f001 f93c 	bl	800c320 <_sbrk_r>
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	d1f2      	bne.n	800b092 <sbrk_aligned+0x22>
 800b0ac:	e7ef      	b.n	800b08e <sbrk_aligned+0x1e>
 800b0ae:	bf00      	nop
 800b0b0:	20000670 	.word	0x20000670

0800b0b4 <_malloc_r>:
 800b0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0b8:	1ccd      	adds	r5, r1, #3
 800b0ba:	f025 0503 	bic.w	r5, r5, #3
 800b0be:	3508      	adds	r5, #8
 800b0c0:	2d0c      	cmp	r5, #12
 800b0c2:	bf38      	it	cc
 800b0c4:	250c      	movcc	r5, #12
 800b0c6:	2d00      	cmp	r5, #0
 800b0c8:	4606      	mov	r6, r0
 800b0ca:	db01      	blt.n	800b0d0 <_malloc_r+0x1c>
 800b0cc:	42a9      	cmp	r1, r5
 800b0ce:	d904      	bls.n	800b0da <_malloc_r+0x26>
 800b0d0:	230c      	movs	r3, #12
 800b0d2:	6033      	str	r3, [r6, #0]
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b1b0 <_malloc_r+0xfc>
 800b0de:	f000 f869 	bl	800b1b4 <__malloc_lock>
 800b0e2:	f8d8 3000 	ldr.w	r3, [r8]
 800b0e6:	461c      	mov	r4, r3
 800b0e8:	bb44      	cbnz	r4, 800b13c <_malloc_r+0x88>
 800b0ea:	4629      	mov	r1, r5
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f7ff ffbf 	bl	800b070 <sbrk_aligned>
 800b0f2:	1c43      	adds	r3, r0, #1
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	d158      	bne.n	800b1aa <_malloc_r+0xf6>
 800b0f8:	f8d8 4000 	ldr.w	r4, [r8]
 800b0fc:	4627      	mov	r7, r4
 800b0fe:	2f00      	cmp	r7, #0
 800b100:	d143      	bne.n	800b18a <_malloc_r+0xd6>
 800b102:	2c00      	cmp	r4, #0
 800b104:	d04b      	beq.n	800b19e <_malloc_r+0xea>
 800b106:	6823      	ldr	r3, [r4, #0]
 800b108:	4639      	mov	r1, r7
 800b10a:	4630      	mov	r0, r6
 800b10c:	eb04 0903 	add.w	r9, r4, r3
 800b110:	f001 f906 	bl	800c320 <_sbrk_r>
 800b114:	4581      	cmp	r9, r0
 800b116:	d142      	bne.n	800b19e <_malloc_r+0xea>
 800b118:	6821      	ldr	r1, [r4, #0]
 800b11a:	1a6d      	subs	r5, r5, r1
 800b11c:	4629      	mov	r1, r5
 800b11e:	4630      	mov	r0, r6
 800b120:	f7ff ffa6 	bl	800b070 <sbrk_aligned>
 800b124:	3001      	adds	r0, #1
 800b126:	d03a      	beq.n	800b19e <_malloc_r+0xea>
 800b128:	6823      	ldr	r3, [r4, #0]
 800b12a:	442b      	add	r3, r5
 800b12c:	6023      	str	r3, [r4, #0]
 800b12e:	f8d8 3000 	ldr.w	r3, [r8]
 800b132:	685a      	ldr	r2, [r3, #4]
 800b134:	bb62      	cbnz	r2, 800b190 <_malloc_r+0xdc>
 800b136:	f8c8 7000 	str.w	r7, [r8]
 800b13a:	e00f      	b.n	800b15c <_malloc_r+0xa8>
 800b13c:	6822      	ldr	r2, [r4, #0]
 800b13e:	1b52      	subs	r2, r2, r5
 800b140:	d420      	bmi.n	800b184 <_malloc_r+0xd0>
 800b142:	2a0b      	cmp	r2, #11
 800b144:	d917      	bls.n	800b176 <_malloc_r+0xc2>
 800b146:	1961      	adds	r1, r4, r5
 800b148:	42a3      	cmp	r3, r4
 800b14a:	6025      	str	r5, [r4, #0]
 800b14c:	bf18      	it	ne
 800b14e:	6059      	strne	r1, [r3, #4]
 800b150:	6863      	ldr	r3, [r4, #4]
 800b152:	bf08      	it	eq
 800b154:	f8c8 1000 	streq.w	r1, [r8]
 800b158:	5162      	str	r2, [r4, r5]
 800b15a:	604b      	str	r3, [r1, #4]
 800b15c:	4630      	mov	r0, r6
 800b15e:	f000 f82f 	bl	800b1c0 <__malloc_unlock>
 800b162:	f104 000b 	add.w	r0, r4, #11
 800b166:	1d23      	adds	r3, r4, #4
 800b168:	f020 0007 	bic.w	r0, r0, #7
 800b16c:	1ac2      	subs	r2, r0, r3
 800b16e:	bf1c      	itt	ne
 800b170:	1a1b      	subne	r3, r3, r0
 800b172:	50a3      	strne	r3, [r4, r2]
 800b174:	e7af      	b.n	800b0d6 <_malloc_r+0x22>
 800b176:	6862      	ldr	r2, [r4, #4]
 800b178:	42a3      	cmp	r3, r4
 800b17a:	bf0c      	ite	eq
 800b17c:	f8c8 2000 	streq.w	r2, [r8]
 800b180:	605a      	strne	r2, [r3, #4]
 800b182:	e7eb      	b.n	800b15c <_malloc_r+0xa8>
 800b184:	4623      	mov	r3, r4
 800b186:	6864      	ldr	r4, [r4, #4]
 800b188:	e7ae      	b.n	800b0e8 <_malloc_r+0x34>
 800b18a:	463c      	mov	r4, r7
 800b18c:	687f      	ldr	r7, [r7, #4]
 800b18e:	e7b6      	b.n	800b0fe <_malloc_r+0x4a>
 800b190:	461a      	mov	r2, r3
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	42a3      	cmp	r3, r4
 800b196:	d1fb      	bne.n	800b190 <_malloc_r+0xdc>
 800b198:	2300      	movs	r3, #0
 800b19a:	6053      	str	r3, [r2, #4]
 800b19c:	e7de      	b.n	800b15c <_malloc_r+0xa8>
 800b19e:	230c      	movs	r3, #12
 800b1a0:	6033      	str	r3, [r6, #0]
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	f000 f80c 	bl	800b1c0 <__malloc_unlock>
 800b1a8:	e794      	b.n	800b0d4 <_malloc_r+0x20>
 800b1aa:	6005      	str	r5, [r0, #0]
 800b1ac:	e7d6      	b.n	800b15c <_malloc_r+0xa8>
 800b1ae:	bf00      	nop
 800b1b0:	20000674 	.word	0x20000674

0800b1b4 <__malloc_lock>:
 800b1b4:	4801      	ldr	r0, [pc, #4]	@ (800b1bc <__malloc_lock+0x8>)
 800b1b6:	f001 b900 	b.w	800c3ba <__retarget_lock_acquire_recursive>
 800b1ba:	bf00      	nop
 800b1bc:	200007b8 	.word	0x200007b8

0800b1c0 <__malloc_unlock>:
 800b1c0:	4801      	ldr	r0, [pc, #4]	@ (800b1c8 <__malloc_unlock+0x8>)
 800b1c2:	f001 b8fb 	b.w	800c3bc <__retarget_lock_release_recursive>
 800b1c6:	bf00      	nop
 800b1c8:	200007b8 	.word	0x200007b8

0800b1cc <__cvt>:
 800b1cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d0:	ec57 6b10 	vmov	r6, r7, d0
 800b1d4:	2f00      	cmp	r7, #0
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	4619      	mov	r1, r3
 800b1da:	463b      	mov	r3, r7
 800b1dc:	bfbb      	ittet	lt
 800b1de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b1e2:	461f      	movlt	r7, r3
 800b1e4:	2300      	movge	r3, #0
 800b1e6:	232d      	movlt	r3, #45	@ 0x2d
 800b1e8:	700b      	strb	r3, [r1, #0]
 800b1ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b1f0:	4691      	mov	r9, r2
 800b1f2:	f023 0820 	bic.w	r8, r3, #32
 800b1f6:	bfbc      	itt	lt
 800b1f8:	4632      	movlt	r2, r6
 800b1fa:	4616      	movlt	r6, r2
 800b1fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b200:	d005      	beq.n	800b20e <__cvt+0x42>
 800b202:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b206:	d100      	bne.n	800b20a <__cvt+0x3e>
 800b208:	3401      	adds	r4, #1
 800b20a:	2102      	movs	r1, #2
 800b20c:	e000      	b.n	800b210 <__cvt+0x44>
 800b20e:	2103      	movs	r1, #3
 800b210:	ab03      	add	r3, sp, #12
 800b212:	9301      	str	r3, [sp, #4]
 800b214:	ab02      	add	r3, sp, #8
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	ec47 6b10 	vmov	d0, r6, r7
 800b21c:	4653      	mov	r3, sl
 800b21e:	4622      	mov	r2, r4
 800b220:	f001 f96a 	bl	800c4f8 <_dtoa_r>
 800b224:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b228:	4605      	mov	r5, r0
 800b22a:	d119      	bne.n	800b260 <__cvt+0x94>
 800b22c:	f019 0f01 	tst.w	r9, #1
 800b230:	d00e      	beq.n	800b250 <__cvt+0x84>
 800b232:	eb00 0904 	add.w	r9, r0, r4
 800b236:	2200      	movs	r2, #0
 800b238:	2300      	movs	r3, #0
 800b23a:	4630      	mov	r0, r6
 800b23c:	4639      	mov	r1, r7
 800b23e:	f7f5 fc6b 	bl	8000b18 <__aeabi_dcmpeq>
 800b242:	b108      	cbz	r0, 800b248 <__cvt+0x7c>
 800b244:	f8cd 900c 	str.w	r9, [sp, #12]
 800b248:	2230      	movs	r2, #48	@ 0x30
 800b24a:	9b03      	ldr	r3, [sp, #12]
 800b24c:	454b      	cmp	r3, r9
 800b24e:	d31e      	bcc.n	800b28e <__cvt+0xc2>
 800b250:	9b03      	ldr	r3, [sp, #12]
 800b252:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b254:	1b5b      	subs	r3, r3, r5
 800b256:	4628      	mov	r0, r5
 800b258:	6013      	str	r3, [r2, #0]
 800b25a:	b004      	add	sp, #16
 800b25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b260:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b264:	eb00 0904 	add.w	r9, r0, r4
 800b268:	d1e5      	bne.n	800b236 <__cvt+0x6a>
 800b26a:	7803      	ldrb	r3, [r0, #0]
 800b26c:	2b30      	cmp	r3, #48	@ 0x30
 800b26e:	d10a      	bne.n	800b286 <__cvt+0xba>
 800b270:	2200      	movs	r2, #0
 800b272:	2300      	movs	r3, #0
 800b274:	4630      	mov	r0, r6
 800b276:	4639      	mov	r1, r7
 800b278:	f7f5 fc4e 	bl	8000b18 <__aeabi_dcmpeq>
 800b27c:	b918      	cbnz	r0, 800b286 <__cvt+0xba>
 800b27e:	f1c4 0401 	rsb	r4, r4, #1
 800b282:	f8ca 4000 	str.w	r4, [sl]
 800b286:	f8da 3000 	ldr.w	r3, [sl]
 800b28a:	4499      	add	r9, r3
 800b28c:	e7d3      	b.n	800b236 <__cvt+0x6a>
 800b28e:	1c59      	adds	r1, r3, #1
 800b290:	9103      	str	r1, [sp, #12]
 800b292:	701a      	strb	r2, [r3, #0]
 800b294:	e7d9      	b.n	800b24a <__cvt+0x7e>

0800b296 <__exponent>:
 800b296:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b298:	2900      	cmp	r1, #0
 800b29a:	bfba      	itte	lt
 800b29c:	4249      	neglt	r1, r1
 800b29e:	232d      	movlt	r3, #45	@ 0x2d
 800b2a0:	232b      	movge	r3, #43	@ 0x2b
 800b2a2:	2909      	cmp	r1, #9
 800b2a4:	7002      	strb	r2, [r0, #0]
 800b2a6:	7043      	strb	r3, [r0, #1]
 800b2a8:	dd29      	ble.n	800b2fe <__exponent+0x68>
 800b2aa:	f10d 0307 	add.w	r3, sp, #7
 800b2ae:	461d      	mov	r5, r3
 800b2b0:	270a      	movs	r7, #10
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	fbb1 f6f7 	udiv	r6, r1, r7
 800b2b8:	fb07 1416 	mls	r4, r7, r6, r1
 800b2bc:	3430      	adds	r4, #48	@ 0x30
 800b2be:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b2c2:	460c      	mov	r4, r1
 800b2c4:	2c63      	cmp	r4, #99	@ 0x63
 800b2c6:	f103 33ff 	add.w	r3, r3, #4294967295
 800b2ca:	4631      	mov	r1, r6
 800b2cc:	dcf1      	bgt.n	800b2b2 <__exponent+0x1c>
 800b2ce:	3130      	adds	r1, #48	@ 0x30
 800b2d0:	1e94      	subs	r4, r2, #2
 800b2d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b2d6:	1c41      	adds	r1, r0, #1
 800b2d8:	4623      	mov	r3, r4
 800b2da:	42ab      	cmp	r3, r5
 800b2dc:	d30a      	bcc.n	800b2f4 <__exponent+0x5e>
 800b2de:	f10d 0309 	add.w	r3, sp, #9
 800b2e2:	1a9b      	subs	r3, r3, r2
 800b2e4:	42ac      	cmp	r4, r5
 800b2e6:	bf88      	it	hi
 800b2e8:	2300      	movhi	r3, #0
 800b2ea:	3302      	adds	r3, #2
 800b2ec:	4403      	add	r3, r0
 800b2ee:	1a18      	subs	r0, r3, r0
 800b2f0:	b003      	add	sp, #12
 800b2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b2f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b2fc:	e7ed      	b.n	800b2da <__exponent+0x44>
 800b2fe:	2330      	movs	r3, #48	@ 0x30
 800b300:	3130      	adds	r1, #48	@ 0x30
 800b302:	7083      	strb	r3, [r0, #2]
 800b304:	70c1      	strb	r1, [r0, #3]
 800b306:	1d03      	adds	r3, r0, #4
 800b308:	e7f1      	b.n	800b2ee <__exponent+0x58>
	...

0800b30c <_printf_float>:
 800b30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b310:	b08d      	sub	sp, #52	@ 0x34
 800b312:	460c      	mov	r4, r1
 800b314:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b318:	4616      	mov	r6, r2
 800b31a:	461f      	mov	r7, r3
 800b31c:	4605      	mov	r5, r0
 800b31e:	f000 ffb3 	bl	800c288 <_localeconv_r>
 800b322:	6803      	ldr	r3, [r0, #0]
 800b324:	9304      	str	r3, [sp, #16]
 800b326:	4618      	mov	r0, r3
 800b328:	f7f4 ffca 	bl	80002c0 <strlen>
 800b32c:	2300      	movs	r3, #0
 800b32e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b330:	f8d8 3000 	ldr.w	r3, [r8]
 800b334:	9005      	str	r0, [sp, #20]
 800b336:	3307      	adds	r3, #7
 800b338:	f023 0307 	bic.w	r3, r3, #7
 800b33c:	f103 0208 	add.w	r2, r3, #8
 800b340:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b344:	f8d4 b000 	ldr.w	fp, [r4]
 800b348:	f8c8 2000 	str.w	r2, [r8]
 800b34c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b350:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b354:	9307      	str	r3, [sp, #28]
 800b356:	f8cd 8018 	str.w	r8, [sp, #24]
 800b35a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b35e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b362:	4b9c      	ldr	r3, [pc, #624]	@ (800b5d4 <_printf_float+0x2c8>)
 800b364:	f04f 32ff 	mov.w	r2, #4294967295
 800b368:	f7f5 fc08 	bl	8000b7c <__aeabi_dcmpun>
 800b36c:	bb70      	cbnz	r0, 800b3cc <_printf_float+0xc0>
 800b36e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b372:	4b98      	ldr	r3, [pc, #608]	@ (800b5d4 <_printf_float+0x2c8>)
 800b374:	f04f 32ff 	mov.w	r2, #4294967295
 800b378:	f7f5 fbe2 	bl	8000b40 <__aeabi_dcmple>
 800b37c:	bb30      	cbnz	r0, 800b3cc <_printf_float+0xc0>
 800b37e:	2200      	movs	r2, #0
 800b380:	2300      	movs	r3, #0
 800b382:	4640      	mov	r0, r8
 800b384:	4649      	mov	r1, r9
 800b386:	f7f5 fbd1 	bl	8000b2c <__aeabi_dcmplt>
 800b38a:	b110      	cbz	r0, 800b392 <_printf_float+0x86>
 800b38c:	232d      	movs	r3, #45	@ 0x2d
 800b38e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b392:	4a91      	ldr	r2, [pc, #580]	@ (800b5d8 <_printf_float+0x2cc>)
 800b394:	4b91      	ldr	r3, [pc, #580]	@ (800b5dc <_printf_float+0x2d0>)
 800b396:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b39a:	bf94      	ite	ls
 800b39c:	4690      	movls	r8, r2
 800b39e:	4698      	movhi	r8, r3
 800b3a0:	2303      	movs	r3, #3
 800b3a2:	6123      	str	r3, [r4, #16]
 800b3a4:	f02b 0304 	bic.w	r3, fp, #4
 800b3a8:	6023      	str	r3, [r4, #0]
 800b3aa:	f04f 0900 	mov.w	r9, #0
 800b3ae:	9700      	str	r7, [sp, #0]
 800b3b0:	4633      	mov	r3, r6
 800b3b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b3b4:	4621      	mov	r1, r4
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	f000 f9d2 	bl	800b760 <_printf_common>
 800b3bc:	3001      	adds	r0, #1
 800b3be:	f040 808d 	bne.w	800b4dc <_printf_float+0x1d0>
 800b3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c6:	b00d      	add	sp, #52	@ 0x34
 800b3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3cc:	4642      	mov	r2, r8
 800b3ce:	464b      	mov	r3, r9
 800b3d0:	4640      	mov	r0, r8
 800b3d2:	4649      	mov	r1, r9
 800b3d4:	f7f5 fbd2 	bl	8000b7c <__aeabi_dcmpun>
 800b3d8:	b140      	cbz	r0, 800b3ec <_printf_float+0xe0>
 800b3da:	464b      	mov	r3, r9
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	bfbc      	itt	lt
 800b3e0:	232d      	movlt	r3, #45	@ 0x2d
 800b3e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b3e6:	4a7e      	ldr	r2, [pc, #504]	@ (800b5e0 <_printf_float+0x2d4>)
 800b3e8:	4b7e      	ldr	r3, [pc, #504]	@ (800b5e4 <_printf_float+0x2d8>)
 800b3ea:	e7d4      	b.n	800b396 <_printf_float+0x8a>
 800b3ec:	6863      	ldr	r3, [r4, #4]
 800b3ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b3f2:	9206      	str	r2, [sp, #24]
 800b3f4:	1c5a      	adds	r2, r3, #1
 800b3f6:	d13b      	bne.n	800b470 <_printf_float+0x164>
 800b3f8:	2306      	movs	r3, #6
 800b3fa:	6063      	str	r3, [r4, #4]
 800b3fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b400:	2300      	movs	r3, #0
 800b402:	6022      	str	r2, [r4, #0]
 800b404:	9303      	str	r3, [sp, #12]
 800b406:	ab0a      	add	r3, sp, #40	@ 0x28
 800b408:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b40c:	ab09      	add	r3, sp, #36	@ 0x24
 800b40e:	9300      	str	r3, [sp, #0]
 800b410:	6861      	ldr	r1, [r4, #4]
 800b412:	ec49 8b10 	vmov	d0, r8, r9
 800b416:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b41a:	4628      	mov	r0, r5
 800b41c:	f7ff fed6 	bl	800b1cc <__cvt>
 800b420:	9b06      	ldr	r3, [sp, #24]
 800b422:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b424:	2b47      	cmp	r3, #71	@ 0x47
 800b426:	4680      	mov	r8, r0
 800b428:	d129      	bne.n	800b47e <_printf_float+0x172>
 800b42a:	1cc8      	adds	r0, r1, #3
 800b42c:	db02      	blt.n	800b434 <_printf_float+0x128>
 800b42e:	6863      	ldr	r3, [r4, #4]
 800b430:	4299      	cmp	r1, r3
 800b432:	dd41      	ble.n	800b4b8 <_printf_float+0x1ac>
 800b434:	f1aa 0a02 	sub.w	sl, sl, #2
 800b438:	fa5f fa8a 	uxtb.w	sl, sl
 800b43c:	3901      	subs	r1, #1
 800b43e:	4652      	mov	r2, sl
 800b440:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b444:	9109      	str	r1, [sp, #36]	@ 0x24
 800b446:	f7ff ff26 	bl	800b296 <__exponent>
 800b44a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b44c:	1813      	adds	r3, r2, r0
 800b44e:	2a01      	cmp	r2, #1
 800b450:	4681      	mov	r9, r0
 800b452:	6123      	str	r3, [r4, #16]
 800b454:	dc02      	bgt.n	800b45c <_printf_float+0x150>
 800b456:	6822      	ldr	r2, [r4, #0]
 800b458:	07d2      	lsls	r2, r2, #31
 800b45a:	d501      	bpl.n	800b460 <_printf_float+0x154>
 800b45c:	3301      	adds	r3, #1
 800b45e:	6123      	str	r3, [r4, #16]
 800b460:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b464:	2b00      	cmp	r3, #0
 800b466:	d0a2      	beq.n	800b3ae <_printf_float+0xa2>
 800b468:	232d      	movs	r3, #45	@ 0x2d
 800b46a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b46e:	e79e      	b.n	800b3ae <_printf_float+0xa2>
 800b470:	9a06      	ldr	r2, [sp, #24]
 800b472:	2a47      	cmp	r2, #71	@ 0x47
 800b474:	d1c2      	bne.n	800b3fc <_printf_float+0xf0>
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1c0      	bne.n	800b3fc <_printf_float+0xf0>
 800b47a:	2301      	movs	r3, #1
 800b47c:	e7bd      	b.n	800b3fa <_printf_float+0xee>
 800b47e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b482:	d9db      	bls.n	800b43c <_printf_float+0x130>
 800b484:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b488:	d118      	bne.n	800b4bc <_printf_float+0x1b0>
 800b48a:	2900      	cmp	r1, #0
 800b48c:	6863      	ldr	r3, [r4, #4]
 800b48e:	dd0b      	ble.n	800b4a8 <_printf_float+0x19c>
 800b490:	6121      	str	r1, [r4, #16]
 800b492:	b913      	cbnz	r3, 800b49a <_printf_float+0x18e>
 800b494:	6822      	ldr	r2, [r4, #0]
 800b496:	07d0      	lsls	r0, r2, #31
 800b498:	d502      	bpl.n	800b4a0 <_printf_float+0x194>
 800b49a:	3301      	adds	r3, #1
 800b49c:	440b      	add	r3, r1
 800b49e:	6123      	str	r3, [r4, #16]
 800b4a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b4a2:	f04f 0900 	mov.w	r9, #0
 800b4a6:	e7db      	b.n	800b460 <_printf_float+0x154>
 800b4a8:	b913      	cbnz	r3, 800b4b0 <_printf_float+0x1a4>
 800b4aa:	6822      	ldr	r2, [r4, #0]
 800b4ac:	07d2      	lsls	r2, r2, #31
 800b4ae:	d501      	bpl.n	800b4b4 <_printf_float+0x1a8>
 800b4b0:	3302      	adds	r3, #2
 800b4b2:	e7f4      	b.n	800b49e <_printf_float+0x192>
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e7f2      	b.n	800b49e <_printf_float+0x192>
 800b4b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b4bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4be:	4299      	cmp	r1, r3
 800b4c0:	db05      	blt.n	800b4ce <_printf_float+0x1c2>
 800b4c2:	6823      	ldr	r3, [r4, #0]
 800b4c4:	6121      	str	r1, [r4, #16]
 800b4c6:	07d8      	lsls	r0, r3, #31
 800b4c8:	d5ea      	bpl.n	800b4a0 <_printf_float+0x194>
 800b4ca:	1c4b      	adds	r3, r1, #1
 800b4cc:	e7e7      	b.n	800b49e <_printf_float+0x192>
 800b4ce:	2900      	cmp	r1, #0
 800b4d0:	bfd4      	ite	le
 800b4d2:	f1c1 0202 	rsble	r2, r1, #2
 800b4d6:	2201      	movgt	r2, #1
 800b4d8:	4413      	add	r3, r2
 800b4da:	e7e0      	b.n	800b49e <_printf_float+0x192>
 800b4dc:	6823      	ldr	r3, [r4, #0]
 800b4de:	055a      	lsls	r2, r3, #21
 800b4e0:	d407      	bmi.n	800b4f2 <_printf_float+0x1e6>
 800b4e2:	6923      	ldr	r3, [r4, #16]
 800b4e4:	4642      	mov	r2, r8
 800b4e6:	4631      	mov	r1, r6
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	47b8      	blx	r7
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	d12b      	bne.n	800b548 <_printf_float+0x23c>
 800b4f0:	e767      	b.n	800b3c2 <_printf_float+0xb6>
 800b4f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b4f6:	f240 80dd 	bls.w	800b6b4 <_printf_float+0x3a8>
 800b4fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b4fe:	2200      	movs	r2, #0
 800b500:	2300      	movs	r3, #0
 800b502:	f7f5 fb09 	bl	8000b18 <__aeabi_dcmpeq>
 800b506:	2800      	cmp	r0, #0
 800b508:	d033      	beq.n	800b572 <_printf_float+0x266>
 800b50a:	4a37      	ldr	r2, [pc, #220]	@ (800b5e8 <_printf_float+0x2dc>)
 800b50c:	2301      	movs	r3, #1
 800b50e:	4631      	mov	r1, r6
 800b510:	4628      	mov	r0, r5
 800b512:	47b8      	blx	r7
 800b514:	3001      	adds	r0, #1
 800b516:	f43f af54 	beq.w	800b3c2 <_printf_float+0xb6>
 800b51a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b51e:	4543      	cmp	r3, r8
 800b520:	db02      	blt.n	800b528 <_printf_float+0x21c>
 800b522:	6823      	ldr	r3, [r4, #0]
 800b524:	07d8      	lsls	r0, r3, #31
 800b526:	d50f      	bpl.n	800b548 <_printf_float+0x23c>
 800b528:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b52c:	4631      	mov	r1, r6
 800b52e:	4628      	mov	r0, r5
 800b530:	47b8      	blx	r7
 800b532:	3001      	adds	r0, #1
 800b534:	f43f af45 	beq.w	800b3c2 <_printf_float+0xb6>
 800b538:	f04f 0900 	mov.w	r9, #0
 800b53c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b540:	f104 0a1a 	add.w	sl, r4, #26
 800b544:	45c8      	cmp	r8, r9
 800b546:	dc09      	bgt.n	800b55c <_printf_float+0x250>
 800b548:	6823      	ldr	r3, [r4, #0]
 800b54a:	079b      	lsls	r3, r3, #30
 800b54c:	f100 8103 	bmi.w	800b756 <_printf_float+0x44a>
 800b550:	68e0      	ldr	r0, [r4, #12]
 800b552:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b554:	4298      	cmp	r0, r3
 800b556:	bfb8      	it	lt
 800b558:	4618      	movlt	r0, r3
 800b55a:	e734      	b.n	800b3c6 <_printf_float+0xba>
 800b55c:	2301      	movs	r3, #1
 800b55e:	4652      	mov	r2, sl
 800b560:	4631      	mov	r1, r6
 800b562:	4628      	mov	r0, r5
 800b564:	47b8      	blx	r7
 800b566:	3001      	adds	r0, #1
 800b568:	f43f af2b 	beq.w	800b3c2 <_printf_float+0xb6>
 800b56c:	f109 0901 	add.w	r9, r9, #1
 800b570:	e7e8      	b.n	800b544 <_printf_float+0x238>
 800b572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b574:	2b00      	cmp	r3, #0
 800b576:	dc39      	bgt.n	800b5ec <_printf_float+0x2e0>
 800b578:	4a1b      	ldr	r2, [pc, #108]	@ (800b5e8 <_printf_float+0x2dc>)
 800b57a:	2301      	movs	r3, #1
 800b57c:	4631      	mov	r1, r6
 800b57e:	4628      	mov	r0, r5
 800b580:	47b8      	blx	r7
 800b582:	3001      	adds	r0, #1
 800b584:	f43f af1d 	beq.w	800b3c2 <_printf_float+0xb6>
 800b588:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b58c:	ea59 0303 	orrs.w	r3, r9, r3
 800b590:	d102      	bne.n	800b598 <_printf_float+0x28c>
 800b592:	6823      	ldr	r3, [r4, #0]
 800b594:	07d9      	lsls	r1, r3, #31
 800b596:	d5d7      	bpl.n	800b548 <_printf_float+0x23c>
 800b598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b59c:	4631      	mov	r1, r6
 800b59e:	4628      	mov	r0, r5
 800b5a0:	47b8      	blx	r7
 800b5a2:	3001      	adds	r0, #1
 800b5a4:	f43f af0d 	beq.w	800b3c2 <_printf_float+0xb6>
 800b5a8:	f04f 0a00 	mov.w	sl, #0
 800b5ac:	f104 0b1a 	add.w	fp, r4, #26
 800b5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5b2:	425b      	negs	r3, r3
 800b5b4:	4553      	cmp	r3, sl
 800b5b6:	dc01      	bgt.n	800b5bc <_printf_float+0x2b0>
 800b5b8:	464b      	mov	r3, r9
 800b5ba:	e793      	b.n	800b4e4 <_printf_float+0x1d8>
 800b5bc:	2301      	movs	r3, #1
 800b5be:	465a      	mov	r2, fp
 800b5c0:	4631      	mov	r1, r6
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	47b8      	blx	r7
 800b5c6:	3001      	adds	r0, #1
 800b5c8:	f43f aefb 	beq.w	800b3c2 <_printf_float+0xb6>
 800b5cc:	f10a 0a01 	add.w	sl, sl, #1
 800b5d0:	e7ee      	b.n	800b5b0 <_printf_float+0x2a4>
 800b5d2:	bf00      	nop
 800b5d4:	7fefffff 	.word	0x7fefffff
 800b5d8:	0800f878 	.word	0x0800f878
 800b5dc:	0800f87c 	.word	0x0800f87c
 800b5e0:	0800f880 	.word	0x0800f880
 800b5e4:	0800f884 	.word	0x0800f884
 800b5e8:	0800f888 	.word	0x0800f888
 800b5ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b5ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b5f2:	4553      	cmp	r3, sl
 800b5f4:	bfa8      	it	ge
 800b5f6:	4653      	movge	r3, sl
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	4699      	mov	r9, r3
 800b5fc:	dc36      	bgt.n	800b66c <_printf_float+0x360>
 800b5fe:	f04f 0b00 	mov.w	fp, #0
 800b602:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b606:	f104 021a 	add.w	r2, r4, #26
 800b60a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b60c:	9306      	str	r3, [sp, #24]
 800b60e:	eba3 0309 	sub.w	r3, r3, r9
 800b612:	455b      	cmp	r3, fp
 800b614:	dc31      	bgt.n	800b67a <_printf_float+0x36e>
 800b616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b618:	459a      	cmp	sl, r3
 800b61a:	dc3a      	bgt.n	800b692 <_printf_float+0x386>
 800b61c:	6823      	ldr	r3, [r4, #0]
 800b61e:	07da      	lsls	r2, r3, #31
 800b620:	d437      	bmi.n	800b692 <_printf_float+0x386>
 800b622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b624:	ebaa 0903 	sub.w	r9, sl, r3
 800b628:	9b06      	ldr	r3, [sp, #24]
 800b62a:	ebaa 0303 	sub.w	r3, sl, r3
 800b62e:	4599      	cmp	r9, r3
 800b630:	bfa8      	it	ge
 800b632:	4699      	movge	r9, r3
 800b634:	f1b9 0f00 	cmp.w	r9, #0
 800b638:	dc33      	bgt.n	800b6a2 <_printf_float+0x396>
 800b63a:	f04f 0800 	mov.w	r8, #0
 800b63e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b642:	f104 0b1a 	add.w	fp, r4, #26
 800b646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b648:	ebaa 0303 	sub.w	r3, sl, r3
 800b64c:	eba3 0309 	sub.w	r3, r3, r9
 800b650:	4543      	cmp	r3, r8
 800b652:	f77f af79 	ble.w	800b548 <_printf_float+0x23c>
 800b656:	2301      	movs	r3, #1
 800b658:	465a      	mov	r2, fp
 800b65a:	4631      	mov	r1, r6
 800b65c:	4628      	mov	r0, r5
 800b65e:	47b8      	blx	r7
 800b660:	3001      	adds	r0, #1
 800b662:	f43f aeae 	beq.w	800b3c2 <_printf_float+0xb6>
 800b666:	f108 0801 	add.w	r8, r8, #1
 800b66a:	e7ec      	b.n	800b646 <_printf_float+0x33a>
 800b66c:	4642      	mov	r2, r8
 800b66e:	4631      	mov	r1, r6
 800b670:	4628      	mov	r0, r5
 800b672:	47b8      	blx	r7
 800b674:	3001      	adds	r0, #1
 800b676:	d1c2      	bne.n	800b5fe <_printf_float+0x2f2>
 800b678:	e6a3      	b.n	800b3c2 <_printf_float+0xb6>
 800b67a:	2301      	movs	r3, #1
 800b67c:	4631      	mov	r1, r6
 800b67e:	4628      	mov	r0, r5
 800b680:	9206      	str	r2, [sp, #24]
 800b682:	47b8      	blx	r7
 800b684:	3001      	adds	r0, #1
 800b686:	f43f ae9c 	beq.w	800b3c2 <_printf_float+0xb6>
 800b68a:	9a06      	ldr	r2, [sp, #24]
 800b68c:	f10b 0b01 	add.w	fp, fp, #1
 800b690:	e7bb      	b.n	800b60a <_printf_float+0x2fe>
 800b692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b696:	4631      	mov	r1, r6
 800b698:	4628      	mov	r0, r5
 800b69a:	47b8      	blx	r7
 800b69c:	3001      	adds	r0, #1
 800b69e:	d1c0      	bne.n	800b622 <_printf_float+0x316>
 800b6a0:	e68f      	b.n	800b3c2 <_printf_float+0xb6>
 800b6a2:	9a06      	ldr	r2, [sp, #24]
 800b6a4:	464b      	mov	r3, r9
 800b6a6:	4442      	add	r2, r8
 800b6a8:	4631      	mov	r1, r6
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	47b8      	blx	r7
 800b6ae:	3001      	adds	r0, #1
 800b6b0:	d1c3      	bne.n	800b63a <_printf_float+0x32e>
 800b6b2:	e686      	b.n	800b3c2 <_printf_float+0xb6>
 800b6b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b6b8:	f1ba 0f01 	cmp.w	sl, #1
 800b6bc:	dc01      	bgt.n	800b6c2 <_printf_float+0x3b6>
 800b6be:	07db      	lsls	r3, r3, #31
 800b6c0:	d536      	bpl.n	800b730 <_printf_float+0x424>
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	4642      	mov	r2, r8
 800b6c6:	4631      	mov	r1, r6
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	47b8      	blx	r7
 800b6cc:	3001      	adds	r0, #1
 800b6ce:	f43f ae78 	beq.w	800b3c2 <_printf_float+0xb6>
 800b6d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6d6:	4631      	mov	r1, r6
 800b6d8:	4628      	mov	r0, r5
 800b6da:	47b8      	blx	r7
 800b6dc:	3001      	adds	r0, #1
 800b6de:	f43f ae70 	beq.w	800b3c2 <_printf_float+0xb6>
 800b6e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6ee:	f7f5 fa13 	bl	8000b18 <__aeabi_dcmpeq>
 800b6f2:	b9c0      	cbnz	r0, 800b726 <_printf_float+0x41a>
 800b6f4:	4653      	mov	r3, sl
 800b6f6:	f108 0201 	add.w	r2, r8, #1
 800b6fa:	4631      	mov	r1, r6
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	47b8      	blx	r7
 800b700:	3001      	adds	r0, #1
 800b702:	d10c      	bne.n	800b71e <_printf_float+0x412>
 800b704:	e65d      	b.n	800b3c2 <_printf_float+0xb6>
 800b706:	2301      	movs	r3, #1
 800b708:	465a      	mov	r2, fp
 800b70a:	4631      	mov	r1, r6
 800b70c:	4628      	mov	r0, r5
 800b70e:	47b8      	blx	r7
 800b710:	3001      	adds	r0, #1
 800b712:	f43f ae56 	beq.w	800b3c2 <_printf_float+0xb6>
 800b716:	f108 0801 	add.w	r8, r8, #1
 800b71a:	45d0      	cmp	r8, sl
 800b71c:	dbf3      	blt.n	800b706 <_printf_float+0x3fa>
 800b71e:	464b      	mov	r3, r9
 800b720:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b724:	e6df      	b.n	800b4e6 <_printf_float+0x1da>
 800b726:	f04f 0800 	mov.w	r8, #0
 800b72a:	f104 0b1a 	add.w	fp, r4, #26
 800b72e:	e7f4      	b.n	800b71a <_printf_float+0x40e>
 800b730:	2301      	movs	r3, #1
 800b732:	4642      	mov	r2, r8
 800b734:	e7e1      	b.n	800b6fa <_printf_float+0x3ee>
 800b736:	2301      	movs	r3, #1
 800b738:	464a      	mov	r2, r9
 800b73a:	4631      	mov	r1, r6
 800b73c:	4628      	mov	r0, r5
 800b73e:	47b8      	blx	r7
 800b740:	3001      	adds	r0, #1
 800b742:	f43f ae3e 	beq.w	800b3c2 <_printf_float+0xb6>
 800b746:	f108 0801 	add.w	r8, r8, #1
 800b74a:	68e3      	ldr	r3, [r4, #12]
 800b74c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b74e:	1a5b      	subs	r3, r3, r1
 800b750:	4543      	cmp	r3, r8
 800b752:	dcf0      	bgt.n	800b736 <_printf_float+0x42a>
 800b754:	e6fc      	b.n	800b550 <_printf_float+0x244>
 800b756:	f04f 0800 	mov.w	r8, #0
 800b75a:	f104 0919 	add.w	r9, r4, #25
 800b75e:	e7f4      	b.n	800b74a <_printf_float+0x43e>

0800b760 <_printf_common>:
 800b760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b764:	4616      	mov	r6, r2
 800b766:	4698      	mov	r8, r3
 800b768:	688a      	ldr	r2, [r1, #8]
 800b76a:	690b      	ldr	r3, [r1, #16]
 800b76c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b770:	4293      	cmp	r3, r2
 800b772:	bfb8      	it	lt
 800b774:	4613      	movlt	r3, r2
 800b776:	6033      	str	r3, [r6, #0]
 800b778:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b77c:	4607      	mov	r7, r0
 800b77e:	460c      	mov	r4, r1
 800b780:	b10a      	cbz	r2, 800b786 <_printf_common+0x26>
 800b782:	3301      	adds	r3, #1
 800b784:	6033      	str	r3, [r6, #0]
 800b786:	6823      	ldr	r3, [r4, #0]
 800b788:	0699      	lsls	r1, r3, #26
 800b78a:	bf42      	ittt	mi
 800b78c:	6833      	ldrmi	r3, [r6, #0]
 800b78e:	3302      	addmi	r3, #2
 800b790:	6033      	strmi	r3, [r6, #0]
 800b792:	6825      	ldr	r5, [r4, #0]
 800b794:	f015 0506 	ands.w	r5, r5, #6
 800b798:	d106      	bne.n	800b7a8 <_printf_common+0x48>
 800b79a:	f104 0a19 	add.w	sl, r4, #25
 800b79e:	68e3      	ldr	r3, [r4, #12]
 800b7a0:	6832      	ldr	r2, [r6, #0]
 800b7a2:	1a9b      	subs	r3, r3, r2
 800b7a4:	42ab      	cmp	r3, r5
 800b7a6:	dc26      	bgt.n	800b7f6 <_printf_common+0x96>
 800b7a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b7ac:	6822      	ldr	r2, [r4, #0]
 800b7ae:	3b00      	subs	r3, #0
 800b7b0:	bf18      	it	ne
 800b7b2:	2301      	movne	r3, #1
 800b7b4:	0692      	lsls	r2, r2, #26
 800b7b6:	d42b      	bmi.n	800b810 <_printf_common+0xb0>
 800b7b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b7bc:	4641      	mov	r1, r8
 800b7be:	4638      	mov	r0, r7
 800b7c0:	47c8      	blx	r9
 800b7c2:	3001      	adds	r0, #1
 800b7c4:	d01e      	beq.n	800b804 <_printf_common+0xa4>
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	6922      	ldr	r2, [r4, #16]
 800b7ca:	f003 0306 	and.w	r3, r3, #6
 800b7ce:	2b04      	cmp	r3, #4
 800b7d0:	bf02      	ittt	eq
 800b7d2:	68e5      	ldreq	r5, [r4, #12]
 800b7d4:	6833      	ldreq	r3, [r6, #0]
 800b7d6:	1aed      	subeq	r5, r5, r3
 800b7d8:	68a3      	ldr	r3, [r4, #8]
 800b7da:	bf0c      	ite	eq
 800b7dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7e0:	2500      	movne	r5, #0
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	bfc4      	itt	gt
 800b7e6:	1a9b      	subgt	r3, r3, r2
 800b7e8:	18ed      	addgt	r5, r5, r3
 800b7ea:	2600      	movs	r6, #0
 800b7ec:	341a      	adds	r4, #26
 800b7ee:	42b5      	cmp	r5, r6
 800b7f0:	d11a      	bne.n	800b828 <_printf_common+0xc8>
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	e008      	b.n	800b808 <_printf_common+0xa8>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	4652      	mov	r2, sl
 800b7fa:	4641      	mov	r1, r8
 800b7fc:	4638      	mov	r0, r7
 800b7fe:	47c8      	blx	r9
 800b800:	3001      	adds	r0, #1
 800b802:	d103      	bne.n	800b80c <_printf_common+0xac>
 800b804:	f04f 30ff 	mov.w	r0, #4294967295
 800b808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b80c:	3501      	adds	r5, #1
 800b80e:	e7c6      	b.n	800b79e <_printf_common+0x3e>
 800b810:	18e1      	adds	r1, r4, r3
 800b812:	1c5a      	adds	r2, r3, #1
 800b814:	2030      	movs	r0, #48	@ 0x30
 800b816:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b81a:	4422      	add	r2, r4
 800b81c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b820:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b824:	3302      	adds	r3, #2
 800b826:	e7c7      	b.n	800b7b8 <_printf_common+0x58>
 800b828:	2301      	movs	r3, #1
 800b82a:	4622      	mov	r2, r4
 800b82c:	4641      	mov	r1, r8
 800b82e:	4638      	mov	r0, r7
 800b830:	47c8      	blx	r9
 800b832:	3001      	adds	r0, #1
 800b834:	d0e6      	beq.n	800b804 <_printf_common+0xa4>
 800b836:	3601      	adds	r6, #1
 800b838:	e7d9      	b.n	800b7ee <_printf_common+0x8e>
	...

0800b83c <_printf_i>:
 800b83c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b840:	7e0f      	ldrb	r7, [r1, #24]
 800b842:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b844:	2f78      	cmp	r7, #120	@ 0x78
 800b846:	4691      	mov	r9, r2
 800b848:	4680      	mov	r8, r0
 800b84a:	460c      	mov	r4, r1
 800b84c:	469a      	mov	sl, r3
 800b84e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b852:	d807      	bhi.n	800b864 <_printf_i+0x28>
 800b854:	2f62      	cmp	r7, #98	@ 0x62
 800b856:	d80a      	bhi.n	800b86e <_printf_i+0x32>
 800b858:	2f00      	cmp	r7, #0
 800b85a:	f000 80d2 	beq.w	800ba02 <_printf_i+0x1c6>
 800b85e:	2f58      	cmp	r7, #88	@ 0x58
 800b860:	f000 80b9 	beq.w	800b9d6 <_printf_i+0x19a>
 800b864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b868:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b86c:	e03a      	b.n	800b8e4 <_printf_i+0xa8>
 800b86e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b872:	2b15      	cmp	r3, #21
 800b874:	d8f6      	bhi.n	800b864 <_printf_i+0x28>
 800b876:	a101      	add	r1, pc, #4	@ (adr r1, 800b87c <_printf_i+0x40>)
 800b878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b87c:	0800b8d5 	.word	0x0800b8d5
 800b880:	0800b8e9 	.word	0x0800b8e9
 800b884:	0800b865 	.word	0x0800b865
 800b888:	0800b865 	.word	0x0800b865
 800b88c:	0800b865 	.word	0x0800b865
 800b890:	0800b865 	.word	0x0800b865
 800b894:	0800b8e9 	.word	0x0800b8e9
 800b898:	0800b865 	.word	0x0800b865
 800b89c:	0800b865 	.word	0x0800b865
 800b8a0:	0800b865 	.word	0x0800b865
 800b8a4:	0800b865 	.word	0x0800b865
 800b8a8:	0800b9e9 	.word	0x0800b9e9
 800b8ac:	0800b913 	.word	0x0800b913
 800b8b0:	0800b9a3 	.word	0x0800b9a3
 800b8b4:	0800b865 	.word	0x0800b865
 800b8b8:	0800b865 	.word	0x0800b865
 800b8bc:	0800ba0b 	.word	0x0800ba0b
 800b8c0:	0800b865 	.word	0x0800b865
 800b8c4:	0800b913 	.word	0x0800b913
 800b8c8:	0800b865 	.word	0x0800b865
 800b8cc:	0800b865 	.word	0x0800b865
 800b8d0:	0800b9ab 	.word	0x0800b9ab
 800b8d4:	6833      	ldr	r3, [r6, #0]
 800b8d6:	1d1a      	adds	r2, r3, #4
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	6032      	str	r2, [r6, #0]
 800b8dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	e09d      	b.n	800ba24 <_printf_i+0x1e8>
 800b8e8:	6833      	ldr	r3, [r6, #0]
 800b8ea:	6820      	ldr	r0, [r4, #0]
 800b8ec:	1d19      	adds	r1, r3, #4
 800b8ee:	6031      	str	r1, [r6, #0]
 800b8f0:	0606      	lsls	r6, r0, #24
 800b8f2:	d501      	bpl.n	800b8f8 <_printf_i+0xbc>
 800b8f4:	681d      	ldr	r5, [r3, #0]
 800b8f6:	e003      	b.n	800b900 <_printf_i+0xc4>
 800b8f8:	0645      	lsls	r5, r0, #25
 800b8fa:	d5fb      	bpl.n	800b8f4 <_printf_i+0xb8>
 800b8fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b900:	2d00      	cmp	r5, #0
 800b902:	da03      	bge.n	800b90c <_printf_i+0xd0>
 800b904:	232d      	movs	r3, #45	@ 0x2d
 800b906:	426d      	negs	r5, r5
 800b908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b90c:	4859      	ldr	r0, [pc, #356]	@ (800ba74 <_printf_i+0x238>)
 800b90e:	230a      	movs	r3, #10
 800b910:	e011      	b.n	800b936 <_printf_i+0xfa>
 800b912:	6821      	ldr	r1, [r4, #0]
 800b914:	6833      	ldr	r3, [r6, #0]
 800b916:	0608      	lsls	r0, r1, #24
 800b918:	f853 5b04 	ldr.w	r5, [r3], #4
 800b91c:	d402      	bmi.n	800b924 <_printf_i+0xe8>
 800b91e:	0649      	lsls	r1, r1, #25
 800b920:	bf48      	it	mi
 800b922:	b2ad      	uxthmi	r5, r5
 800b924:	2f6f      	cmp	r7, #111	@ 0x6f
 800b926:	4853      	ldr	r0, [pc, #332]	@ (800ba74 <_printf_i+0x238>)
 800b928:	6033      	str	r3, [r6, #0]
 800b92a:	bf14      	ite	ne
 800b92c:	230a      	movne	r3, #10
 800b92e:	2308      	moveq	r3, #8
 800b930:	2100      	movs	r1, #0
 800b932:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b936:	6866      	ldr	r6, [r4, #4]
 800b938:	60a6      	str	r6, [r4, #8]
 800b93a:	2e00      	cmp	r6, #0
 800b93c:	bfa2      	ittt	ge
 800b93e:	6821      	ldrge	r1, [r4, #0]
 800b940:	f021 0104 	bicge.w	r1, r1, #4
 800b944:	6021      	strge	r1, [r4, #0]
 800b946:	b90d      	cbnz	r5, 800b94c <_printf_i+0x110>
 800b948:	2e00      	cmp	r6, #0
 800b94a:	d04b      	beq.n	800b9e4 <_printf_i+0x1a8>
 800b94c:	4616      	mov	r6, r2
 800b94e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b952:	fb03 5711 	mls	r7, r3, r1, r5
 800b956:	5dc7      	ldrb	r7, [r0, r7]
 800b958:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b95c:	462f      	mov	r7, r5
 800b95e:	42bb      	cmp	r3, r7
 800b960:	460d      	mov	r5, r1
 800b962:	d9f4      	bls.n	800b94e <_printf_i+0x112>
 800b964:	2b08      	cmp	r3, #8
 800b966:	d10b      	bne.n	800b980 <_printf_i+0x144>
 800b968:	6823      	ldr	r3, [r4, #0]
 800b96a:	07df      	lsls	r7, r3, #31
 800b96c:	d508      	bpl.n	800b980 <_printf_i+0x144>
 800b96e:	6923      	ldr	r3, [r4, #16]
 800b970:	6861      	ldr	r1, [r4, #4]
 800b972:	4299      	cmp	r1, r3
 800b974:	bfde      	ittt	le
 800b976:	2330      	movle	r3, #48	@ 0x30
 800b978:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b97c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b980:	1b92      	subs	r2, r2, r6
 800b982:	6122      	str	r2, [r4, #16]
 800b984:	f8cd a000 	str.w	sl, [sp]
 800b988:	464b      	mov	r3, r9
 800b98a:	aa03      	add	r2, sp, #12
 800b98c:	4621      	mov	r1, r4
 800b98e:	4640      	mov	r0, r8
 800b990:	f7ff fee6 	bl	800b760 <_printf_common>
 800b994:	3001      	adds	r0, #1
 800b996:	d14a      	bne.n	800ba2e <_printf_i+0x1f2>
 800b998:	f04f 30ff 	mov.w	r0, #4294967295
 800b99c:	b004      	add	sp, #16
 800b99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a2:	6823      	ldr	r3, [r4, #0]
 800b9a4:	f043 0320 	orr.w	r3, r3, #32
 800b9a8:	6023      	str	r3, [r4, #0]
 800b9aa:	4833      	ldr	r0, [pc, #204]	@ (800ba78 <_printf_i+0x23c>)
 800b9ac:	2778      	movs	r7, #120	@ 0x78
 800b9ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b9b2:	6823      	ldr	r3, [r4, #0]
 800b9b4:	6831      	ldr	r1, [r6, #0]
 800b9b6:	061f      	lsls	r7, r3, #24
 800b9b8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b9bc:	d402      	bmi.n	800b9c4 <_printf_i+0x188>
 800b9be:	065f      	lsls	r7, r3, #25
 800b9c0:	bf48      	it	mi
 800b9c2:	b2ad      	uxthmi	r5, r5
 800b9c4:	6031      	str	r1, [r6, #0]
 800b9c6:	07d9      	lsls	r1, r3, #31
 800b9c8:	bf44      	itt	mi
 800b9ca:	f043 0320 	orrmi.w	r3, r3, #32
 800b9ce:	6023      	strmi	r3, [r4, #0]
 800b9d0:	b11d      	cbz	r5, 800b9da <_printf_i+0x19e>
 800b9d2:	2310      	movs	r3, #16
 800b9d4:	e7ac      	b.n	800b930 <_printf_i+0xf4>
 800b9d6:	4827      	ldr	r0, [pc, #156]	@ (800ba74 <_printf_i+0x238>)
 800b9d8:	e7e9      	b.n	800b9ae <_printf_i+0x172>
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	f023 0320 	bic.w	r3, r3, #32
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	e7f6      	b.n	800b9d2 <_printf_i+0x196>
 800b9e4:	4616      	mov	r6, r2
 800b9e6:	e7bd      	b.n	800b964 <_printf_i+0x128>
 800b9e8:	6833      	ldr	r3, [r6, #0]
 800b9ea:	6825      	ldr	r5, [r4, #0]
 800b9ec:	6961      	ldr	r1, [r4, #20]
 800b9ee:	1d18      	adds	r0, r3, #4
 800b9f0:	6030      	str	r0, [r6, #0]
 800b9f2:	062e      	lsls	r6, r5, #24
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	d501      	bpl.n	800b9fc <_printf_i+0x1c0>
 800b9f8:	6019      	str	r1, [r3, #0]
 800b9fa:	e002      	b.n	800ba02 <_printf_i+0x1c6>
 800b9fc:	0668      	lsls	r0, r5, #25
 800b9fe:	d5fb      	bpl.n	800b9f8 <_printf_i+0x1bc>
 800ba00:	8019      	strh	r1, [r3, #0]
 800ba02:	2300      	movs	r3, #0
 800ba04:	6123      	str	r3, [r4, #16]
 800ba06:	4616      	mov	r6, r2
 800ba08:	e7bc      	b.n	800b984 <_printf_i+0x148>
 800ba0a:	6833      	ldr	r3, [r6, #0]
 800ba0c:	1d1a      	adds	r2, r3, #4
 800ba0e:	6032      	str	r2, [r6, #0]
 800ba10:	681e      	ldr	r6, [r3, #0]
 800ba12:	6862      	ldr	r2, [r4, #4]
 800ba14:	2100      	movs	r1, #0
 800ba16:	4630      	mov	r0, r6
 800ba18:	f7f4 fc02 	bl	8000220 <memchr>
 800ba1c:	b108      	cbz	r0, 800ba22 <_printf_i+0x1e6>
 800ba1e:	1b80      	subs	r0, r0, r6
 800ba20:	6060      	str	r0, [r4, #4]
 800ba22:	6863      	ldr	r3, [r4, #4]
 800ba24:	6123      	str	r3, [r4, #16]
 800ba26:	2300      	movs	r3, #0
 800ba28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba2c:	e7aa      	b.n	800b984 <_printf_i+0x148>
 800ba2e:	6923      	ldr	r3, [r4, #16]
 800ba30:	4632      	mov	r2, r6
 800ba32:	4649      	mov	r1, r9
 800ba34:	4640      	mov	r0, r8
 800ba36:	47d0      	blx	sl
 800ba38:	3001      	adds	r0, #1
 800ba3a:	d0ad      	beq.n	800b998 <_printf_i+0x15c>
 800ba3c:	6823      	ldr	r3, [r4, #0]
 800ba3e:	079b      	lsls	r3, r3, #30
 800ba40:	d413      	bmi.n	800ba6a <_printf_i+0x22e>
 800ba42:	68e0      	ldr	r0, [r4, #12]
 800ba44:	9b03      	ldr	r3, [sp, #12]
 800ba46:	4298      	cmp	r0, r3
 800ba48:	bfb8      	it	lt
 800ba4a:	4618      	movlt	r0, r3
 800ba4c:	e7a6      	b.n	800b99c <_printf_i+0x160>
 800ba4e:	2301      	movs	r3, #1
 800ba50:	4632      	mov	r2, r6
 800ba52:	4649      	mov	r1, r9
 800ba54:	4640      	mov	r0, r8
 800ba56:	47d0      	blx	sl
 800ba58:	3001      	adds	r0, #1
 800ba5a:	d09d      	beq.n	800b998 <_printf_i+0x15c>
 800ba5c:	3501      	adds	r5, #1
 800ba5e:	68e3      	ldr	r3, [r4, #12]
 800ba60:	9903      	ldr	r1, [sp, #12]
 800ba62:	1a5b      	subs	r3, r3, r1
 800ba64:	42ab      	cmp	r3, r5
 800ba66:	dcf2      	bgt.n	800ba4e <_printf_i+0x212>
 800ba68:	e7eb      	b.n	800ba42 <_printf_i+0x206>
 800ba6a:	2500      	movs	r5, #0
 800ba6c:	f104 0619 	add.w	r6, r4, #25
 800ba70:	e7f5      	b.n	800ba5e <_printf_i+0x222>
 800ba72:	bf00      	nop
 800ba74:	0800f88a 	.word	0x0800f88a
 800ba78:	0800f89b 	.word	0x0800f89b

0800ba7c <_scanf_float>:
 800ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba80:	b087      	sub	sp, #28
 800ba82:	4617      	mov	r7, r2
 800ba84:	9303      	str	r3, [sp, #12]
 800ba86:	688b      	ldr	r3, [r1, #8]
 800ba88:	1e5a      	subs	r2, r3, #1
 800ba8a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ba8e:	bf81      	itttt	hi
 800ba90:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ba94:	eb03 0b05 	addhi.w	fp, r3, r5
 800ba98:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ba9c:	608b      	strhi	r3, [r1, #8]
 800ba9e:	680b      	ldr	r3, [r1, #0]
 800baa0:	460a      	mov	r2, r1
 800baa2:	f04f 0500 	mov.w	r5, #0
 800baa6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800baaa:	f842 3b1c 	str.w	r3, [r2], #28
 800baae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bab2:	4680      	mov	r8, r0
 800bab4:	460c      	mov	r4, r1
 800bab6:	bf98      	it	ls
 800bab8:	f04f 0b00 	movls.w	fp, #0
 800babc:	9201      	str	r2, [sp, #4]
 800babe:	4616      	mov	r6, r2
 800bac0:	46aa      	mov	sl, r5
 800bac2:	46a9      	mov	r9, r5
 800bac4:	9502      	str	r5, [sp, #8]
 800bac6:	68a2      	ldr	r2, [r4, #8]
 800bac8:	b152      	cbz	r2, 800bae0 <_scanf_float+0x64>
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	2b4e      	cmp	r3, #78	@ 0x4e
 800bad0:	d864      	bhi.n	800bb9c <_scanf_float+0x120>
 800bad2:	2b40      	cmp	r3, #64	@ 0x40
 800bad4:	d83c      	bhi.n	800bb50 <_scanf_float+0xd4>
 800bad6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800bada:	b2c8      	uxtb	r0, r1
 800badc:	280e      	cmp	r0, #14
 800bade:	d93a      	bls.n	800bb56 <_scanf_float+0xda>
 800bae0:	f1b9 0f00 	cmp.w	r9, #0
 800bae4:	d003      	beq.n	800baee <_scanf_float+0x72>
 800bae6:	6823      	ldr	r3, [r4, #0]
 800bae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800baf2:	f1ba 0f01 	cmp.w	sl, #1
 800baf6:	f200 8117 	bhi.w	800bd28 <_scanf_float+0x2ac>
 800bafa:	9b01      	ldr	r3, [sp, #4]
 800bafc:	429e      	cmp	r6, r3
 800bafe:	f200 8108 	bhi.w	800bd12 <_scanf_float+0x296>
 800bb02:	2001      	movs	r0, #1
 800bb04:	b007      	add	sp, #28
 800bb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb0a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800bb0e:	2a0d      	cmp	r2, #13
 800bb10:	d8e6      	bhi.n	800bae0 <_scanf_float+0x64>
 800bb12:	a101      	add	r1, pc, #4	@ (adr r1, 800bb18 <_scanf_float+0x9c>)
 800bb14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bb18:	0800bc5f 	.word	0x0800bc5f
 800bb1c:	0800bae1 	.word	0x0800bae1
 800bb20:	0800bae1 	.word	0x0800bae1
 800bb24:	0800bae1 	.word	0x0800bae1
 800bb28:	0800bcbf 	.word	0x0800bcbf
 800bb2c:	0800bc97 	.word	0x0800bc97
 800bb30:	0800bae1 	.word	0x0800bae1
 800bb34:	0800bae1 	.word	0x0800bae1
 800bb38:	0800bc6d 	.word	0x0800bc6d
 800bb3c:	0800bae1 	.word	0x0800bae1
 800bb40:	0800bae1 	.word	0x0800bae1
 800bb44:	0800bae1 	.word	0x0800bae1
 800bb48:	0800bae1 	.word	0x0800bae1
 800bb4c:	0800bc25 	.word	0x0800bc25
 800bb50:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800bb54:	e7db      	b.n	800bb0e <_scanf_float+0x92>
 800bb56:	290e      	cmp	r1, #14
 800bb58:	d8c2      	bhi.n	800bae0 <_scanf_float+0x64>
 800bb5a:	a001      	add	r0, pc, #4	@ (adr r0, 800bb60 <_scanf_float+0xe4>)
 800bb5c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bb60:	0800bc15 	.word	0x0800bc15
 800bb64:	0800bae1 	.word	0x0800bae1
 800bb68:	0800bc15 	.word	0x0800bc15
 800bb6c:	0800bcab 	.word	0x0800bcab
 800bb70:	0800bae1 	.word	0x0800bae1
 800bb74:	0800bbbd 	.word	0x0800bbbd
 800bb78:	0800bbfb 	.word	0x0800bbfb
 800bb7c:	0800bbfb 	.word	0x0800bbfb
 800bb80:	0800bbfb 	.word	0x0800bbfb
 800bb84:	0800bbfb 	.word	0x0800bbfb
 800bb88:	0800bbfb 	.word	0x0800bbfb
 800bb8c:	0800bbfb 	.word	0x0800bbfb
 800bb90:	0800bbfb 	.word	0x0800bbfb
 800bb94:	0800bbfb 	.word	0x0800bbfb
 800bb98:	0800bbfb 	.word	0x0800bbfb
 800bb9c:	2b6e      	cmp	r3, #110	@ 0x6e
 800bb9e:	d809      	bhi.n	800bbb4 <_scanf_float+0x138>
 800bba0:	2b60      	cmp	r3, #96	@ 0x60
 800bba2:	d8b2      	bhi.n	800bb0a <_scanf_float+0x8e>
 800bba4:	2b54      	cmp	r3, #84	@ 0x54
 800bba6:	d07b      	beq.n	800bca0 <_scanf_float+0x224>
 800bba8:	2b59      	cmp	r3, #89	@ 0x59
 800bbaa:	d199      	bne.n	800bae0 <_scanf_float+0x64>
 800bbac:	2d07      	cmp	r5, #7
 800bbae:	d197      	bne.n	800bae0 <_scanf_float+0x64>
 800bbb0:	2508      	movs	r5, #8
 800bbb2:	e02c      	b.n	800bc0e <_scanf_float+0x192>
 800bbb4:	2b74      	cmp	r3, #116	@ 0x74
 800bbb6:	d073      	beq.n	800bca0 <_scanf_float+0x224>
 800bbb8:	2b79      	cmp	r3, #121	@ 0x79
 800bbba:	e7f6      	b.n	800bbaa <_scanf_float+0x12e>
 800bbbc:	6821      	ldr	r1, [r4, #0]
 800bbbe:	05c8      	lsls	r0, r1, #23
 800bbc0:	d51b      	bpl.n	800bbfa <_scanf_float+0x17e>
 800bbc2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bbc6:	6021      	str	r1, [r4, #0]
 800bbc8:	f109 0901 	add.w	r9, r9, #1
 800bbcc:	f1bb 0f00 	cmp.w	fp, #0
 800bbd0:	d003      	beq.n	800bbda <_scanf_float+0x15e>
 800bbd2:	3201      	adds	r2, #1
 800bbd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bbd8:	60a2      	str	r2, [r4, #8]
 800bbda:	68a3      	ldr	r3, [r4, #8]
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	60a3      	str	r3, [r4, #8]
 800bbe0:	6923      	ldr	r3, [r4, #16]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	6123      	str	r3, [r4, #16]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	607b      	str	r3, [r7, #4]
 800bbee:	f340 8087 	ble.w	800bd00 <_scanf_float+0x284>
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	603b      	str	r3, [r7, #0]
 800bbf8:	e765      	b.n	800bac6 <_scanf_float+0x4a>
 800bbfa:	eb1a 0105 	adds.w	r1, sl, r5
 800bbfe:	f47f af6f 	bne.w	800bae0 <_scanf_float+0x64>
 800bc02:	6822      	ldr	r2, [r4, #0]
 800bc04:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bc08:	6022      	str	r2, [r4, #0]
 800bc0a:	460d      	mov	r5, r1
 800bc0c:	468a      	mov	sl, r1
 800bc0e:	f806 3b01 	strb.w	r3, [r6], #1
 800bc12:	e7e2      	b.n	800bbda <_scanf_float+0x15e>
 800bc14:	6822      	ldr	r2, [r4, #0]
 800bc16:	0610      	lsls	r0, r2, #24
 800bc18:	f57f af62 	bpl.w	800bae0 <_scanf_float+0x64>
 800bc1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bc20:	6022      	str	r2, [r4, #0]
 800bc22:	e7f4      	b.n	800bc0e <_scanf_float+0x192>
 800bc24:	f1ba 0f00 	cmp.w	sl, #0
 800bc28:	d10e      	bne.n	800bc48 <_scanf_float+0x1cc>
 800bc2a:	f1b9 0f00 	cmp.w	r9, #0
 800bc2e:	d10e      	bne.n	800bc4e <_scanf_float+0x1d2>
 800bc30:	6822      	ldr	r2, [r4, #0]
 800bc32:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bc36:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bc3a:	d108      	bne.n	800bc4e <_scanf_float+0x1d2>
 800bc3c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bc40:	6022      	str	r2, [r4, #0]
 800bc42:	f04f 0a01 	mov.w	sl, #1
 800bc46:	e7e2      	b.n	800bc0e <_scanf_float+0x192>
 800bc48:	f1ba 0f02 	cmp.w	sl, #2
 800bc4c:	d055      	beq.n	800bcfa <_scanf_float+0x27e>
 800bc4e:	2d01      	cmp	r5, #1
 800bc50:	d002      	beq.n	800bc58 <_scanf_float+0x1dc>
 800bc52:	2d04      	cmp	r5, #4
 800bc54:	f47f af44 	bne.w	800bae0 <_scanf_float+0x64>
 800bc58:	3501      	adds	r5, #1
 800bc5a:	b2ed      	uxtb	r5, r5
 800bc5c:	e7d7      	b.n	800bc0e <_scanf_float+0x192>
 800bc5e:	f1ba 0f01 	cmp.w	sl, #1
 800bc62:	f47f af3d 	bne.w	800bae0 <_scanf_float+0x64>
 800bc66:	f04f 0a02 	mov.w	sl, #2
 800bc6a:	e7d0      	b.n	800bc0e <_scanf_float+0x192>
 800bc6c:	b97d      	cbnz	r5, 800bc8e <_scanf_float+0x212>
 800bc6e:	f1b9 0f00 	cmp.w	r9, #0
 800bc72:	f47f af38 	bne.w	800bae6 <_scanf_float+0x6a>
 800bc76:	6822      	ldr	r2, [r4, #0]
 800bc78:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bc7c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bc80:	f040 8108 	bne.w	800be94 <_scanf_float+0x418>
 800bc84:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bc88:	6022      	str	r2, [r4, #0]
 800bc8a:	2501      	movs	r5, #1
 800bc8c:	e7bf      	b.n	800bc0e <_scanf_float+0x192>
 800bc8e:	2d03      	cmp	r5, #3
 800bc90:	d0e2      	beq.n	800bc58 <_scanf_float+0x1dc>
 800bc92:	2d05      	cmp	r5, #5
 800bc94:	e7de      	b.n	800bc54 <_scanf_float+0x1d8>
 800bc96:	2d02      	cmp	r5, #2
 800bc98:	f47f af22 	bne.w	800bae0 <_scanf_float+0x64>
 800bc9c:	2503      	movs	r5, #3
 800bc9e:	e7b6      	b.n	800bc0e <_scanf_float+0x192>
 800bca0:	2d06      	cmp	r5, #6
 800bca2:	f47f af1d 	bne.w	800bae0 <_scanf_float+0x64>
 800bca6:	2507      	movs	r5, #7
 800bca8:	e7b1      	b.n	800bc0e <_scanf_float+0x192>
 800bcaa:	6822      	ldr	r2, [r4, #0]
 800bcac:	0591      	lsls	r1, r2, #22
 800bcae:	f57f af17 	bpl.w	800bae0 <_scanf_float+0x64>
 800bcb2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bcb6:	6022      	str	r2, [r4, #0]
 800bcb8:	f8cd 9008 	str.w	r9, [sp, #8]
 800bcbc:	e7a7      	b.n	800bc0e <_scanf_float+0x192>
 800bcbe:	6822      	ldr	r2, [r4, #0]
 800bcc0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bcc4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bcc8:	d006      	beq.n	800bcd8 <_scanf_float+0x25c>
 800bcca:	0550      	lsls	r0, r2, #21
 800bccc:	f57f af08 	bpl.w	800bae0 <_scanf_float+0x64>
 800bcd0:	f1b9 0f00 	cmp.w	r9, #0
 800bcd4:	f000 80de 	beq.w	800be94 <_scanf_float+0x418>
 800bcd8:	0591      	lsls	r1, r2, #22
 800bcda:	bf58      	it	pl
 800bcdc:	9902      	ldrpl	r1, [sp, #8]
 800bcde:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bce2:	bf58      	it	pl
 800bce4:	eba9 0101 	subpl.w	r1, r9, r1
 800bce8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bcec:	bf58      	it	pl
 800bcee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bcf2:	6022      	str	r2, [r4, #0]
 800bcf4:	f04f 0900 	mov.w	r9, #0
 800bcf8:	e789      	b.n	800bc0e <_scanf_float+0x192>
 800bcfa:	f04f 0a03 	mov.w	sl, #3
 800bcfe:	e786      	b.n	800bc0e <_scanf_float+0x192>
 800bd00:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bd04:	4639      	mov	r1, r7
 800bd06:	4640      	mov	r0, r8
 800bd08:	4798      	blx	r3
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	f43f aedb 	beq.w	800bac6 <_scanf_float+0x4a>
 800bd10:	e6e6      	b.n	800bae0 <_scanf_float+0x64>
 800bd12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd1a:	463a      	mov	r2, r7
 800bd1c:	4640      	mov	r0, r8
 800bd1e:	4798      	blx	r3
 800bd20:	6923      	ldr	r3, [r4, #16]
 800bd22:	3b01      	subs	r3, #1
 800bd24:	6123      	str	r3, [r4, #16]
 800bd26:	e6e8      	b.n	800bafa <_scanf_float+0x7e>
 800bd28:	1e6b      	subs	r3, r5, #1
 800bd2a:	2b06      	cmp	r3, #6
 800bd2c:	d824      	bhi.n	800bd78 <_scanf_float+0x2fc>
 800bd2e:	2d02      	cmp	r5, #2
 800bd30:	d836      	bhi.n	800bda0 <_scanf_float+0x324>
 800bd32:	9b01      	ldr	r3, [sp, #4]
 800bd34:	429e      	cmp	r6, r3
 800bd36:	f67f aee4 	bls.w	800bb02 <_scanf_float+0x86>
 800bd3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd42:	463a      	mov	r2, r7
 800bd44:	4640      	mov	r0, r8
 800bd46:	4798      	blx	r3
 800bd48:	6923      	ldr	r3, [r4, #16]
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	6123      	str	r3, [r4, #16]
 800bd4e:	e7f0      	b.n	800bd32 <_scanf_float+0x2b6>
 800bd50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd54:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bd58:	463a      	mov	r2, r7
 800bd5a:	4640      	mov	r0, r8
 800bd5c:	4798      	blx	r3
 800bd5e:	6923      	ldr	r3, [r4, #16]
 800bd60:	3b01      	subs	r3, #1
 800bd62:	6123      	str	r3, [r4, #16]
 800bd64:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd68:	fa5f fa8a 	uxtb.w	sl, sl
 800bd6c:	f1ba 0f02 	cmp.w	sl, #2
 800bd70:	d1ee      	bne.n	800bd50 <_scanf_float+0x2d4>
 800bd72:	3d03      	subs	r5, #3
 800bd74:	b2ed      	uxtb	r5, r5
 800bd76:	1b76      	subs	r6, r6, r5
 800bd78:	6823      	ldr	r3, [r4, #0]
 800bd7a:	05da      	lsls	r2, r3, #23
 800bd7c:	d530      	bpl.n	800bde0 <_scanf_float+0x364>
 800bd7e:	055b      	lsls	r3, r3, #21
 800bd80:	d511      	bpl.n	800bda6 <_scanf_float+0x32a>
 800bd82:	9b01      	ldr	r3, [sp, #4]
 800bd84:	429e      	cmp	r6, r3
 800bd86:	f67f aebc 	bls.w	800bb02 <_scanf_float+0x86>
 800bd8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd92:	463a      	mov	r2, r7
 800bd94:	4640      	mov	r0, r8
 800bd96:	4798      	blx	r3
 800bd98:	6923      	ldr	r3, [r4, #16]
 800bd9a:	3b01      	subs	r3, #1
 800bd9c:	6123      	str	r3, [r4, #16]
 800bd9e:	e7f0      	b.n	800bd82 <_scanf_float+0x306>
 800bda0:	46aa      	mov	sl, r5
 800bda2:	46b3      	mov	fp, r6
 800bda4:	e7de      	b.n	800bd64 <_scanf_float+0x2e8>
 800bda6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bdaa:	6923      	ldr	r3, [r4, #16]
 800bdac:	2965      	cmp	r1, #101	@ 0x65
 800bdae:	f103 33ff 	add.w	r3, r3, #4294967295
 800bdb2:	f106 35ff 	add.w	r5, r6, #4294967295
 800bdb6:	6123      	str	r3, [r4, #16]
 800bdb8:	d00c      	beq.n	800bdd4 <_scanf_float+0x358>
 800bdba:	2945      	cmp	r1, #69	@ 0x45
 800bdbc:	d00a      	beq.n	800bdd4 <_scanf_float+0x358>
 800bdbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bdc2:	463a      	mov	r2, r7
 800bdc4:	4640      	mov	r0, r8
 800bdc6:	4798      	blx	r3
 800bdc8:	6923      	ldr	r3, [r4, #16]
 800bdca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	1eb5      	subs	r5, r6, #2
 800bdd2:	6123      	str	r3, [r4, #16]
 800bdd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bdd8:	463a      	mov	r2, r7
 800bdda:	4640      	mov	r0, r8
 800bddc:	4798      	blx	r3
 800bdde:	462e      	mov	r6, r5
 800bde0:	6822      	ldr	r2, [r4, #0]
 800bde2:	f012 0210 	ands.w	r2, r2, #16
 800bde6:	d001      	beq.n	800bdec <_scanf_float+0x370>
 800bde8:	2000      	movs	r0, #0
 800bdea:	e68b      	b.n	800bb04 <_scanf_float+0x88>
 800bdec:	7032      	strb	r2, [r6, #0]
 800bdee:	6823      	ldr	r3, [r4, #0]
 800bdf0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bdf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bdf8:	d11c      	bne.n	800be34 <_scanf_float+0x3b8>
 800bdfa:	9b02      	ldr	r3, [sp, #8]
 800bdfc:	454b      	cmp	r3, r9
 800bdfe:	eba3 0209 	sub.w	r2, r3, r9
 800be02:	d123      	bne.n	800be4c <_scanf_float+0x3d0>
 800be04:	9901      	ldr	r1, [sp, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	4640      	mov	r0, r8
 800be0a:	f002 fc39 	bl	800e680 <_strtod_r>
 800be0e:	9b03      	ldr	r3, [sp, #12]
 800be10:	6821      	ldr	r1, [r4, #0]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f011 0f02 	tst.w	r1, #2
 800be18:	ec57 6b10 	vmov	r6, r7, d0
 800be1c:	f103 0204 	add.w	r2, r3, #4
 800be20:	d01f      	beq.n	800be62 <_scanf_float+0x3e6>
 800be22:	9903      	ldr	r1, [sp, #12]
 800be24:	600a      	str	r2, [r1, #0]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	e9c3 6700 	strd	r6, r7, [r3]
 800be2c:	68e3      	ldr	r3, [r4, #12]
 800be2e:	3301      	adds	r3, #1
 800be30:	60e3      	str	r3, [r4, #12]
 800be32:	e7d9      	b.n	800bde8 <_scanf_float+0x36c>
 800be34:	9b04      	ldr	r3, [sp, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d0e4      	beq.n	800be04 <_scanf_float+0x388>
 800be3a:	9905      	ldr	r1, [sp, #20]
 800be3c:	230a      	movs	r3, #10
 800be3e:	3101      	adds	r1, #1
 800be40:	4640      	mov	r0, r8
 800be42:	f002 fc9d 	bl	800e780 <_strtol_r>
 800be46:	9b04      	ldr	r3, [sp, #16]
 800be48:	9e05      	ldr	r6, [sp, #20]
 800be4a:	1ac2      	subs	r2, r0, r3
 800be4c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800be50:	429e      	cmp	r6, r3
 800be52:	bf28      	it	cs
 800be54:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800be58:	4910      	ldr	r1, [pc, #64]	@ (800be9c <_scanf_float+0x420>)
 800be5a:	4630      	mov	r0, r6
 800be5c:	f000 f8e4 	bl	800c028 <siprintf>
 800be60:	e7d0      	b.n	800be04 <_scanf_float+0x388>
 800be62:	f011 0f04 	tst.w	r1, #4
 800be66:	9903      	ldr	r1, [sp, #12]
 800be68:	600a      	str	r2, [r1, #0]
 800be6a:	d1dc      	bne.n	800be26 <_scanf_float+0x3aa>
 800be6c:	681d      	ldr	r5, [r3, #0]
 800be6e:	4632      	mov	r2, r6
 800be70:	463b      	mov	r3, r7
 800be72:	4630      	mov	r0, r6
 800be74:	4639      	mov	r1, r7
 800be76:	f7f4 fe81 	bl	8000b7c <__aeabi_dcmpun>
 800be7a:	b128      	cbz	r0, 800be88 <_scanf_float+0x40c>
 800be7c:	4808      	ldr	r0, [pc, #32]	@ (800bea0 <_scanf_float+0x424>)
 800be7e:	f000 faad 	bl	800c3dc <nanf>
 800be82:	ed85 0a00 	vstr	s0, [r5]
 800be86:	e7d1      	b.n	800be2c <_scanf_float+0x3b0>
 800be88:	4630      	mov	r0, r6
 800be8a:	4639      	mov	r1, r7
 800be8c:	f7f4 fed4 	bl	8000c38 <__aeabi_d2f>
 800be90:	6028      	str	r0, [r5, #0]
 800be92:	e7cb      	b.n	800be2c <_scanf_float+0x3b0>
 800be94:	f04f 0900 	mov.w	r9, #0
 800be98:	e629      	b.n	800baee <_scanf_float+0x72>
 800be9a:	bf00      	nop
 800be9c:	0800f8ac 	.word	0x0800f8ac
 800bea0:	0800fc45 	.word	0x0800fc45

0800bea4 <std>:
 800bea4:	2300      	movs	r3, #0
 800bea6:	b510      	push	{r4, lr}
 800bea8:	4604      	mov	r4, r0
 800beaa:	e9c0 3300 	strd	r3, r3, [r0]
 800beae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800beb2:	6083      	str	r3, [r0, #8]
 800beb4:	8181      	strh	r1, [r0, #12]
 800beb6:	6643      	str	r3, [r0, #100]	@ 0x64
 800beb8:	81c2      	strh	r2, [r0, #14]
 800beba:	6183      	str	r3, [r0, #24]
 800bebc:	4619      	mov	r1, r3
 800bebe:	2208      	movs	r2, #8
 800bec0:	305c      	adds	r0, #92	@ 0x5c
 800bec2:	f000 f9a9 	bl	800c218 <memset>
 800bec6:	4b0d      	ldr	r3, [pc, #52]	@ (800befc <std+0x58>)
 800bec8:	6263      	str	r3, [r4, #36]	@ 0x24
 800beca:	4b0d      	ldr	r3, [pc, #52]	@ (800bf00 <std+0x5c>)
 800becc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bece:	4b0d      	ldr	r3, [pc, #52]	@ (800bf04 <std+0x60>)
 800bed0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bed2:	4b0d      	ldr	r3, [pc, #52]	@ (800bf08 <std+0x64>)
 800bed4:	6323      	str	r3, [r4, #48]	@ 0x30
 800bed6:	4b0d      	ldr	r3, [pc, #52]	@ (800bf0c <std+0x68>)
 800bed8:	6224      	str	r4, [r4, #32]
 800beda:	429c      	cmp	r4, r3
 800bedc:	d006      	beq.n	800beec <std+0x48>
 800bede:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bee2:	4294      	cmp	r4, r2
 800bee4:	d002      	beq.n	800beec <std+0x48>
 800bee6:	33d0      	adds	r3, #208	@ 0xd0
 800bee8:	429c      	cmp	r4, r3
 800beea:	d105      	bne.n	800bef8 <std+0x54>
 800beec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bef4:	f000 ba60 	b.w	800c3b8 <__retarget_lock_init_recursive>
 800bef8:	bd10      	pop	{r4, pc}
 800befa:	bf00      	nop
 800befc:	0800c069 	.word	0x0800c069
 800bf00:	0800c08b 	.word	0x0800c08b
 800bf04:	0800c0c3 	.word	0x0800c0c3
 800bf08:	0800c0e7 	.word	0x0800c0e7
 800bf0c:	20000678 	.word	0x20000678

0800bf10 <stdio_exit_handler>:
 800bf10:	4a02      	ldr	r2, [pc, #8]	@ (800bf1c <stdio_exit_handler+0xc>)
 800bf12:	4903      	ldr	r1, [pc, #12]	@ (800bf20 <stdio_exit_handler+0x10>)
 800bf14:	4803      	ldr	r0, [pc, #12]	@ (800bf24 <stdio_exit_handler+0x14>)
 800bf16:	f000 b869 	b.w	800bfec <_fwalk_sglue>
 800bf1a:	bf00      	nop
 800bf1c:	2000000c 	.word	0x2000000c
 800bf20:	0800edc1 	.word	0x0800edc1
 800bf24:	2000001c 	.word	0x2000001c

0800bf28 <cleanup_stdio>:
 800bf28:	6841      	ldr	r1, [r0, #4]
 800bf2a:	4b0c      	ldr	r3, [pc, #48]	@ (800bf5c <cleanup_stdio+0x34>)
 800bf2c:	4299      	cmp	r1, r3
 800bf2e:	b510      	push	{r4, lr}
 800bf30:	4604      	mov	r4, r0
 800bf32:	d001      	beq.n	800bf38 <cleanup_stdio+0x10>
 800bf34:	f002 ff44 	bl	800edc0 <_fflush_r>
 800bf38:	68a1      	ldr	r1, [r4, #8]
 800bf3a:	4b09      	ldr	r3, [pc, #36]	@ (800bf60 <cleanup_stdio+0x38>)
 800bf3c:	4299      	cmp	r1, r3
 800bf3e:	d002      	beq.n	800bf46 <cleanup_stdio+0x1e>
 800bf40:	4620      	mov	r0, r4
 800bf42:	f002 ff3d 	bl	800edc0 <_fflush_r>
 800bf46:	68e1      	ldr	r1, [r4, #12]
 800bf48:	4b06      	ldr	r3, [pc, #24]	@ (800bf64 <cleanup_stdio+0x3c>)
 800bf4a:	4299      	cmp	r1, r3
 800bf4c:	d004      	beq.n	800bf58 <cleanup_stdio+0x30>
 800bf4e:	4620      	mov	r0, r4
 800bf50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf54:	f002 bf34 	b.w	800edc0 <_fflush_r>
 800bf58:	bd10      	pop	{r4, pc}
 800bf5a:	bf00      	nop
 800bf5c:	20000678 	.word	0x20000678
 800bf60:	200006e0 	.word	0x200006e0
 800bf64:	20000748 	.word	0x20000748

0800bf68 <global_stdio_init.part.0>:
 800bf68:	b510      	push	{r4, lr}
 800bf6a:	4b0b      	ldr	r3, [pc, #44]	@ (800bf98 <global_stdio_init.part.0+0x30>)
 800bf6c:	4c0b      	ldr	r4, [pc, #44]	@ (800bf9c <global_stdio_init.part.0+0x34>)
 800bf6e:	4a0c      	ldr	r2, [pc, #48]	@ (800bfa0 <global_stdio_init.part.0+0x38>)
 800bf70:	601a      	str	r2, [r3, #0]
 800bf72:	4620      	mov	r0, r4
 800bf74:	2200      	movs	r2, #0
 800bf76:	2104      	movs	r1, #4
 800bf78:	f7ff ff94 	bl	800bea4 <std>
 800bf7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bf80:	2201      	movs	r2, #1
 800bf82:	2109      	movs	r1, #9
 800bf84:	f7ff ff8e 	bl	800bea4 <std>
 800bf88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf92:	2112      	movs	r1, #18
 800bf94:	f7ff bf86 	b.w	800bea4 <std>
 800bf98:	200007b0 	.word	0x200007b0
 800bf9c:	20000678 	.word	0x20000678
 800bfa0:	0800bf11 	.word	0x0800bf11

0800bfa4 <__sfp_lock_acquire>:
 800bfa4:	4801      	ldr	r0, [pc, #4]	@ (800bfac <__sfp_lock_acquire+0x8>)
 800bfa6:	f000 ba08 	b.w	800c3ba <__retarget_lock_acquire_recursive>
 800bfaa:	bf00      	nop
 800bfac:	200007b9 	.word	0x200007b9

0800bfb0 <__sfp_lock_release>:
 800bfb0:	4801      	ldr	r0, [pc, #4]	@ (800bfb8 <__sfp_lock_release+0x8>)
 800bfb2:	f000 ba03 	b.w	800c3bc <__retarget_lock_release_recursive>
 800bfb6:	bf00      	nop
 800bfb8:	200007b9 	.word	0x200007b9

0800bfbc <__sinit>:
 800bfbc:	b510      	push	{r4, lr}
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	f7ff fff0 	bl	800bfa4 <__sfp_lock_acquire>
 800bfc4:	6a23      	ldr	r3, [r4, #32]
 800bfc6:	b11b      	cbz	r3, 800bfd0 <__sinit+0x14>
 800bfc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfcc:	f7ff bff0 	b.w	800bfb0 <__sfp_lock_release>
 800bfd0:	4b04      	ldr	r3, [pc, #16]	@ (800bfe4 <__sinit+0x28>)
 800bfd2:	6223      	str	r3, [r4, #32]
 800bfd4:	4b04      	ldr	r3, [pc, #16]	@ (800bfe8 <__sinit+0x2c>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d1f5      	bne.n	800bfc8 <__sinit+0xc>
 800bfdc:	f7ff ffc4 	bl	800bf68 <global_stdio_init.part.0>
 800bfe0:	e7f2      	b.n	800bfc8 <__sinit+0xc>
 800bfe2:	bf00      	nop
 800bfe4:	0800bf29 	.word	0x0800bf29
 800bfe8:	200007b0 	.word	0x200007b0

0800bfec <_fwalk_sglue>:
 800bfec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bff0:	4607      	mov	r7, r0
 800bff2:	4688      	mov	r8, r1
 800bff4:	4614      	mov	r4, r2
 800bff6:	2600      	movs	r6, #0
 800bff8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bffc:	f1b9 0901 	subs.w	r9, r9, #1
 800c000:	d505      	bpl.n	800c00e <_fwalk_sglue+0x22>
 800c002:	6824      	ldr	r4, [r4, #0]
 800c004:	2c00      	cmp	r4, #0
 800c006:	d1f7      	bne.n	800bff8 <_fwalk_sglue+0xc>
 800c008:	4630      	mov	r0, r6
 800c00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c00e:	89ab      	ldrh	r3, [r5, #12]
 800c010:	2b01      	cmp	r3, #1
 800c012:	d907      	bls.n	800c024 <_fwalk_sglue+0x38>
 800c014:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c018:	3301      	adds	r3, #1
 800c01a:	d003      	beq.n	800c024 <_fwalk_sglue+0x38>
 800c01c:	4629      	mov	r1, r5
 800c01e:	4638      	mov	r0, r7
 800c020:	47c0      	blx	r8
 800c022:	4306      	orrs	r6, r0
 800c024:	3568      	adds	r5, #104	@ 0x68
 800c026:	e7e9      	b.n	800bffc <_fwalk_sglue+0x10>

0800c028 <siprintf>:
 800c028:	b40e      	push	{r1, r2, r3}
 800c02a:	b500      	push	{lr}
 800c02c:	b09c      	sub	sp, #112	@ 0x70
 800c02e:	ab1d      	add	r3, sp, #116	@ 0x74
 800c030:	9002      	str	r0, [sp, #8]
 800c032:	9006      	str	r0, [sp, #24]
 800c034:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c038:	4809      	ldr	r0, [pc, #36]	@ (800c060 <siprintf+0x38>)
 800c03a:	9107      	str	r1, [sp, #28]
 800c03c:	9104      	str	r1, [sp, #16]
 800c03e:	4909      	ldr	r1, [pc, #36]	@ (800c064 <siprintf+0x3c>)
 800c040:	f853 2b04 	ldr.w	r2, [r3], #4
 800c044:	9105      	str	r1, [sp, #20]
 800c046:	6800      	ldr	r0, [r0, #0]
 800c048:	9301      	str	r3, [sp, #4]
 800c04a:	a902      	add	r1, sp, #8
 800c04c:	f002 fbf6 	bl	800e83c <_svfiprintf_r>
 800c050:	9b02      	ldr	r3, [sp, #8]
 800c052:	2200      	movs	r2, #0
 800c054:	701a      	strb	r2, [r3, #0]
 800c056:	b01c      	add	sp, #112	@ 0x70
 800c058:	f85d eb04 	ldr.w	lr, [sp], #4
 800c05c:	b003      	add	sp, #12
 800c05e:	4770      	bx	lr
 800c060:	20000018 	.word	0x20000018
 800c064:	ffff0208 	.word	0xffff0208

0800c068 <__sread>:
 800c068:	b510      	push	{r4, lr}
 800c06a:	460c      	mov	r4, r1
 800c06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c070:	f000 f930 	bl	800c2d4 <_read_r>
 800c074:	2800      	cmp	r0, #0
 800c076:	bfab      	itete	ge
 800c078:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c07a:	89a3      	ldrhlt	r3, [r4, #12]
 800c07c:	181b      	addge	r3, r3, r0
 800c07e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c082:	bfac      	ite	ge
 800c084:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c086:	81a3      	strhlt	r3, [r4, #12]
 800c088:	bd10      	pop	{r4, pc}

0800c08a <__swrite>:
 800c08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c08e:	461f      	mov	r7, r3
 800c090:	898b      	ldrh	r3, [r1, #12]
 800c092:	05db      	lsls	r3, r3, #23
 800c094:	4605      	mov	r5, r0
 800c096:	460c      	mov	r4, r1
 800c098:	4616      	mov	r6, r2
 800c09a:	d505      	bpl.n	800c0a8 <__swrite+0x1e>
 800c09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0a0:	2302      	movs	r3, #2
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f000 f904 	bl	800c2b0 <_lseek_r>
 800c0a8:	89a3      	ldrh	r3, [r4, #12]
 800c0aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c0b2:	81a3      	strh	r3, [r4, #12]
 800c0b4:	4632      	mov	r2, r6
 800c0b6:	463b      	mov	r3, r7
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0be:	f000 b93f 	b.w	800c340 <_write_r>

0800c0c2 <__sseek>:
 800c0c2:	b510      	push	{r4, lr}
 800c0c4:	460c      	mov	r4, r1
 800c0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ca:	f000 f8f1 	bl	800c2b0 <_lseek_r>
 800c0ce:	1c43      	adds	r3, r0, #1
 800c0d0:	89a3      	ldrh	r3, [r4, #12]
 800c0d2:	bf15      	itete	ne
 800c0d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c0d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c0da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c0de:	81a3      	strheq	r3, [r4, #12]
 800c0e0:	bf18      	it	ne
 800c0e2:	81a3      	strhne	r3, [r4, #12]
 800c0e4:	bd10      	pop	{r4, pc}

0800c0e6 <__sclose>:
 800c0e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ea:	f000 b8d1 	b.w	800c290 <_close_r>

0800c0ee <__swbuf_r>:
 800c0ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f0:	460e      	mov	r6, r1
 800c0f2:	4614      	mov	r4, r2
 800c0f4:	4605      	mov	r5, r0
 800c0f6:	b118      	cbz	r0, 800c100 <__swbuf_r+0x12>
 800c0f8:	6a03      	ldr	r3, [r0, #32]
 800c0fa:	b90b      	cbnz	r3, 800c100 <__swbuf_r+0x12>
 800c0fc:	f7ff ff5e 	bl	800bfbc <__sinit>
 800c100:	69a3      	ldr	r3, [r4, #24]
 800c102:	60a3      	str	r3, [r4, #8]
 800c104:	89a3      	ldrh	r3, [r4, #12]
 800c106:	071a      	lsls	r2, r3, #28
 800c108:	d501      	bpl.n	800c10e <__swbuf_r+0x20>
 800c10a:	6923      	ldr	r3, [r4, #16]
 800c10c:	b943      	cbnz	r3, 800c120 <__swbuf_r+0x32>
 800c10e:	4621      	mov	r1, r4
 800c110:	4628      	mov	r0, r5
 800c112:	f000 f82b 	bl	800c16c <__swsetup_r>
 800c116:	b118      	cbz	r0, 800c120 <__swbuf_r+0x32>
 800c118:	f04f 37ff 	mov.w	r7, #4294967295
 800c11c:	4638      	mov	r0, r7
 800c11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c120:	6823      	ldr	r3, [r4, #0]
 800c122:	6922      	ldr	r2, [r4, #16]
 800c124:	1a98      	subs	r0, r3, r2
 800c126:	6963      	ldr	r3, [r4, #20]
 800c128:	b2f6      	uxtb	r6, r6
 800c12a:	4283      	cmp	r3, r0
 800c12c:	4637      	mov	r7, r6
 800c12e:	dc05      	bgt.n	800c13c <__swbuf_r+0x4e>
 800c130:	4621      	mov	r1, r4
 800c132:	4628      	mov	r0, r5
 800c134:	f002 fe44 	bl	800edc0 <_fflush_r>
 800c138:	2800      	cmp	r0, #0
 800c13a:	d1ed      	bne.n	800c118 <__swbuf_r+0x2a>
 800c13c:	68a3      	ldr	r3, [r4, #8]
 800c13e:	3b01      	subs	r3, #1
 800c140:	60a3      	str	r3, [r4, #8]
 800c142:	6823      	ldr	r3, [r4, #0]
 800c144:	1c5a      	adds	r2, r3, #1
 800c146:	6022      	str	r2, [r4, #0]
 800c148:	701e      	strb	r6, [r3, #0]
 800c14a:	6962      	ldr	r2, [r4, #20]
 800c14c:	1c43      	adds	r3, r0, #1
 800c14e:	429a      	cmp	r2, r3
 800c150:	d004      	beq.n	800c15c <__swbuf_r+0x6e>
 800c152:	89a3      	ldrh	r3, [r4, #12]
 800c154:	07db      	lsls	r3, r3, #31
 800c156:	d5e1      	bpl.n	800c11c <__swbuf_r+0x2e>
 800c158:	2e0a      	cmp	r6, #10
 800c15a:	d1df      	bne.n	800c11c <__swbuf_r+0x2e>
 800c15c:	4621      	mov	r1, r4
 800c15e:	4628      	mov	r0, r5
 800c160:	f002 fe2e 	bl	800edc0 <_fflush_r>
 800c164:	2800      	cmp	r0, #0
 800c166:	d0d9      	beq.n	800c11c <__swbuf_r+0x2e>
 800c168:	e7d6      	b.n	800c118 <__swbuf_r+0x2a>
	...

0800c16c <__swsetup_r>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	4b29      	ldr	r3, [pc, #164]	@ (800c214 <__swsetup_r+0xa8>)
 800c170:	4605      	mov	r5, r0
 800c172:	6818      	ldr	r0, [r3, #0]
 800c174:	460c      	mov	r4, r1
 800c176:	b118      	cbz	r0, 800c180 <__swsetup_r+0x14>
 800c178:	6a03      	ldr	r3, [r0, #32]
 800c17a:	b90b      	cbnz	r3, 800c180 <__swsetup_r+0x14>
 800c17c:	f7ff ff1e 	bl	800bfbc <__sinit>
 800c180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c184:	0719      	lsls	r1, r3, #28
 800c186:	d422      	bmi.n	800c1ce <__swsetup_r+0x62>
 800c188:	06da      	lsls	r2, r3, #27
 800c18a:	d407      	bmi.n	800c19c <__swsetup_r+0x30>
 800c18c:	2209      	movs	r2, #9
 800c18e:	602a      	str	r2, [r5, #0]
 800c190:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c194:	81a3      	strh	r3, [r4, #12]
 800c196:	f04f 30ff 	mov.w	r0, #4294967295
 800c19a:	e033      	b.n	800c204 <__swsetup_r+0x98>
 800c19c:	0758      	lsls	r0, r3, #29
 800c19e:	d512      	bpl.n	800c1c6 <__swsetup_r+0x5a>
 800c1a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1a2:	b141      	cbz	r1, 800c1b6 <__swsetup_r+0x4a>
 800c1a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1a8:	4299      	cmp	r1, r3
 800c1aa:	d002      	beq.n	800c1b2 <__swsetup_r+0x46>
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	f000 ff67 	bl	800d080 <_free_r>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1b6:	89a3      	ldrh	r3, [r4, #12]
 800c1b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c1bc:	81a3      	strh	r3, [r4, #12]
 800c1be:	2300      	movs	r3, #0
 800c1c0:	6063      	str	r3, [r4, #4]
 800c1c2:	6923      	ldr	r3, [r4, #16]
 800c1c4:	6023      	str	r3, [r4, #0]
 800c1c6:	89a3      	ldrh	r3, [r4, #12]
 800c1c8:	f043 0308 	orr.w	r3, r3, #8
 800c1cc:	81a3      	strh	r3, [r4, #12]
 800c1ce:	6923      	ldr	r3, [r4, #16]
 800c1d0:	b94b      	cbnz	r3, 800c1e6 <__swsetup_r+0x7a>
 800c1d2:	89a3      	ldrh	r3, [r4, #12]
 800c1d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c1d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1dc:	d003      	beq.n	800c1e6 <__swsetup_r+0x7a>
 800c1de:	4621      	mov	r1, r4
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	f002 fe3b 	bl	800ee5c <__smakebuf_r>
 800c1e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ea:	f013 0201 	ands.w	r2, r3, #1
 800c1ee:	d00a      	beq.n	800c206 <__swsetup_r+0x9a>
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	60a2      	str	r2, [r4, #8]
 800c1f4:	6962      	ldr	r2, [r4, #20]
 800c1f6:	4252      	negs	r2, r2
 800c1f8:	61a2      	str	r2, [r4, #24]
 800c1fa:	6922      	ldr	r2, [r4, #16]
 800c1fc:	b942      	cbnz	r2, 800c210 <__swsetup_r+0xa4>
 800c1fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c202:	d1c5      	bne.n	800c190 <__swsetup_r+0x24>
 800c204:	bd38      	pop	{r3, r4, r5, pc}
 800c206:	0799      	lsls	r1, r3, #30
 800c208:	bf58      	it	pl
 800c20a:	6962      	ldrpl	r2, [r4, #20]
 800c20c:	60a2      	str	r2, [r4, #8]
 800c20e:	e7f4      	b.n	800c1fa <__swsetup_r+0x8e>
 800c210:	2000      	movs	r0, #0
 800c212:	e7f7      	b.n	800c204 <__swsetup_r+0x98>
 800c214:	20000018 	.word	0x20000018

0800c218 <memset>:
 800c218:	4402      	add	r2, r0
 800c21a:	4603      	mov	r3, r0
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d100      	bne.n	800c222 <memset+0xa>
 800c220:	4770      	bx	lr
 800c222:	f803 1b01 	strb.w	r1, [r3], #1
 800c226:	e7f9      	b.n	800c21c <memset+0x4>

0800c228 <_raise_r>:
 800c228:	291f      	cmp	r1, #31
 800c22a:	b538      	push	{r3, r4, r5, lr}
 800c22c:	4605      	mov	r5, r0
 800c22e:	460c      	mov	r4, r1
 800c230:	d904      	bls.n	800c23c <_raise_r+0x14>
 800c232:	2316      	movs	r3, #22
 800c234:	6003      	str	r3, [r0, #0]
 800c236:	f04f 30ff 	mov.w	r0, #4294967295
 800c23a:	bd38      	pop	{r3, r4, r5, pc}
 800c23c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c23e:	b112      	cbz	r2, 800c246 <_raise_r+0x1e>
 800c240:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c244:	b94b      	cbnz	r3, 800c25a <_raise_r+0x32>
 800c246:	4628      	mov	r0, r5
 800c248:	f000 f868 	bl	800c31c <_getpid_r>
 800c24c:	4622      	mov	r2, r4
 800c24e:	4601      	mov	r1, r0
 800c250:	4628      	mov	r0, r5
 800c252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c256:	f000 b84f 	b.w	800c2f8 <_kill_r>
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d00a      	beq.n	800c274 <_raise_r+0x4c>
 800c25e:	1c59      	adds	r1, r3, #1
 800c260:	d103      	bne.n	800c26a <_raise_r+0x42>
 800c262:	2316      	movs	r3, #22
 800c264:	6003      	str	r3, [r0, #0]
 800c266:	2001      	movs	r0, #1
 800c268:	e7e7      	b.n	800c23a <_raise_r+0x12>
 800c26a:	2100      	movs	r1, #0
 800c26c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c270:	4620      	mov	r0, r4
 800c272:	4798      	blx	r3
 800c274:	2000      	movs	r0, #0
 800c276:	e7e0      	b.n	800c23a <_raise_r+0x12>

0800c278 <raise>:
 800c278:	4b02      	ldr	r3, [pc, #8]	@ (800c284 <raise+0xc>)
 800c27a:	4601      	mov	r1, r0
 800c27c:	6818      	ldr	r0, [r3, #0]
 800c27e:	f7ff bfd3 	b.w	800c228 <_raise_r>
 800c282:	bf00      	nop
 800c284:	20000018 	.word	0x20000018

0800c288 <_localeconv_r>:
 800c288:	4800      	ldr	r0, [pc, #0]	@ (800c28c <_localeconv_r+0x4>)
 800c28a:	4770      	bx	lr
 800c28c:	20000158 	.word	0x20000158

0800c290 <_close_r>:
 800c290:	b538      	push	{r3, r4, r5, lr}
 800c292:	4d06      	ldr	r5, [pc, #24]	@ (800c2ac <_close_r+0x1c>)
 800c294:	2300      	movs	r3, #0
 800c296:	4604      	mov	r4, r0
 800c298:	4608      	mov	r0, r1
 800c29a:	602b      	str	r3, [r5, #0]
 800c29c:	f7f6 ffa6 	bl	80031ec <_close>
 800c2a0:	1c43      	adds	r3, r0, #1
 800c2a2:	d102      	bne.n	800c2aa <_close_r+0x1a>
 800c2a4:	682b      	ldr	r3, [r5, #0]
 800c2a6:	b103      	cbz	r3, 800c2aa <_close_r+0x1a>
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	bd38      	pop	{r3, r4, r5, pc}
 800c2ac:	200007b4 	.word	0x200007b4

0800c2b0 <_lseek_r>:
 800c2b0:	b538      	push	{r3, r4, r5, lr}
 800c2b2:	4d07      	ldr	r5, [pc, #28]	@ (800c2d0 <_lseek_r+0x20>)
 800c2b4:	4604      	mov	r4, r0
 800c2b6:	4608      	mov	r0, r1
 800c2b8:	4611      	mov	r1, r2
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	602a      	str	r2, [r5, #0]
 800c2be:	461a      	mov	r2, r3
 800c2c0:	f7f6 ffbb 	bl	800323a <_lseek>
 800c2c4:	1c43      	adds	r3, r0, #1
 800c2c6:	d102      	bne.n	800c2ce <_lseek_r+0x1e>
 800c2c8:	682b      	ldr	r3, [r5, #0]
 800c2ca:	b103      	cbz	r3, 800c2ce <_lseek_r+0x1e>
 800c2cc:	6023      	str	r3, [r4, #0]
 800c2ce:	bd38      	pop	{r3, r4, r5, pc}
 800c2d0:	200007b4 	.word	0x200007b4

0800c2d4 <_read_r>:
 800c2d4:	b538      	push	{r3, r4, r5, lr}
 800c2d6:	4d07      	ldr	r5, [pc, #28]	@ (800c2f4 <_read_r+0x20>)
 800c2d8:	4604      	mov	r4, r0
 800c2da:	4608      	mov	r0, r1
 800c2dc:	4611      	mov	r1, r2
 800c2de:	2200      	movs	r2, #0
 800c2e0:	602a      	str	r2, [r5, #0]
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	f7f6 ff49 	bl	800317a <_read>
 800c2e8:	1c43      	adds	r3, r0, #1
 800c2ea:	d102      	bne.n	800c2f2 <_read_r+0x1e>
 800c2ec:	682b      	ldr	r3, [r5, #0]
 800c2ee:	b103      	cbz	r3, 800c2f2 <_read_r+0x1e>
 800c2f0:	6023      	str	r3, [r4, #0]
 800c2f2:	bd38      	pop	{r3, r4, r5, pc}
 800c2f4:	200007b4 	.word	0x200007b4

0800c2f8 <_kill_r>:
 800c2f8:	b538      	push	{r3, r4, r5, lr}
 800c2fa:	4d07      	ldr	r5, [pc, #28]	@ (800c318 <_kill_r+0x20>)
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	4604      	mov	r4, r0
 800c300:	4608      	mov	r0, r1
 800c302:	4611      	mov	r1, r2
 800c304:	602b      	str	r3, [r5, #0]
 800c306:	f7f6 ff1d 	bl	8003144 <_kill>
 800c30a:	1c43      	adds	r3, r0, #1
 800c30c:	d102      	bne.n	800c314 <_kill_r+0x1c>
 800c30e:	682b      	ldr	r3, [r5, #0]
 800c310:	b103      	cbz	r3, 800c314 <_kill_r+0x1c>
 800c312:	6023      	str	r3, [r4, #0]
 800c314:	bd38      	pop	{r3, r4, r5, pc}
 800c316:	bf00      	nop
 800c318:	200007b4 	.word	0x200007b4

0800c31c <_getpid_r>:
 800c31c:	f7f6 bf0a 	b.w	8003134 <_getpid>

0800c320 <_sbrk_r>:
 800c320:	b538      	push	{r3, r4, r5, lr}
 800c322:	4d06      	ldr	r5, [pc, #24]	@ (800c33c <_sbrk_r+0x1c>)
 800c324:	2300      	movs	r3, #0
 800c326:	4604      	mov	r4, r0
 800c328:	4608      	mov	r0, r1
 800c32a:	602b      	str	r3, [r5, #0]
 800c32c:	f7f6 ff92 	bl	8003254 <_sbrk>
 800c330:	1c43      	adds	r3, r0, #1
 800c332:	d102      	bne.n	800c33a <_sbrk_r+0x1a>
 800c334:	682b      	ldr	r3, [r5, #0]
 800c336:	b103      	cbz	r3, 800c33a <_sbrk_r+0x1a>
 800c338:	6023      	str	r3, [r4, #0]
 800c33a:	bd38      	pop	{r3, r4, r5, pc}
 800c33c:	200007b4 	.word	0x200007b4

0800c340 <_write_r>:
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	4d07      	ldr	r5, [pc, #28]	@ (800c360 <_write_r+0x20>)
 800c344:	4604      	mov	r4, r0
 800c346:	4608      	mov	r0, r1
 800c348:	4611      	mov	r1, r2
 800c34a:	2200      	movs	r2, #0
 800c34c:	602a      	str	r2, [r5, #0]
 800c34e:	461a      	mov	r2, r3
 800c350:	f7f6 ff30 	bl	80031b4 <_write>
 800c354:	1c43      	adds	r3, r0, #1
 800c356:	d102      	bne.n	800c35e <_write_r+0x1e>
 800c358:	682b      	ldr	r3, [r5, #0]
 800c35a:	b103      	cbz	r3, 800c35e <_write_r+0x1e>
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	bd38      	pop	{r3, r4, r5, pc}
 800c360:	200007b4 	.word	0x200007b4

0800c364 <__errno>:
 800c364:	4b01      	ldr	r3, [pc, #4]	@ (800c36c <__errno+0x8>)
 800c366:	6818      	ldr	r0, [r3, #0]
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	20000018 	.word	0x20000018

0800c370 <__libc_init_array>:
 800c370:	b570      	push	{r4, r5, r6, lr}
 800c372:	4d0d      	ldr	r5, [pc, #52]	@ (800c3a8 <__libc_init_array+0x38>)
 800c374:	4c0d      	ldr	r4, [pc, #52]	@ (800c3ac <__libc_init_array+0x3c>)
 800c376:	1b64      	subs	r4, r4, r5
 800c378:	10a4      	asrs	r4, r4, #2
 800c37a:	2600      	movs	r6, #0
 800c37c:	42a6      	cmp	r6, r4
 800c37e:	d109      	bne.n	800c394 <__libc_init_array+0x24>
 800c380:	4d0b      	ldr	r5, [pc, #44]	@ (800c3b0 <__libc_init_array+0x40>)
 800c382:	4c0c      	ldr	r4, [pc, #48]	@ (800c3b4 <__libc_init_array+0x44>)
 800c384:	f003 f9ce 	bl	800f724 <_init>
 800c388:	1b64      	subs	r4, r4, r5
 800c38a:	10a4      	asrs	r4, r4, #2
 800c38c:	2600      	movs	r6, #0
 800c38e:	42a6      	cmp	r6, r4
 800c390:	d105      	bne.n	800c39e <__libc_init_array+0x2e>
 800c392:	bd70      	pop	{r4, r5, r6, pc}
 800c394:	f855 3b04 	ldr.w	r3, [r5], #4
 800c398:	4798      	blx	r3
 800c39a:	3601      	adds	r6, #1
 800c39c:	e7ee      	b.n	800c37c <__libc_init_array+0xc>
 800c39e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3a2:	4798      	blx	r3
 800c3a4:	3601      	adds	r6, #1
 800c3a6:	e7f2      	b.n	800c38e <__libc_init_array+0x1e>
 800c3a8:	0800fcb0 	.word	0x0800fcb0
 800c3ac:	0800fcb0 	.word	0x0800fcb0
 800c3b0:	0800fcb0 	.word	0x0800fcb0
 800c3b4:	0800fcb8 	.word	0x0800fcb8

0800c3b8 <__retarget_lock_init_recursive>:
 800c3b8:	4770      	bx	lr

0800c3ba <__retarget_lock_acquire_recursive>:
 800c3ba:	4770      	bx	lr

0800c3bc <__retarget_lock_release_recursive>:
 800c3bc:	4770      	bx	lr

0800c3be <memcpy>:
 800c3be:	440a      	add	r2, r1
 800c3c0:	4291      	cmp	r1, r2
 800c3c2:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3c6:	d100      	bne.n	800c3ca <memcpy+0xc>
 800c3c8:	4770      	bx	lr
 800c3ca:	b510      	push	{r4, lr}
 800c3cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3d4:	4291      	cmp	r1, r2
 800c3d6:	d1f9      	bne.n	800c3cc <memcpy+0xe>
 800c3d8:	bd10      	pop	{r4, pc}
	...

0800c3dc <nanf>:
 800c3dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c3e4 <nanf+0x8>
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	7fc00000 	.word	0x7fc00000

0800c3e8 <quorem>:
 800c3e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ec:	6903      	ldr	r3, [r0, #16]
 800c3ee:	690c      	ldr	r4, [r1, #16]
 800c3f0:	42a3      	cmp	r3, r4
 800c3f2:	4607      	mov	r7, r0
 800c3f4:	db7e      	blt.n	800c4f4 <quorem+0x10c>
 800c3f6:	3c01      	subs	r4, #1
 800c3f8:	f101 0814 	add.w	r8, r1, #20
 800c3fc:	00a3      	lsls	r3, r4, #2
 800c3fe:	f100 0514 	add.w	r5, r0, #20
 800c402:	9300      	str	r3, [sp, #0]
 800c404:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c408:	9301      	str	r3, [sp, #4]
 800c40a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c40e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c412:	3301      	adds	r3, #1
 800c414:	429a      	cmp	r2, r3
 800c416:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c41a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c41e:	d32e      	bcc.n	800c47e <quorem+0x96>
 800c420:	f04f 0a00 	mov.w	sl, #0
 800c424:	46c4      	mov	ip, r8
 800c426:	46ae      	mov	lr, r5
 800c428:	46d3      	mov	fp, sl
 800c42a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c42e:	b298      	uxth	r0, r3
 800c430:	fb06 a000 	mla	r0, r6, r0, sl
 800c434:	0c02      	lsrs	r2, r0, #16
 800c436:	0c1b      	lsrs	r3, r3, #16
 800c438:	fb06 2303 	mla	r3, r6, r3, r2
 800c43c:	f8de 2000 	ldr.w	r2, [lr]
 800c440:	b280      	uxth	r0, r0
 800c442:	b292      	uxth	r2, r2
 800c444:	1a12      	subs	r2, r2, r0
 800c446:	445a      	add	r2, fp
 800c448:	f8de 0000 	ldr.w	r0, [lr]
 800c44c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c450:	b29b      	uxth	r3, r3
 800c452:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c456:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c45a:	b292      	uxth	r2, r2
 800c45c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c460:	45e1      	cmp	r9, ip
 800c462:	f84e 2b04 	str.w	r2, [lr], #4
 800c466:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c46a:	d2de      	bcs.n	800c42a <quorem+0x42>
 800c46c:	9b00      	ldr	r3, [sp, #0]
 800c46e:	58eb      	ldr	r3, [r5, r3]
 800c470:	b92b      	cbnz	r3, 800c47e <quorem+0x96>
 800c472:	9b01      	ldr	r3, [sp, #4]
 800c474:	3b04      	subs	r3, #4
 800c476:	429d      	cmp	r5, r3
 800c478:	461a      	mov	r2, r3
 800c47a:	d32f      	bcc.n	800c4dc <quorem+0xf4>
 800c47c:	613c      	str	r4, [r7, #16]
 800c47e:	4638      	mov	r0, r7
 800c480:	f001 f90c 	bl	800d69c <__mcmp>
 800c484:	2800      	cmp	r0, #0
 800c486:	db25      	blt.n	800c4d4 <quorem+0xec>
 800c488:	4629      	mov	r1, r5
 800c48a:	2000      	movs	r0, #0
 800c48c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c490:	f8d1 c000 	ldr.w	ip, [r1]
 800c494:	fa1f fe82 	uxth.w	lr, r2
 800c498:	fa1f f38c 	uxth.w	r3, ip
 800c49c:	eba3 030e 	sub.w	r3, r3, lr
 800c4a0:	4403      	add	r3, r0
 800c4a2:	0c12      	lsrs	r2, r2, #16
 800c4a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c4a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4b2:	45c1      	cmp	r9, r8
 800c4b4:	f841 3b04 	str.w	r3, [r1], #4
 800c4b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c4bc:	d2e6      	bcs.n	800c48c <quorem+0xa4>
 800c4be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4c6:	b922      	cbnz	r2, 800c4d2 <quorem+0xea>
 800c4c8:	3b04      	subs	r3, #4
 800c4ca:	429d      	cmp	r5, r3
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	d30b      	bcc.n	800c4e8 <quorem+0x100>
 800c4d0:	613c      	str	r4, [r7, #16]
 800c4d2:	3601      	adds	r6, #1
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	b003      	add	sp, #12
 800c4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4dc:	6812      	ldr	r2, [r2, #0]
 800c4de:	3b04      	subs	r3, #4
 800c4e0:	2a00      	cmp	r2, #0
 800c4e2:	d1cb      	bne.n	800c47c <quorem+0x94>
 800c4e4:	3c01      	subs	r4, #1
 800c4e6:	e7c6      	b.n	800c476 <quorem+0x8e>
 800c4e8:	6812      	ldr	r2, [r2, #0]
 800c4ea:	3b04      	subs	r3, #4
 800c4ec:	2a00      	cmp	r2, #0
 800c4ee:	d1ef      	bne.n	800c4d0 <quorem+0xe8>
 800c4f0:	3c01      	subs	r4, #1
 800c4f2:	e7ea      	b.n	800c4ca <quorem+0xe2>
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	e7ee      	b.n	800c4d6 <quorem+0xee>

0800c4f8 <_dtoa_r>:
 800c4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4fc:	69c7      	ldr	r7, [r0, #28]
 800c4fe:	b099      	sub	sp, #100	@ 0x64
 800c500:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c504:	ec55 4b10 	vmov	r4, r5, d0
 800c508:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c50a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c50c:	4683      	mov	fp, r0
 800c50e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c510:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c512:	b97f      	cbnz	r7, 800c534 <_dtoa_r+0x3c>
 800c514:	2010      	movs	r0, #16
 800c516:	f7fe fd9b 	bl	800b050 <malloc>
 800c51a:	4602      	mov	r2, r0
 800c51c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c520:	b920      	cbnz	r0, 800c52c <_dtoa_r+0x34>
 800c522:	4ba7      	ldr	r3, [pc, #668]	@ (800c7c0 <_dtoa_r+0x2c8>)
 800c524:	21ef      	movs	r1, #239	@ 0xef
 800c526:	48a7      	ldr	r0, [pc, #668]	@ (800c7c4 <_dtoa_r+0x2cc>)
 800c528:	f002 fd2a 	bl	800ef80 <__assert_func>
 800c52c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c530:	6007      	str	r7, [r0, #0]
 800c532:	60c7      	str	r7, [r0, #12]
 800c534:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c538:	6819      	ldr	r1, [r3, #0]
 800c53a:	b159      	cbz	r1, 800c554 <_dtoa_r+0x5c>
 800c53c:	685a      	ldr	r2, [r3, #4]
 800c53e:	604a      	str	r2, [r1, #4]
 800c540:	2301      	movs	r3, #1
 800c542:	4093      	lsls	r3, r2
 800c544:	608b      	str	r3, [r1, #8]
 800c546:	4658      	mov	r0, fp
 800c548:	f000 fe24 	bl	800d194 <_Bfree>
 800c54c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c550:	2200      	movs	r2, #0
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	1e2b      	subs	r3, r5, #0
 800c556:	bfb9      	ittee	lt
 800c558:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c55c:	9303      	strlt	r3, [sp, #12]
 800c55e:	2300      	movge	r3, #0
 800c560:	6033      	strge	r3, [r6, #0]
 800c562:	9f03      	ldr	r7, [sp, #12]
 800c564:	4b98      	ldr	r3, [pc, #608]	@ (800c7c8 <_dtoa_r+0x2d0>)
 800c566:	bfbc      	itt	lt
 800c568:	2201      	movlt	r2, #1
 800c56a:	6032      	strlt	r2, [r6, #0]
 800c56c:	43bb      	bics	r3, r7
 800c56e:	d112      	bne.n	800c596 <_dtoa_r+0x9e>
 800c570:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c572:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c576:	6013      	str	r3, [r2, #0]
 800c578:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c57c:	4323      	orrs	r3, r4
 800c57e:	f000 854d 	beq.w	800d01c <_dtoa_r+0xb24>
 800c582:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c584:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c7dc <_dtoa_r+0x2e4>
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f000 854f 	beq.w	800d02c <_dtoa_r+0xb34>
 800c58e:	f10a 0303 	add.w	r3, sl, #3
 800c592:	f000 bd49 	b.w	800d028 <_dtoa_r+0xb30>
 800c596:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c59a:	2200      	movs	r2, #0
 800c59c:	ec51 0b17 	vmov	r0, r1, d7
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c5a6:	f7f4 fab7 	bl	8000b18 <__aeabi_dcmpeq>
 800c5aa:	4680      	mov	r8, r0
 800c5ac:	b158      	cbz	r0, 800c5c6 <_dtoa_r+0xce>
 800c5ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	6013      	str	r3, [r2, #0]
 800c5b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c5b6:	b113      	cbz	r3, 800c5be <_dtoa_r+0xc6>
 800c5b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c5ba:	4b84      	ldr	r3, [pc, #528]	@ (800c7cc <_dtoa_r+0x2d4>)
 800c5bc:	6013      	str	r3, [r2, #0]
 800c5be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c7e0 <_dtoa_r+0x2e8>
 800c5c2:	f000 bd33 	b.w	800d02c <_dtoa_r+0xb34>
 800c5c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c5ca:	aa16      	add	r2, sp, #88	@ 0x58
 800c5cc:	a917      	add	r1, sp, #92	@ 0x5c
 800c5ce:	4658      	mov	r0, fp
 800c5d0:	f001 f984 	bl	800d8dc <__d2b>
 800c5d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c5d8:	4681      	mov	r9, r0
 800c5da:	2e00      	cmp	r6, #0
 800c5dc:	d077      	beq.n	800c6ce <_dtoa_r+0x1d6>
 800c5de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c5e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c5e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c5ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c5f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c5f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	4b74      	ldr	r3, [pc, #464]	@ (800c7d0 <_dtoa_r+0x2d8>)
 800c5fe:	f7f3 fe6b 	bl	80002d8 <__aeabi_dsub>
 800c602:	a369      	add	r3, pc, #420	@ (adr r3, 800c7a8 <_dtoa_r+0x2b0>)
 800c604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c608:	f7f4 f81e 	bl	8000648 <__aeabi_dmul>
 800c60c:	a368      	add	r3, pc, #416	@ (adr r3, 800c7b0 <_dtoa_r+0x2b8>)
 800c60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c612:	f7f3 fe63 	bl	80002dc <__adddf3>
 800c616:	4604      	mov	r4, r0
 800c618:	4630      	mov	r0, r6
 800c61a:	460d      	mov	r5, r1
 800c61c:	f7f3 ffaa 	bl	8000574 <__aeabi_i2d>
 800c620:	a365      	add	r3, pc, #404	@ (adr r3, 800c7b8 <_dtoa_r+0x2c0>)
 800c622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c626:	f7f4 f80f 	bl	8000648 <__aeabi_dmul>
 800c62a:	4602      	mov	r2, r0
 800c62c:	460b      	mov	r3, r1
 800c62e:	4620      	mov	r0, r4
 800c630:	4629      	mov	r1, r5
 800c632:	f7f3 fe53 	bl	80002dc <__adddf3>
 800c636:	4604      	mov	r4, r0
 800c638:	460d      	mov	r5, r1
 800c63a:	f7f4 fab5 	bl	8000ba8 <__aeabi_d2iz>
 800c63e:	2200      	movs	r2, #0
 800c640:	4607      	mov	r7, r0
 800c642:	2300      	movs	r3, #0
 800c644:	4620      	mov	r0, r4
 800c646:	4629      	mov	r1, r5
 800c648:	f7f4 fa70 	bl	8000b2c <__aeabi_dcmplt>
 800c64c:	b140      	cbz	r0, 800c660 <_dtoa_r+0x168>
 800c64e:	4638      	mov	r0, r7
 800c650:	f7f3 ff90 	bl	8000574 <__aeabi_i2d>
 800c654:	4622      	mov	r2, r4
 800c656:	462b      	mov	r3, r5
 800c658:	f7f4 fa5e 	bl	8000b18 <__aeabi_dcmpeq>
 800c65c:	b900      	cbnz	r0, 800c660 <_dtoa_r+0x168>
 800c65e:	3f01      	subs	r7, #1
 800c660:	2f16      	cmp	r7, #22
 800c662:	d851      	bhi.n	800c708 <_dtoa_r+0x210>
 800c664:	4b5b      	ldr	r3, [pc, #364]	@ (800c7d4 <_dtoa_r+0x2dc>)
 800c666:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c672:	f7f4 fa5b 	bl	8000b2c <__aeabi_dcmplt>
 800c676:	2800      	cmp	r0, #0
 800c678:	d048      	beq.n	800c70c <_dtoa_r+0x214>
 800c67a:	3f01      	subs	r7, #1
 800c67c:	2300      	movs	r3, #0
 800c67e:	9312      	str	r3, [sp, #72]	@ 0x48
 800c680:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c682:	1b9b      	subs	r3, r3, r6
 800c684:	1e5a      	subs	r2, r3, #1
 800c686:	bf44      	itt	mi
 800c688:	f1c3 0801 	rsbmi	r8, r3, #1
 800c68c:	2300      	movmi	r3, #0
 800c68e:	9208      	str	r2, [sp, #32]
 800c690:	bf54      	ite	pl
 800c692:	f04f 0800 	movpl.w	r8, #0
 800c696:	9308      	strmi	r3, [sp, #32]
 800c698:	2f00      	cmp	r7, #0
 800c69a:	db39      	blt.n	800c710 <_dtoa_r+0x218>
 800c69c:	9b08      	ldr	r3, [sp, #32]
 800c69e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c6a0:	443b      	add	r3, r7
 800c6a2:	9308      	str	r3, [sp, #32]
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6aa:	2b09      	cmp	r3, #9
 800c6ac:	d864      	bhi.n	800c778 <_dtoa_r+0x280>
 800c6ae:	2b05      	cmp	r3, #5
 800c6b0:	bfc4      	itt	gt
 800c6b2:	3b04      	subgt	r3, #4
 800c6b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c6b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6b8:	f1a3 0302 	sub.w	r3, r3, #2
 800c6bc:	bfcc      	ite	gt
 800c6be:	2400      	movgt	r4, #0
 800c6c0:	2401      	movle	r4, #1
 800c6c2:	2b03      	cmp	r3, #3
 800c6c4:	d863      	bhi.n	800c78e <_dtoa_r+0x296>
 800c6c6:	e8df f003 	tbb	[pc, r3]
 800c6ca:	372a      	.short	0x372a
 800c6cc:	5535      	.short	0x5535
 800c6ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c6d2:	441e      	add	r6, r3
 800c6d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c6d8:	2b20      	cmp	r3, #32
 800c6da:	bfc1      	itttt	gt
 800c6dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c6e0:	409f      	lslgt	r7, r3
 800c6e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c6e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c6ea:	bfd6      	itet	le
 800c6ec:	f1c3 0320 	rsble	r3, r3, #32
 800c6f0:	ea47 0003 	orrgt.w	r0, r7, r3
 800c6f4:	fa04 f003 	lslle.w	r0, r4, r3
 800c6f8:	f7f3 ff2c 	bl	8000554 <__aeabi_ui2d>
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c702:	3e01      	subs	r6, #1
 800c704:	9214      	str	r2, [sp, #80]	@ 0x50
 800c706:	e777      	b.n	800c5f8 <_dtoa_r+0x100>
 800c708:	2301      	movs	r3, #1
 800c70a:	e7b8      	b.n	800c67e <_dtoa_r+0x186>
 800c70c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c70e:	e7b7      	b.n	800c680 <_dtoa_r+0x188>
 800c710:	427b      	negs	r3, r7
 800c712:	930a      	str	r3, [sp, #40]	@ 0x28
 800c714:	2300      	movs	r3, #0
 800c716:	eba8 0807 	sub.w	r8, r8, r7
 800c71a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c71c:	e7c4      	b.n	800c6a8 <_dtoa_r+0x1b0>
 800c71e:	2300      	movs	r3, #0
 800c720:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c722:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c724:	2b00      	cmp	r3, #0
 800c726:	dc35      	bgt.n	800c794 <_dtoa_r+0x29c>
 800c728:	2301      	movs	r3, #1
 800c72a:	9300      	str	r3, [sp, #0]
 800c72c:	9307      	str	r3, [sp, #28]
 800c72e:	461a      	mov	r2, r3
 800c730:	920e      	str	r2, [sp, #56]	@ 0x38
 800c732:	e00b      	b.n	800c74c <_dtoa_r+0x254>
 800c734:	2301      	movs	r3, #1
 800c736:	e7f3      	b.n	800c720 <_dtoa_r+0x228>
 800c738:	2300      	movs	r3, #0
 800c73a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c73c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c73e:	18fb      	adds	r3, r7, r3
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	3301      	adds	r3, #1
 800c744:	2b01      	cmp	r3, #1
 800c746:	9307      	str	r3, [sp, #28]
 800c748:	bfb8      	it	lt
 800c74a:	2301      	movlt	r3, #1
 800c74c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c750:	2100      	movs	r1, #0
 800c752:	2204      	movs	r2, #4
 800c754:	f102 0514 	add.w	r5, r2, #20
 800c758:	429d      	cmp	r5, r3
 800c75a:	d91f      	bls.n	800c79c <_dtoa_r+0x2a4>
 800c75c:	6041      	str	r1, [r0, #4]
 800c75e:	4658      	mov	r0, fp
 800c760:	f000 fcd8 	bl	800d114 <_Balloc>
 800c764:	4682      	mov	sl, r0
 800c766:	2800      	cmp	r0, #0
 800c768:	d13c      	bne.n	800c7e4 <_dtoa_r+0x2ec>
 800c76a:	4b1b      	ldr	r3, [pc, #108]	@ (800c7d8 <_dtoa_r+0x2e0>)
 800c76c:	4602      	mov	r2, r0
 800c76e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c772:	e6d8      	b.n	800c526 <_dtoa_r+0x2e>
 800c774:	2301      	movs	r3, #1
 800c776:	e7e0      	b.n	800c73a <_dtoa_r+0x242>
 800c778:	2401      	movs	r4, #1
 800c77a:	2300      	movs	r3, #0
 800c77c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c77e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c780:	f04f 33ff 	mov.w	r3, #4294967295
 800c784:	9300      	str	r3, [sp, #0]
 800c786:	9307      	str	r3, [sp, #28]
 800c788:	2200      	movs	r2, #0
 800c78a:	2312      	movs	r3, #18
 800c78c:	e7d0      	b.n	800c730 <_dtoa_r+0x238>
 800c78e:	2301      	movs	r3, #1
 800c790:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c792:	e7f5      	b.n	800c780 <_dtoa_r+0x288>
 800c794:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c796:	9300      	str	r3, [sp, #0]
 800c798:	9307      	str	r3, [sp, #28]
 800c79a:	e7d7      	b.n	800c74c <_dtoa_r+0x254>
 800c79c:	3101      	adds	r1, #1
 800c79e:	0052      	lsls	r2, r2, #1
 800c7a0:	e7d8      	b.n	800c754 <_dtoa_r+0x25c>
 800c7a2:	bf00      	nop
 800c7a4:	f3af 8000 	nop.w
 800c7a8:	636f4361 	.word	0x636f4361
 800c7ac:	3fd287a7 	.word	0x3fd287a7
 800c7b0:	8b60c8b3 	.word	0x8b60c8b3
 800c7b4:	3fc68a28 	.word	0x3fc68a28
 800c7b8:	509f79fb 	.word	0x509f79fb
 800c7bc:	3fd34413 	.word	0x3fd34413
 800c7c0:	0800f8be 	.word	0x0800f8be
 800c7c4:	0800f8d5 	.word	0x0800f8d5
 800c7c8:	7ff00000 	.word	0x7ff00000
 800c7cc:	0800f889 	.word	0x0800f889
 800c7d0:	3ff80000 	.word	0x3ff80000
 800c7d4:	0800f9d0 	.word	0x0800f9d0
 800c7d8:	0800f92d 	.word	0x0800f92d
 800c7dc:	0800f8ba 	.word	0x0800f8ba
 800c7e0:	0800f888 	.word	0x0800f888
 800c7e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c7e8:	6018      	str	r0, [r3, #0]
 800c7ea:	9b07      	ldr	r3, [sp, #28]
 800c7ec:	2b0e      	cmp	r3, #14
 800c7ee:	f200 80a4 	bhi.w	800c93a <_dtoa_r+0x442>
 800c7f2:	2c00      	cmp	r4, #0
 800c7f4:	f000 80a1 	beq.w	800c93a <_dtoa_r+0x442>
 800c7f8:	2f00      	cmp	r7, #0
 800c7fa:	dd33      	ble.n	800c864 <_dtoa_r+0x36c>
 800c7fc:	4bad      	ldr	r3, [pc, #692]	@ (800cab4 <_dtoa_r+0x5bc>)
 800c7fe:	f007 020f 	and.w	r2, r7, #15
 800c802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c806:	ed93 7b00 	vldr	d7, [r3]
 800c80a:	05f8      	lsls	r0, r7, #23
 800c80c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c810:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c814:	d516      	bpl.n	800c844 <_dtoa_r+0x34c>
 800c816:	4ba8      	ldr	r3, [pc, #672]	@ (800cab8 <_dtoa_r+0x5c0>)
 800c818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c81c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c820:	f7f4 f83c 	bl	800089c <__aeabi_ddiv>
 800c824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c828:	f004 040f 	and.w	r4, r4, #15
 800c82c:	2603      	movs	r6, #3
 800c82e:	4da2      	ldr	r5, [pc, #648]	@ (800cab8 <_dtoa_r+0x5c0>)
 800c830:	b954      	cbnz	r4, 800c848 <_dtoa_r+0x350>
 800c832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c83a:	f7f4 f82f 	bl	800089c <__aeabi_ddiv>
 800c83e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c842:	e028      	b.n	800c896 <_dtoa_r+0x39e>
 800c844:	2602      	movs	r6, #2
 800c846:	e7f2      	b.n	800c82e <_dtoa_r+0x336>
 800c848:	07e1      	lsls	r1, r4, #31
 800c84a:	d508      	bpl.n	800c85e <_dtoa_r+0x366>
 800c84c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c850:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c854:	f7f3 fef8 	bl	8000648 <__aeabi_dmul>
 800c858:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c85c:	3601      	adds	r6, #1
 800c85e:	1064      	asrs	r4, r4, #1
 800c860:	3508      	adds	r5, #8
 800c862:	e7e5      	b.n	800c830 <_dtoa_r+0x338>
 800c864:	f000 80d2 	beq.w	800ca0c <_dtoa_r+0x514>
 800c868:	427c      	negs	r4, r7
 800c86a:	4b92      	ldr	r3, [pc, #584]	@ (800cab4 <_dtoa_r+0x5bc>)
 800c86c:	4d92      	ldr	r5, [pc, #584]	@ (800cab8 <_dtoa_r+0x5c0>)
 800c86e:	f004 020f 	and.w	r2, r4, #15
 800c872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c87e:	f7f3 fee3 	bl	8000648 <__aeabi_dmul>
 800c882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c886:	1124      	asrs	r4, r4, #4
 800c888:	2300      	movs	r3, #0
 800c88a:	2602      	movs	r6, #2
 800c88c:	2c00      	cmp	r4, #0
 800c88e:	f040 80b2 	bne.w	800c9f6 <_dtoa_r+0x4fe>
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1d3      	bne.n	800c83e <_dtoa_r+0x346>
 800c896:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c898:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	f000 80b7 	beq.w	800ca10 <_dtoa_r+0x518>
 800c8a2:	4b86      	ldr	r3, [pc, #536]	@ (800cabc <_dtoa_r+0x5c4>)
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	f7f4 f93f 	bl	8000b2c <__aeabi_dcmplt>
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	f000 80ae 	beq.w	800ca10 <_dtoa_r+0x518>
 800c8b4:	9b07      	ldr	r3, [sp, #28]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f000 80aa 	beq.w	800ca10 <_dtoa_r+0x518>
 800c8bc:	9b00      	ldr	r3, [sp, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	dd37      	ble.n	800c932 <_dtoa_r+0x43a>
 800c8c2:	1e7b      	subs	r3, r7, #1
 800c8c4:	9304      	str	r3, [sp, #16]
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	4b7d      	ldr	r3, [pc, #500]	@ (800cac0 <_dtoa_r+0x5c8>)
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	f7f3 febb 	bl	8000648 <__aeabi_dmul>
 800c8d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8d6:	9c00      	ldr	r4, [sp, #0]
 800c8d8:	3601      	adds	r6, #1
 800c8da:	4630      	mov	r0, r6
 800c8dc:	f7f3 fe4a 	bl	8000574 <__aeabi_i2d>
 800c8e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8e4:	f7f3 feb0 	bl	8000648 <__aeabi_dmul>
 800c8e8:	4b76      	ldr	r3, [pc, #472]	@ (800cac4 <_dtoa_r+0x5cc>)
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f7f3 fcf6 	bl	80002dc <__adddf3>
 800c8f0:	4605      	mov	r5, r0
 800c8f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c8f6:	2c00      	cmp	r4, #0
 800c8f8:	f040 808d 	bne.w	800ca16 <_dtoa_r+0x51e>
 800c8fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c900:	4b71      	ldr	r3, [pc, #452]	@ (800cac8 <_dtoa_r+0x5d0>)
 800c902:	2200      	movs	r2, #0
 800c904:	f7f3 fce8 	bl	80002d8 <__aeabi_dsub>
 800c908:	4602      	mov	r2, r0
 800c90a:	460b      	mov	r3, r1
 800c90c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c910:	462a      	mov	r2, r5
 800c912:	4633      	mov	r3, r6
 800c914:	f7f4 f928 	bl	8000b68 <__aeabi_dcmpgt>
 800c918:	2800      	cmp	r0, #0
 800c91a:	f040 828b 	bne.w	800ce34 <_dtoa_r+0x93c>
 800c91e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c922:	462a      	mov	r2, r5
 800c924:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c928:	f7f4 f900 	bl	8000b2c <__aeabi_dcmplt>
 800c92c:	2800      	cmp	r0, #0
 800c92e:	f040 8128 	bne.w	800cb82 <_dtoa_r+0x68a>
 800c932:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c936:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c93a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f2c0 815a 	blt.w	800cbf6 <_dtoa_r+0x6fe>
 800c942:	2f0e      	cmp	r7, #14
 800c944:	f300 8157 	bgt.w	800cbf6 <_dtoa_r+0x6fe>
 800c948:	4b5a      	ldr	r3, [pc, #360]	@ (800cab4 <_dtoa_r+0x5bc>)
 800c94a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c94e:	ed93 7b00 	vldr	d7, [r3]
 800c952:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c954:	2b00      	cmp	r3, #0
 800c956:	ed8d 7b00 	vstr	d7, [sp]
 800c95a:	da03      	bge.n	800c964 <_dtoa_r+0x46c>
 800c95c:	9b07      	ldr	r3, [sp, #28]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	f340 8101 	ble.w	800cb66 <_dtoa_r+0x66e>
 800c964:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c968:	4656      	mov	r6, sl
 800c96a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c96e:	4620      	mov	r0, r4
 800c970:	4629      	mov	r1, r5
 800c972:	f7f3 ff93 	bl	800089c <__aeabi_ddiv>
 800c976:	f7f4 f917 	bl	8000ba8 <__aeabi_d2iz>
 800c97a:	4680      	mov	r8, r0
 800c97c:	f7f3 fdfa 	bl	8000574 <__aeabi_i2d>
 800c980:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c984:	f7f3 fe60 	bl	8000648 <__aeabi_dmul>
 800c988:	4602      	mov	r2, r0
 800c98a:	460b      	mov	r3, r1
 800c98c:	4620      	mov	r0, r4
 800c98e:	4629      	mov	r1, r5
 800c990:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c994:	f7f3 fca0 	bl	80002d8 <__aeabi_dsub>
 800c998:	f806 4b01 	strb.w	r4, [r6], #1
 800c99c:	9d07      	ldr	r5, [sp, #28]
 800c99e:	eba6 040a 	sub.w	r4, r6, sl
 800c9a2:	42a5      	cmp	r5, r4
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	f040 8117 	bne.w	800cbda <_dtoa_r+0x6e2>
 800c9ac:	f7f3 fc96 	bl	80002dc <__adddf3>
 800c9b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9b4:	4604      	mov	r4, r0
 800c9b6:	460d      	mov	r5, r1
 800c9b8:	f7f4 f8d6 	bl	8000b68 <__aeabi_dcmpgt>
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	f040 80f9 	bne.w	800cbb4 <_dtoa_r+0x6bc>
 800c9c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	f7f4 f8a5 	bl	8000b18 <__aeabi_dcmpeq>
 800c9ce:	b118      	cbz	r0, 800c9d8 <_dtoa_r+0x4e0>
 800c9d0:	f018 0f01 	tst.w	r8, #1
 800c9d4:	f040 80ee 	bne.w	800cbb4 <_dtoa_r+0x6bc>
 800c9d8:	4649      	mov	r1, r9
 800c9da:	4658      	mov	r0, fp
 800c9dc:	f000 fbda 	bl	800d194 <_Bfree>
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	7033      	strb	r3, [r6, #0]
 800c9e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c9e6:	3701      	adds	r7, #1
 800c9e8:	601f      	str	r7, [r3, #0]
 800c9ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f000 831d 	beq.w	800d02c <_dtoa_r+0xb34>
 800c9f2:	601e      	str	r6, [r3, #0]
 800c9f4:	e31a      	b.n	800d02c <_dtoa_r+0xb34>
 800c9f6:	07e2      	lsls	r2, r4, #31
 800c9f8:	d505      	bpl.n	800ca06 <_dtoa_r+0x50e>
 800c9fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c9fe:	f7f3 fe23 	bl	8000648 <__aeabi_dmul>
 800ca02:	3601      	adds	r6, #1
 800ca04:	2301      	movs	r3, #1
 800ca06:	1064      	asrs	r4, r4, #1
 800ca08:	3508      	adds	r5, #8
 800ca0a:	e73f      	b.n	800c88c <_dtoa_r+0x394>
 800ca0c:	2602      	movs	r6, #2
 800ca0e:	e742      	b.n	800c896 <_dtoa_r+0x39e>
 800ca10:	9c07      	ldr	r4, [sp, #28]
 800ca12:	9704      	str	r7, [sp, #16]
 800ca14:	e761      	b.n	800c8da <_dtoa_r+0x3e2>
 800ca16:	4b27      	ldr	r3, [pc, #156]	@ (800cab4 <_dtoa_r+0x5bc>)
 800ca18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ca1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ca22:	4454      	add	r4, sl
 800ca24:	2900      	cmp	r1, #0
 800ca26:	d053      	beq.n	800cad0 <_dtoa_r+0x5d8>
 800ca28:	4928      	ldr	r1, [pc, #160]	@ (800cacc <_dtoa_r+0x5d4>)
 800ca2a:	2000      	movs	r0, #0
 800ca2c:	f7f3 ff36 	bl	800089c <__aeabi_ddiv>
 800ca30:	4633      	mov	r3, r6
 800ca32:	462a      	mov	r2, r5
 800ca34:	f7f3 fc50 	bl	80002d8 <__aeabi_dsub>
 800ca38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ca3c:	4656      	mov	r6, sl
 800ca3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca42:	f7f4 f8b1 	bl	8000ba8 <__aeabi_d2iz>
 800ca46:	4605      	mov	r5, r0
 800ca48:	f7f3 fd94 	bl	8000574 <__aeabi_i2d>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	460b      	mov	r3, r1
 800ca50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca54:	f7f3 fc40 	bl	80002d8 <__aeabi_dsub>
 800ca58:	3530      	adds	r5, #48	@ 0x30
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca62:	f806 5b01 	strb.w	r5, [r6], #1
 800ca66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ca6a:	f7f4 f85f 	bl	8000b2c <__aeabi_dcmplt>
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	d171      	bne.n	800cb56 <_dtoa_r+0x65e>
 800ca72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca76:	4911      	ldr	r1, [pc, #68]	@ (800cabc <_dtoa_r+0x5c4>)
 800ca78:	2000      	movs	r0, #0
 800ca7a:	f7f3 fc2d 	bl	80002d8 <__aeabi_dsub>
 800ca7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ca82:	f7f4 f853 	bl	8000b2c <__aeabi_dcmplt>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	f040 8095 	bne.w	800cbb6 <_dtoa_r+0x6be>
 800ca8c:	42a6      	cmp	r6, r4
 800ca8e:	f43f af50 	beq.w	800c932 <_dtoa_r+0x43a>
 800ca92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ca96:	4b0a      	ldr	r3, [pc, #40]	@ (800cac0 <_dtoa_r+0x5c8>)
 800ca98:	2200      	movs	r2, #0
 800ca9a:	f7f3 fdd5 	bl	8000648 <__aeabi_dmul>
 800ca9e:	4b08      	ldr	r3, [pc, #32]	@ (800cac0 <_dtoa_r+0x5c8>)
 800caa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800caa4:	2200      	movs	r2, #0
 800caa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caaa:	f7f3 fdcd 	bl	8000648 <__aeabi_dmul>
 800caae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cab2:	e7c4      	b.n	800ca3e <_dtoa_r+0x546>
 800cab4:	0800f9d0 	.word	0x0800f9d0
 800cab8:	0800f9a8 	.word	0x0800f9a8
 800cabc:	3ff00000 	.word	0x3ff00000
 800cac0:	40240000 	.word	0x40240000
 800cac4:	401c0000 	.word	0x401c0000
 800cac8:	40140000 	.word	0x40140000
 800cacc:	3fe00000 	.word	0x3fe00000
 800cad0:	4631      	mov	r1, r6
 800cad2:	4628      	mov	r0, r5
 800cad4:	f7f3 fdb8 	bl	8000648 <__aeabi_dmul>
 800cad8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cadc:	9415      	str	r4, [sp, #84]	@ 0x54
 800cade:	4656      	mov	r6, sl
 800cae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cae4:	f7f4 f860 	bl	8000ba8 <__aeabi_d2iz>
 800cae8:	4605      	mov	r5, r0
 800caea:	f7f3 fd43 	bl	8000574 <__aeabi_i2d>
 800caee:	4602      	mov	r2, r0
 800caf0:	460b      	mov	r3, r1
 800caf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caf6:	f7f3 fbef 	bl	80002d8 <__aeabi_dsub>
 800cafa:	3530      	adds	r5, #48	@ 0x30
 800cafc:	f806 5b01 	strb.w	r5, [r6], #1
 800cb00:	4602      	mov	r2, r0
 800cb02:	460b      	mov	r3, r1
 800cb04:	42a6      	cmp	r6, r4
 800cb06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb0a:	f04f 0200 	mov.w	r2, #0
 800cb0e:	d124      	bne.n	800cb5a <_dtoa_r+0x662>
 800cb10:	4bac      	ldr	r3, [pc, #688]	@ (800cdc4 <_dtoa_r+0x8cc>)
 800cb12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cb16:	f7f3 fbe1 	bl	80002dc <__adddf3>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb22:	f7f4 f821 	bl	8000b68 <__aeabi_dcmpgt>
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d145      	bne.n	800cbb6 <_dtoa_r+0x6be>
 800cb2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cb2e:	49a5      	ldr	r1, [pc, #660]	@ (800cdc4 <_dtoa_r+0x8cc>)
 800cb30:	2000      	movs	r0, #0
 800cb32:	f7f3 fbd1 	bl	80002d8 <__aeabi_dsub>
 800cb36:	4602      	mov	r2, r0
 800cb38:	460b      	mov	r3, r1
 800cb3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb3e:	f7f3 fff5 	bl	8000b2c <__aeabi_dcmplt>
 800cb42:	2800      	cmp	r0, #0
 800cb44:	f43f aef5 	beq.w	800c932 <_dtoa_r+0x43a>
 800cb48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cb4a:	1e73      	subs	r3, r6, #1
 800cb4c:	9315      	str	r3, [sp, #84]	@ 0x54
 800cb4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cb52:	2b30      	cmp	r3, #48	@ 0x30
 800cb54:	d0f8      	beq.n	800cb48 <_dtoa_r+0x650>
 800cb56:	9f04      	ldr	r7, [sp, #16]
 800cb58:	e73e      	b.n	800c9d8 <_dtoa_r+0x4e0>
 800cb5a:	4b9b      	ldr	r3, [pc, #620]	@ (800cdc8 <_dtoa_r+0x8d0>)
 800cb5c:	f7f3 fd74 	bl	8000648 <__aeabi_dmul>
 800cb60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb64:	e7bc      	b.n	800cae0 <_dtoa_r+0x5e8>
 800cb66:	d10c      	bne.n	800cb82 <_dtoa_r+0x68a>
 800cb68:	4b98      	ldr	r3, [pc, #608]	@ (800cdcc <_dtoa_r+0x8d4>)
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb70:	f7f3 fd6a 	bl	8000648 <__aeabi_dmul>
 800cb74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb78:	f7f3 ffec 	bl	8000b54 <__aeabi_dcmpge>
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	f000 8157 	beq.w	800ce30 <_dtoa_r+0x938>
 800cb82:	2400      	movs	r4, #0
 800cb84:	4625      	mov	r5, r4
 800cb86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb88:	43db      	mvns	r3, r3
 800cb8a:	9304      	str	r3, [sp, #16]
 800cb8c:	4656      	mov	r6, sl
 800cb8e:	2700      	movs	r7, #0
 800cb90:	4621      	mov	r1, r4
 800cb92:	4658      	mov	r0, fp
 800cb94:	f000 fafe 	bl	800d194 <_Bfree>
 800cb98:	2d00      	cmp	r5, #0
 800cb9a:	d0dc      	beq.n	800cb56 <_dtoa_r+0x65e>
 800cb9c:	b12f      	cbz	r7, 800cbaa <_dtoa_r+0x6b2>
 800cb9e:	42af      	cmp	r7, r5
 800cba0:	d003      	beq.n	800cbaa <_dtoa_r+0x6b2>
 800cba2:	4639      	mov	r1, r7
 800cba4:	4658      	mov	r0, fp
 800cba6:	f000 faf5 	bl	800d194 <_Bfree>
 800cbaa:	4629      	mov	r1, r5
 800cbac:	4658      	mov	r0, fp
 800cbae:	f000 faf1 	bl	800d194 <_Bfree>
 800cbb2:	e7d0      	b.n	800cb56 <_dtoa_r+0x65e>
 800cbb4:	9704      	str	r7, [sp, #16]
 800cbb6:	4633      	mov	r3, r6
 800cbb8:	461e      	mov	r6, r3
 800cbba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbbe:	2a39      	cmp	r2, #57	@ 0x39
 800cbc0:	d107      	bne.n	800cbd2 <_dtoa_r+0x6da>
 800cbc2:	459a      	cmp	sl, r3
 800cbc4:	d1f8      	bne.n	800cbb8 <_dtoa_r+0x6c0>
 800cbc6:	9a04      	ldr	r2, [sp, #16]
 800cbc8:	3201      	adds	r2, #1
 800cbca:	9204      	str	r2, [sp, #16]
 800cbcc:	2230      	movs	r2, #48	@ 0x30
 800cbce:	f88a 2000 	strb.w	r2, [sl]
 800cbd2:	781a      	ldrb	r2, [r3, #0]
 800cbd4:	3201      	adds	r2, #1
 800cbd6:	701a      	strb	r2, [r3, #0]
 800cbd8:	e7bd      	b.n	800cb56 <_dtoa_r+0x65e>
 800cbda:	4b7b      	ldr	r3, [pc, #492]	@ (800cdc8 <_dtoa_r+0x8d0>)
 800cbdc:	2200      	movs	r2, #0
 800cbde:	f7f3 fd33 	bl	8000648 <__aeabi_dmul>
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	460d      	mov	r5, r1
 800cbea:	f7f3 ff95 	bl	8000b18 <__aeabi_dcmpeq>
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	f43f aebb 	beq.w	800c96a <_dtoa_r+0x472>
 800cbf4:	e6f0      	b.n	800c9d8 <_dtoa_r+0x4e0>
 800cbf6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cbf8:	2a00      	cmp	r2, #0
 800cbfa:	f000 80db 	beq.w	800cdb4 <_dtoa_r+0x8bc>
 800cbfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc00:	2a01      	cmp	r2, #1
 800cc02:	f300 80bf 	bgt.w	800cd84 <_dtoa_r+0x88c>
 800cc06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cc08:	2a00      	cmp	r2, #0
 800cc0a:	f000 80b7 	beq.w	800cd7c <_dtoa_r+0x884>
 800cc0e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cc12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cc14:	4646      	mov	r6, r8
 800cc16:	9a08      	ldr	r2, [sp, #32]
 800cc18:	2101      	movs	r1, #1
 800cc1a:	441a      	add	r2, r3
 800cc1c:	4658      	mov	r0, fp
 800cc1e:	4498      	add	r8, r3
 800cc20:	9208      	str	r2, [sp, #32]
 800cc22:	f000 fbb5 	bl	800d390 <__i2b>
 800cc26:	4605      	mov	r5, r0
 800cc28:	b15e      	cbz	r6, 800cc42 <_dtoa_r+0x74a>
 800cc2a:	9b08      	ldr	r3, [sp, #32]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	dd08      	ble.n	800cc42 <_dtoa_r+0x74a>
 800cc30:	42b3      	cmp	r3, r6
 800cc32:	9a08      	ldr	r2, [sp, #32]
 800cc34:	bfa8      	it	ge
 800cc36:	4633      	movge	r3, r6
 800cc38:	eba8 0803 	sub.w	r8, r8, r3
 800cc3c:	1af6      	subs	r6, r6, r3
 800cc3e:	1ad3      	subs	r3, r2, r3
 800cc40:	9308      	str	r3, [sp, #32]
 800cc42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc44:	b1f3      	cbz	r3, 800cc84 <_dtoa_r+0x78c>
 800cc46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	f000 80b7 	beq.w	800cdbc <_dtoa_r+0x8c4>
 800cc4e:	b18c      	cbz	r4, 800cc74 <_dtoa_r+0x77c>
 800cc50:	4629      	mov	r1, r5
 800cc52:	4622      	mov	r2, r4
 800cc54:	4658      	mov	r0, fp
 800cc56:	f000 fc5b 	bl	800d510 <__pow5mult>
 800cc5a:	464a      	mov	r2, r9
 800cc5c:	4601      	mov	r1, r0
 800cc5e:	4605      	mov	r5, r0
 800cc60:	4658      	mov	r0, fp
 800cc62:	f000 fbab 	bl	800d3bc <__multiply>
 800cc66:	4649      	mov	r1, r9
 800cc68:	9004      	str	r0, [sp, #16]
 800cc6a:	4658      	mov	r0, fp
 800cc6c:	f000 fa92 	bl	800d194 <_Bfree>
 800cc70:	9b04      	ldr	r3, [sp, #16]
 800cc72:	4699      	mov	r9, r3
 800cc74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc76:	1b1a      	subs	r2, r3, r4
 800cc78:	d004      	beq.n	800cc84 <_dtoa_r+0x78c>
 800cc7a:	4649      	mov	r1, r9
 800cc7c:	4658      	mov	r0, fp
 800cc7e:	f000 fc47 	bl	800d510 <__pow5mult>
 800cc82:	4681      	mov	r9, r0
 800cc84:	2101      	movs	r1, #1
 800cc86:	4658      	mov	r0, fp
 800cc88:	f000 fb82 	bl	800d390 <__i2b>
 800cc8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc8e:	4604      	mov	r4, r0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	f000 81cf 	beq.w	800d034 <_dtoa_r+0xb3c>
 800cc96:	461a      	mov	r2, r3
 800cc98:	4601      	mov	r1, r0
 800cc9a:	4658      	mov	r0, fp
 800cc9c:	f000 fc38 	bl	800d510 <__pow5mult>
 800cca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	4604      	mov	r4, r0
 800cca6:	f300 8095 	bgt.w	800cdd4 <_dtoa_r+0x8dc>
 800ccaa:	9b02      	ldr	r3, [sp, #8]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f040 8087 	bne.w	800cdc0 <_dtoa_r+0x8c8>
 800ccb2:	9b03      	ldr	r3, [sp, #12]
 800ccb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f040 8089 	bne.w	800cdd0 <_dtoa_r+0x8d8>
 800ccbe:	9b03      	ldr	r3, [sp, #12]
 800ccc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ccc4:	0d1b      	lsrs	r3, r3, #20
 800ccc6:	051b      	lsls	r3, r3, #20
 800ccc8:	b12b      	cbz	r3, 800ccd6 <_dtoa_r+0x7de>
 800ccca:	9b08      	ldr	r3, [sp, #32]
 800cccc:	3301      	adds	r3, #1
 800ccce:	9308      	str	r3, [sp, #32]
 800ccd0:	f108 0801 	add.w	r8, r8, #1
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	f000 81b0 	beq.w	800d040 <_dtoa_r+0xb48>
 800cce0:	6923      	ldr	r3, [r4, #16]
 800cce2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cce6:	6918      	ldr	r0, [r3, #16]
 800cce8:	f000 fb06 	bl	800d2f8 <__hi0bits>
 800ccec:	f1c0 0020 	rsb	r0, r0, #32
 800ccf0:	9b08      	ldr	r3, [sp, #32]
 800ccf2:	4418      	add	r0, r3
 800ccf4:	f010 001f 	ands.w	r0, r0, #31
 800ccf8:	d077      	beq.n	800cdea <_dtoa_r+0x8f2>
 800ccfa:	f1c0 0320 	rsb	r3, r0, #32
 800ccfe:	2b04      	cmp	r3, #4
 800cd00:	dd6b      	ble.n	800cdda <_dtoa_r+0x8e2>
 800cd02:	9b08      	ldr	r3, [sp, #32]
 800cd04:	f1c0 001c 	rsb	r0, r0, #28
 800cd08:	4403      	add	r3, r0
 800cd0a:	4480      	add	r8, r0
 800cd0c:	4406      	add	r6, r0
 800cd0e:	9308      	str	r3, [sp, #32]
 800cd10:	f1b8 0f00 	cmp.w	r8, #0
 800cd14:	dd05      	ble.n	800cd22 <_dtoa_r+0x82a>
 800cd16:	4649      	mov	r1, r9
 800cd18:	4642      	mov	r2, r8
 800cd1a:	4658      	mov	r0, fp
 800cd1c:	f000 fc52 	bl	800d5c4 <__lshift>
 800cd20:	4681      	mov	r9, r0
 800cd22:	9b08      	ldr	r3, [sp, #32]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	dd05      	ble.n	800cd34 <_dtoa_r+0x83c>
 800cd28:	4621      	mov	r1, r4
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	4658      	mov	r0, fp
 800cd2e:	f000 fc49 	bl	800d5c4 <__lshift>
 800cd32:	4604      	mov	r4, r0
 800cd34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d059      	beq.n	800cdee <_dtoa_r+0x8f6>
 800cd3a:	4621      	mov	r1, r4
 800cd3c:	4648      	mov	r0, r9
 800cd3e:	f000 fcad 	bl	800d69c <__mcmp>
 800cd42:	2800      	cmp	r0, #0
 800cd44:	da53      	bge.n	800cdee <_dtoa_r+0x8f6>
 800cd46:	1e7b      	subs	r3, r7, #1
 800cd48:	9304      	str	r3, [sp, #16]
 800cd4a:	4649      	mov	r1, r9
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	220a      	movs	r2, #10
 800cd50:	4658      	mov	r0, fp
 800cd52:	f000 fa41 	bl	800d1d8 <__multadd>
 800cd56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd58:	4681      	mov	r9, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	f000 8172 	beq.w	800d044 <_dtoa_r+0xb4c>
 800cd60:	2300      	movs	r3, #0
 800cd62:	4629      	mov	r1, r5
 800cd64:	220a      	movs	r2, #10
 800cd66:	4658      	mov	r0, fp
 800cd68:	f000 fa36 	bl	800d1d8 <__multadd>
 800cd6c:	9b00      	ldr	r3, [sp, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	4605      	mov	r5, r0
 800cd72:	dc67      	bgt.n	800ce44 <_dtoa_r+0x94c>
 800cd74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	dc41      	bgt.n	800cdfe <_dtoa_r+0x906>
 800cd7a:	e063      	b.n	800ce44 <_dtoa_r+0x94c>
 800cd7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cd7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cd82:	e746      	b.n	800cc12 <_dtoa_r+0x71a>
 800cd84:	9b07      	ldr	r3, [sp, #28]
 800cd86:	1e5c      	subs	r4, r3, #1
 800cd88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd8a:	42a3      	cmp	r3, r4
 800cd8c:	bfbf      	itttt	lt
 800cd8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cd90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cd92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cd94:	1ae3      	sublt	r3, r4, r3
 800cd96:	bfb4      	ite	lt
 800cd98:	18d2      	addlt	r2, r2, r3
 800cd9a:	1b1c      	subge	r4, r3, r4
 800cd9c:	9b07      	ldr	r3, [sp, #28]
 800cd9e:	bfbc      	itt	lt
 800cda0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800cda2:	2400      	movlt	r4, #0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	bfb5      	itete	lt
 800cda8:	eba8 0603 	sublt.w	r6, r8, r3
 800cdac:	9b07      	ldrge	r3, [sp, #28]
 800cdae:	2300      	movlt	r3, #0
 800cdb0:	4646      	movge	r6, r8
 800cdb2:	e730      	b.n	800cc16 <_dtoa_r+0x71e>
 800cdb4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cdb6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cdb8:	4646      	mov	r6, r8
 800cdba:	e735      	b.n	800cc28 <_dtoa_r+0x730>
 800cdbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cdbe:	e75c      	b.n	800cc7a <_dtoa_r+0x782>
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	e788      	b.n	800ccd6 <_dtoa_r+0x7de>
 800cdc4:	3fe00000 	.word	0x3fe00000
 800cdc8:	40240000 	.word	0x40240000
 800cdcc:	40140000 	.word	0x40140000
 800cdd0:	9b02      	ldr	r3, [sp, #8]
 800cdd2:	e780      	b.n	800ccd6 <_dtoa_r+0x7de>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdd8:	e782      	b.n	800cce0 <_dtoa_r+0x7e8>
 800cdda:	d099      	beq.n	800cd10 <_dtoa_r+0x818>
 800cddc:	9a08      	ldr	r2, [sp, #32]
 800cdde:	331c      	adds	r3, #28
 800cde0:	441a      	add	r2, r3
 800cde2:	4498      	add	r8, r3
 800cde4:	441e      	add	r6, r3
 800cde6:	9208      	str	r2, [sp, #32]
 800cde8:	e792      	b.n	800cd10 <_dtoa_r+0x818>
 800cdea:	4603      	mov	r3, r0
 800cdec:	e7f6      	b.n	800cddc <_dtoa_r+0x8e4>
 800cdee:	9b07      	ldr	r3, [sp, #28]
 800cdf0:	9704      	str	r7, [sp, #16]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	dc20      	bgt.n	800ce38 <_dtoa_r+0x940>
 800cdf6:	9300      	str	r3, [sp, #0]
 800cdf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	dd1e      	ble.n	800ce3c <_dtoa_r+0x944>
 800cdfe:	9b00      	ldr	r3, [sp, #0]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f47f aec0 	bne.w	800cb86 <_dtoa_r+0x68e>
 800ce06:	4621      	mov	r1, r4
 800ce08:	2205      	movs	r2, #5
 800ce0a:	4658      	mov	r0, fp
 800ce0c:	f000 f9e4 	bl	800d1d8 <__multadd>
 800ce10:	4601      	mov	r1, r0
 800ce12:	4604      	mov	r4, r0
 800ce14:	4648      	mov	r0, r9
 800ce16:	f000 fc41 	bl	800d69c <__mcmp>
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	f77f aeb3 	ble.w	800cb86 <_dtoa_r+0x68e>
 800ce20:	4656      	mov	r6, sl
 800ce22:	2331      	movs	r3, #49	@ 0x31
 800ce24:	f806 3b01 	strb.w	r3, [r6], #1
 800ce28:	9b04      	ldr	r3, [sp, #16]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	9304      	str	r3, [sp, #16]
 800ce2e:	e6ae      	b.n	800cb8e <_dtoa_r+0x696>
 800ce30:	9c07      	ldr	r4, [sp, #28]
 800ce32:	9704      	str	r7, [sp, #16]
 800ce34:	4625      	mov	r5, r4
 800ce36:	e7f3      	b.n	800ce20 <_dtoa_r+0x928>
 800ce38:	9b07      	ldr	r3, [sp, #28]
 800ce3a:	9300      	str	r3, [sp, #0]
 800ce3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	f000 8104 	beq.w	800d04c <_dtoa_r+0xb54>
 800ce44:	2e00      	cmp	r6, #0
 800ce46:	dd05      	ble.n	800ce54 <_dtoa_r+0x95c>
 800ce48:	4629      	mov	r1, r5
 800ce4a:	4632      	mov	r2, r6
 800ce4c:	4658      	mov	r0, fp
 800ce4e:	f000 fbb9 	bl	800d5c4 <__lshift>
 800ce52:	4605      	mov	r5, r0
 800ce54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d05a      	beq.n	800cf10 <_dtoa_r+0xa18>
 800ce5a:	6869      	ldr	r1, [r5, #4]
 800ce5c:	4658      	mov	r0, fp
 800ce5e:	f000 f959 	bl	800d114 <_Balloc>
 800ce62:	4606      	mov	r6, r0
 800ce64:	b928      	cbnz	r0, 800ce72 <_dtoa_r+0x97a>
 800ce66:	4b84      	ldr	r3, [pc, #528]	@ (800d078 <_dtoa_r+0xb80>)
 800ce68:	4602      	mov	r2, r0
 800ce6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ce6e:	f7ff bb5a 	b.w	800c526 <_dtoa_r+0x2e>
 800ce72:	692a      	ldr	r2, [r5, #16]
 800ce74:	3202      	adds	r2, #2
 800ce76:	0092      	lsls	r2, r2, #2
 800ce78:	f105 010c 	add.w	r1, r5, #12
 800ce7c:	300c      	adds	r0, #12
 800ce7e:	f7ff fa9e 	bl	800c3be <memcpy>
 800ce82:	2201      	movs	r2, #1
 800ce84:	4631      	mov	r1, r6
 800ce86:	4658      	mov	r0, fp
 800ce88:	f000 fb9c 	bl	800d5c4 <__lshift>
 800ce8c:	f10a 0301 	add.w	r3, sl, #1
 800ce90:	9307      	str	r3, [sp, #28]
 800ce92:	9b00      	ldr	r3, [sp, #0]
 800ce94:	4453      	add	r3, sl
 800ce96:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce98:	9b02      	ldr	r3, [sp, #8]
 800ce9a:	f003 0301 	and.w	r3, r3, #1
 800ce9e:	462f      	mov	r7, r5
 800cea0:	930a      	str	r3, [sp, #40]	@ 0x28
 800cea2:	4605      	mov	r5, r0
 800cea4:	9b07      	ldr	r3, [sp, #28]
 800cea6:	4621      	mov	r1, r4
 800cea8:	3b01      	subs	r3, #1
 800ceaa:	4648      	mov	r0, r9
 800ceac:	9300      	str	r3, [sp, #0]
 800ceae:	f7ff fa9b 	bl	800c3e8 <quorem>
 800ceb2:	4639      	mov	r1, r7
 800ceb4:	9002      	str	r0, [sp, #8]
 800ceb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ceba:	4648      	mov	r0, r9
 800cebc:	f000 fbee 	bl	800d69c <__mcmp>
 800cec0:	462a      	mov	r2, r5
 800cec2:	9008      	str	r0, [sp, #32]
 800cec4:	4621      	mov	r1, r4
 800cec6:	4658      	mov	r0, fp
 800cec8:	f000 fc04 	bl	800d6d4 <__mdiff>
 800cecc:	68c2      	ldr	r2, [r0, #12]
 800cece:	4606      	mov	r6, r0
 800ced0:	bb02      	cbnz	r2, 800cf14 <_dtoa_r+0xa1c>
 800ced2:	4601      	mov	r1, r0
 800ced4:	4648      	mov	r0, r9
 800ced6:	f000 fbe1 	bl	800d69c <__mcmp>
 800ceda:	4602      	mov	r2, r0
 800cedc:	4631      	mov	r1, r6
 800cede:	4658      	mov	r0, fp
 800cee0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cee2:	f000 f957 	bl	800d194 <_Bfree>
 800cee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cee8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ceea:	9e07      	ldr	r6, [sp, #28]
 800ceec:	ea43 0102 	orr.w	r1, r3, r2
 800cef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cef2:	4319      	orrs	r1, r3
 800cef4:	d110      	bne.n	800cf18 <_dtoa_r+0xa20>
 800cef6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cefa:	d029      	beq.n	800cf50 <_dtoa_r+0xa58>
 800cefc:	9b08      	ldr	r3, [sp, #32]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	dd02      	ble.n	800cf08 <_dtoa_r+0xa10>
 800cf02:	9b02      	ldr	r3, [sp, #8]
 800cf04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cf08:	9b00      	ldr	r3, [sp, #0]
 800cf0a:	f883 8000 	strb.w	r8, [r3]
 800cf0e:	e63f      	b.n	800cb90 <_dtoa_r+0x698>
 800cf10:	4628      	mov	r0, r5
 800cf12:	e7bb      	b.n	800ce8c <_dtoa_r+0x994>
 800cf14:	2201      	movs	r2, #1
 800cf16:	e7e1      	b.n	800cedc <_dtoa_r+0x9e4>
 800cf18:	9b08      	ldr	r3, [sp, #32]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	db04      	blt.n	800cf28 <_dtoa_r+0xa30>
 800cf1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf20:	430b      	orrs	r3, r1
 800cf22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cf24:	430b      	orrs	r3, r1
 800cf26:	d120      	bne.n	800cf6a <_dtoa_r+0xa72>
 800cf28:	2a00      	cmp	r2, #0
 800cf2a:	dded      	ble.n	800cf08 <_dtoa_r+0xa10>
 800cf2c:	4649      	mov	r1, r9
 800cf2e:	2201      	movs	r2, #1
 800cf30:	4658      	mov	r0, fp
 800cf32:	f000 fb47 	bl	800d5c4 <__lshift>
 800cf36:	4621      	mov	r1, r4
 800cf38:	4681      	mov	r9, r0
 800cf3a:	f000 fbaf 	bl	800d69c <__mcmp>
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	dc03      	bgt.n	800cf4a <_dtoa_r+0xa52>
 800cf42:	d1e1      	bne.n	800cf08 <_dtoa_r+0xa10>
 800cf44:	f018 0f01 	tst.w	r8, #1
 800cf48:	d0de      	beq.n	800cf08 <_dtoa_r+0xa10>
 800cf4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cf4e:	d1d8      	bne.n	800cf02 <_dtoa_r+0xa0a>
 800cf50:	9a00      	ldr	r2, [sp, #0]
 800cf52:	2339      	movs	r3, #57	@ 0x39
 800cf54:	7013      	strb	r3, [r2, #0]
 800cf56:	4633      	mov	r3, r6
 800cf58:	461e      	mov	r6, r3
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cf60:	2a39      	cmp	r2, #57	@ 0x39
 800cf62:	d052      	beq.n	800d00a <_dtoa_r+0xb12>
 800cf64:	3201      	adds	r2, #1
 800cf66:	701a      	strb	r2, [r3, #0]
 800cf68:	e612      	b.n	800cb90 <_dtoa_r+0x698>
 800cf6a:	2a00      	cmp	r2, #0
 800cf6c:	dd07      	ble.n	800cf7e <_dtoa_r+0xa86>
 800cf6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cf72:	d0ed      	beq.n	800cf50 <_dtoa_r+0xa58>
 800cf74:	9a00      	ldr	r2, [sp, #0]
 800cf76:	f108 0301 	add.w	r3, r8, #1
 800cf7a:	7013      	strb	r3, [r2, #0]
 800cf7c:	e608      	b.n	800cb90 <_dtoa_r+0x698>
 800cf7e:	9b07      	ldr	r3, [sp, #28]
 800cf80:	9a07      	ldr	r2, [sp, #28]
 800cf82:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cf86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d028      	beq.n	800cfde <_dtoa_r+0xae6>
 800cf8c:	4649      	mov	r1, r9
 800cf8e:	2300      	movs	r3, #0
 800cf90:	220a      	movs	r2, #10
 800cf92:	4658      	mov	r0, fp
 800cf94:	f000 f920 	bl	800d1d8 <__multadd>
 800cf98:	42af      	cmp	r7, r5
 800cf9a:	4681      	mov	r9, r0
 800cf9c:	f04f 0300 	mov.w	r3, #0
 800cfa0:	f04f 020a 	mov.w	r2, #10
 800cfa4:	4639      	mov	r1, r7
 800cfa6:	4658      	mov	r0, fp
 800cfa8:	d107      	bne.n	800cfba <_dtoa_r+0xac2>
 800cfaa:	f000 f915 	bl	800d1d8 <__multadd>
 800cfae:	4607      	mov	r7, r0
 800cfb0:	4605      	mov	r5, r0
 800cfb2:	9b07      	ldr	r3, [sp, #28]
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	9307      	str	r3, [sp, #28]
 800cfb8:	e774      	b.n	800cea4 <_dtoa_r+0x9ac>
 800cfba:	f000 f90d 	bl	800d1d8 <__multadd>
 800cfbe:	4629      	mov	r1, r5
 800cfc0:	4607      	mov	r7, r0
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	220a      	movs	r2, #10
 800cfc6:	4658      	mov	r0, fp
 800cfc8:	f000 f906 	bl	800d1d8 <__multadd>
 800cfcc:	4605      	mov	r5, r0
 800cfce:	e7f0      	b.n	800cfb2 <_dtoa_r+0xaba>
 800cfd0:	9b00      	ldr	r3, [sp, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	bfcc      	ite	gt
 800cfd6:	461e      	movgt	r6, r3
 800cfd8:	2601      	movle	r6, #1
 800cfda:	4456      	add	r6, sl
 800cfdc:	2700      	movs	r7, #0
 800cfde:	4649      	mov	r1, r9
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	4658      	mov	r0, fp
 800cfe4:	f000 faee 	bl	800d5c4 <__lshift>
 800cfe8:	4621      	mov	r1, r4
 800cfea:	4681      	mov	r9, r0
 800cfec:	f000 fb56 	bl	800d69c <__mcmp>
 800cff0:	2800      	cmp	r0, #0
 800cff2:	dcb0      	bgt.n	800cf56 <_dtoa_r+0xa5e>
 800cff4:	d102      	bne.n	800cffc <_dtoa_r+0xb04>
 800cff6:	f018 0f01 	tst.w	r8, #1
 800cffa:	d1ac      	bne.n	800cf56 <_dtoa_r+0xa5e>
 800cffc:	4633      	mov	r3, r6
 800cffe:	461e      	mov	r6, r3
 800d000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d004:	2a30      	cmp	r2, #48	@ 0x30
 800d006:	d0fa      	beq.n	800cffe <_dtoa_r+0xb06>
 800d008:	e5c2      	b.n	800cb90 <_dtoa_r+0x698>
 800d00a:	459a      	cmp	sl, r3
 800d00c:	d1a4      	bne.n	800cf58 <_dtoa_r+0xa60>
 800d00e:	9b04      	ldr	r3, [sp, #16]
 800d010:	3301      	adds	r3, #1
 800d012:	9304      	str	r3, [sp, #16]
 800d014:	2331      	movs	r3, #49	@ 0x31
 800d016:	f88a 3000 	strb.w	r3, [sl]
 800d01a:	e5b9      	b.n	800cb90 <_dtoa_r+0x698>
 800d01c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d01e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d07c <_dtoa_r+0xb84>
 800d022:	b11b      	cbz	r3, 800d02c <_dtoa_r+0xb34>
 800d024:	f10a 0308 	add.w	r3, sl, #8
 800d028:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d02a:	6013      	str	r3, [r2, #0]
 800d02c:	4650      	mov	r0, sl
 800d02e:	b019      	add	sp, #100	@ 0x64
 800d030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d036:	2b01      	cmp	r3, #1
 800d038:	f77f ae37 	ble.w	800ccaa <_dtoa_r+0x7b2>
 800d03c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d03e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d040:	2001      	movs	r0, #1
 800d042:	e655      	b.n	800ccf0 <_dtoa_r+0x7f8>
 800d044:	9b00      	ldr	r3, [sp, #0]
 800d046:	2b00      	cmp	r3, #0
 800d048:	f77f aed6 	ble.w	800cdf8 <_dtoa_r+0x900>
 800d04c:	4656      	mov	r6, sl
 800d04e:	4621      	mov	r1, r4
 800d050:	4648      	mov	r0, r9
 800d052:	f7ff f9c9 	bl	800c3e8 <quorem>
 800d056:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d05a:	f806 8b01 	strb.w	r8, [r6], #1
 800d05e:	9b00      	ldr	r3, [sp, #0]
 800d060:	eba6 020a 	sub.w	r2, r6, sl
 800d064:	4293      	cmp	r3, r2
 800d066:	ddb3      	ble.n	800cfd0 <_dtoa_r+0xad8>
 800d068:	4649      	mov	r1, r9
 800d06a:	2300      	movs	r3, #0
 800d06c:	220a      	movs	r2, #10
 800d06e:	4658      	mov	r0, fp
 800d070:	f000 f8b2 	bl	800d1d8 <__multadd>
 800d074:	4681      	mov	r9, r0
 800d076:	e7ea      	b.n	800d04e <_dtoa_r+0xb56>
 800d078:	0800f92d 	.word	0x0800f92d
 800d07c:	0800f8b1 	.word	0x0800f8b1

0800d080 <_free_r>:
 800d080:	b538      	push	{r3, r4, r5, lr}
 800d082:	4605      	mov	r5, r0
 800d084:	2900      	cmp	r1, #0
 800d086:	d041      	beq.n	800d10c <_free_r+0x8c>
 800d088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d08c:	1f0c      	subs	r4, r1, #4
 800d08e:	2b00      	cmp	r3, #0
 800d090:	bfb8      	it	lt
 800d092:	18e4      	addlt	r4, r4, r3
 800d094:	f7fe f88e 	bl	800b1b4 <__malloc_lock>
 800d098:	4a1d      	ldr	r2, [pc, #116]	@ (800d110 <_free_r+0x90>)
 800d09a:	6813      	ldr	r3, [r2, #0]
 800d09c:	b933      	cbnz	r3, 800d0ac <_free_r+0x2c>
 800d09e:	6063      	str	r3, [r4, #4]
 800d0a0:	6014      	str	r4, [r2, #0]
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0a8:	f7fe b88a 	b.w	800b1c0 <__malloc_unlock>
 800d0ac:	42a3      	cmp	r3, r4
 800d0ae:	d908      	bls.n	800d0c2 <_free_r+0x42>
 800d0b0:	6820      	ldr	r0, [r4, #0]
 800d0b2:	1821      	adds	r1, r4, r0
 800d0b4:	428b      	cmp	r3, r1
 800d0b6:	bf01      	itttt	eq
 800d0b8:	6819      	ldreq	r1, [r3, #0]
 800d0ba:	685b      	ldreq	r3, [r3, #4]
 800d0bc:	1809      	addeq	r1, r1, r0
 800d0be:	6021      	streq	r1, [r4, #0]
 800d0c0:	e7ed      	b.n	800d09e <_free_r+0x1e>
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	b10b      	cbz	r3, 800d0cc <_free_r+0x4c>
 800d0c8:	42a3      	cmp	r3, r4
 800d0ca:	d9fa      	bls.n	800d0c2 <_free_r+0x42>
 800d0cc:	6811      	ldr	r1, [r2, #0]
 800d0ce:	1850      	adds	r0, r2, r1
 800d0d0:	42a0      	cmp	r0, r4
 800d0d2:	d10b      	bne.n	800d0ec <_free_r+0x6c>
 800d0d4:	6820      	ldr	r0, [r4, #0]
 800d0d6:	4401      	add	r1, r0
 800d0d8:	1850      	adds	r0, r2, r1
 800d0da:	4283      	cmp	r3, r0
 800d0dc:	6011      	str	r1, [r2, #0]
 800d0de:	d1e0      	bne.n	800d0a2 <_free_r+0x22>
 800d0e0:	6818      	ldr	r0, [r3, #0]
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	6053      	str	r3, [r2, #4]
 800d0e6:	4408      	add	r0, r1
 800d0e8:	6010      	str	r0, [r2, #0]
 800d0ea:	e7da      	b.n	800d0a2 <_free_r+0x22>
 800d0ec:	d902      	bls.n	800d0f4 <_free_r+0x74>
 800d0ee:	230c      	movs	r3, #12
 800d0f0:	602b      	str	r3, [r5, #0]
 800d0f2:	e7d6      	b.n	800d0a2 <_free_r+0x22>
 800d0f4:	6820      	ldr	r0, [r4, #0]
 800d0f6:	1821      	adds	r1, r4, r0
 800d0f8:	428b      	cmp	r3, r1
 800d0fa:	bf04      	itt	eq
 800d0fc:	6819      	ldreq	r1, [r3, #0]
 800d0fe:	685b      	ldreq	r3, [r3, #4]
 800d100:	6063      	str	r3, [r4, #4]
 800d102:	bf04      	itt	eq
 800d104:	1809      	addeq	r1, r1, r0
 800d106:	6021      	streq	r1, [r4, #0]
 800d108:	6054      	str	r4, [r2, #4]
 800d10a:	e7ca      	b.n	800d0a2 <_free_r+0x22>
 800d10c:	bd38      	pop	{r3, r4, r5, pc}
 800d10e:	bf00      	nop
 800d110:	20000674 	.word	0x20000674

0800d114 <_Balloc>:
 800d114:	b570      	push	{r4, r5, r6, lr}
 800d116:	69c6      	ldr	r6, [r0, #28]
 800d118:	4604      	mov	r4, r0
 800d11a:	460d      	mov	r5, r1
 800d11c:	b976      	cbnz	r6, 800d13c <_Balloc+0x28>
 800d11e:	2010      	movs	r0, #16
 800d120:	f7fd ff96 	bl	800b050 <malloc>
 800d124:	4602      	mov	r2, r0
 800d126:	61e0      	str	r0, [r4, #28]
 800d128:	b920      	cbnz	r0, 800d134 <_Balloc+0x20>
 800d12a:	4b18      	ldr	r3, [pc, #96]	@ (800d18c <_Balloc+0x78>)
 800d12c:	4818      	ldr	r0, [pc, #96]	@ (800d190 <_Balloc+0x7c>)
 800d12e:	216b      	movs	r1, #107	@ 0x6b
 800d130:	f001 ff26 	bl	800ef80 <__assert_func>
 800d134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d138:	6006      	str	r6, [r0, #0]
 800d13a:	60c6      	str	r6, [r0, #12]
 800d13c:	69e6      	ldr	r6, [r4, #28]
 800d13e:	68f3      	ldr	r3, [r6, #12]
 800d140:	b183      	cbz	r3, 800d164 <_Balloc+0x50>
 800d142:	69e3      	ldr	r3, [r4, #28]
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d14a:	b9b8      	cbnz	r0, 800d17c <_Balloc+0x68>
 800d14c:	2101      	movs	r1, #1
 800d14e:	fa01 f605 	lsl.w	r6, r1, r5
 800d152:	1d72      	adds	r2, r6, #5
 800d154:	0092      	lsls	r2, r2, #2
 800d156:	4620      	mov	r0, r4
 800d158:	f001 ff30 	bl	800efbc <_calloc_r>
 800d15c:	b160      	cbz	r0, 800d178 <_Balloc+0x64>
 800d15e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d162:	e00e      	b.n	800d182 <_Balloc+0x6e>
 800d164:	2221      	movs	r2, #33	@ 0x21
 800d166:	2104      	movs	r1, #4
 800d168:	4620      	mov	r0, r4
 800d16a:	f001 ff27 	bl	800efbc <_calloc_r>
 800d16e:	69e3      	ldr	r3, [r4, #28]
 800d170:	60f0      	str	r0, [r6, #12]
 800d172:	68db      	ldr	r3, [r3, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d1e4      	bne.n	800d142 <_Balloc+0x2e>
 800d178:	2000      	movs	r0, #0
 800d17a:	bd70      	pop	{r4, r5, r6, pc}
 800d17c:	6802      	ldr	r2, [r0, #0]
 800d17e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d182:	2300      	movs	r3, #0
 800d184:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d188:	e7f7      	b.n	800d17a <_Balloc+0x66>
 800d18a:	bf00      	nop
 800d18c:	0800f8be 	.word	0x0800f8be
 800d190:	0800f93e 	.word	0x0800f93e

0800d194 <_Bfree>:
 800d194:	b570      	push	{r4, r5, r6, lr}
 800d196:	69c6      	ldr	r6, [r0, #28]
 800d198:	4605      	mov	r5, r0
 800d19a:	460c      	mov	r4, r1
 800d19c:	b976      	cbnz	r6, 800d1bc <_Bfree+0x28>
 800d19e:	2010      	movs	r0, #16
 800d1a0:	f7fd ff56 	bl	800b050 <malloc>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	61e8      	str	r0, [r5, #28]
 800d1a8:	b920      	cbnz	r0, 800d1b4 <_Bfree+0x20>
 800d1aa:	4b09      	ldr	r3, [pc, #36]	@ (800d1d0 <_Bfree+0x3c>)
 800d1ac:	4809      	ldr	r0, [pc, #36]	@ (800d1d4 <_Bfree+0x40>)
 800d1ae:	218f      	movs	r1, #143	@ 0x8f
 800d1b0:	f001 fee6 	bl	800ef80 <__assert_func>
 800d1b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1b8:	6006      	str	r6, [r0, #0]
 800d1ba:	60c6      	str	r6, [r0, #12]
 800d1bc:	b13c      	cbz	r4, 800d1ce <_Bfree+0x3a>
 800d1be:	69eb      	ldr	r3, [r5, #28]
 800d1c0:	6862      	ldr	r2, [r4, #4]
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1c8:	6021      	str	r1, [r4, #0]
 800d1ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1ce:	bd70      	pop	{r4, r5, r6, pc}
 800d1d0:	0800f8be 	.word	0x0800f8be
 800d1d4:	0800f93e 	.word	0x0800f93e

0800d1d8 <__multadd>:
 800d1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1dc:	690d      	ldr	r5, [r1, #16]
 800d1de:	4607      	mov	r7, r0
 800d1e0:	460c      	mov	r4, r1
 800d1e2:	461e      	mov	r6, r3
 800d1e4:	f101 0c14 	add.w	ip, r1, #20
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	f8dc 3000 	ldr.w	r3, [ip]
 800d1ee:	b299      	uxth	r1, r3
 800d1f0:	fb02 6101 	mla	r1, r2, r1, r6
 800d1f4:	0c1e      	lsrs	r6, r3, #16
 800d1f6:	0c0b      	lsrs	r3, r1, #16
 800d1f8:	fb02 3306 	mla	r3, r2, r6, r3
 800d1fc:	b289      	uxth	r1, r1
 800d1fe:	3001      	adds	r0, #1
 800d200:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d204:	4285      	cmp	r5, r0
 800d206:	f84c 1b04 	str.w	r1, [ip], #4
 800d20a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d20e:	dcec      	bgt.n	800d1ea <__multadd+0x12>
 800d210:	b30e      	cbz	r6, 800d256 <__multadd+0x7e>
 800d212:	68a3      	ldr	r3, [r4, #8]
 800d214:	42ab      	cmp	r3, r5
 800d216:	dc19      	bgt.n	800d24c <__multadd+0x74>
 800d218:	6861      	ldr	r1, [r4, #4]
 800d21a:	4638      	mov	r0, r7
 800d21c:	3101      	adds	r1, #1
 800d21e:	f7ff ff79 	bl	800d114 <_Balloc>
 800d222:	4680      	mov	r8, r0
 800d224:	b928      	cbnz	r0, 800d232 <__multadd+0x5a>
 800d226:	4602      	mov	r2, r0
 800d228:	4b0c      	ldr	r3, [pc, #48]	@ (800d25c <__multadd+0x84>)
 800d22a:	480d      	ldr	r0, [pc, #52]	@ (800d260 <__multadd+0x88>)
 800d22c:	21ba      	movs	r1, #186	@ 0xba
 800d22e:	f001 fea7 	bl	800ef80 <__assert_func>
 800d232:	6922      	ldr	r2, [r4, #16]
 800d234:	3202      	adds	r2, #2
 800d236:	f104 010c 	add.w	r1, r4, #12
 800d23a:	0092      	lsls	r2, r2, #2
 800d23c:	300c      	adds	r0, #12
 800d23e:	f7ff f8be 	bl	800c3be <memcpy>
 800d242:	4621      	mov	r1, r4
 800d244:	4638      	mov	r0, r7
 800d246:	f7ff ffa5 	bl	800d194 <_Bfree>
 800d24a:	4644      	mov	r4, r8
 800d24c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d250:	3501      	adds	r5, #1
 800d252:	615e      	str	r6, [r3, #20]
 800d254:	6125      	str	r5, [r4, #16]
 800d256:	4620      	mov	r0, r4
 800d258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d25c:	0800f92d 	.word	0x0800f92d
 800d260:	0800f93e 	.word	0x0800f93e

0800d264 <__s2b>:
 800d264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d268:	460c      	mov	r4, r1
 800d26a:	4615      	mov	r5, r2
 800d26c:	461f      	mov	r7, r3
 800d26e:	2209      	movs	r2, #9
 800d270:	3308      	adds	r3, #8
 800d272:	4606      	mov	r6, r0
 800d274:	fb93 f3f2 	sdiv	r3, r3, r2
 800d278:	2100      	movs	r1, #0
 800d27a:	2201      	movs	r2, #1
 800d27c:	429a      	cmp	r2, r3
 800d27e:	db09      	blt.n	800d294 <__s2b+0x30>
 800d280:	4630      	mov	r0, r6
 800d282:	f7ff ff47 	bl	800d114 <_Balloc>
 800d286:	b940      	cbnz	r0, 800d29a <__s2b+0x36>
 800d288:	4602      	mov	r2, r0
 800d28a:	4b19      	ldr	r3, [pc, #100]	@ (800d2f0 <__s2b+0x8c>)
 800d28c:	4819      	ldr	r0, [pc, #100]	@ (800d2f4 <__s2b+0x90>)
 800d28e:	21d3      	movs	r1, #211	@ 0xd3
 800d290:	f001 fe76 	bl	800ef80 <__assert_func>
 800d294:	0052      	lsls	r2, r2, #1
 800d296:	3101      	adds	r1, #1
 800d298:	e7f0      	b.n	800d27c <__s2b+0x18>
 800d29a:	9b08      	ldr	r3, [sp, #32]
 800d29c:	6143      	str	r3, [r0, #20]
 800d29e:	2d09      	cmp	r5, #9
 800d2a0:	f04f 0301 	mov.w	r3, #1
 800d2a4:	6103      	str	r3, [r0, #16]
 800d2a6:	dd16      	ble.n	800d2d6 <__s2b+0x72>
 800d2a8:	f104 0909 	add.w	r9, r4, #9
 800d2ac:	46c8      	mov	r8, r9
 800d2ae:	442c      	add	r4, r5
 800d2b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d2b4:	4601      	mov	r1, r0
 800d2b6:	3b30      	subs	r3, #48	@ 0x30
 800d2b8:	220a      	movs	r2, #10
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	f7ff ff8c 	bl	800d1d8 <__multadd>
 800d2c0:	45a0      	cmp	r8, r4
 800d2c2:	d1f5      	bne.n	800d2b0 <__s2b+0x4c>
 800d2c4:	f1a5 0408 	sub.w	r4, r5, #8
 800d2c8:	444c      	add	r4, r9
 800d2ca:	1b2d      	subs	r5, r5, r4
 800d2cc:	1963      	adds	r3, r4, r5
 800d2ce:	42bb      	cmp	r3, r7
 800d2d0:	db04      	blt.n	800d2dc <__s2b+0x78>
 800d2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2d6:	340a      	adds	r4, #10
 800d2d8:	2509      	movs	r5, #9
 800d2da:	e7f6      	b.n	800d2ca <__s2b+0x66>
 800d2dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d2e0:	4601      	mov	r1, r0
 800d2e2:	3b30      	subs	r3, #48	@ 0x30
 800d2e4:	220a      	movs	r2, #10
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	f7ff ff76 	bl	800d1d8 <__multadd>
 800d2ec:	e7ee      	b.n	800d2cc <__s2b+0x68>
 800d2ee:	bf00      	nop
 800d2f0:	0800f92d 	.word	0x0800f92d
 800d2f4:	0800f93e 	.word	0x0800f93e

0800d2f8 <__hi0bits>:
 800d2f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	bf36      	itet	cc
 800d300:	0403      	lslcc	r3, r0, #16
 800d302:	2000      	movcs	r0, #0
 800d304:	2010      	movcc	r0, #16
 800d306:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d30a:	bf3c      	itt	cc
 800d30c:	021b      	lslcc	r3, r3, #8
 800d30e:	3008      	addcc	r0, #8
 800d310:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d314:	bf3c      	itt	cc
 800d316:	011b      	lslcc	r3, r3, #4
 800d318:	3004      	addcc	r0, #4
 800d31a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d31e:	bf3c      	itt	cc
 800d320:	009b      	lslcc	r3, r3, #2
 800d322:	3002      	addcc	r0, #2
 800d324:	2b00      	cmp	r3, #0
 800d326:	db05      	blt.n	800d334 <__hi0bits+0x3c>
 800d328:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d32c:	f100 0001 	add.w	r0, r0, #1
 800d330:	bf08      	it	eq
 800d332:	2020      	moveq	r0, #32
 800d334:	4770      	bx	lr

0800d336 <__lo0bits>:
 800d336:	6803      	ldr	r3, [r0, #0]
 800d338:	4602      	mov	r2, r0
 800d33a:	f013 0007 	ands.w	r0, r3, #7
 800d33e:	d00b      	beq.n	800d358 <__lo0bits+0x22>
 800d340:	07d9      	lsls	r1, r3, #31
 800d342:	d421      	bmi.n	800d388 <__lo0bits+0x52>
 800d344:	0798      	lsls	r0, r3, #30
 800d346:	bf49      	itett	mi
 800d348:	085b      	lsrmi	r3, r3, #1
 800d34a:	089b      	lsrpl	r3, r3, #2
 800d34c:	2001      	movmi	r0, #1
 800d34e:	6013      	strmi	r3, [r2, #0]
 800d350:	bf5c      	itt	pl
 800d352:	6013      	strpl	r3, [r2, #0]
 800d354:	2002      	movpl	r0, #2
 800d356:	4770      	bx	lr
 800d358:	b299      	uxth	r1, r3
 800d35a:	b909      	cbnz	r1, 800d360 <__lo0bits+0x2a>
 800d35c:	0c1b      	lsrs	r3, r3, #16
 800d35e:	2010      	movs	r0, #16
 800d360:	b2d9      	uxtb	r1, r3
 800d362:	b909      	cbnz	r1, 800d368 <__lo0bits+0x32>
 800d364:	3008      	adds	r0, #8
 800d366:	0a1b      	lsrs	r3, r3, #8
 800d368:	0719      	lsls	r1, r3, #28
 800d36a:	bf04      	itt	eq
 800d36c:	091b      	lsreq	r3, r3, #4
 800d36e:	3004      	addeq	r0, #4
 800d370:	0799      	lsls	r1, r3, #30
 800d372:	bf04      	itt	eq
 800d374:	089b      	lsreq	r3, r3, #2
 800d376:	3002      	addeq	r0, #2
 800d378:	07d9      	lsls	r1, r3, #31
 800d37a:	d403      	bmi.n	800d384 <__lo0bits+0x4e>
 800d37c:	085b      	lsrs	r3, r3, #1
 800d37e:	f100 0001 	add.w	r0, r0, #1
 800d382:	d003      	beq.n	800d38c <__lo0bits+0x56>
 800d384:	6013      	str	r3, [r2, #0]
 800d386:	4770      	bx	lr
 800d388:	2000      	movs	r0, #0
 800d38a:	4770      	bx	lr
 800d38c:	2020      	movs	r0, #32
 800d38e:	4770      	bx	lr

0800d390 <__i2b>:
 800d390:	b510      	push	{r4, lr}
 800d392:	460c      	mov	r4, r1
 800d394:	2101      	movs	r1, #1
 800d396:	f7ff febd 	bl	800d114 <_Balloc>
 800d39a:	4602      	mov	r2, r0
 800d39c:	b928      	cbnz	r0, 800d3aa <__i2b+0x1a>
 800d39e:	4b05      	ldr	r3, [pc, #20]	@ (800d3b4 <__i2b+0x24>)
 800d3a0:	4805      	ldr	r0, [pc, #20]	@ (800d3b8 <__i2b+0x28>)
 800d3a2:	f240 1145 	movw	r1, #325	@ 0x145
 800d3a6:	f001 fdeb 	bl	800ef80 <__assert_func>
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	6144      	str	r4, [r0, #20]
 800d3ae:	6103      	str	r3, [r0, #16]
 800d3b0:	bd10      	pop	{r4, pc}
 800d3b2:	bf00      	nop
 800d3b4:	0800f92d 	.word	0x0800f92d
 800d3b8:	0800f93e 	.word	0x0800f93e

0800d3bc <__multiply>:
 800d3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c0:	4614      	mov	r4, r2
 800d3c2:	690a      	ldr	r2, [r1, #16]
 800d3c4:	6923      	ldr	r3, [r4, #16]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	bfa8      	it	ge
 800d3ca:	4623      	movge	r3, r4
 800d3cc:	460f      	mov	r7, r1
 800d3ce:	bfa4      	itt	ge
 800d3d0:	460c      	movge	r4, r1
 800d3d2:	461f      	movge	r7, r3
 800d3d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d3d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d3dc:	68a3      	ldr	r3, [r4, #8]
 800d3de:	6861      	ldr	r1, [r4, #4]
 800d3e0:	eb0a 0609 	add.w	r6, sl, r9
 800d3e4:	42b3      	cmp	r3, r6
 800d3e6:	b085      	sub	sp, #20
 800d3e8:	bfb8      	it	lt
 800d3ea:	3101      	addlt	r1, #1
 800d3ec:	f7ff fe92 	bl	800d114 <_Balloc>
 800d3f0:	b930      	cbnz	r0, 800d400 <__multiply+0x44>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	4b44      	ldr	r3, [pc, #272]	@ (800d508 <__multiply+0x14c>)
 800d3f6:	4845      	ldr	r0, [pc, #276]	@ (800d50c <__multiply+0x150>)
 800d3f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d3fc:	f001 fdc0 	bl	800ef80 <__assert_func>
 800d400:	f100 0514 	add.w	r5, r0, #20
 800d404:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d408:	462b      	mov	r3, r5
 800d40a:	2200      	movs	r2, #0
 800d40c:	4543      	cmp	r3, r8
 800d40e:	d321      	bcc.n	800d454 <__multiply+0x98>
 800d410:	f107 0114 	add.w	r1, r7, #20
 800d414:	f104 0214 	add.w	r2, r4, #20
 800d418:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d41c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d420:	9302      	str	r3, [sp, #8]
 800d422:	1b13      	subs	r3, r2, r4
 800d424:	3b15      	subs	r3, #21
 800d426:	f023 0303 	bic.w	r3, r3, #3
 800d42a:	3304      	adds	r3, #4
 800d42c:	f104 0715 	add.w	r7, r4, #21
 800d430:	42ba      	cmp	r2, r7
 800d432:	bf38      	it	cc
 800d434:	2304      	movcc	r3, #4
 800d436:	9301      	str	r3, [sp, #4]
 800d438:	9b02      	ldr	r3, [sp, #8]
 800d43a:	9103      	str	r1, [sp, #12]
 800d43c:	428b      	cmp	r3, r1
 800d43e:	d80c      	bhi.n	800d45a <__multiply+0x9e>
 800d440:	2e00      	cmp	r6, #0
 800d442:	dd03      	ble.n	800d44c <__multiply+0x90>
 800d444:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d05b      	beq.n	800d504 <__multiply+0x148>
 800d44c:	6106      	str	r6, [r0, #16]
 800d44e:	b005      	add	sp, #20
 800d450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d454:	f843 2b04 	str.w	r2, [r3], #4
 800d458:	e7d8      	b.n	800d40c <__multiply+0x50>
 800d45a:	f8b1 a000 	ldrh.w	sl, [r1]
 800d45e:	f1ba 0f00 	cmp.w	sl, #0
 800d462:	d024      	beq.n	800d4ae <__multiply+0xf2>
 800d464:	f104 0e14 	add.w	lr, r4, #20
 800d468:	46a9      	mov	r9, r5
 800d46a:	f04f 0c00 	mov.w	ip, #0
 800d46e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d472:	f8d9 3000 	ldr.w	r3, [r9]
 800d476:	fa1f fb87 	uxth.w	fp, r7
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d480:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d484:	f8d9 7000 	ldr.w	r7, [r9]
 800d488:	4463      	add	r3, ip
 800d48a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d48e:	fb0a c70b 	mla	r7, sl, fp, ip
 800d492:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d496:	b29b      	uxth	r3, r3
 800d498:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d49c:	4572      	cmp	r2, lr
 800d49e:	f849 3b04 	str.w	r3, [r9], #4
 800d4a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d4a6:	d8e2      	bhi.n	800d46e <__multiply+0xb2>
 800d4a8:	9b01      	ldr	r3, [sp, #4]
 800d4aa:	f845 c003 	str.w	ip, [r5, r3]
 800d4ae:	9b03      	ldr	r3, [sp, #12]
 800d4b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d4b4:	3104      	adds	r1, #4
 800d4b6:	f1b9 0f00 	cmp.w	r9, #0
 800d4ba:	d021      	beq.n	800d500 <__multiply+0x144>
 800d4bc:	682b      	ldr	r3, [r5, #0]
 800d4be:	f104 0c14 	add.w	ip, r4, #20
 800d4c2:	46ae      	mov	lr, r5
 800d4c4:	f04f 0a00 	mov.w	sl, #0
 800d4c8:	f8bc b000 	ldrh.w	fp, [ip]
 800d4cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d4d0:	fb09 770b 	mla	r7, r9, fp, r7
 800d4d4:	4457      	add	r7, sl
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d4dc:	f84e 3b04 	str.w	r3, [lr], #4
 800d4e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d4e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d4e8:	f8be 3000 	ldrh.w	r3, [lr]
 800d4ec:	fb09 330a 	mla	r3, r9, sl, r3
 800d4f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d4f4:	4562      	cmp	r2, ip
 800d4f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d4fa:	d8e5      	bhi.n	800d4c8 <__multiply+0x10c>
 800d4fc:	9f01      	ldr	r7, [sp, #4]
 800d4fe:	51eb      	str	r3, [r5, r7]
 800d500:	3504      	adds	r5, #4
 800d502:	e799      	b.n	800d438 <__multiply+0x7c>
 800d504:	3e01      	subs	r6, #1
 800d506:	e79b      	b.n	800d440 <__multiply+0x84>
 800d508:	0800f92d 	.word	0x0800f92d
 800d50c:	0800f93e 	.word	0x0800f93e

0800d510 <__pow5mult>:
 800d510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d514:	4615      	mov	r5, r2
 800d516:	f012 0203 	ands.w	r2, r2, #3
 800d51a:	4607      	mov	r7, r0
 800d51c:	460e      	mov	r6, r1
 800d51e:	d007      	beq.n	800d530 <__pow5mult+0x20>
 800d520:	4c25      	ldr	r4, [pc, #148]	@ (800d5b8 <__pow5mult+0xa8>)
 800d522:	3a01      	subs	r2, #1
 800d524:	2300      	movs	r3, #0
 800d526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d52a:	f7ff fe55 	bl	800d1d8 <__multadd>
 800d52e:	4606      	mov	r6, r0
 800d530:	10ad      	asrs	r5, r5, #2
 800d532:	d03d      	beq.n	800d5b0 <__pow5mult+0xa0>
 800d534:	69fc      	ldr	r4, [r7, #28]
 800d536:	b97c      	cbnz	r4, 800d558 <__pow5mult+0x48>
 800d538:	2010      	movs	r0, #16
 800d53a:	f7fd fd89 	bl	800b050 <malloc>
 800d53e:	4602      	mov	r2, r0
 800d540:	61f8      	str	r0, [r7, #28]
 800d542:	b928      	cbnz	r0, 800d550 <__pow5mult+0x40>
 800d544:	4b1d      	ldr	r3, [pc, #116]	@ (800d5bc <__pow5mult+0xac>)
 800d546:	481e      	ldr	r0, [pc, #120]	@ (800d5c0 <__pow5mult+0xb0>)
 800d548:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d54c:	f001 fd18 	bl	800ef80 <__assert_func>
 800d550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d554:	6004      	str	r4, [r0, #0]
 800d556:	60c4      	str	r4, [r0, #12]
 800d558:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d55c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d560:	b94c      	cbnz	r4, 800d576 <__pow5mult+0x66>
 800d562:	f240 2171 	movw	r1, #625	@ 0x271
 800d566:	4638      	mov	r0, r7
 800d568:	f7ff ff12 	bl	800d390 <__i2b>
 800d56c:	2300      	movs	r3, #0
 800d56e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d572:	4604      	mov	r4, r0
 800d574:	6003      	str	r3, [r0, #0]
 800d576:	f04f 0900 	mov.w	r9, #0
 800d57a:	07eb      	lsls	r3, r5, #31
 800d57c:	d50a      	bpl.n	800d594 <__pow5mult+0x84>
 800d57e:	4631      	mov	r1, r6
 800d580:	4622      	mov	r2, r4
 800d582:	4638      	mov	r0, r7
 800d584:	f7ff ff1a 	bl	800d3bc <__multiply>
 800d588:	4631      	mov	r1, r6
 800d58a:	4680      	mov	r8, r0
 800d58c:	4638      	mov	r0, r7
 800d58e:	f7ff fe01 	bl	800d194 <_Bfree>
 800d592:	4646      	mov	r6, r8
 800d594:	106d      	asrs	r5, r5, #1
 800d596:	d00b      	beq.n	800d5b0 <__pow5mult+0xa0>
 800d598:	6820      	ldr	r0, [r4, #0]
 800d59a:	b938      	cbnz	r0, 800d5ac <__pow5mult+0x9c>
 800d59c:	4622      	mov	r2, r4
 800d59e:	4621      	mov	r1, r4
 800d5a0:	4638      	mov	r0, r7
 800d5a2:	f7ff ff0b 	bl	800d3bc <__multiply>
 800d5a6:	6020      	str	r0, [r4, #0]
 800d5a8:	f8c0 9000 	str.w	r9, [r0]
 800d5ac:	4604      	mov	r4, r0
 800d5ae:	e7e4      	b.n	800d57a <__pow5mult+0x6a>
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5b6:	bf00      	nop
 800d5b8:	0800f998 	.word	0x0800f998
 800d5bc:	0800f8be 	.word	0x0800f8be
 800d5c0:	0800f93e 	.word	0x0800f93e

0800d5c4 <__lshift>:
 800d5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5c8:	460c      	mov	r4, r1
 800d5ca:	6849      	ldr	r1, [r1, #4]
 800d5cc:	6923      	ldr	r3, [r4, #16]
 800d5ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d5d2:	68a3      	ldr	r3, [r4, #8]
 800d5d4:	4607      	mov	r7, r0
 800d5d6:	4691      	mov	r9, r2
 800d5d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5dc:	f108 0601 	add.w	r6, r8, #1
 800d5e0:	42b3      	cmp	r3, r6
 800d5e2:	db0b      	blt.n	800d5fc <__lshift+0x38>
 800d5e4:	4638      	mov	r0, r7
 800d5e6:	f7ff fd95 	bl	800d114 <_Balloc>
 800d5ea:	4605      	mov	r5, r0
 800d5ec:	b948      	cbnz	r0, 800d602 <__lshift+0x3e>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	4b28      	ldr	r3, [pc, #160]	@ (800d694 <__lshift+0xd0>)
 800d5f2:	4829      	ldr	r0, [pc, #164]	@ (800d698 <__lshift+0xd4>)
 800d5f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d5f8:	f001 fcc2 	bl	800ef80 <__assert_func>
 800d5fc:	3101      	adds	r1, #1
 800d5fe:	005b      	lsls	r3, r3, #1
 800d600:	e7ee      	b.n	800d5e0 <__lshift+0x1c>
 800d602:	2300      	movs	r3, #0
 800d604:	f100 0114 	add.w	r1, r0, #20
 800d608:	f100 0210 	add.w	r2, r0, #16
 800d60c:	4618      	mov	r0, r3
 800d60e:	4553      	cmp	r3, sl
 800d610:	db33      	blt.n	800d67a <__lshift+0xb6>
 800d612:	6920      	ldr	r0, [r4, #16]
 800d614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d618:	f104 0314 	add.w	r3, r4, #20
 800d61c:	f019 091f 	ands.w	r9, r9, #31
 800d620:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d624:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d628:	d02b      	beq.n	800d682 <__lshift+0xbe>
 800d62a:	f1c9 0e20 	rsb	lr, r9, #32
 800d62e:	468a      	mov	sl, r1
 800d630:	2200      	movs	r2, #0
 800d632:	6818      	ldr	r0, [r3, #0]
 800d634:	fa00 f009 	lsl.w	r0, r0, r9
 800d638:	4310      	orrs	r0, r2
 800d63a:	f84a 0b04 	str.w	r0, [sl], #4
 800d63e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d642:	459c      	cmp	ip, r3
 800d644:	fa22 f20e 	lsr.w	r2, r2, lr
 800d648:	d8f3      	bhi.n	800d632 <__lshift+0x6e>
 800d64a:	ebac 0304 	sub.w	r3, ip, r4
 800d64e:	3b15      	subs	r3, #21
 800d650:	f023 0303 	bic.w	r3, r3, #3
 800d654:	3304      	adds	r3, #4
 800d656:	f104 0015 	add.w	r0, r4, #21
 800d65a:	4584      	cmp	ip, r0
 800d65c:	bf38      	it	cc
 800d65e:	2304      	movcc	r3, #4
 800d660:	50ca      	str	r2, [r1, r3]
 800d662:	b10a      	cbz	r2, 800d668 <__lshift+0xa4>
 800d664:	f108 0602 	add.w	r6, r8, #2
 800d668:	3e01      	subs	r6, #1
 800d66a:	4638      	mov	r0, r7
 800d66c:	612e      	str	r6, [r5, #16]
 800d66e:	4621      	mov	r1, r4
 800d670:	f7ff fd90 	bl	800d194 <_Bfree>
 800d674:	4628      	mov	r0, r5
 800d676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d67a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d67e:	3301      	adds	r3, #1
 800d680:	e7c5      	b.n	800d60e <__lshift+0x4a>
 800d682:	3904      	subs	r1, #4
 800d684:	f853 2b04 	ldr.w	r2, [r3], #4
 800d688:	f841 2f04 	str.w	r2, [r1, #4]!
 800d68c:	459c      	cmp	ip, r3
 800d68e:	d8f9      	bhi.n	800d684 <__lshift+0xc0>
 800d690:	e7ea      	b.n	800d668 <__lshift+0xa4>
 800d692:	bf00      	nop
 800d694:	0800f92d 	.word	0x0800f92d
 800d698:	0800f93e 	.word	0x0800f93e

0800d69c <__mcmp>:
 800d69c:	690a      	ldr	r2, [r1, #16]
 800d69e:	4603      	mov	r3, r0
 800d6a0:	6900      	ldr	r0, [r0, #16]
 800d6a2:	1a80      	subs	r0, r0, r2
 800d6a4:	b530      	push	{r4, r5, lr}
 800d6a6:	d10e      	bne.n	800d6c6 <__mcmp+0x2a>
 800d6a8:	3314      	adds	r3, #20
 800d6aa:	3114      	adds	r1, #20
 800d6ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d6b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d6b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d6b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d6bc:	4295      	cmp	r5, r2
 800d6be:	d003      	beq.n	800d6c8 <__mcmp+0x2c>
 800d6c0:	d205      	bcs.n	800d6ce <__mcmp+0x32>
 800d6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c6:	bd30      	pop	{r4, r5, pc}
 800d6c8:	42a3      	cmp	r3, r4
 800d6ca:	d3f3      	bcc.n	800d6b4 <__mcmp+0x18>
 800d6cc:	e7fb      	b.n	800d6c6 <__mcmp+0x2a>
 800d6ce:	2001      	movs	r0, #1
 800d6d0:	e7f9      	b.n	800d6c6 <__mcmp+0x2a>
	...

0800d6d4 <__mdiff>:
 800d6d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d8:	4689      	mov	r9, r1
 800d6da:	4606      	mov	r6, r0
 800d6dc:	4611      	mov	r1, r2
 800d6de:	4648      	mov	r0, r9
 800d6e0:	4614      	mov	r4, r2
 800d6e2:	f7ff ffdb 	bl	800d69c <__mcmp>
 800d6e6:	1e05      	subs	r5, r0, #0
 800d6e8:	d112      	bne.n	800d710 <__mdiff+0x3c>
 800d6ea:	4629      	mov	r1, r5
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f7ff fd11 	bl	800d114 <_Balloc>
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	b928      	cbnz	r0, 800d702 <__mdiff+0x2e>
 800d6f6:	4b3f      	ldr	r3, [pc, #252]	@ (800d7f4 <__mdiff+0x120>)
 800d6f8:	f240 2137 	movw	r1, #567	@ 0x237
 800d6fc:	483e      	ldr	r0, [pc, #248]	@ (800d7f8 <__mdiff+0x124>)
 800d6fe:	f001 fc3f 	bl	800ef80 <__assert_func>
 800d702:	2301      	movs	r3, #1
 800d704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d708:	4610      	mov	r0, r2
 800d70a:	b003      	add	sp, #12
 800d70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d710:	bfbc      	itt	lt
 800d712:	464b      	movlt	r3, r9
 800d714:	46a1      	movlt	r9, r4
 800d716:	4630      	mov	r0, r6
 800d718:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d71c:	bfba      	itte	lt
 800d71e:	461c      	movlt	r4, r3
 800d720:	2501      	movlt	r5, #1
 800d722:	2500      	movge	r5, #0
 800d724:	f7ff fcf6 	bl	800d114 <_Balloc>
 800d728:	4602      	mov	r2, r0
 800d72a:	b918      	cbnz	r0, 800d734 <__mdiff+0x60>
 800d72c:	4b31      	ldr	r3, [pc, #196]	@ (800d7f4 <__mdiff+0x120>)
 800d72e:	f240 2145 	movw	r1, #581	@ 0x245
 800d732:	e7e3      	b.n	800d6fc <__mdiff+0x28>
 800d734:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d738:	6926      	ldr	r6, [r4, #16]
 800d73a:	60c5      	str	r5, [r0, #12]
 800d73c:	f109 0310 	add.w	r3, r9, #16
 800d740:	f109 0514 	add.w	r5, r9, #20
 800d744:	f104 0e14 	add.w	lr, r4, #20
 800d748:	f100 0b14 	add.w	fp, r0, #20
 800d74c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d750:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d754:	9301      	str	r3, [sp, #4]
 800d756:	46d9      	mov	r9, fp
 800d758:	f04f 0c00 	mov.w	ip, #0
 800d75c:	9b01      	ldr	r3, [sp, #4]
 800d75e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d762:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d766:	9301      	str	r3, [sp, #4]
 800d768:	fa1f f38a 	uxth.w	r3, sl
 800d76c:	4619      	mov	r1, r3
 800d76e:	b283      	uxth	r3, r0
 800d770:	1acb      	subs	r3, r1, r3
 800d772:	0c00      	lsrs	r0, r0, #16
 800d774:	4463      	add	r3, ip
 800d776:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d77a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d77e:	b29b      	uxth	r3, r3
 800d780:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d784:	4576      	cmp	r6, lr
 800d786:	f849 3b04 	str.w	r3, [r9], #4
 800d78a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d78e:	d8e5      	bhi.n	800d75c <__mdiff+0x88>
 800d790:	1b33      	subs	r3, r6, r4
 800d792:	3b15      	subs	r3, #21
 800d794:	f023 0303 	bic.w	r3, r3, #3
 800d798:	3415      	adds	r4, #21
 800d79a:	3304      	adds	r3, #4
 800d79c:	42a6      	cmp	r6, r4
 800d79e:	bf38      	it	cc
 800d7a0:	2304      	movcc	r3, #4
 800d7a2:	441d      	add	r5, r3
 800d7a4:	445b      	add	r3, fp
 800d7a6:	461e      	mov	r6, r3
 800d7a8:	462c      	mov	r4, r5
 800d7aa:	4544      	cmp	r4, r8
 800d7ac:	d30e      	bcc.n	800d7cc <__mdiff+0xf8>
 800d7ae:	f108 0103 	add.w	r1, r8, #3
 800d7b2:	1b49      	subs	r1, r1, r5
 800d7b4:	f021 0103 	bic.w	r1, r1, #3
 800d7b8:	3d03      	subs	r5, #3
 800d7ba:	45a8      	cmp	r8, r5
 800d7bc:	bf38      	it	cc
 800d7be:	2100      	movcc	r1, #0
 800d7c0:	440b      	add	r3, r1
 800d7c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d7c6:	b191      	cbz	r1, 800d7ee <__mdiff+0x11a>
 800d7c8:	6117      	str	r7, [r2, #16]
 800d7ca:	e79d      	b.n	800d708 <__mdiff+0x34>
 800d7cc:	f854 1b04 	ldr.w	r1, [r4], #4
 800d7d0:	46e6      	mov	lr, ip
 800d7d2:	0c08      	lsrs	r0, r1, #16
 800d7d4:	fa1c fc81 	uxtah	ip, ip, r1
 800d7d8:	4471      	add	r1, lr
 800d7da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d7de:	b289      	uxth	r1, r1
 800d7e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d7e4:	f846 1b04 	str.w	r1, [r6], #4
 800d7e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d7ec:	e7dd      	b.n	800d7aa <__mdiff+0xd6>
 800d7ee:	3f01      	subs	r7, #1
 800d7f0:	e7e7      	b.n	800d7c2 <__mdiff+0xee>
 800d7f2:	bf00      	nop
 800d7f4:	0800f92d 	.word	0x0800f92d
 800d7f8:	0800f93e 	.word	0x0800f93e

0800d7fc <__ulp>:
 800d7fc:	b082      	sub	sp, #8
 800d7fe:	ed8d 0b00 	vstr	d0, [sp]
 800d802:	9a01      	ldr	r2, [sp, #4]
 800d804:	4b0f      	ldr	r3, [pc, #60]	@ (800d844 <__ulp+0x48>)
 800d806:	4013      	ands	r3, r2
 800d808:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	dc08      	bgt.n	800d822 <__ulp+0x26>
 800d810:	425b      	negs	r3, r3
 800d812:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d816:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d81a:	da04      	bge.n	800d826 <__ulp+0x2a>
 800d81c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d820:	4113      	asrs	r3, r2
 800d822:	2200      	movs	r2, #0
 800d824:	e008      	b.n	800d838 <__ulp+0x3c>
 800d826:	f1a2 0314 	sub.w	r3, r2, #20
 800d82a:	2b1e      	cmp	r3, #30
 800d82c:	bfda      	itte	le
 800d82e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d832:	40da      	lsrle	r2, r3
 800d834:	2201      	movgt	r2, #1
 800d836:	2300      	movs	r3, #0
 800d838:	4619      	mov	r1, r3
 800d83a:	4610      	mov	r0, r2
 800d83c:	ec41 0b10 	vmov	d0, r0, r1
 800d840:	b002      	add	sp, #8
 800d842:	4770      	bx	lr
 800d844:	7ff00000 	.word	0x7ff00000

0800d848 <__b2d>:
 800d848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d84c:	6906      	ldr	r6, [r0, #16]
 800d84e:	f100 0814 	add.w	r8, r0, #20
 800d852:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d856:	1f37      	subs	r7, r6, #4
 800d858:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d85c:	4610      	mov	r0, r2
 800d85e:	f7ff fd4b 	bl	800d2f8 <__hi0bits>
 800d862:	f1c0 0320 	rsb	r3, r0, #32
 800d866:	280a      	cmp	r0, #10
 800d868:	600b      	str	r3, [r1, #0]
 800d86a:	491b      	ldr	r1, [pc, #108]	@ (800d8d8 <__b2d+0x90>)
 800d86c:	dc15      	bgt.n	800d89a <__b2d+0x52>
 800d86e:	f1c0 0c0b 	rsb	ip, r0, #11
 800d872:	fa22 f30c 	lsr.w	r3, r2, ip
 800d876:	45b8      	cmp	r8, r7
 800d878:	ea43 0501 	orr.w	r5, r3, r1
 800d87c:	bf34      	ite	cc
 800d87e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d882:	2300      	movcs	r3, #0
 800d884:	3015      	adds	r0, #21
 800d886:	fa02 f000 	lsl.w	r0, r2, r0
 800d88a:	fa23 f30c 	lsr.w	r3, r3, ip
 800d88e:	4303      	orrs	r3, r0
 800d890:	461c      	mov	r4, r3
 800d892:	ec45 4b10 	vmov	d0, r4, r5
 800d896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d89a:	45b8      	cmp	r8, r7
 800d89c:	bf3a      	itte	cc
 800d89e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d8a2:	f1a6 0708 	subcc.w	r7, r6, #8
 800d8a6:	2300      	movcs	r3, #0
 800d8a8:	380b      	subs	r0, #11
 800d8aa:	d012      	beq.n	800d8d2 <__b2d+0x8a>
 800d8ac:	f1c0 0120 	rsb	r1, r0, #32
 800d8b0:	fa23 f401 	lsr.w	r4, r3, r1
 800d8b4:	4082      	lsls	r2, r0
 800d8b6:	4322      	orrs	r2, r4
 800d8b8:	4547      	cmp	r7, r8
 800d8ba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d8be:	bf8c      	ite	hi
 800d8c0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d8c4:	2200      	movls	r2, #0
 800d8c6:	4083      	lsls	r3, r0
 800d8c8:	40ca      	lsrs	r2, r1
 800d8ca:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	e7de      	b.n	800d890 <__b2d+0x48>
 800d8d2:	ea42 0501 	orr.w	r5, r2, r1
 800d8d6:	e7db      	b.n	800d890 <__b2d+0x48>
 800d8d8:	3ff00000 	.word	0x3ff00000

0800d8dc <__d2b>:
 800d8dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8e0:	460f      	mov	r7, r1
 800d8e2:	2101      	movs	r1, #1
 800d8e4:	ec59 8b10 	vmov	r8, r9, d0
 800d8e8:	4616      	mov	r6, r2
 800d8ea:	f7ff fc13 	bl	800d114 <_Balloc>
 800d8ee:	4604      	mov	r4, r0
 800d8f0:	b930      	cbnz	r0, 800d900 <__d2b+0x24>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	4b23      	ldr	r3, [pc, #140]	@ (800d984 <__d2b+0xa8>)
 800d8f6:	4824      	ldr	r0, [pc, #144]	@ (800d988 <__d2b+0xac>)
 800d8f8:	f240 310f 	movw	r1, #783	@ 0x30f
 800d8fc:	f001 fb40 	bl	800ef80 <__assert_func>
 800d900:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d904:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d908:	b10d      	cbz	r5, 800d90e <__d2b+0x32>
 800d90a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d90e:	9301      	str	r3, [sp, #4]
 800d910:	f1b8 0300 	subs.w	r3, r8, #0
 800d914:	d023      	beq.n	800d95e <__d2b+0x82>
 800d916:	4668      	mov	r0, sp
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	f7ff fd0c 	bl	800d336 <__lo0bits>
 800d91e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d922:	b1d0      	cbz	r0, 800d95a <__d2b+0x7e>
 800d924:	f1c0 0320 	rsb	r3, r0, #32
 800d928:	fa02 f303 	lsl.w	r3, r2, r3
 800d92c:	430b      	orrs	r3, r1
 800d92e:	40c2      	lsrs	r2, r0
 800d930:	6163      	str	r3, [r4, #20]
 800d932:	9201      	str	r2, [sp, #4]
 800d934:	9b01      	ldr	r3, [sp, #4]
 800d936:	61a3      	str	r3, [r4, #24]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	bf0c      	ite	eq
 800d93c:	2201      	moveq	r2, #1
 800d93e:	2202      	movne	r2, #2
 800d940:	6122      	str	r2, [r4, #16]
 800d942:	b1a5      	cbz	r5, 800d96e <__d2b+0x92>
 800d944:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d948:	4405      	add	r5, r0
 800d94a:	603d      	str	r5, [r7, #0]
 800d94c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d950:	6030      	str	r0, [r6, #0]
 800d952:	4620      	mov	r0, r4
 800d954:	b003      	add	sp, #12
 800d956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d95a:	6161      	str	r1, [r4, #20]
 800d95c:	e7ea      	b.n	800d934 <__d2b+0x58>
 800d95e:	a801      	add	r0, sp, #4
 800d960:	f7ff fce9 	bl	800d336 <__lo0bits>
 800d964:	9b01      	ldr	r3, [sp, #4]
 800d966:	6163      	str	r3, [r4, #20]
 800d968:	3020      	adds	r0, #32
 800d96a:	2201      	movs	r2, #1
 800d96c:	e7e8      	b.n	800d940 <__d2b+0x64>
 800d96e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d972:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d976:	6038      	str	r0, [r7, #0]
 800d978:	6918      	ldr	r0, [r3, #16]
 800d97a:	f7ff fcbd 	bl	800d2f8 <__hi0bits>
 800d97e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d982:	e7e5      	b.n	800d950 <__d2b+0x74>
 800d984:	0800f92d 	.word	0x0800f92d
 800d988:	0800f93e 	.word	0x0800f93e

0800d98c <__ratio>:
 800d98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d990:	b085      	sub	sp, #20
 800d992:	e9cd 1000 	strd	r1, r0, [sp]
 800d996:	a902      	add	r1, sp, #8
 800d998:	f7ff ff56 	bl	800d848 <__b2d>
 800d99c:	9800      	ldr	r0, [sp, #0]
 800d99e:	a903      	add	r1, sp, #12
 800d9a0:	ec55 4b10 	vmov	r4, r5, d0
 800d9a4:	f7ff ff50 	bl	800d848 <__b2d>
 800d9a8:	9b01      	ldr	r3, [sp, #4]
 800d9aa:	6919      	ldr	r1, [r3, #16]
 800d9ac:	9b00      	ldr	r3, [sp, #0]
 800d9ae:	691b      	ldr	r3, [r3, #16]
 800d9b0:	1ac9      	subs	r1, r1, r3
 800d9b2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d9b6:	1a9b      	subs	r3, r3, r2
 800d9b8:	ec5b ab10 	vmov	sl, fp, d0
 800d9bc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	bfce      	itee	gt
 800d9c4:	462a      	movgt	r2, r5
 800d9c6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d9ca:	465a      	movle	r2, fp
 800d9cc:	462f      	mov	r7, r5
 800d9ce:	46d9      	mov	r9, fp
 800d9d0:	bfcc      	ite	gt
 800d9d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d9d6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d9da:	464b      	mov	r3, r9
 800d9dc:	4652      	mov	r2, sl
 800d9de:	4620      	mov	r0, r4
 800d9e0:	4639      	mov	r1, r7
 800d9e2:	f7f2 ff5b 	bl	800089c <__aeabi_ddiv>
 800d9e6:	ec41 0b10 	vmov	d0, r0, r1
 800d9ea:	b005      	add	sp, #20
 800d9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d9f0 <__copybits>:
 800d9f0:	3901      	subs	r1, #1
 800d9f2:	b570      	push	{r4, r5, r6, lr}
 800d9f4:	1149      	asrs	r1, r1, #5
 800d9f6:	6914      	ldr	r4, [r2, #16]
 800d9f8:	3101      	adds	r1, #1
 800d9fa:	f102 0314 	add.w	r3, r2, #20
 800d9fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800da02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800da06:	1f05      	subs	r5, r0, #4
 800da08:	42a3      	cmp	r3, r4
 800da0a:	d30c      	bcc.n	800da26 <__copybits+0x36>
 800da0c:	1aa3      	subs	r3, r4, r2
 800da0e:	3b11      	subs	r3, #17
 800da10:	f023 0303 	bic.w	r3, r3, #3
 800da14:	3211      	adds	r2, #17
 800da16:	42a2      	cmp	r2, r4
 800da18:	bf88      	it	hi
 800da1a:	2300      	movhi	r3, #0
 800da1c:	4418      	add	r0, r3
 800da1e:	2300      	movs	r3, #0
 800da20:	4288      	cmp	r0, r1
 800da22:	d305      	bcc.n	800da30 <__copybits+0x40>
 800da24:	bd70      	pop	{r4, r5, r6, pc}
 800da26:	f853 6b04 	ldr.w	r6, [r3], #4
 800da2a:	f845 6f04 	str.w	r6, [r5, #4]!
 800da2e:	e7eb      	b.n	800da08 <__copybits+0x18>
 800da30:	f840 3b04 	str.w	r3, [r0], #4
 800da34:	e7f4      	b.n	800da20 <__copybits+0x30>

0800da36 <__any_on>:
 800da36:	f100 0214 	add.w	r2, r0, #20
 800da3a:	6900      	ldr	r0, [r0, #16]
 800da3c:	114b      	asrs	r3, r1, #5
 800da3e:	4298      	cmp	r0, r3
 800da40:	b510      	push	{r4, lr}
 800da42:	db11      	blt.n	800da68 <__any_on+0x32>
 800da44:	dd0a      	ble.n	800da5c <__any_on+0x26>
 800da46:	f011 011f 	ands.w	r1, r1, #31
 800da4a:	d007      	beq.n	800da5c <__any_on+0x26>
 800da4c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800da50:	fa24 f001 	lsr.w	r0, r4, r1
 800da54:	fa00 f101 	lsl.w	r1, r0, r1
 800da58:	428c      	cmp	r4, r1
 800da5a:	d10b      	bne.n	800da74 <__any_on+0x3e>
 800da5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da60:	4293      	cmp	r3, r2
 800da62:	d803      	bhi.n	800da6c <__any_on+0x36>
 800da64:	2000      	movs	r0, #0
 800da66:	bd10      	pop	{r4, pc}
 800da68:	4603      	mov	r3, r0
 800da6a:	e7f7      	b.n	800da5c <__any_on+0x26>
 800da6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da70:	2900      	cmp	r1, #0
 800da72:	d0f5      	beq.n	800da60 <__any_on+0x2a>
 800da74:	2001      	movs	r0, #1
 800da76:	e7f6      	b.n	800da66 <__any_on+0x30>

0800da78 <sulp>:
 800da78:	b570      	push	{r4, r5, r6, lr}
 800da7a:	4604      	mov	r4, r0
 800da7c:	460d      	mov	r5, r1
 800da7e:	ec45 4b10 	vmov	d0, r4, r5
 800da82:	4616      	mov	r6, r2
 800da84:	f7ff feba 	bl	800d7fc <__ulp>
 800da88:	ec51 0b10 	vmov	r0, r1, d0
 800da8c:	b17e      	cbz	r6, 800daae <sulp+0x36>
 800da8e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800da92:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800da96:	2b00      	cmp	r3, #0
 800da98:	dd09      	ble.n	800daae <sulp+0x36>
 800da9a:	051b      	lsls	r3, r3, #20
 800da9c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800daa0:	2400      	movs	r4, #0
 800daa2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800daa6:	4622      	mov	r2, r4
 800daa8:	462b      	mov	r3, r5
 800daaa:	f7f2 fdcd 	bl	8000648 <__aeabi_dmul>
 800daae:	ec41 0b10 	vmov	d0, r0, r1
 800dab2:	bd70      	pop	{r4, r5, r6, pc}
 800dab4:	0000      	movs	r0, r0
	...

0800dab8 <_strtod_l>:
 800dab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dabc:	b09f      	sub	sp, #124	@ 0x7c
 800dabe:	460c      	mov	r4, r1
 800dac0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800dac2:	2200      	movs	r2, #0
 800dac4:	921a      	str	r2, [sp, #104]	@ 0x68
 800dac6:	9005      	str	r0, [sp, #20]
 800dac8:	f04f 0a00 	mov.w	sl, #0
 800dacc:	f04f 0b00 	mov.w	fp, #0
 800dad0:	460a      	mov	r2, r1
 800dad2:	9219      	str	r2, [sp, #100]	@ 0x64
 800dad4:	7811      	ldrb	r1, [r2, #0]
 800dad6:	292b      	cmp	r1, #43	@ 0x2b
 800dad8:	d04a      	beq.n	800db70 <_strtod_l+0xb8>
 800dada:	d838      	bhi.n	800db4e <_strtod_l+0x96>
 800dadc:	290d      	cmp	r1, #13
 800dade:	d832      	bhi.n	800db46 <_strtod_l+0x8e>
 800dae0:	2908      	cmp	r1, #8
 800dae2:	d832      	bhi.n	800db4a <_strtod_l+0x92>
 800dae4:	2900      	cmp	r1, #0
 800dae6:	d03b      	beq.n	800db60 <_strtod_l+0xa8>
 800dae8:	2200      	movs	r2, #0
 800daea:	920b      	str	r2, [sp, #44]	@ 0x2c
 800daec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800daee:	782a      	ldrb	r2, [r5, #0]
 800daf0:	2a30      	cmp	r2, #48	@ 0x30
 800daf2:	f040 80b3 	bne.w	800dc5c <_strtod_l+0x1a4>
 800daf6:	786a      	ldrb	r2, [r5, #1]
 800daf8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dafc:	2a58      	cmp	r2, #88	@ 0x58
 800dafe:	d16e      	bne.n	800dbde <_strtod_l+0x126>
 800db00:	9302      	str	r3, [sp, #8]
 800db02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db04:	9301      	str	r3, [sp, #4]
 800db06:	ab1a      	add	r3, sp, #104	@ 0x68
 800db08:	9300      	str	r3, [sp, #0]
 800db0a:	4a8e      	ldr	r2, [pc, #568]	@ (800dd44 <_strtod_l+0x28c>)
 800db0c:	9805      	ldr	r0, [sp, #20]
 800db0e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800db10:	a919      	add	r1, sp, #100	@ 0x64
 800db12:	f001 facf 	bl	800f0b4 <__gethex>
 800db16:	f010 060f 	ands.w	r6, r0, #15
 800db1a:	4604      	mov	r4, r0
 800db1c:	d005      	beq.n	800db2a <_strtod_l+0x72>
 800db1e:	2e06      	cmp	r6, #6
 800db20:	d128      	bne.n	800db74 <_strtod_l+0xbc>
 800db22:	3501      	adds	r5, #1
 800db24:	2300      	movs	r3, #0
 800db26:	9519      	str	r5, [sp, #100]	@ 0x64
 800db28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	f040 858e 	bne.w	800e64e <_strtod_l+0xb96>
 800db32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db34:	b1cb      	cbz	r3, 800db6a <_strtod_l+0xb2>
 800db36:	4652      	mov	r2, sl
 800db38:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800db3c:	ec43 2b10 	vmov	d0, r2, r3
 800db40:	b01f      	add	sp, #124	@ 0x7c
 800db42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db46:	2920      	cmp	r1, #32
 800db48:	d1ce      	bne.n	800dae8 <_strtod_l+0x30>
 800db4a:	3201      	adds	r2, #1
 800db4c:	e7c1      	b.n	800dad2 <_strtod_l+0x1a>
 800db4e:	292d      	cmp	r1, #45	@ 0x2d
 800db50:	d1ca      	bne.n	800dae8 <_strtod_l+0x30>
 800db52:	2101      	movs	r1, #1
 800db54:	910b      	str	r1, [sp, #44]	@ 0x2c
 800db56:	1c51      	adds	r1, r2, #1
 800db58:	9119      	str	r1, [sp, #100]	@ 0x64
 800db5a:	7852      	ldrb	r2, [r2, #1]
 800db5c:	2a00      	cmp	r2, #0
 800db5e:	d1c5      	bne.n	800daec <_strtod_l+0x34>
 800db60:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800db62:	9419      	str	r4, [sp, #100]	@ 0x64
 800db64:	2b00      	cmp	r3, #0
 800db66:	f040 8570 	bne.w	800e64a <_strtod_l+0xb92>
 800db6a:	4652      	mov	r2, sl
 800db6c:	465b      	mov	r3, fp
 800db6e:	e7e5      	b.n	800db3c <_strtod_l+0x84>
 800db70:	2100      	movs	r1, #0
 800db72:	e7ef      	b.n	800db54 <_strtod_l+0x9c>
 800db74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800db76:	b13a      	cbz	r2, 800db88 <_strtod_l+0xd0>
 800db78:	2135      	movs	r1, #53	@ 0x35
 800db7a:	a81c      	add	r0, sp, #112	@ 0x70
 800db7c:	f7ff ff38 	bl	800d9f0 <__copybits>
 800db80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db82:	9805      	ldr	r0, [sp, #20]
 800db84:	f7ff fb06 	bl	800d194 <_Bfree>
 800db88:	3e01      	subs	r6, #1
 800db8a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800db8c:	2e04      	cmp	r6, #4
 800db8e:	d806      	bhi.n	800db9e <_strtod_l+0xe6>
 800db90:	e8df f006 	tbb	[pc, r6]
 800db94:	201d0314 	.word	0x201d0314
 800db98:	14          	.byte	0x14
 800db99:	00          	.byte	0x00
 800db9a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800db9e:	05e1      	lsls	r1, r4, #23
 800dba0:	bf48      	it	mi
 800dba2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800dba6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dbaa:	0d1b      	lsrs	r3, r3, #20
 800dbac:	051b      	lsls	r3, r3, #20
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d1bb      	bne.n	800db2a <_strtod_l+0x72>
 800dbb2:	f7fe fbd7 	bl	800c364 <__errno>
 800dbb6:	2322      	movs	r3, #34	@ 0x22
 800dbb8:	6003      	str	r3, [r0, #0]
 800dbba:	e7b6      	b.n	800db2a <_strtod_l+0x72>
 800dbbc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800dbc0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800dbc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800dbc8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dbcc:	e7e7      	b.n	800db9e <_strtod_l+0xe6>
 800dbce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800dd4c <_strtod_l+0x294>
 800dbd2:	e7e4      	b.n	800db9e <_strtod_l+0xe6>
 800dbd4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800dbd8:	f04f 3aff 	mov.w	sl, #4294967295
 800dbdc:	e7df      	b.n	800db9e <_strtod_l+0xe6>
 800dbde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbe0:	1c5a      	adds	r2, r3, #1
 800dbe2:	9219      	str	r2, [sp, #100]	@ 0x64
 800dbe4:	785b      	ldrb	r3, [r3, #1]
 800dbe6:	2b30      	cmp	r3, #48	@ 0x30
 800dbe8:	d0f9      	beq.n	800dbde <_strtod_l+0x126>
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d09d      	beq.n	800db2a <_strtod_l+0x72>
 800dbee:	2301      	movs	r3, #1
 800dbf0:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbf2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbf4:	930c      	str	r3, [sp, #48]	@ 0x30
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	9308      	str	r3, [sp, #32]
 800dbfa:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbfc:	461f      	mov	r7, r3
 800dbfe:	220a      	movs	r2, #10
 800dc00:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800dc02:	7805      	ldrb	r5, [r0, #0]
 800dc04:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800dc08:	b2d9      	uxtb	r1, r3
 800dc0a:	2909      	cmp	r1, #9
 800dc0c:	d928      	bls.n	800dc60 <_strtod_l+0x1a8>
 800dc0e:	494e      	ldr	r1, [pc, #312]	@ (800dd48 <_strtod_l+0x290>)
 800dc10:	2201      	movs	r2, #1
 800dc12:	f001 f979 	bl	800ef08 <strncmp>
 800dc16:	2800      	cmp	r0, #0
 800dc18:	d032      	beq.n	800dc80 <_strtod_l+0x1c8>
 800dc1a:	2000      	movs	r0, #0
 800dc1c:	462a      	mov	r2, r5
 800dc1e:	4681      	mov	r9, r0
 800dc20:	463d      	mov	r5, r7
 800dc22:	4603      	mov	r3, r0
 800dc24:	2a65      	cmp	r2, #101	@ 0x65
 800dc26:	d001      	beq.n	800dc2c <_strtod_l+0x174>
 800dc28:	2a45      	cmp	r2, #69	@ 0x45
 800dc2a:	d114      	bne.n	800dc56 <_strtod_l+0x19e>
 800dc2c:	b91d      	cbnz	r5, 800dc36 <_strtod_l+0x17e>
 800dc2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc30:	4302      	orrs	r2, r0
 800dc32:	d095      	beq.n	800db60 <_strtod_l+0xa8>
 800dc34:	2500      	movs	r5, #0
 800dc36:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800dc38:	1c62      	adds	r2, r4, #1
 800dc3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc3c:	7862      	ldrb	r2, [r4, #1]
 800dc3e:	2a2b      	cmp	r2, #43	@ 0x2b
 800dc40:	d077      	beq.n	800dd32 <_strtod_l+0x27a>
 800dc42:	2a2d      	cmp	r2, #45	@ 0x2d
 800dc44:	d07b      	beq.n	800dd3e <_strtod_l+0x286>
 800dc46:	f04f 0c00 	mov.w	ip, #0
 800dc4a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dc4e:	2909      	cmp	r1, #9
 800dc50:	f240 8082 	bls.w	800dd58 <_strtod_l+0x2a0>
 800dc54:	9419      	str	r4, [sp, #100]	@ 0x64
 800dc56:	f04f 0800 	mov.w	r8, #0
 800dc5a:	e0a2      	b.n	800dda2 <_strtod_l+0x2ea>
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	e7c7      	b.n	800dbf0 <_strtod_l+0x138>
 800dc60:	2f08      	cmp	r7, #8
 800dc62:	bfd5      	itete	le
 800dc64:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800dc66:	9908      	ldrgt	r1, [sp, #32]
 800dc68:	fb02 3301 	mlale	r3, r2, r1, r3
 800dc6c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dc70:	f100 0001 	add.w	r0, r0, #1
 800dc74:	bfd4      	ite	le
 800dc76:	930a      	strle	r3, [sp, #40]	@ 0x28
 800dc78:	9308      	strgt	r3, [sp, #32]
 800dc7a:	3701      	adds	r7, #1
 800dc7c:	9019      	str	r0, [sp, #100]	@ 0x64
 800dc7e:	e7bf      	b.n	800dc00 <_strtod_l+0x148>
 800dc80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc82:	1c5a      	adds	r2, r3, #1
 800dc84:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc86:	785a      	ldrb	r2, [r3, #1]
 800dc88:	b37f      	cbz	r7, 800dcea <_strtod_l+0x232>
 800dc8a:	4681      	mov	r9, r0
 800dc8c:	463d      	mov	r5, r7
 800dc8e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800dc92:	2b09      	cmp	r3, #9
 800dc94:	d912      	bls.n	800dcbc <_strtod_l+0x204>
 800dc96:	2301      	movs	r3, #1
 800dc98:	e7c4      	b.n	800dc24 <_strtod_l+0x16c>
 800dc9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc9c:	1c5a      	adds	r2, r3, #1
 800dc9e:	9219      	str	r2, [sp, #100]	@ 0x64
 800dca0:	785a      	ldrb	r2, [r3, #1]
 800dca2:	3001      	adds	r0, #1
 800dca4:	2a30      	cmp	r2, #48	@ 0x30
 800dca6:	d0f8      	beq.n	800dc9a <_strtod_l+0x1e2>
 800dca8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dcac:	2b08      	cmp	r3, #8
 800dcae:	f200 84d3 	bhi.w	800e658 <_strtod_l+0xba0>
 800dcb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dcb4:	930c      	str	r3, [sp, #48]	@ 0x30
 800dcb6:	4681      	mov	r9, r0
 800dcb8:	2000      	movs	r0, #0
 800dcba:	4605      	mov	r5, r0
 800dcbc:	3a30      	subs	r2, #48	@ 0x30
 800dcbe:	f100 0301 	add.w	r3, r0, #1
 800dcc2:	d02a      	beq.n	800dd1a <_strtod_l+0x262>
 800dcc4:	4499      	add	r9, r3
 800dcc6:	eb00 0c05 	add.w	ip, r0, r5
 800dcca:	462b      	mov	r3, r5
 800dccc:	210a      	movs	r1, #10
 800dcce:	4563      	cmp	r3, ip
 800dcd0:	d10d      	bne.n	800dcee <_strtod_l+0x236>
 800dcd2:	1c69      	adds	r1, r5, #1
 800dcd4:	4401      	add	r1, r0
 800dcd6:	4428      	add	r0, r5
 800dcd8:	2808      	cmp	r0, #8
 800dcda:	dc16      	bgt.n	800dd0a <_strtod_l+0x252>
 800dcdc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dcde:	230a      	movs	r3, #10
 800dce0:	fb03 2300 	mla	r3, r3, r0, r2
 800dce4:	930a      	str	r3, [sp, #40]	@ 0x28
 800dce6:	2300      	movs	r3, #0
 800dce8:	e018      	b.n	800dd1c <_strtod_l+0x264>
 800dcea:	4638      	mov	r0, r7
 800dcec:	e7da      	b.n	800dca4 <_strtod_l+0x1ec>
 800dcee:	2b08      	cmp	r3, #8
 800dcf0:	f103 0301 	add.w	r3, r3, #1
 800dcf4:	dc03      	bgt.n	800dcfe <_strtod_l+0x246>
 800dcf6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800dcf8:	434e      	muls	r6, r1
 800dcfa:	960a      	str	r6, [sp, #40]	@ 0x28
 800dcfc:	e7e7      	b.n	800dcce <_strtod_l+0x216>
 800dcfe:	2b10      	cmp	r3, #16
 800dd00:	bfde      	ittt	le
 800dd02:	9e08      	ldrle	r6, [sp, #32]
 800dd04:	434e      	mulle	r6, r1
 800dd06:	9608      	strle	r6, [sp, #32]
 800dd08:	e7e1      	b.n	800dcce <_strtod_l+0x216>
 800dd0a:	280f      	cmp	r0, #15
 800dd0c:	dceb      	bgt.n	800dce6 <_strtod_l+0x22e>
 800dd0e:	9808      	ldr	r0, [sp, #32]
 800dd10:	230a      	movs	r3, #10
 800dd12:	fb03 2300 	mla	r3, r3, r0, r2
 800dd16:	9308      	str	r3, [sp, #32]
 800dd18:	e7e5      	b.n	800dce6 <_strtod_l+0x22e>
 800dd1a:	4629      	mov	r1, r5
 800dd1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd1e:	1c50      	adds	r0, r2, #1
 800dd20:	9019      	str	r0, [sp, #100]	@ 0x64
 800dd22:	7852      	ldrb	r2, [r2, #1]
 800dd24:	4618      	mov	r0, r3
 800dd26:	460d      	mov	r5, r1
 800dd28:	e7b1      	b.n	800dc8e <_strtod_l+0x1d6>
 800dd2a:	f04f 0900 	mov.w	r9, #0
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e77d      	b.n	800dc2e <_strtod_l+0x176>
 800dd32:	f04f 0c00 	mov.w	ip, #0
 800dd36:	1ca2      	adds	r2, r4, #2
 800dd38:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd3a:	78a2      	ldrb	r2, [r4, #2]
 800dd3c:	e785      	b.n	800dc4a <_strtod_l+0x192>
 800dd3e:	f04f 0c01 	mov.w	ip, #1
 800dd42:	e7f8      	b.n	800dd36 <_strtod_l+0x27e>
 800dd44:	0800fab0 	.word	0x0800fab0
 800dd48:	0800fa98 	.word	0x0800fa98
 800dd4c:	7ff00000 	.word	0x7ff00000
 800dd50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd52:	1c51      	adds	r1, r2, #1
 800dd54:	9119      	str	r1, [sp, #100]	@ 0x64
 800dd56:	7852      	ldrb	r2, [r2, #1]
 800dd58:	2a30      	cmp	r2, #48	@ 0x30
 800dd5a:	d0f9      	beq.n	800dd50 <_strtod_l+0x298>
 800dd5c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dd60:	2908      	cmp	r1, #8
 800dd62:	f63f af78 	bhi.w	800dc56 <_strtod_l+0x19e>
 800dd66:	3a30      	subs	r2, #48	@ 0x30
 800dd68:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd6c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dd6e:	f04f 080a 	mov.w	r8, #10
 800dd72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd74:	1c56      	adds	r6, r2, #1
 800dd76:	9619      	str	r6, [sp, #100]	@ 0x64
 800dd78:	7852      	ldrb	r2, [r2, #1]
 800dd7a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dd7e:	f1be 0f09 	cmp.w	lr, #9
 800dd82:	d939      	bls.n	800ddf8 <_strtod_l+0x340>
 800dd84:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dd86:	1a76      	subs	r6, r6, r1
 800dd88:	2e08      	cmp	r6, #8
 800dd8a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dd8e:	dc03      	bgt.n	800dd98 <_strtod_l+0x2e0>
 800dd90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dd92:	4588      	cmp	r8, r1
 800dd94:	bfa8      	it	ge
 800dd96:	4688      	movge	r8, r1
 800dd98:	f1bc 0f00 	cmp.w	ip, #0
 800dd9c:	d001      	beq.n	800dda2 <_strtod_l+0x2ea>
 800dd9e:	f1c8 0800 	rsb	r8, r8, #0
 800dda2:	2d00      	cmp	r5, #0
 800dda4:	d14e      	bne.n	800de44 <_strtod_l+0x38c>
 800dda6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dda8:	4308      	orrs	r0, r1
 800ddaa:	f47f aebe 	bne.w	800db2a <_strtod_l+0x72>
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	f47f aed6 	bne.w	800db60 <_strtod_l+0xa8>
 800ddb4:	2a69      	cmp	r2, #105	@ 0x69
 800ddb6:	d028      	beq.n	800de0a <_strtod_l+0x352>
 800ddb8:	dc25      	bgt.n	800de06 <_strtod_l+0x34e>
 800ddba:	2a49      	cmp	r2, #73	@ 0x49
 800ddbc:	d025      	beq.n	800de0a <_strtod_l+0x352>
 800ddbe:	2a4e      	cmp	r2, #78	@ 0x4e
 800ddc0:	f47f aece 	bne.w	800db60 <_strtod_l+0xa8>
 800ddc4:	499b      	ldr	r1, [pc, #620]	@ (800e034 <_strtod_l+0x57c>)
 800ddc6:	a819      	add	r0, sp, #100	@ 0x64
 800ddc8:	f001 fb96 	bl	800f4f8 <__match>
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	f43f aec7 	beq.w	800db60 <_strtod_l+0xa8>
 800ddd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	2b28      	cmp	r3, #40	@ 0x28
 800ddd8:	d12e      	bne.n	800de38 <_strtod_l+0x380>
 800ddda:	4997      	ldr	r1, [pc, #604]	@ (800e038 <_strtod_l+0x580>)
 800dddc:	aa1c      	add	r2, sp, #112	@ 0x70
 800ddde:	a819      	add	r0, sp, #100	@ 0x64
 800dde0:	f001 fb9e 	bl	800f520 <__hexnan>
 800dde4:	2805      	cmp	r0, #5
 800dde6:	d127      	bne.n	800de38 <_strtod_l+0x380>
 800dde8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ddea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ddee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ddf2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ddf6:	e698      	b.n	800db2a <_strtod_l+0x72>
 800ddf8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ddfa:	fb08 2101 	mla	r1, r8, r1, r2
 800ddfe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800de02:	920e      	str	r2, [sp, #56]	@ 0x38
 800de04:	e7b5      	b.n	800dd72 <_strtod_l+0x2ba>
 800de06:	2a6e      	cmp	r2, #110	@ 0x6e
 800de08:	e7da      	b.n	800ddc0 <_strtod_l+0x308>
 800de0a:	498c      	ldr	r1, [pc, #560]	@ (800e03c <_strtod_l+0x584>)
 800de0c:	a819      	add	r0, sp, #100	@ 0x64
 800de0e:	f001 fb73 	bl	800f4f8 <__match>
 800de12:	2800      	cmp	r0, #0
 800de14:	f43f aea4 	beq.w	800db60 <_strtod_l+0xa8>
 800de18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de1a:	4989      	ldr	r1, [pc, #548]	@ (800e040 <_strtod_l+0x588>)
 800de1c:	3b01      	subs	r3, #1
 800de1e:	a819      	add	r0, sp, #100	@ 0x64
 800de20:	9319      	str	r3, [sp, #100]	@ 0x64
 800de22:	f001 fb69 	bl	800f4f8 <__match>
 800de26:	b910      	cbnz	r0, 800de2e <_strtod_l+0x376>
 800de28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de2a:	3301      	adds	r3, #1
 800de2c:	9319      	str	r3, [sp, #100]	@ 0x64
 800de2e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e050 <_strtod_l+0x598>
 800de32:	f04f 0a00 	mov.w	sl, #0
 800de36:	e678      	b.n	800db2a <_strtod_l+0x72>
 800de38:	4882      	ldr	r0, [pc, #520]	@ (800e044 <_strtod_l+0x58c>)
 800de3a:	f001 f899 	bl	800ef70 <nan>
 800de3e:	ec5b ab10 	vmov	sl, fp, d0
 800de42:	e672      	b.n	800db2a <_strtod_l+0x72>
 800de44:	eba8 0309 	sub.w	r3, r8, r9
 800de48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800de4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800de4c:	2f00      	cmp	r7, #0
 800de4e:	bf08      	it	eq
 800de50:	462f      	moveq	r7, r5
 800de52:	2d10      	cmp	r5, #16
 800de54:	462c      	mov	r4, r5
 800de56:	bfa8      	it	ge
 800de58:	2410      	movge	r4, #16
 800de5a:	f7f2 fb7b 	bl	8000554 <__aeabi_ui2d>
 800de5e:	2d09      	cmp	r5, #9
 800de60:	4682      	mov	sl, r0
 800de62:	468b      	mov	fp, r1
 800de64:	dc13      	bgt.n	800de8e <_strtod_l+0x3d6>
 800de66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de68:	2b00      	cmp	r3, #0
 800de6a:	f43f ae5e 	beq.w	800db2a <_strtod_l+0x72>
 800de6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de70:	dd78      	ble.n	800df64 <_strtod_l+0x4ac>
 800de72:	2b16      	cmp	r3, #22
 800de74:	dc5f      	bgt.n	800df36 <_strtod_l+0x47e>
 800de76:	4974      	ldr	r1, [pc, #464]	@ (800e048 <_strtod_l+0x590>)
 800de78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de80:	4652      	mov	r2, sl
 800de82:	465b      	mov	r3, fp
 800de84:	f7f2 fbe0 	bl	8000648 <__aeabi_dmul>
 800de88:	4682      	mov	sl, r0
 800de8a:	468b      	mov	fp, r1
 800de8c:	e64d      	b.n	800db2a <_strtod_l+0x72>
 800de8e:	4b6e      	ldr	r3, [pc, #440]	@ (800e048 <_strtod_l+0x590>)
 800de90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800de98:	f7f2 fbd6 	bl	8000648 <__aeabi_dmul>
 800de9c:	4682      	mov	sl, r0
 800de9e:	9808      	ldr	r0, [sp, #32]
 800dea0:	468b      	mov	fp, r1
 800dea2:	f7f2 fb57 	bl	8000554 <__aeabi_ui2d>
 800dea6:	4602      	mov	r2, r0
 800dea8:	460b      	mov	r3, r1
 800deaa:	4650      	mov	r0, sl
 800deac:	4659      	mov	r1, fp
 800deae:	f7f2 fa15 	bl	80002dc <__adddf3>
 800deb2:	2d0f      	cmp	r5, #15
 800deb4:	4682      	mov	sl, r0
 800deb6:	468b      	mov	fp, r1
 800deb8:	ddd5      	ble.n	800de66 <_strtod_l+0x3ae>
 800deba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800debc:	1b2c      	subs	r4, r5, r4
 800debe:	441c      	add	r4, r3
 800dec0:	2c00      	cmp	r4, #0
 800dec2:	f340 8096 	ble.w	800dff2 <_strtod_l+0x53a>
 800dec6:	f014 030f 	ands.w	r3, r4, #15
 800deca:	d00a      	beq.n	800dee2 <_strtod_l+0x42a>
 800decc:	495e      	ldr	r1, [pc, #376]	@ (800e048 <_strtod_l+0x590>)
 800dece:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ded2:	4652      	mov	r2, sl
 800ded4:	465b      	mov	r3, fp
 800ded6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800deda:	f7f2 fbb5 	bl	8000648 <__aeabi_dmul>
 800dede:	4682      	mov	sl, r0
 800dee0:	468b      	mov	fp, r1
 800dee2:	f034 040f 	bics.w	r4, r4, #15
 800dee6:	d073      	beq.n	800dfd0 <_strtod_l+0x518>
 800dee8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800deec:	dd48      	ble.n	800df80 <_strtod_l+0x4c8>
 800deee:	2400      	movs	r4, #0
 800def0:	46a0      	mov	r8, r4
 800def2:	940a      	str	r4, [sp, #40]	@ 0x28
 800def4:	46a1      	mov	r9, r4
 800def6:	9a05      	ldr	r2, [sp, #20]
 800def8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e050 <_strtod_l+0x598>
 800defc:	2322      	movs	r3, #34	@ 0x22
 800defe:	6013      	str	r3, [r2, #0]
 800df00:	f04f 0a00 	mov.w	sl, #0
 800df04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df06:	2b00      	cmp	r3, #0
 800df08:	f43f ae0f 	beq.w	800db2a <_strtod_l+0x72>
 800df0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df0e:	9805      	ldr	r0, [sp, #20]
 800df10:	f7ff f940 	bl	800d194 <_Bfree>
 800df14:	9805      	ldr	r0, [sp, #20]
 800df16:	4649      	mov	r1, r9
 800df18:	f7ff f93c 	bl	800d194 <_Bfree>
 800df1c:	9805      	ldr	r0, [sp, #20]
 800df1e:	4641      	mov	r1, r8
 800df20:	f7ff f938 	bl	800d194 <_Bfree>
 800df24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800df26:	9805      	ldr	r0, [sp, #20]
 800df28:	f7ff f934 	bl	800d194 <_Bfree>
 800df2c:	9805      	ldr	r0, [sp, #20]
 800df2e:	4621      	mov	r1, r4
 800df30:	f7ff f930 	bl	800d194 <_Bfree>
 800df34:	e5f9      	b.n	800db2a <_strtod_l+0x72>
 800df36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800df3c:	4293      	cmp	r3, r2
 800df3e:	dbbc      	blt.n	800deba <_strtod_l+0x402>
 800df40:	4c41      	ldr	r4, [pc, #260]	@ (800e048 <_strtod_l+0x590>)
 800df42:	f1c5 050f 	rsb	r5, r5, #15
 800df46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800df4a:	4652      	mov	r2, sl
 800df4c:	465b      	mov	r3, fp
 800df4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df52:	f7f2 fb79 	bl	8000648 <__aeabi_dmul>
 800df56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df58:	1b5d      	subs	r5, r3, r5
 800df5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800df5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800df62:	e78f      	b.n	800de84 <_strtod_l+0x3cc>
 800df64:	3316      	adds	r3, #22
 800df66:	dba8      	blt.n	800deba <_strtod_l+0x402>
 800df68:	4b37      	ldr	r3, [pc, #220]	@ (800e048 <_strtod_l+0x590>)
 800df6a:	eba9 0808 	sub.w	r8, r9, r8
 800df6e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800df72:	e9d8 2300 	ldrd	r2, r3, [r8]
 800df76:	4650      	mov	r0, sl
 800df78:	4659      	mov	r1, fp
 800df7a:	f7f2 fc8f 	bl	800089c <__aeabi_ddiv>
 800df7e:	e783      	b.n	800de88 <_strtod_l+0x3d0>
 800df80:	4b32      	ldr	r3, [pc, #200]	@ (800e04c <_strtod_l+0x594>)
 800df82:	9308      	str	r3, [sp, #32]
 800df84:	2300      	movs	r3, #0
 800df86:	1124      	asrs	r4, r4, #4
 800df88:	4650      	mov	r0, sl
 800df8a:	4659      	mov	r1, fp
 800df8c:	461e      	mov	r6, r3
 800df8e:	2c01      	cmp	r4, #1
 800df90:	dc21      	bgt.n	800dfd6 <_strtod_l+0x51e>
 800df92:	b10b      	cbz	r3, 800df98 <_strtod_l+0x4e0>
 800df94:	4682      	mov	sl, r0
 800df96:	468b      	mov	fp, r1
 800df98:	492c      	ldr	r1, [pc, #176]	@ (800e04c <_strtod_l+0x594>)
 800df9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800df9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dfa2:	4652      	mov	r2, sl
 800dfa4:	465b      	mov	r3, fp
 800dfa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfaa:	f7f2 fb4d 	bl	8000648 <__aeabi_dmul>
 800dfae:	4b28      	ldr	r3, [pc, #160]	@ (800e050 <_strtod_l+0x598>)
 800dfb0:	460a      	mov	r2, r1
 800dfb2:	400b      	ands	r3, r1
 800dfb4:	4927      	ldr	r1, [pc, #156]	@ (800e054 <_strtod_l+0x59c>)
 800dfb6:	428b      	cmp	r3, r1
 800dfb8:	4682      	mov	sl, r0
 800dfba:	d898      	bhi.n	800deee <_strtod_l+0x436>
 800dfbc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dfc0:	428b      	cmp	r3, r1
 800dfc2:	bf86      	itte	hi
 800dfc4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e058 <_strtod_l+0x5a0>
 800dfc8:	f04f 3aff 	movhi.w	sl, #4294967295
 800dfcc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	9308      	str	r3, [sp, #32]
 800dfd4:	e07a      	b.n	800e0cc <_strtod_l+0x614>
 800dfd6:	07e2      	lsls	r2, r4, #31
 800dfd8:	d505      	bpl.n	800dfe6 <_strtod_l+0x52e>
 800dfda:	9b08      	ldr	r3, [sp, #32]
 800dfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe0:	f7f2 fb32 	bl	8000648 <__aeabi_dmul>
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	9a08      	ldr	r2, [sp, #32]
 800dfe8:	3208      	adds	r2, #8
 800dfea:	3601      	adds	r6, #1
 800dfec:	1064      	asrs	r4, r4, #1
 800dfee:	9208      	str	r2, [sp, #32]
 800dff0:	e7cd      	b.n	800df8e <_strtod_l+0x4d6>
 800dff2:	d0ed      	beq.n	800dfd0 <_strtod_l+0x518>
 800dff4:	4264      	negs	r4, r4
 800dff6:	f014 020f 	ands.w	r2, r4, #15
 800dffa:	d00a      	beq.n	800e012 <_strtod_l+0x55a>
 800dffc:	4b12      	ldr	r3, [pc, #72]	@ (800e048 <_strtod_l+0x590>)
 800dffe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e002:	4650      	mov	r0, sl
 800e004:	4659      	mov	r1, fp
 800e006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00a:	f7f2 fc47 	bl	800089c <__aeabi_ddiv>
 800e00e:	4682      	mov	sl, r0
 800e010:	468b      	mov	fp, r1
 800e012:	1124      	asrs	r4, r4, #4
 800e014:	d0dc      	beq.n	800dfd0 <_strtod_l+0x518>
 800e016:	2c1f      	cmp	r4, #31
 800e018:	dd20      	ble.n	800e05c <_strtod_l+0x5a4>
 800e01a:	2400      	movs	r4, #0
 800e01c:	46a0      	mov	r8, r4
 800e01e:	940a      	str	r4, [sp, #40]	@ 0x28
 800e020:	46a1      	mov	r9, r4
 800e022:	9a05      	ldr	r2, [sp, #20]
 800e024:	2322      	movs	r3, #34	@ 0x22
 800e026:	f04f 0a00 	mov.w	sl, #0
 800e02a:	f04f 0b00 	mov.w	fp, #0
 800e02e:	6013      	str	r3, [r2, #0]
 800e030:	e768      	b.n	800df04 <_strtod_l+0x44c>
 800e032:	bf00      	nop
 800e034:	0800f885 	.word	0x0800f885
 800e038:	0800fa9c 	.word	0x0800fa9c
 800e03c:	0800f87d 	.word	0x0800f87d
 800e040:	0800f8b4 	.word	0x0800f8b4
 800e044:	0800fc45 	.word	0x0800fc45
 800e048:	0800f9d0 	.word	0x0800f9d0
 800e04c:	0800f9a8 	.word	0x0800f9a8
 800e050:	7ff00000 	.word	0x7ff00000
 800e054:	7ca00000 	.word	0x7ca00000
 800e058:	7fefffff 	.word	0x7fefffff
 800e05c:	f014 0310 	ands.w	r3, r4, #16
 800e060:	bf18      	it	ne
 800e062:	236a      	movne	r3, #106	@ 0x6a
 800e064:	4ea9      	ldr	r6, [pc, #676]	@ (800e30c <_strtod_l+0x854>)
 800e066:	9308      	str	r3, [sp, #32]
 800e068:	4650      	mov	r0, sl
 800e06a:	4659      	mov	r1, fp
 800e06c:	2300      	movs	r3, #0
 800e06e:	07e2      	lsls	r2, r4, #31
 800e070:	d504      	bpl.n	800e07c <_strtod_l+0x5c4>
 800e072:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e076:	f7f2 fae7 	bl	8000648 <__aeabi_dmul>
 800e07a:	2301      	movs	r3, #1
 800e07c:	1064      	asrs	r4, r4, #1
 800e07e:	f106 0608 	add.w	r6, r6, #8
 800e082:	d1f4      	bne.n	800e06e <_strtod_l+0x5b6>
 800e084:	b10b      	cbz	r3, 800e08a <_strtod_l+0x5d2>
 800e086:	4682      	mov	sl, r0
 800e088:	468b      	mov	fp, r1
 800e08a:	9b08      	ldr	r3, [sp, #32]
 800e08c:	b1b3      	cbz	r3, 800e0bc <_strtod_l+0x604>
 800e08e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e092:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e096:	2b00      	cmp	r3, #0
 800e098:	4659      	mov	r1, fp
 800e09a:	dd0f      	ble.n	800e0bc <_strtod_l+0x604>
 800e09c:	2b1f      	cmp	r3, #31
 800e09e:	dd55      	ble.n	800e14c <_strtod_l+0x694>
 800e0a0:	2b34      	cmp	r3, #52	@ 0x34
 800e0a2:	bfde      	ittt	le
 800e0a4:	f04f 33ff 	movle.w	r3, #4294967295
 800e0a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e0ac:	4093      	lslle	r3, r2
 800e0ae:	f04f 0a00 	mov.w	sl, #0
 800e0b2:	bfcc      	ite	gt
 800e0b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e0b8:	ea03 0b01 	andle.w	fp, r3, r1
 800e0bc:	2200      	movs	r2, #0
 800e0be:	2300      	movs	r3, #0
 800e0c0:	4650      	mov	r0, sl
 800e0c2:	4659      	mov	r1, fp
 800e0c4:	f7f2 fd28 	bl	8000b18 <__aeabi_dcmpeq>
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d1a6      	bne.n	800e01a <_strtod_l+0x562>
 800e0cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0ce:	9300      	str	r3, [sp, #0]
 800e0d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e0d2:	9805      	ldr	r0, [sp, #20]
 800e0d4:	462b      	mov	r3, r5
 800e0d6:	463a      	mov	r2, r7
 800e0d8:	f7ff f8c4 	bl	800d264 <__s2b>
 800e0dc:	900a      	str	r0, [sp, #40]	@ 0x28
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	f43f af05 	beq.w	800deee <_strtod_l+0x436>
 800e0e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0e6:	2a00      	cmp	r2, #0
 800e0e8:	eba9 0308 	sub.w	r3, r9, r8
 800e0ec:	bfa8      	it	ge
 800e0ee:	2300      	movge	r3, #0
 800e0f0:	9312      	str	r3, [sp, #72]	@ 0x48
 800e0f2:	2400      	movs	r4, #0
 800e0f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e0f8:	9316      	str	r3, [sp, #88]	@ 0x58
 800e0fa:	46a0      	mov	r8, r4
 800e0fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0fe:	9805      	ldr	r0, [sp, #20]
 800e100:	6859      	ldr	r1, [r3, #4]
 800e102:	f7ff f807 	bl	800d114 <_Balloc>
 800e106:	4681      	mov	r9, r0
 800e108:	2800      	cmp	r0, #0
 800e10a:	f43f aef4 	beq.w	800def6 <_strtod_l+0x43e>
 800e10e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e110:	691a      	ldr	r2, [r3, #16]
 800e112:	3202      	adds	r2, #2
 800e114:	f103 010c 	add.w	r1, r3, #12
 800e118:	0092      	lsls	r2, r2, #2
 800e11a:	300c      	adds	r0, #12
 800e11c:	f7fe f94f 	bl	800c3be <memcpy>
 800e120:	ec4b ab10 	vmov	d0, sl, fp
 800e124:	9805      	ldr	r0, [sp, #20]
 800e126:	aa1c      	add	r2, sp, #112	@ 0x70
 800e128:	a91b      	add	r1, sp, #108	@ 0x6c
 800e12a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e12e:	f7ff fbd5 	bl	800d8dc <__d2b>
 800e132:	901a      	str	r0, [sp, #104]	@ 0x68
 800e134:	2800      	cmp	r0, #0
 800e136:	f43f aede 	beq.w	800def6 <_strtod_l+0x43e>
 800e13a:	9805      	ldr	r0, [sp, #20]
 800e13c:	2101      	movs	r1, #1
 800e13e:	f7ff f927 	bl	800d390 <__i2b>
 800e142:	4680      	mov	r8, r0
 800e144:	b948      	cbnz	r0, 800e15a <_strtod_l+0x6a2>
 800e146:	f04f 0800 	mov.w	r8, #0
 800e14a:	e6d4      	b.n	800def6 <_strtod_l+0x43e>
 800e14c:	f04f 32ff 	mov.w	r2, #4294967295
 800e150:	fa02 f303 	lsl.w	r3, r2, r3
 800e154:	ea03 0a0a 	and.w	sl, r3, sl
 800e158:	e7b0      	b.n	800e0bc <_strtod_l+0x604>
 800e15a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e15c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e15e:	2d00      	cmp	r5, #0
 800e160:	bfab      	itete	ge
 800e162:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e164:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e166:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e168:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e16a:	bfac      	ite	ge
 800e16c:	18ef      	addge	r7, r5, r3
 800e16e:	1b5e      	sublt	r6, r3, r5
 800e170:	9b08      	ldr	r3, [sp, #32]
 800e172:	1aed      	subs	r5, r5, r3
 800e174:	4415      	add	r5, r2
 800e176:	4b66      	ldr	r3, [pc, #408]	@ (800e310 <_strtod_l+0x858>)
 800e178:	3d01      	subs	r5, #1
 800e17a:	429d      	cmp	r5, r3
 800e17c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e180:	da50      	bge.n	800e224 <_strtod_l+0x76c>
 800e182:	1b5b      	subs	r3, r3, r5
 800e184:	2b1f      	cmp	r3, #31
 800e186:	eba2 0203 	sub.w	r2, r2, r3
 800e18a:	f04f 0101 	mov.w	r1, #1
 800e18e:	dc3d      	bgt.n	800e20c <_strtod_l+0x754>
 800e190:	fa01 f303 	lsl.w	r3, r1, r3
 800e194:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e196:	2300      	movs	r3, #0
 800e198:	9310      	str	r3, [sp, #64]	@ 0x40
 800e19a:	18bd      	adds	r5, r7, r2
 800e19c:	9b08      	ldr	r3, [sp, #32]
 800e19e:	42af      	cmp	r7, r5
 800e1a0:	4416      	add	r6, r2
 800e1a2:	441e      	add	r6, r3
 800e1a4:	463b      	mov	r3, r7
 800e1a6:	bfa8      	it	ge
 800e1a8:	462b      	movge	r3, r5
 800e1aa:	42b3      	cmp	r3, r6
 800e1ac:	bfa8      	it	ge
 800e1ae:	4633      	movge	r3, r6
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	bfc2      	ittt	gt
 800e1b4:	1aed      	subgt	r5, r5, r3
 800e1b6:	1af6      	subgt	r6, r6, r3
 800e1b8:	1aff      	subgt	r7, r7, r3
 800e1ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	dd16      	ble.n	800e1ee <_strtod_l+0x736>
 800e1c0:	4641      	mov	r1, r8
 800e1c2:	9805      	ldr	r0, [sp, #20]
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	f7ff f9a3 	bl	800d510 <__pow5mult>
 800e1ca:	4680      	mov	r8, r0
 800e1cc:	2800      	cmp	r0, #0
 800e1ce:	d0ba      	beq.n	800e146 <_strtod_l+0x68e>
 800e1d0:	4601      	mov	r1, r0
 800e1d2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e1d4:	9805      	ldr	r0, [sp, #20]
 800e1d6:	f7ff f8f1 	bl	800d3bc <__multiply>
 800e1da:	900e      	str	r0, [sp, #56]	@ 0x38
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	f43f ae8a 	beq.w	800def6 <_strtod_l+0x43e>
 800e1e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1e4:	9805      	ldr	r0, [sp, #20]
 800e1e6:	f7fe ffd5 	bl	800d194 <_Bfree>
 800e1ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1ee:	2d00      	cmp	r5, #0
 800e1f0:	dc1d      	bgt.n	800e22e <_strtod_l+0x776>
 800e1f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	dd23      	ble.n	800e240 <_strtod_l+0x788>
 800e1f8:	4649      	mov	r1, r9
 800e1fa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e1fc:	9805      	ldr	r0, [sp, #20]
 800e1fe:	f7ff f987 	bl	800d510 <__pow5mult>
 800e202:	4681      	mov	r9, r0
 800e204:	b9e0      	cbnz	r0, 800e240 <_strtod_l+0x788>
 800e206:	f04f 0900 	mov.w	r9, #0
 800e20a:	e674      	b.n	800def6 <_strtod_l+0x43e>
 800e20c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e210:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e214:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e218:	35e2      	adds	r5, #226	@ 0xe2
 800e21a:	fa01 f305 	lsl.w	r3, r1, r5
 800e21e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e220:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e222:	e7ba      	b.n	800e19a <_strtod_l+0x6e2>
 800e224:	2300      	movs	r3, #0
 800e226:	9310      	str	r3, [sp, #64]	@ 0x40
 800e228:	2301      	movs	r3, #1
 800e22a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e22c:	e7b5      	b.n	800e19a <_strtod_l+0x6e2>
 800e22e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e230:	9805      	ldr	r0, [sp, #20]
 800e232:	462a      	mov	r2, r5
 800e234:	f7ff f9c6 	bl	800d5c4 <__lshift>
 800e238:	901a      	str	r0, [sp, #104]	@ 0x68
 800e23a:	2800      	cmp	r0, #0
 800e23c:	d1d9      	bne.n	800e1f2 <_strtod_l+0x73a>
 800e23e:	e65a      	b.n	800def6 <_strtod_l+0x43e>
 800e240:	2e00      	cmp	r6, #0
 800e242:	dd07      	ble.n	800e254 <_strtod_l+0x79c>
 800e244:	4649      	mov	r1, r9
 800e246:	9805      	ldr	r0, [sp, #20]
 800e248:	4632      	mov	r2, r6
 800e24a:	f7ff f9bb 	bl	800d5c4 <__lshift>
 800e24e:	4681      	mov	r9, r0
 800e250:	2800      	cmp	r0, #0
 800e252:	d0d8      	beq.n	800e206 <_strtod_l+0x74e>
 800e254:	2f00      	cmp	r7, #0
 800e256:	dd08      	ble.n	800e26a <_strtod_l+0x7b2>
 800e258:	4641      	mov	r1, r8
 800e25a:	9805      	ldr	r0, [sp, #20]
 800e25c:	463a      	mov	r2, r7
 800e25e:	f7ff f9b1 	bl	800d5c4 <__lshift>
 800e262:	4680      	mov	r8, r0
 800e264:	2800      	cmp	r0, #0
 800e266:	f43f ae46 	beq.w	800def6 <_strtod_l+0x43e>
 800e26a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e26c:	9805      	ldr	r0, [sp, #20]
 800e26e:	464a      	mov	r2, r9
 800e270:	f7ff fa30 	bl	800d6d4 <__mdiff>
 800e274:	4604      	mov	r4, r0
 800e276:	2800      	cmp	r0, #0
 800e278:	f43f ae3d 	beq.w	800def6 <_strtod_l+0x43e>
 800e27c:	68c3      	ldr	r3, [r0, #12]
 800e27e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e280:	2300      	movs	r3, #0
 800e282:	60c3      	str	r3, [r0, #12]
 800e284:	4641      	mov	r1, r8
 800e286:	f7ff fa09 	bl	800d69c <__mcmp>
 800e28a:	2800      	cmp	r0, #0
 800e28c:	da46      	bge.n	800e31c <_strtod_l+0x864>
 800e28e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e290:	ea53 030a 	orrs.w	r3, r3, sl
 800e294:	d16c      	bne.n	800e370 <_strtod_l+0x8b8>
 800e296:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d168      	bne.n	800e370 <_strtod_l+0x8b8>
 800e29e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e2a2:	0d1b      	lsrs	r3, r3, #20
 800e2a4:	051b      	lsls	r3, r3, #20
 800e2a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e2aa:	d961      	bls.n	800e370 <_strtod_l+0x8b8>
 800e2ac:	6963      	ldr	r3, [r4, #20]
 800e2ae:	b913      	cbnz	r3, 800e2b6 <_strtod_l+0x7fe>
 800e2b0:	6923      	ldr	r3, [r4, #16]
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	dd5c      	ble.n	800e370 <_strtod_l+0x8b8>
 800e2b6:	4621      	mov	r1, r4
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	9805      	ldr	r0, [sp, #20]
 800e2bc:	f7ff f982 	bl	800d5c4 <__lshift>
 800e2c0:	4641      	mov	r1, r8
 800e2c2:	4604      	mov	r4, r0
 800e2c4:	f7ff f9ea 	bl	800d69c <__mcmp>
 800e2c8:	2800      	cmp	r0, #0
 800e2ca:	dd51      	ble.n	800e370 <_strtod_l+0x8b8>
 800e2cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e2d0:	9a08      	ldr	r2, [sp, #32]
 800e2d2:	0d1b      	lsrs	r3, r3, #20
 800e2d4:	051b      	lsls	r3, r3, #20
 800e2d6:	2a00      	cmp	r2, #0
 800e2d8:	d06b      	beq.n	800e3b2 <_strtod_l+0x8fa>
 800e2da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e2de:	d868      	bhi.n	800e3b2 <_strtod_l+0x8fa>
 800e2e0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e2e4:	f67f ae9d 	bls.w	800e022 <_strtod_l+0x56a>
 800e2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800e314 <_strtod_l+0x85c>)
 800e2ea:	4650      	mov	r0, sl
 800e2ec:	4659      	mov	r1, fp
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	f7f2 f9aa 	bl	8000648 <__aeabi_dmul>
 800e2f4:	4b08      	ldr	r3, [pc, #32]	@ (800e318 <_strtod_l+0x860>)
 800e2f6:	400b      	ands	r3, r1
 800e2f8:	4682      	mov	sl, r0
 800e2fa:	468b      	mov	fp, r1
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	f47f ae05 	bne.w	800df0c <_strtod_l+0x454>
 800e302:	9a05      	ldr	r2, [sp, #20]
 800e304:	2322      	movs	r3, #34	@ 0x22
 800e306:	6013      	str	r3, [r2, #0]
 800e308:	e600      	b.n	800df0c <_strtod_l+0x454>
 800e30a:	bf00      	nop
 800e30c:	0800fac8 	.word	0x0800fac8
 800e310:	fffffc02 	.word	0xfffffc02
 800e314:	39500000 	.word	0x39500000
 800e318:	7ff00000 	.word	0x7ff00000
 800e31c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e320:	d165      	bne.n	800e3ee <_strtod_l+0x936>
 800e322:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e324:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e328:	b35a      	cbz	r2, 800e382 <_strtod_l+0x8ca>
 800e32a:	4a9f      	ldr	r2, [pc, #636]	@ (800e5a8 <_strtod_l+0xaf0>)
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d12b      	bne.n	800e388 <_strtod_l+0x8d0>
 800e330:	9b08      	ldr	r3, [sp, #32]
 800e332:	4651      	mov	r1, sl
 800e334:	b303      	cbz	r3, 800e378 <_strtod_l+0x8c0>
 800e336:	4b9d      	ldr	r3, [pc, #628]	@ (800e5ac <_strtod_l+0xaf4>)
 800e338:	465a      	mov	r2, fp
 800e33a:	4013      	ands	r3, r2
 800e33c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e340:	f04f 32ff 	mov.w	r2, #4294967295
 800e344:	d81b      	bhi.n	800e37e <_strtod_l+0x8c6>
 800e346:	0d1b      	lsrs	r3, r3, #20
 800e348:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e34c:	fa02 f303 	lsl.w	r3, r2, r3
 800e350:	4299      	cmp	r1, r3
 800e352:	d119      	bne.n	800e388 <_strtod_l+0x8d0>
 800e354:	4b96      	ldr	r3, [pc, #600]	@ (800e5b0 <_strtod_l+0xaf8>)
 800e356:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e358:	429a      	cmp	r2, r3
 800e35a:	d102      	bne.n	800e362 <_strtod_l+0x8aa>
 800e35c:	3101      	adds	r1, #1
 800e35e:	f43f adca 	beq.w	800def6 <_strtod_l+0x43e>
 800e362:	4b92      	ldr	r3, [pc, #584]	@ (800e5ac <_strtod_l+0xaf4>)
 800e364:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e366:	401a      	ands	r2, r3
 800e368:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e36c:	f04f 0a00 	mov.w	sl, #0
 800e370:	9b08      	ldr	r3, [sp, #32]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d1b8      	bne.n	800e2e8 <_strtod_l+0x830>
 800e376:	e5c9      	b.n	800df0c <_strtod_l+0x454>
 800e378:	f04f 33ff 	mov.w	r3, #4294967295
 800e37c:	e7e8      	b.n	800e350 <_strtod_l+0x898>
 800e37e:	4613      	mov	r3, r2
 800e380:	e7e6      	b.n	800e350 <_strtod_l+0x898>
 800e382:	ea53 030a 	orrs.w	r3, r3, sl
 800e386:	d0a1      	beq.n	800e2cc <_strtod_l+0x814>
 800e388:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e38a:	b1db      	cbz	r3, 800e3c4 <_strtod_l+0x90c>
 800e38c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e38e:	4213      	tst	r3, r2
 800e390:	d0ee      	beq.n	800e370 <_strtod_l+0x8b8>
 800e392:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e394:	9a08      	ldr	r2, [sp, #32]
 800e396:	4650      	mov	r0, sl
 800e398:	4659      	mov	r1, fp
 800e39a:	b1bb      	cbz	r3, 800e3cc <_strtod_l+0x914>
 800e39c:	f7ff fb6c 	bl	800da78 <sulp>
 800e3a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e3a4:	ec53 2b10 	vmov	r2, r3, d0
 800e3a8:	f7f1 ff98 	bl	80002dc <__adddf3>
 800e3ac:	4682      	mov	sl, r0
 800e3ae:	468b      	mov	fp, r1
 800e3b0:	e7de      	b.n	800e370 <_strtod_l+0x8b8>
 800e3b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e3b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e3ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e3be:	f04f 3aff 	mov.w	sl, #4294967295
 800e3c2:	e7d5      	b.n	800e370 <_strtod_l+0x8b8>
 800e3c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e3c6:	ea13 0f0a 	tst.w	r3, sl
 800e3ca:	e7e1      	b.n	800e390 <_strtod_l+0x8d8>
 800e3cc:	f7ff fb54 	bl	800da78 <sulp>
 800e3d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e3d4:	ec53 2b10 	vmov	r2, r3, d0
 800e3d8:	f7f1 ff7e 	bl	80002d8 <__aeabi_dsub>
 800e3dc:	2200      	movs	r2, #0
 800e3de:	2300      	movs	r3, #0
 800e3e0:	4682      	mov	sl, r0
 800e3e2:	468b      	mov	fp, r1
 800e3e4:	f7f2 fb98 	bl	8000b18 <__aeabi_dcmpeq>
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	d0c1      	beq.n	800e370 <_strtod_l+0x8b8>
 800e3ec:	e619      	b.n	800e022 <_strtod_l+0x56a>
 800e3ee:	4641      	mov	r1, r8
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	f7ff facb 	bl	800d98c <__ratio>
 800e3f6:	ec57 6b10 	vmov	r6, r7, d0
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e400:	4630      	mov	r0, r6
 800e402:	4639      	mov	r1, r7
 800e404:	f7f2 fb9c 	bl	8000b40 <__aeabi_dcmple>
 800e408:	2800      	cmp	r0, #0
 800e40a:	d06f      	beq.n	800e4ec <_strtod_l+0xa34>
 800e40c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d17a      	bne.n	800e508 <_strtod_l+0xa50>
 800e412:	f1ba 0f00 	cmp.w	sl, #0
 800e416:	d158      	bne.n	800e4ca <_strtod_l+0xa12>
 800e418:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e41a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d15a      	bne.n	800e4d8 <_strtod_l+0xa20>
 800e422:	4b64      	ldr	r3, [pc, #400]	@ (800e5b4 <_strtod_l+0xafc>)
 800e424:	2200      	movs	r2, #0
 800e426:	4630      	mov	r0, r6
 800e428:	4639      	mov	r1, r7
 800e42a:	f7f2 fb7f 	bl	8000b2c <__aeabi_dcmplt>
 800e42e:	2800      	cmp	r0, #0
 800e430:	d159      	bne.n	800e4e6 <_strtod_l+0xa2e>
 800e432:	4630      	mov	r0, r6
 800e434:	4639      	mov	r1, r7
 800e436:	4b60      	ldr	r3, [pc, #384]	@ (800e5b8 <_strtod_l+0xb00>)
 800e438:	2200      	movs	r2, #0
 800e43a:	f7f2 f905 	bl	8000648 <__aeabi_dmul>
 800e43e:	4606      	mov	r6, r0
 800e440:	460f      	mov	r7, r1
 800e442:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e446:	9606      	str	r6, [sp, #24]
 800e448:	9307      	str	r3, [sp, #28]
 800e44a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e44e:	4d57      	ldr	r5, [pc, #348]	@ (800e5ac <_strtod_l+0xaf4>)
 800e450:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e456:	401d      	ands	r5, r3
 800e458:	4b58      	ldr	r3, [pc, #352]	@ (800e5bc <_strtod_l+0xb04>)
 800e45a:	429d      	cmp	r5, r3
 800e45c:	f040 80b2 	bne.w	800e5c4 <_strtod_l+0xb0c>
 800e460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e462:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e466:	ec4b ab10 	vmov	d0, sl, fp
 800e46a:	f7ff f9c7 	bl	800d7fc <__ulp>
 800e46e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e472:	ec51 0b10 	vmov	r0, r1, d0
 800e476:	f7f2 f8e7 	bl	8000648 <__aeabi_dmul>
 800e47a:	4652      	mov	r2, sl
 800e47c:	465b      	mov	r3, fp
 800e47e:	f7f1 ff2d 	bl	80002dc <__adddf3>
 800e482:	460b      	mov	r3, r1
 800e484:	4949      	ldr	r1, [pc, #292]	@ (800e5ac <_strtod_l+0xaf4>)
 800e486:	4a4e      	ldr	r2, [pc, #312]	@ (800e5c0 <_strtod_l+0xb08>)
 800e488:	4019      	ands	r1, r3
 800e48a:	4291      	cmp	r1, r2
 800e48c:	4682      	mov	sl, r0
 800e48e:	d942      	bls.n	800e516 <_strtod_l+0xa5e>
 800e490:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e492:	4b47      	ldr	r3, [pc, #284]	@ (800e5b0 <_strtod_l+0xaf8>)
 800e494:	429a      	cmp	r2, r3
 800e496:	d103      	bne.n	800e4a0 <_strtod_l+0x9e8>
 800e498:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e49a:	3301      	adds	r3, #1
 800e49c:	f43f ad2b 	beq.w	800def6 <_strtod_l+0x43e>
 800e4a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e5b0 <_strtod_l+0xaf8>
 800e4a4:	f04f 3aff 	mov.w	sl, #4294967295
 800e4a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e4aa:	9805      	ldr	r0, [sp, #20]
 800e4ac:	f7fe fe72 	bl	800d194 <_Bfree>
 800e4b0:	9805      	ldr	r0, [sp, #20]
 800e4b2:	4649      	mov	r1, r9
 800e4b4:	f7fe fe6e 	bl	800d194 <_Bfree>
 800e4b8:	9805      	ldr	r0, [sp, #20]
 800e4ba:	4641      	mov	r1, r8
 800e4bc:	f7fe fe6a 	bl	800d194 <_Bfree>
 800e4c0:	9805      	ldr	r0, [sp, #20]
 800e4c2:	4621      	mov	r1, r4
 800e4c4:	f7fe fe66 	bl	800d194 <_Bfree>
 800e4c8:	e618      	b.n	800e0fc <_strtod_l+0x644>
 800e4ca:	f1ba 0f01 	cmp.w	sl, #1
 800e4ce:	d103      	bne.n	800e4d8 <_strtod_l+0xa20>
 800e4d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	f43f ada5 	beq.w	800e022 <_strtod_l+0x56a>
 800e4d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e588 <_strtod_l+0xad0>
 800e4dc:	4f35      	ldr	r7, [pc, #212]	@ (800e5b4 <_strtod_l+0xafc>)
 800e4de:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e4e2:	2600      	movs	r6, #0
 800e4e4:	e7b1      	b.n	800e44a <_strtod_l+0x992>
 800e4e6:	4f34      	ldr	r7, [pc, #208]	@ (800e5b8 <_strtod_l+0xb00>)
 800e4e8:	2600      	movs	r6, #0
 800e4ea:	e7aa      	b.n	800e442 <_strtod_l+0x98a>
 800e4ec:	4b32      	ldr	r3, [pc, #200]	@ (800e5b8 <_strtod_l+0xb00>)
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	4639      	mov	r1, r7
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f7f2 f8a8 	bl	8000648 <__aeabi_dmul>
 800e4f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4fa:	4606      	mov	r6, r0
 800e4fc:	460f      	mov	r7, r1
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d09f      	beq.n	800e442 <_strtod_l+0x98a>
 800e502:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e506:	e7a0      	b.n	800e44a <_strtod_l+0x992>
 800e508:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e590 <_strtod_l+0xad8>
 800e50c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e510:	ec57 6b17 	vmov	r6, r7, d7
 800e514:	e799      	b.n	800e44a <_strtod_l+0x992>
 800e516:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e51a:	9b08      	ldr	r3, [sp, #32]
 800e51c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e520:	2b00      	cmp	r3, #0
 800e522:	d1c1      	bne.n	800e4a8 <_strtod_l+0x9f0>
 800e524:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e528:	0d1b      	lsrs	r3, r3, #20
 800e52a:	051b      	lsls	r3, r3, #20
 800e52c:	429d      	cmp	r5, r3
 800e52e:	d1bb      	bne.n	800e4a8 <_strtod_l+0x9f0>
 800e530:	4630      	mov	r0, r6
 800e532:	4639      	mov	r1, r7
 800e534:	f7f2 fbe8 	bl	8000d08 <__aeabi_d2lz>
 800e538:	f7f2 f858 	bl	80005ec <__aeabi_l2d>
 800e53c:	4602      	mov	r2, r0
 800e53e:	460b      	mov	r3, r1
 800e540:	4630      	mov	r0, r6
 800e542:	4639      	mov	r1, r7
 800e544:	f7f1 fec8 	bl	80002d8 <__aeabi_dsub>
 800e548:	460b      	mov	r3, r1
 800e54a:	4602      	mov	r2, r0
 800e54c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e550:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e556:	ea46 060a 	orr.w	r6, r6, sl
 800e55a:	431e      	orrs	r6, r3
 800e55c:	d06f      	beq.n	800e63e <_strtod_l+0xb86>
 800e55e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e598 <_strtod_l+0xae0>)
 800e560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e564:	f7f2 fae2 	bl	8000b2c <__aeabi_dcmplt>
 800e568:	2800      	cmp	r0, #0
 800e56a:	f47f accf 	bne.w	800df0c <_strtod_l+0x454>
 800e56e:	a30c      	add	r3, pc, #48	@ (adr r3, 800e5a0 <_strtod_l+0xae8>)
 800e570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e574:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e578:	f7f2 faf6 	bl	8000b68 <__aeabi_dcmpgt>
 800e57c:	2800      	cmp	r0, #0
 800e57e:	d093      	beq.n	800e4a8 <_strtod_l+0x9f0>
 800e580:	e4c4      	b.n	800df0c <_strtod_l+0x454>
 800e582:	bf00      	nop
 800e584:	f3af 8000 	nop.w
 800e588:	00000000 	.word	0x00000000
 800e58c:	bff00000 	.word	0xbff00000
 800e590:	00000000 	.word	0x00000000
 800e594:	3ff00000 	.word	0x3ff00000
 800e598:	94a03595 	.word	0x94a03595
 800e59c:	3fdfffff 	.word	0x3fdfffff
 800e5a0:	35afe535 	.word	0x35afe535
 800e5a4:	3fe00000 	.word	0x3fe00000
 800e5a8:	000fffff 	.word	0x000fffff
 800e5ac:	7ff00000 	.word	0x7ff00000
 800e5b0:	7fefffff 	.word	0x7fefffff
 800e5b4:	3ff00000 	.word	0x3ff00000
 800e5b8:	3fe00000 	.word	0x3fe00000
 800e5bc:	7fe00000 	.word	0x7fe00000
 800e5c0:	7c9fffff 	.word	0x7c9fffff
 800e5c4:	9b08      	ldr	r3, [sp, #32]
 800e5c6:	b323      	cbz	r3, 800e612 <_strtod_l+0xb5a>
 800e5c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e5cc:	d821      	bhi.n	800e612 <_strtod_l+0xb5a>
 800e5ce:	a328      	add	r3, pc, #160	@ (adr r3, 800e670 <_strtod_l+0xbb8>)
 800e5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	4639      	mov	r1, r7
 800e5d8:	f7f2 fab2 	bl	8000b40 <__aeabi_dcmple>
 800e5dc:	b1a0      	cbz	r0, 800e608 <_strtod_l+0xb50>
 800e5de:	4639      	mov	r1, r7
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	f7f2 fb09 	bl	8000bf8 <__aeabi_d2uiz>
 800e5e6:	2801      	cmp	r0, #1
 800e5e8:	bf38      	it	cc
 800e5ea:	2001      	movcc	r0, #1
 800e5ec:	f7f1 ffb2 	bl	8000554 <__aeabi_ui2d>
 800e5f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5f2:	4606      	mov	r6, r0
 800e5f4:	460f      	mov	r7, r1
 800e5f6:	b9fb      	cbnz	r3, 800e638 <_strtod_l+0xb80>
 800e5f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e5fc:	9014      	str	r0, [sp, #80]	@ 0x50
 800e5fe:	9315      	str	r3, [sp, #84]	@ 0x54
 800e600:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e604:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e608:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e60a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e60e:	1b5b      	subs	r3, r3, r5
 800e610:	9311      	str	r3, [sp, #68]	@ 0x44
 800e612:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e616:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e61a:	f7ff f8ef 	bl	800d7fc <__ulp>
 800e61e:	4650      	mov	r0, sl
 800e620:	ec53 2b10 	vmov	r2, r3, d0
 800e624:	4659      	mov	r1, fp
 800e626:	f7f2 f80f 	bl	8000648 <__aeabi_dmul>
 800e62a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e62e:	f7f1 fe55 	bl	80002dc <__adddf3>
 800e632:	4682      	mov	sl, r0
 800e634:	468b      	mov	fp, r1
 800e636:	e770      	b.n	800e51a <_strtod_l+0xa62>
 800e638:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e63c:	e7e0      	b.n	800e600 <_strtod_l+0xb48>
 800e63e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e678 <_strtod_l+0xbc0>)
 800e640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e644:	f7f2 fa72 	bl	8000b2c <__aeabi_dcmplt>
 800e648:	e798      	b.n	800e57c <_strtod_l+0xac4>
 800e64a:	2300      	movs	r3, #0
 800e64c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e64e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e650:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e652:	6013      	str	r3, [r2, #0]
 800e654:	f7ff ba6d 	b.w	800db32 <_strtod_l+0x7a>
 800e658:	2a65      	cmp	r2, #101	@ 0x65
 800e65a:	f43f ab66 	beq.w	800dd2a <_strtod_l+0x272>
 800e65e:	2a45      	cmp	r2, #69	@ 0x45
 800e660:	f43f ab63 	beq.w	800dd2a <_strtod_l+0x272>
 800e664:	2301      	movs	r3, #1
 800e666:	f7ff bb9e 	b.w	800dda6 <_strtod_l+0x2ee>
 800e66a:	bf00      	nop
 800e66c:	f3af 8000 	nop.w
 800e670:	ffc00000 	.word	0xffc00000
 800e674:	41dfffff 	.word	0x41dfffff
 800e678:	94a03595 	.word	0x94a03595
 800e67c:	3fcfffff 	.word	0x3fcfffff

0800e680 <_strtod_r>:
 800e680:	4b01      	ldr	r3, [pc, #4]	@ (800e688 <_strtod_r+0x8>)
 800e682:	f7ff ba19 	b.w	800dab8 <_strtod_l>
 800e686:	bf00      	nop
 800e688:	20000068 	.word	0x20000068

0800e68c <_strtol_l.constprop.0>:
 800e68c:	2b24      	cmp	r3, #36	@ 0x24
 800e68e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e692:	4686      	mov	lr, r0
 800e694:	4690      	mov	r8, r2
 800e696:	d801      	bhi.n	800e69c <_strtol_l.constprop.0+0x10>
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d106      	bne.n	800e6aa <_strtol_l.constprop.0+0x1e>
 800e69c:	f7fd fe62 	bl	800c364 <__errno>
 800e6a0:	2316      	movs	r3, #22
 800e6a2:	6003      	str	r3, [r0, #0]
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6aa:	4834      	ldr	r0, [pc, #208]	@ (800e77c <_strtol_l.constprop.0+0xf0>)
 800e6ac:	460d      	mov	r5, r1
 800e6ae:	462a      	mov	r2, r5
 800e6b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e6b4:	5d06      	ldrb	r6, [r0, r4]
 800e6b6:	f016 0608 	ands.w	r6, r6, #8
 800e6ba:	d1f8      	bne.n	800e6ae <_strtol_l.constprop.0+0x22>
 800e6bc:	2c2d      	cmp	r4, #45	@ 0x2d
 800e6be:	d12d      	bne.n	800e71c <_strtol_l.constprop.0+0x90>
 800e6c0:	782c      	ldrb	r4, [r5, #0]
 800e6c2:	2601      	movs	r6, #1
 800e6c4:	1c95      	adds	r5, r2, #2
 800e6c6:	f033 0210 	bics.w	r2, r3, #16
 800e6ca:	d109      	bne.n	800e6e0 <_strtol_l.constprop.0+0x54>
 800e6cc:	2c30      	cmp	r4, #48	@ 0x30
 800e6ce:	d12a      	bne.n	800e726 <_strtol_l.constprop.0+0x9a>
 800e6d0:	782a      	ldrb	r2, [r5, #0]
 800e6d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e6d6:	2a58      	cmp	r2, #88	@ 0x58
 800e6d8:	d125      	bne.n	800e726 <_strtol_l.constprop.0+0x9a>
 800e6da:	786c      	ldrb	r4, [r5, #1]
 800e6dc:	2310      	movs	r3, #16
 800e6de:	3502      	adds	r5, #2
 800e6e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e6e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	fbbc f9f3 	udiv	r9, ip, r3
 800e6ee:	4610      	mov	r0, r2
 800e6f0:	fb03 ca19 	mls	sl, r3, r9, ip
 800e6f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e6f8:	2f09      	cmp	r7, #9
 800e6fa:	d81b      	bhi.n	800e734 <_strtol_l.constprop.0+0xa8>
 800e6fc:	463c      	mov	r4, r7
 800e6fe:	42a3      	cmp	r3, r4
 800e700:	dd27      	ble.n	800e752 <_strtol_l.constprop.0+0xc6>
 800e702:	1c57      	adds	r7, r2, #1
 800e704:	d007      	beq.n	800e716 <_strtol_l.constprop.0+0x8a>
 800e706:	4581      	cmp	r9, r0
 800e708:	d320      	bcc.n	800e74c <_strtol_l.constprop.0+0xc0>
 800e70a:	d101      	bne.n	800e710 <_strtol_l.constprop.0+0x84>
 800e70c:	45a2      	cmp	sl, r4
 800e70e:	db1d      	blt.n	800e74c <_strtol_l.constprop.0+0xc0>
 800e710:	fb00 4003 	mla	r0, r0, r3, r4
 800e714:	2201      	movs	r2, #1
 800e716:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e71a:	e7eb      	b.n	800e6f4 <_strtol_l.constprop.0+0x68>
 800e71c:	2c2b      	cmp	r4, #43	@ 0x2b
 800e71e:	bf04      	itt	eq
 800e720:	782c      	ldrbeq	r4, [r5, #0]
 800e722:	1c95      	addeq	r5, r2, #2
 800e724:	e7cf      	b.n	800e6c6 <_strtol_l.constprop.0+0x3a>
 800e726:	2b00      	cmp	r3, #0
 800e728:	d1da      	bne.n	800e6e0 <_strtol_l.constprop.0+0x54>
 800e72a:	2c30      	cmp	r4, #48	@ 0x30
 800e72c:	bf0c      	ite	eq
 800e72e:	2308      	moveq	r3, #8
 800e730:	230a      	movne	r3, #10
 800e732:	e7d5      	b.n	800e6e0 <_strtol_l.constprop.0+0x54>
 800e734:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e738:	2f19      	cmp	r7, #25
 800e73a:	d801      	bhi.n	800e740 <_strtol_l.constprop.0+0xb4>
 800e73c:	3c37      	subs	r4, #55	@ 0x37
 800e73e:	e7de      	b.n	800e6fe <_strtol_l.constprop.0+0x72>
 800e740:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e744:	2f19      	cmp	r7, #25
 800e746:	d804      	bhi.n	800e752 <_strtol_l.constprop.0+0xc6>
 800e748:	3c57      	subs	r4, #87	@ 0x57
 800e74a:	e7d8      	b.n	800e6fe <_strtol_l.constprop.0+0x72>
 800e74c:	f04f 32ff 	mov.w	r2, #4294967295
 800e750:	e7e1      	b.n	800e716 <_strtol_l.constprop.0+0x8a>
 800e752:	1c53      	adds	r3, r2, #1
 800e754:	d108      	bne.n	800e768 <_strtol_l.constprop.0+0xdc>
 800e756:	2322      	movs	r3, #34	@ 0x22
 800e758:	f8ce 3000 	str.w	r3, [lr]
 800e75c:	4660      	mov	r0, ip
 800e75e:	f1b8 0f00 	cmp.w	r8, #0
 800e762:	d0a0      	beq.n	800e6a6 <_strtol_l.constprop.0+0x1a>
 800e764:	1e69      	subs	r1, r5, #1
 800e766:	e006      	b.n	800e776 <_strtol_l.constprop.0+0xea>
 800e768:	b106      	cbz	r6, 800e76c <_strtol_l.constprop.0+0xe0>
 800e76a:	4240      	negs	r0, r0
 800e76c:	f1b8 0f00 	cmp.w	r8, #0
 800e770:	d099      	beq.n	800e6a6 <_strtol_l.constprop.0+0x1a>
 800e772:	2a00      	cmp	r2, #0
 800e774:	d1f6      	bne.n	800e764 <_strtol_l.constprop.0+0xd8>
 800e776:	f8c8 1000 	str.w	r1, [r8]
 800e77a:	e794      	b.n	800e6a6 <_strtol_l.constprop.0+0x1a>
 800e77c:	0800faf1 	.word	0x0800faf1

0800e780 <_strtol_r>:
 800e780:	f7ff bf84 	b.w	800e68c <_strtol_l.constprop.0>

0800e784 <__ssputs_r>:
 800e784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e788:	688e      	ldr	r6, [r1, #8]
 800e78a:	461f      	mov	r7, r3
 800e78c:	42be      	cmp	r6, r7
 800e78e:	680b      	ldr	r3, [r1, #0]
 800e790:	4682      	mov	sl, r0
 800e792:	460c      	mov	r4, r1
 800e794:	4690      	mov	r8, r2
 800e796:	d82d      	bhi.n	800e7f4 <__ssputs_r+0x70>
 800e798:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e79c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e7a0:	d026      	beq.n	800e7f0 <__ssputs_r+0x6c>
 800e7a2:	6965      	ldr	r5, [r4, #20]
 800e7a4:	6909      	ldr	r1, [r1, #16]
 800e7a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e7aa:	eba3 0901 	sub.w	r9, r3, r1
 800e7ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e7b2:	1c7b      	adds	r3, r7, #1
 800e7b4:	444b      	add	r3, r9
 800e7b6:	106d      	asrs	r5, r5, #1
 800e7b8:	429d      	cmp	r5, r3
 800e7ba:	bf38      	it	cc
 800e7bc:	461d      	movcc	r5, r3
 800e7be:	0553      	lsls	r3, r2, #21
 800e7c0:	d527      	bpl.n	800e812 <__ssputs_r+0x8e>
 800e7c2:	4629      	mov	r1, r5
 800e7c4:	f7fc fc76 	bl	800b0b4 <_malloc_r>
 800e7c8:	4606      	mov	r6, r0
 800e7ca:	b360      	cbz	r0, 800e826 <__ssputs_r+0xa2>
 800e7cc:	6921      	ldr	r1, [r4, #16]
 800e7ce:	464a      	mov	r2, r9
 800e7d0:	f7fd fdf5 	bl	800c3be <memcpy>
 800e7d4:	89a3      	ldrh	r3, [r4, #12]
 800e7d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e7da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7de:	81a3      	strh	r3, [r4, #12]
 800e7e0:	6126      	str	r6, [r4, #16]
 800e7e2:	6165      	str	r5, [r4, #20]
 800e7e4:	444e      	add	r6, r9
 800e7e6:	eba5 0509 	sub.w	r5, r5, r9
 800e7ea:	6026      	str	r6, [r4, #0]
 800e7ec:	60a5      	str	r5, [r4, #8]
 800e7ee:	463e      	mov	r6, r7
 800e7f0:	42be      	cmp	r6, r7
 800e7f2:	d900      	bls.n	800e7f6 <__ssputs_r+0x72>
 800e7f4:	463e      	mov	r6, r7
 800e7f6:	6820      	ldr	r0, [r4, #0]
 800e7f8:	4632      	mov	r2, r6
 800e7fa:	4641      	mov	r1, r8
 800e7fc:	f000 fb6a 	bl	800eed4 <memmove>
 800e800:	68a3      	ldr	r3, [r4, #8]
 800e802:	1b9b      	subs	r3, r3, r6
 800e804:	60a3      	str	r3, [r4, #8]
 800e806:	6823      	ldr	r3, [r4, #0]
 800e808:	4433      	add	r3, r6
 800e80a:	6023      	str	r3, [r4, #0]
 800e80c:	2000      	movs	r0, #0
 800e80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e812:	462a      	mov	r2, r5
 800e814:	f000 ff31 	bl	800f67a <_realloc_r>
 800e818:	4606      	mov	r6, r0
 800e81a:	2800      	cmp	r0, #0
 800e81c:	d1e0      	bne.n	800e7e0 <__ssputs_r+0x5c>
 800e81e:	6921      	ldr	r1, [r4, #16]
 800e820:	4650      	mov	r0, sl
 800e822:	f7fe fc2d 	bl	800d080 <_free_r>
 800e826:	230c      	movs	r3, #12
 800e828:	f8ca 3000 	str.w	r3, [sl]
 800e82c:	89a3      	ldrh	r3, [r4, #12]
 800e82e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e832:	81a3      	strh	r3, [r4, #12]
 800e834:	f04f 30ff 	mov.w	r0, #4294967295
 800e838:	e7e9      	b.n	800e80e <__ssputs_r+0x8a>
	...

0800e83c <_svfiprintf_r>:
 800e83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e840:	4698      	mov	r8, r3
 800e842:	898b      	ldrh	r3, [r1, #12]
 800e844:	061b      	lsls	r3, r3, #24
 800e846:	b09d      	sub	sp, #116	@ 0x74
 800e848:	4607      	mov	r7, r0
 800e84a:	460d      	mov	r5, r1
 800e84c:	4614      	mov	r4, r2
 800e84e:	d510      	bpl.n	800e872 <_svfiprintf_r+0x36>
 800e850:	690b      	ldr	r3, [r1, #16]
 800e852:	b973      	cbnz	r3, 800e872 <_svfiprintf_r+0x36>
 800e854:	2140      	movs	r1, #64	@ 0x40
 800e856:	f7fc fc2d 	bl	800b0b4 <_malloc_r>
 800e85a:	6028      	str	r0, [r5, #0]
 800e85c:	6128      	str	r0, [r5, #16]
 800e85e:	b930      	cbnz	r0, 800e86e <_svfiprintf_r+0x32>
 800e860:	230c      	movs	r3, #12
 800e862:	603b      	str	r3, [r7, #0]
 800e864:	f04f 30ff 	mov.w	r0, #4294967295
 800e868:	b01d      	add	sp, #116	@ 0x74
 800e86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e86e:	2340      	movs	r3, #64	@ 0x40
 800e870:	616b      	str	r3, [r5, #20]
 800e872:	2300      	movs	r3, #0
 800e874:	9309      	str	r3, [sp, #36]	@ 0x24
 800e876:	2320      	movs	r3, #32
 800e878:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e87c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e880:	2330      	movs	r3, #48	@ 0x30
 800e882:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ea20 <_svfiprintf_r+0x1e4>
 800e886:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e88a:	f04f 0901 	mov.w	r9, #1
 800e88e:	4623      	mov	r3, r4
 800e890:	469a      	mov	sl, r3
 800e892:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e896:	b10a      	cbz	r2, 800e89c <_svfiprintf_r+0x60>
 800e898:	2a25      	cmp	r2, #37	@ 0x25
 800e89a:	d1f9      	bne.n	800e890 <_svfiprintf_r+0x54>
 800e89c:	ebba 0b04 	subs.w	fp, sl, r4
 800e8a0:	d00b      	beq.n	800e8ba <_svfiprintf_r+0x7e>
 800e8a2:	465b      	mov	r3, fp
 800e8a4:	4622      	mov	r2, r4
 800e8a6:	4629      	mov	r1, r5
 800e8a8:	4638      	mov	r0, r7
 800e8aa:	f7ff ff6b 	bl	800e784 <__ssputs_r>
 800e8ae:	3001      	adds	r0, #1
 800e8b0:	f000 80a7 	beq.w	800ea02 <_svfiprintf_r+0x1c6>
 800e8b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8b6:	445a      	add	r2, fp
 800e8b8:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8ba:	f89a 3000 	ldrb.w	r3, [sl]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	f000 809f 	beq.w	800ea02 <_svfiprintf_r+0x1c6>
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8ce:	f10a 0a01 	add.w	sl, sl, #1
 800e8d2:	9304      	str	r3, [sp, #16]
 800e8d4:	9307      	str	r3, [sp, #28]
 800e8d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8da:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8dc:	4654      	mov	r4, sl
 800e8de:	2205      	movs	r2, #5
 800e8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8e4:	484e      	ldr	r0, [pc, #312]	@ (800ea20 <_svfiprintf_r+0x1e4>)
 800e8e6:	f7f1 fc9b 	bl	8000220 <memchr>
 800e8ea:	9a04      	ldr	r2, [sp, #16]
 800e8ec:	b9d8      	cbnz	r0, 800e926 <_svfiprintf_r+0xea>
 800e8ee:	06d0      	lsls	r0, r2, #27
 800e8f0:	bf44      	itt	mi
 800e8f2:	2320      	movmi	r3, #32
 800e8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8f8:	0711      	lsls	r1, r2, #28
 800e8fa:	bf44      	itt	mi
 800e8fc:	232b      	movmi	r3, #43	@ 0x2b
 800e8fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e902:	f89a 3000 	ldrb.w	r3, [sl]
 800e906:	2b2a      	cmp	r3, #42	@ 0x2a
 800e908:	d015      	beq.n	800e936 <_svfiprintf_r+0xfa>
 800e90a:	9a07      	ldr	r2, [sp, #28]
 800e90c:	4654      	mov	r4, sl
 800e90e:	2000      	movs	r0, #0
 800e910:	f04f 0c0a 	mov.w	ip, #10
 800e914:	4621      	mov	r1, r4
 800e916:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e91a:	3b30      	subs	r3, #48	@ 0x30
 800e91c:	2b09      	cmp	r3, #9
 800e91e:	d94b      	bls.n	800e9b8 <_svfiprintf_r+0x17c>
 800e920:	b1b0      	cbz	r0, 800e950 <_svfiprintf_r+0x114>
 800e922:	9207      	str	r2, [sp, #28]
 800e924:	e014      	b.n	800e950 <_svfiprintf_r+0x114>
 800e926:	eba0 0308 	sub.w	r3, r0, r8
 800e92a:	fa09 f303 	lsl.w	r3, r9, r3
 800e92e:	4313      	orrs	r3, r2
 800e930:	9304      	str	r3, [sp, #16]
 800e932:	46a2      	mov	sl, r4
 800e934:	e7d2      	b.n	800e8dc <_svfiprintf_r+0xa0>
 800e936:	9b03      	ldr	r3, [sp, #12]
 800e938:	1d19      	adds	r1, r3, #4
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	9103      	str	r1, [sp, #12]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	bfbb      	ittet	lt
 800e942:	425b      	neglt	r3, r3
 800e944:	f042 0202 	orrlt.w	r2, r2, #2
 800e948:	9307      	strge	r3, [sp, #28]
 800e94a:	9307      	strlt	r3, [sp, #28]
 800e94c:	bfb8      	it	lt
 800e94e:	9204      	strlt	r2, [sp, #16]
 800e950:	7823      	ldrb	r3, [r4, #0]
 800e952:	2b2e      	cmp	r3, #46	@ 0x2e
 800e954:	d10a      	bne.n	800e96c <_svfiprintf_r+0x130>
 800e956:	7863      	ldrb	r3, [r4, #1]
 800e958:	2b2a      	cmp	r3, #42	@ 0x2a
 800e95a:	d132      	bne.n	800e9c2 <_svfiprintf_r+0x186>
 800e95c:	9b03      	ldr	r3, [sp, #12]
 800e95e:	1d1a      	adds	r2, r3, #4
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	9203      	str	r2, [sp, #12]
 800e964:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e968:	3402      	adds	r4, #2
 800e96a:	9305      	str	r3, [sp, #20]
 800e96c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ea30 <_svfiprintf_r+0x1f4>
 800e970:	7821      	ldrb	r1, [r4, #0]
 800e972:	2203      	movs	r2, #3
 800e974:	4650      	mov	r0, sl
 800e976:	f7f1 fc53 	bl	8000220 <memchr>
 800e97a:	b138      	cbz	r0, 800e98c <_svfiprintf_r+0x150>
 800e97c:	9b04      	ldr	r3, [sp, #16]
 800e97e:	eba0 000a 	sub.w	r0, r0, sl
 800e982:	2240      	movs	r2, #64	@ 0x40
 800e984:	4082      	lsls	r2, r0
 800e986:	4313      	orrs	r3, r2
 800e988:	3401      	adds	r4, #1
 800e98a:	9304      	str	r3, [sp, #16]
 800e98c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e990:	4824      	ldr	r0, [pc, #144]	@ (800ea24 <_svfiprintf_r+0x1e8>)
 800e992:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e996:	2206      	movs	r2, #6
 800e998:	f7f1 fc42 	bl	8000220 <memchr>
 800e99c:	2800      	cmp	r0, #0
 800e99e:	d036      	beq.n	800ea0e <_svfiprintf_r+0x1d2>
 800e9a0:	4b21      	ldr	r3, [pc, #132]	@ (800ea28 <_svfiprintf_r+0x1ec>)
 800e9a2:	bb1b      	cbnz	r3, 800e9ec <_svfiprintf_r+0x1b0>
 800e9a4:	9b03      	ldr	r3, [sp, #12]
 800e9a6:	3307      	adds	r3, #7
 800e9a8:	f023 0307 	bic.w	r3, r3, #7
 800e9ac:	3308      	adds	r3, #8
 800e9ae:	9303      	str	r3, [sp, #12]
 800e9b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9b2:	4433      	add	r3, r6
 800e9b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9b6:	e76a      	b.n	800e88e <_svfiprintf_r+0x52>
 800e9b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9bc:	460c      	mov	r4, r1
 800e9be:	2001      	movs	r0, #1
 800e9c0:	e7a8      	b.n	800e914 <_svfiprintf_r+0xd8>
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	3401      	adds	r4, #1
 800e9c6:	9305      	str	r3, [sp, #20]
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	f04f 0c0a 	mov.w	ip, #10
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9d4:	3a30      	subs	r2, #48	@ 0x30
 800e9d6:	2a09      	cmp	r2, #9
 800e9d8:	d903      	bls.n	800e9e2 <_svfiprintf_r+0x1a6>
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d0c6      	beq.n	800e96c <_svfiprintf_r+0x130>
 800e9de:	9105      	str	r1, [sp, #20]
 800e9e0:	e7c4      	b.n	800e96c <_svfiprintf_r+0x130>
 800e9e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	e7f0      	b.n	800e9ce <_svfiprintf_r+0x192>
 800e9ec:	ab03      	add	r3, sp, #12
 800e9ee:	9300      	str	r3, [sp, #0]
 800e9f0:	462a      	mov	r2, r5
 800e9f2:	4b0e      	ldr	r3, [pc, #56]	@ (800ea2c <_svfiprintf_r+0x1f0>)
 800e9f4:	a904      	add	r1, sp, #16
 800e9f6:	4638      	mov	r0, r7
 800e9f8:	f7fc fc88 	bl	800b30c <_printf_float>
 800e9fc:	1c42      	adds	r2, r0, #1
 800e9fe:	4606      	mov	r6, r0
 800ea00:	d1d6      	bne.n	800e9b0 <_svfiprintf_r+0x174>
 800ea02:	89ab      	ldrh	r3, [r5, #12]
 800ea04:	065b      	lsls	r3, r3, #25
 800ea06:	f53f af2d 	bmi.w	800e864 <_svfiprintf_r+0x28>
 800ea0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea0c:	e72c      	b.n	800e868 <_svfiprintf_r+0x2c>
 800ea0e:	ab03      	add	r3, sp, #12
 800ea10:	9300      	str	r3, [sp, #0]
 800ea12:	462a      	mov	r2, r5
 800ea14:	4b05      	ldr	r3, [pc, #20]	@ (800ea2c <_svfiprintf_r+0x1f0>)
 800ea16:	a904      	add	r1, sp, #16
 800ea18:	4638      	mov	r0, r7
 800ea1a:	f7fc ff0f 	bl	800b83c <_printf_i>
 800ea1e:	e7ed      	b.n	800e9fc <_svfiprintf_r+0x1c0>
 800ea20:	0800fbf1 	.word	0x0800fbf1
 800ea24:	0800fbfb 	.word	0x0800fbfb
 800ea28:	0800b30d 	.word	0x0800b30d
 800ea2c:	0800e785 	.word	0x0800e785
 800ea30:	0800fbf7 	.word	0x0800fbf7

0800ea34 <__sfputc_r>:
 800ea34:	6893      	ldr	r3, [r2, #8]
 800ea36:	3b01      	subs	r3, #1
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	b410      	push	{r4}
 800ea3c:	6093      	str	r3, [r2, #8]
 800ea3e:	da08      	bge.n	800ea52 <__sfputc_r+0x1e>
 800ea40:	6994      	ldr	r4, [r2, #24]
 800ea42:	42a3      	cmp	r3, r4
 800ea44:	db01      	blt.n	800ea4a <__sfputc_r+0x16>
 800ea46:	290a      	cmp	r1, #10
 800ea48:	d103      	bne.n	800ea52 <__sfputc_r+0x1e>
 800ea4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea4e:	f7fd bb4e 	b.w	800c0ee <__swbuf_r>
 800ea52:	6813      	ldr	r3, [r2, #0]
 800ea54:	1c58      	adds	r0, r3, #1
 800ea56:	6010      	str	r0, [r2, #0]
 800ea58:	7019      	strb	r1, [r3, #0]
 800ea5a:	4608      	mov	r0, r1
 800ea5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea60:	4770      	bx	lr

0800ea62 <__sfputs_r>:
 800ea62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea64:	4606      	mov	r6, r0
 800ea66:	460f      	mov	r7, r1
 800ea68:	4614      	mov	r4, r2
 800ea6a:	18d5      	adds	r5, r2, r3
 800ea6c:	42ac      	cmp	r4, r5
 800ea6e:	d101      	bne.n	800ea74 <__sfputs_r+0x12>
 800ea70:	2000      	movs	r0, #0
 800ea72:	e007      	b.n	800ea84 <__sfputs_r+0x22>
 800ea74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea78:	463a      	mov	r2, r7
 800ea7a:	4630      	mov	r0, r6
 800ea7c:	f7ff ffda 	bl	800ea34 <__sfputc_r>
 800ea80:	1c43      	adds	r3, r0, #1
 800ea82:	d1f3      	bne.n	800ea6c <__sfputs_r+0xa>
 800ea84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea88 <_vfiprintf_r>:
 800ea88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea8c:	460d      	mov	r5, r1
 800ea8e:	b09d      	sub	sp, #116	@ 0x74
 800ea90:	4614      	mov	r4, r2
 800ea92:	4698      	mov	r8, r3
 800ea94:	4606      	mov	r6, r0
 800ea96:	b118      	cbz	r0, 800eaa0 <_vfiprintf_r+0x18>
 800ea98:	6a03      	ldr	r3, [r0, #32]
 800ea9a:	b90b      	cbnz	r3, 800eaa0 <_vfiprintf_r+0x18>
 800ea9c:	f7fd fa8e 	bl	800bfbc <__sinit>
 800eaa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eaa2:	07d9      	lsls	r1, r3, #31
 800eaa4:	d405      	bmi.n	800eab2 <_vfiprintf_r+0x2a>
 800eaa6:	89ab      	ldrh	r3, [r5, #12]
 800eaa8:	059a      	lsls	r2, r3, #22
 800eaaa:	d402      	bmi.n	800eab2 <_vfiprintf_r+0x2a>
 800eaac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eaae:	f7fd fc84 	bl	800c3ba <__retarget_lock_acquire_recursive>
 800eab2:	89ab      	ldrh	r3, [r5, #12]
 800eab4:	071b      	lsls	r3, r3, #28
 800eab6:	d501      	bpl.n	800eabc <_vfiprintf_r+0x34>
 800eab8:	692b      	ldr	r3, [r5, #16]
 800eaba:	b99b      	cbnz	r3, 800eae4 <_vfiprintf_r+0x5c>
 800eabc:	4629      	mov	r1, r5
 800eabe:	4630      	mov	r0, r6
 800eac0:	f7fd fb54 	bl	800c16c <__swsetup_r>
 800eac4:	b170      	cbz	r0, 800eae4 <_vfiprintf_r+0x5c>
 800eac6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eac8:	07dc      	lsls	r4, r3, #31
 800eaca:	d504      	bpl.n	800ead6 <_vfiprintf_r+0x4e>
 800eacc:	f04f 30ff 	mov.w	r0, #4294967295
 800ead0:	b01d      	add	sp, #116	@ 0x74
 800ead2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead6:	89ab      	ldrh	r3, [r5, #12]
 800ead8:	0598      	lsls	r0, r3, #22
 800eada:	d4f7      	bmi.n	800eacc <_vfiprintf_r+0x44>
 800eadc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eade:	f7fd fc6d 	bl	800c3bc <__retarget_lock_release_recursive>
 800eae2:	e7f3      	b.n	800eacc <_vfiprintf_r+0x44>
 800eae4:	2300      	movs	r3, #0
 800eae6:	9309      	str	r3, [sp, #36]	@ 0x24
 800eae8:	2320      	movs	r3, #32
 800eaea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eaee:	f8cd 800c 	str.w	r8, [sp, #12]
 800eaf2:	2330      	movs	r3, #48	@ 0x30
 800eaf4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eca4 <_vfiprintf_r+0x21c>
 800eaf8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eafc:	f04f 0901 	mov.w	r9, #1
 800eb00:	4623      	mov	r3, r4
 800eb02:	469a      	mov	sl, r3
 800eb04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb08:	b10a      	cbz	r2, 800eb0e <_vfiprintf_r+0x86>
 800eb0a:	2a25      	cmp	r2, #37	@ 0x25
 800eb0c:	d1f9      	bne.n	800eb02 <_vfiprintf_r+0x7a>
 800eb0e:	ebba 0b04 	subs.w	fp, sl, r4
 800eb12:	d00b      	beq.n	800eb2c <_vfiprintf_r+0xa4>
 800eb14:	465b      	mov	r3, fp
 800eb16:	4622      	mov	r2, r4
 800eb18:	4629      	mov	r1, r5
 800eb1a:	4630      	mov	r0, r6
 800eb1c:	f7ff ffa1 	bl	800ea62 <__sfputs_r>
 800eb20:	3001      	adds	r0, #1
 800eb22:	f000 80a7 	beq.w	800ec74 <_vfiprintf_r+0x1ec>
 800eb26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb28:	445a      	add	r2, fp
 800eb2a:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb2c:	f89a 3000 	ldrb.w	r3, [sl]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	f000 809f 	beq.w	800ec74 <_vfiprintf_r+0x1ec>
 800eb36:	2300      	movs	r3, #0
 800eb38:	f04f 32ff 	mov.w	r2, #4294967295
 800eb3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb40:	f10a 0a01 	add.w	sl, sl, #1
 800eb44:	9304      	str	r3, [sp, #16]
 800eb46:	9307      	str	r3, [sp, #28]
 800eb48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eb4c:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb4e:	4654      	mov	r4, sl
 800eb50:	2205      	movs	r2, #5
 800eb52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb56:	4853      	ldr	r0, [pc, #332]	@ (800eca4 <_vfiprintf_r+0x21c>)
 800eb58:	f7f1 fb62 	bl	8000220 <memchr>
 800eb5c:	9a04      	ldr	r2, [sp, #16]
 800eb5e:	b9d8      	cbnz	r0, 800eb98 <_vfiprintf_r+0x110>
 800eb60:	06d1      	lsls	r1, r2, #27
 800eb62:	bf44      	itt	mi
 800eb64:	2320      	movmi	r3, #32
 800eb66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb6a:	0713      	lsls	r3, r2, #28
 800eb6c:	bf44      	itt	mi
 800eb6e:	232b      	movmi	r3, #43	@ 0x2b
 800eb70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb74:	f89a 3000 	ldrb.w	r3, [sl]
 800eb78:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb7a:	d015      	beq.n	800eba8 <_vfiprintf_r+0x120>
 800eb7c:	9a07      	ldr	r2, [sp, #28]
 800eb7e:	4654      	mov	r4, sl
 800eb80:	2000      	movs	r0, #0
 800eb82:	f04f 0c0a 	mov.w	ip, #10
 800eb86:	4621      	mov	r1, r4
 800eb88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb8c:	3b30      	subs	r3, #48	@ 0x30
 800eb8e:	2b09      	cmp	r3, #9
 800eb90:	d94b      	bls.n	800ec2a <_vfiprintf_r+0x1a2>
 800eb92:	b1b0      	cbz	r0, 800ebc2 <_vfiprintf_r+0x13a>
 800eb94:	9207      	str	r2, [sp, #28]
 800eb96:	e014      	b.n	800ebc2 <_vfiprintf_r+0x13a>
 800eb98:	eba0 0308 	sub.w	r3, r0, r8
 800eb9c:	fa09 f303 	lsl.w	r3, r9, r3
 800eba0:	4313      	orrs	r3, r2
 800eba2:	9304      	str	r3, [sp, #16]
 800eba4:	46a2      	mov	sl, r4
 800eba6:	e7d2      	b.n	800eb4e <_vfiprintf_r+0xc6>
 800eba8:	9b03      	ldr	r3, [sp, #12]
 800ebaa:	1d19      	adds	r1, r3, #4
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	9103      	str	r1, [sp, #12]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	bfbb      	ittet	lt
 800ebb4:	425b      	neglt	r3, r3
 800ebb6:	f042 0202 	orrlt.w	r2, r2, #2
 800ebba:	9307      	strge	r3, [sp, #28]
 800ebbc:	9307      	strlt	r3, [sp, #28]
 800ebbe:	bfb8      	it	lt
 800ebc0:	9204      	strlt	r2, [sp, #16]
 800ebc2:	7823      	ldrb	r3, [r4, #0]
 800ebc4:	2b2e      	cmp	r3, #46	@ 0x2e
 800ebc6:	d10a      	bne.n	800ebde <_vfiprintf_r+0x156>
 800ebc8:	7863      	ldrb	r3, [r4, #1]
 800ebca:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebcc:	d132      	bne.n	800ec34 <_vfiprintf_r+0x1ac>
 800ebce:	9b03      	ldr	r3, [sp, #12]
 800ebd0:	1d1a      	adds	r2, r3, #4
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	9203      	str	r2, [sp, #12]
 800ebd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ebda:	3402      	adds	r4, #2
 800ebdc:	9305      	str	r3, [sp, #20]
 800ebde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ecb4 <_vfiprintf_r+0x22c>
 800ebe2:	7821      	ldrb	r1, [r4, #0]
 800ebe4:	2203      	movs	r2, #3
 800ebe6:	4650      	mov	r0, sl
 800ebe8:	f7f1 fb1a 	bl	8000220 <memchr>
 800ebec:	b138      	cbz	r0, 800ebfe <_vfiprintf_r+0x176>
 800ebee:	9b04      	ldr	r3, [sp, #16]
 800ebf0:	eba0 000a 	sub.w	r0, r0, sl
 800ebf4:	2240      	movs	r2, #64	@ 0x40
 800ebf6:	4082      	lsls	r2, r0
 800ebf8:	4313      	orrs	r3, r2
 800ebfa:	3401      	adds	r4, #1
 800ebfc:	9304      	str	r3, [sp, #16]
 800ebfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec02:	4829      	ldr	r0, [pc, #164]	@ (800eca8 <_vfiprintf_r+0x220>)
 800ec04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ec08:	2206      	movs	r2, #6
 800ec0a:	f7f1 fb09 	bl	8000220 <memchr>
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	d03f      	beq.n	800ec92 <_vfiprintf_r+0x20a>
 800ec12:	4b26      	ldr	r3, [pc, #152]	@ (800ecac <_vfiprintf_r+0x224>)
 800ec14:	bb1b      	cbnz	r3, 800ec5e <_vfiprintf_r+0x1d6>
 800ec16:	9b03      	ldr	r3, [sp, #12]
 800ec18:	3307      	adds	r3, #7
 800ec1a:	f023 0307 	bic.w	r3, r3, #7
 800ec1e:	3308      	adds	r3, #8
 800ec20:	9303      	str	r3, [sp, #12]
 800ec22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec24:	443b      	add	r3, r7
 800ec26:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec28:	e76a      	b.n	800eb00 <_vfiprintf_r+0x78>
 800ec2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec2e:	460c      	mov	r4, r1
 800ec30:	2001      	movs	r0, #1
 800ec32:	e7a8      	b.n	800eb86 <_vfiprintf_r+0xfe>
 800ec34:	2300      	movs	r3, #0
 800ec36:	3401      	adds	r4, #1
 800ec38:	9305      	str	r3, [sp, #20]
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	f04f 0c0a 	mov.w	ip, #10
 800ec40:	4620      	mov	r0, r4
 800ec42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec46:	3a30      	subs	r2, #48	@ 0x30
 800ec48:	2a09      	cmp	r2, #9
 800ec4a:	d903      	bls.n	800ec54 <_vfiprintf_r+0x1cc>
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d0c6      	beq.n	800ebde <_vfiprintf_r+0x156>
 800ec50:	9105      	str	r1, [sp, #20]
 800ec52:	e7c4      	b.n	800ebde <_vfiprintf_r+0x156>
 800ec54:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec58:	4604      	mov	r4, r0
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	e7f0      	b.n	800ec40 <_vfiprintf_r+0x1b8>
 800ec5e:	ab03      	add	r3, sp, #12
 800ec60:	9300      	str	r3, [sp, #0]
 800ec62:	462a      	mov	r2, r5
 800ec64:	4b12      	ldr	r3, [pc, #72]	@ (800ecb0 <_vfiprintf_r+0x228>)
 800ec66:	a904      	add	r1, sp, #16
 800ec68:	4630      	mov	r0, r6
 800ec6a:	f7fc fb4f 	bl	800b30c <_printf_float>
 800ec6e:	4607      	mov	r7, r0
 800ec70:	1c78      	adds	r0, r7, #1
 800ec72:	d1d6      	bne.n	800ec22 <_vfiprintf_r+0x19a>
 800ec74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec76:	07d9      	lsls	r1, r3, #31
 800ec78:	d405      	bmi.n	800ec86 <_vfiprintf_r+0x1fe>
 800ec7a:	89ab      	ldrh	r3, [r5, #12]
 800ec7c:	059a      	lsls	r2, r3, #22
 800ec7e:	d402      	bmi.n	800ec86 <_vfiprintf_r+0x1fe>
 800ec80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec82:	f7fd fb9b 	bl	800c3bc <__retarget_lock_release_recursive>
 800ec86:	89ab      	ldrh	r3, [r5, #12]
 800ec88:	065b      	lsls	r3, r3, #25
 800ec8a:	f53f af1f 	bmi.w	800eacc <_vfiprintf_r+0x44>
 800ec8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec90:	e71e      	b.n	800ead0 <_vfiprintf_r+0x48>
 800ec92:	ab03      	add	r3, sp, #12
 800ec94:	9300      	str	r3, [sp, #0]
 800ec96:	462a      	mov	r2, r5
 800ec98:	4b05      	ldr	r3, [pc, #20]	@ (800ecb0 <_vfiprintf_r+0x228>)
 800ec9a:	a904      	add	r1, sp, #16
 800ec9c:	4630      	mov	r0, r6
 800ec9e:	f7fc fdcd 	bl	800b83c <_printf_i>
 800eca2:	e7e4      	b.n	800ec6e <_vfiprintf_r+0x1e6>
 800eca4:	0800fbf1 	.word	0x0800fbf1
 800eca8:	0800fbfb 	.word	0x0800fbfb
 800ecac:	0800b30d 	.word	0x0800b30d
 800ecb0:	0800ea63 	.word	0x0800ea63
 800ecb4:	0800fbf7 	.word	0x0800fbf7

0800ecb8 <__sflush_r>:
 800ecb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ecbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc0:	0716      	lsls	r6, r2, #28
 800ecc2:	4605      	mov	r5, r0
 800ecc4:	460c      	mov	r4, r1
 800ecc6:	d454      	bmi.n	800ed72 <__sflush_r+0xba>
 800ecc8:	684b      	ldr	r3, [r1, #4]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	dc02      	bgt.n	800ecd4 <__sflush_r+0x1c>
 800ecce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	dd48      	ble.n	800ed66 <__sflush_r+0xae>
 800ecd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ecd6:	2e00      	cmp	r6, #0
 800ecd8:	d045      	beq.n	800ed66 <__sflush_r+0xae>
 800ecda:	2300      	movs	r3, #0
 800ecdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ece0:	682f      	ldr	r7, [r5, #0]
 800ece2:	6a21      	ldr	r1, [r4, #32]
 800ece4:	602b      	str	r3, [r5, #0]
 800ece6:	d030      	beq.n	800ed4a <__sflush_r+0x92>
 800ece8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ecea:	89a3      	ldrh	r3, [r4, #12]
 800ecec:	0759      	lsls	r1, r3, #29
 800ecee:	d505      	bpl.n	800ecfc <__sflush_r+0x44>
 800ecf0:	6863      	ldr	r3, [r4, #4]
 800ecf2:	1ad2      	subs	r2, r2, r3
 800ecf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ecf6:	b10b      	cbz	r3, 800ecfc <__sflush_r+0x44>
 800ecf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ecfa:	1ad2      	subs	r2, r2, r3
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed00:	6a21      	ldr	r1, [r4, #32]
 800ed02:	4628      	mov	r0, r5
 800ed04:	47b0      	blx	r6
 800ed06:	1c43      	adds	r3, r0, #1
 800ed08:	89a3      	ldrh	r3, [r4, #12]
 800ed0a:	d106      	bne.n	800ed1a <__sflush_r+0x62>
 800ed0c:	6829      	ldr	r1, [r5, #0]
 800ed0e:	291d      	cmp	r1, #29
 800ed10:	d82b      	bhi.n	800ed6a <__sflush_r+0xb2>
 800ed12:	4a2a      	ldr	r2, [pc, #168]	@ (800edbc <__sflush_r+0x104>)
 800ed14:	410a      	asrs	r2, r1
 800ed16:	07d6      	lsls	r6, r2, #31
 800ed18:	d427      	bmi.n	800ed6a <__sflush_r+0xb2>
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	6062      	str	r2, [r4, #4]
 800ed1e:	04d9      	lsls	r1, r3, #19
 800ed20:	6922      	ldr	r2, [r4, #16]
 800ed22:	6022      	str	r2, [r4, #0]
 800ed24:	d504      	bpl.n	800ed30 <__sflush_r+0x78>
 800ed26:	1c42      	adds	r2, r0, #1
 800ed28:	d101      	bne.n	800ed2e <__sflush_r+0x76>
 800ed2a:	682b      	ldr	r3, [r5, #0]
 800ed2c:	b903      	cbnz	r3, 800ed30 <__sflush_r+0x78>
 800ed2e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ed30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed32:	602f      	str	r7, [r5, #0]
 800ed34:	b1b9      	cbz	r1, 800ed66 <__sflush_r+0xae>
 800ed36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed3a:	4299      	cmp	r1, r3
 800ed3c:	d002      	beq.n	800ed44 <__sflush_r+0x8c>
 800ed3e:	4628      	mov	r0, r5
 800ed40:	f7fe f99e 	bl	800d080 <_free_r>
 800ed44:	2300      	movs	r3, #0
 800ed46:	6363      	str	r3, [r4, #52]	@ 0x34
 800ed48:	e00d      	b.n	800ed66 <__sflush_r+0xae>
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	4628      	mov	r0, r5
 800ed4e:	47b0      	blx	r6
 800ed50:	4602      	mov	r2, r0
 800ed52:	1c50      	adds	r0, r2, #1
 800ed54:	d1c9      	bne.n	800ecea <__sflush_r+0x32>
 800ed56:	682b      	ldr	r3, [r5, #0]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d0c6      	beq.n	800ecea <__sflush_r+0x32>
 800ed5c:	2b1d      	cmp	r3, #29
 800ed5e:	d001      	beq.n	800ed64 <__sflush_r+0xac>
 800ed60:	2b16      	cmp	r3, #22
 800ed62:	d11e      	bne.n	800eda2 <__sflush_r+0xea>
 800ed64:	602f      	str	r7, [r5, #0]
 800ed66:	2000      	movs	r0, #0
 800ed68:	e022      	b.n	800edb0 <__sflush_r+0xf8>
 800ed6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed6e:	b21b      	sxth	r3, r3
 800ed70:	e01b      	b.n	800edaa <__sflush_r+0xf2>
 800ed72:	690f      	ldr	r7, [r1, #16]
 800ed74:	2f00      	cmp	r7, #0
 800ed76:	d0f6      	beq.n	800ed66 <__sflush_r+0xae>
 800ed78:	0793      	lsls	r3, r2, #30
 800ed7a:	680e      	ldr	r6, [r1, #0]
 800ed7c:	bf08      	it	eq
 800ed7e:	694b      	ldreq	r3, [r1, #20]
 800ed80:	600f      	str	r7, [r1, #0]
 800ed82:	bf18      	it	ne
 800ed84:	2300      	movne	r3, #0
 800ed86:	eba6 0807 	sub.w	r8, r6, r7
 800ed8a:	608b      	str	r3, [r1, #8]
 800ed8c:	f1b8 0f00 	cmp.w	r8, #0
 800ed90:	dde9      	ble.n	800ed66 <__sflush_r+0xae>
 800ed92:	6a21      	ldr	r1, [r4, #32]
 800ed94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ed96:	4643      	mov	r3, r8
 800ed98:	463a      	mov	r2, r7
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	47b0      	blx	r6
 800ed9e:	2800      	cmp	r0, #0
 800eda0:	dc08      	bgt.n	800edb4 <__sflush_r+0xfc>
 800eda2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eda6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800edaa:	81a3      	strh	r3, [r4, #12]
 800edac:	f04f 30ff 	mov.w	r0, #4294967295
 800edb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edb4:	4407      	add	r7, r0
 800edb6:	eba8 0800 	sub.w	r8, r8, r0
 800edba:	e7e7      	b.n	800ed8c <__sflush_r+0xd4>
 800edbc:	dfbffffe 	.word	0xdfbffffe

0800edc0 <_fflush_r>:
 800edc0:	b538      	push	{r3, r4, r5, lr}
 800edc2:	690b      	ldr	r3, [r1, #16]
 800edc4:	4605      	mov	r5, r0
 800edc6:	460c      	mov	r4, r1
 800edc8:	b913      	cbnz	r3, 800edd0 <_fflush_r+0x10>
 800edca:	2500      	movs	r5, #0
 800edcc:	4628      	mov	r0, r5
 800edce:	bd38      	pop	{r3, r4, r5, pc}
 800edd0:	b118      	cbz	r0, 800edda <_fflush_r+0x1a>
 800edd2:	6a03      	ldr	r3, [r0, #32]
 800edd4:	b90b      	cbnz	r3, 800edda <_fflush_r+0x1a>
 800edd6:	f7fd f8f1 	bl	800bfbc <__sinit>
 800edda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d0f3      	beq.n	800edca <_fflush_r+0xa>
 800ede2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ede4:	07d0      	lsls	r0, r2, #31
 800ede6:	d404      	bmi.n	800edf2 <_fflush_r+0x32>
 800ede8:	0599      	lsls	r1, r3, #22
 800edea:	d402      	bmi.n	800edf2 <_fflush_r+0x32>
 800edec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800edee:	f7fd fae4 	bl	800c3ba <__retarget_lock_acquire_recursive>
 800edf2:	4628      	mov	r0, r5
 800edf4:	4621      	mov	r1, r4
 800edf6:	f7ff ff5f 	bl	800ecb8 <__sflush_r>
 800edfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800edfc:	07da      	lsls	r2, r3, #31
 800edfe:	4605      	mov	r5, r0
 800ee00:	d4e4      	bmi.n	800edcc <_fflush_r+0xc>
 800ee02:	89a3      	ldrh	r3, [r4, #12]
 800ee04:	059b      	lsls	r3, r3, #22
 800ee06:	d4e1      	bmi.n	800edcc <_fflush_r+0xc>
 800ee08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee0a:	f7fd fad7 	bl	800c3bc <__retarget_lock_release_recursive>
 800ee0e:	e7dd      	b.n	800edcc <_fflush_r+0xc>

0800ee10 <__swhatbuf_r>:
 800ee10:	b570      	push	{r4, r5, r6, lr}
 800ee12:	460c      	mov	r4, r1
 800ee14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee18:	2900      	cmp	r1, #0
 800ee1a:	b096      	sub	sp, #88	@ 0x58
 800ee1c:	4615      	mov	r5, r2
 800ee1e:	461e      	mov	r6, r3
 800ee20:	da0d      	bge.n	800ee3e <__swhatbuf_r+0x2e>
 800ee22:	89a3      	ldrh	r3, [r4, #12]
 800ee24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ee28:	f04f 0100 	mov.w	r1, #0
 800ee2c:	bf14      	ite	ne
 800ee2e:	2340      	movne	r3, #64	@ 0x40
 800ee30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ee34:	2000      	movs	r0, #0
 800ee36:	6031      	str	r1, [r6, #0]
 800ee38:	602b      	str	r3, [r5, #0]
 800ee3a:	b016      	add	sp, #88	@ 0x58
 800ee3c:	bd70      	pop	{r4, r5, r6, pc}
 800ee3e:	466a      	mov	r2, sp
 800ee40:	f000 f874 	bl	800ef2c <_fstat_r>
 800ee44:	2800      	cmp	r0, #0
 800ee46:	dbec      	blt.n	800ee22 <__swhatbuf_r+0x12>
 800ee48:	9901      	ldr	r1, [sp, #4]
 800ee4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ee4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ee52:	4259      	negs	r1, r3
 800ee54:	4159      	adcs	r1, r3
 800ee56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ee5a:	e7eb      	b.n	800ee34 <__swhatbuf_r+0x24>

0800ee5c <__smakebuf_r>:
 800ee5c:	898b      	ldrh	r3, [r1, #12]
 800ee5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee60:	079d      	lsls	r5, r3, #30
 800ee62:	4606      	mov	r6, r0
 800ee64:	460c      	mov	r4, r1
 800ee66:	d507      	bpl.n	800ee78 <__smakebuf_r+0x1c>
 800ee68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ee6c:	6023      	str	r3, [r4, #0]
 800ee6e:	6123      	str	r3, [r4, #16]
 800ee70:	2301      	movs	r3, #1
 800ee72:	6163      	str	r3, [r4, #20]
 800ee74:	b003      	add	sp, #12
 800ee76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee78:	ab01      	add	r3, sp, #4
 800ee7a:	466a      	mov	r2, sp
 800ee7c:	f7ff ffc8 	bl	800ee10 <__swhatbuf_r>
 800ee80:	9f00      	ldr	r7, [sp, #0]
 800ee82:	4605      	mov	r5, r0
 800ee84:	4639      	mov	r1, r7
 800ee86:	4630      	mov	r0, r6
 800ee88:	f7fc f914 	bl	800b0b4 <_malloc_r>
 800ee8c:	b948      	cbnz	r0, 800eea2 <__smakebuf_r+0x46>
 800ee8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee92:	059a      	lsls	r2, r3, #22
 800ee94:	d4ee      	bmi.n	800ee74 <__smakebuf_r+0x18>
 800ee96:	f023 0303 	bic.w	r3, r3, #3
 800ee9a:	f043 0302 	orr.w	r3, r3, #2
 800ee9e:	81a3      	strh	r3, [r4, #12]
 800eea0:	e7e2      	b.n	800ee68 <__smakebuf_r+0xc>
 800eea2:	89a3      	ldrh	r3, [r4, #12]
 800eea4:	6020      	str	r0, [r4, #0]
 800eea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eeaa:	81a3      	strh	r3, [r4, #12]
 800eeac:	9b01      	ldr	r3, [sp, #4]
 800eeae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800eeb2:	b15b      	cbz	r3, 800eecc <__smakebuf_r+0x70>
 800eeb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eeb8:	4630      	mov	r0, r6
 800eeba:	f000 f849 	bl	800ef50 <_isatty_r>
 800eebe:	b128      	cbz	r0, 800eecc <__smakebuf_r+0x70>
 800eec0:	89a3      	ldrh	r3, [r4, #12]
 800eec2:	f023 0303 	bic.w	r3, r3, #3
 800eec6:	f043 0301 	orr.w	r3, r3, #1
 800eeca:	81a3      	strh	r3, [r4, #12]
 800eecc:	89a3      	ldrh	r3, [r4, #12]
 800eece:	431d      	orrs	r5, r3
 800eed0:	81a5      	strh	r5, [r4, #12]
 800eed2:	e7cf      	b.n	800ee74 <__smakebuf_r+0x18>

0800eed4 <memmove>:
 800eed4:	4288      	cmp	r0, r1
 800eed6:	b510      	push	{r4, lr}
 800eed8:	eb01 0402 	add.w	r4, r1, r2
 800eedc:	d902      	bls.n	800eee4 <memmove+0x10>
 800eede:	4284      	cmp	r4, r0
 800eee0:	4623      	mov	r3, r4
 800eee2:	d807      	bhi.n	800eef4 <memmove+0x20>
 800eee4:	1e43      	subs	r3, r0, #1
 800eee6:	42a1      	cmp	r1, r4
 800eee8:	d008      	beq.n	800eefc <memmove+0x28>
 800eeea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eeee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eef2:	e7f8      	b.n	800eee6 <memmove+0x12>
 800eef4:	4402      	add	r2, r0
 800eef6:	4601      	mov	r1, r0
 800eef8:	428a      	cmp	r2, r1
 800eefa:	d100      	bne.n	800eefe <memmove+0x2a>
 800eefc:	bd10      	pop	{r4, pc}
 800eefe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef06:	e7f7      	b.n	800eef8 <memmove+0x24>

0800ef08 <strncmp>:
 800ef08:	b510      	push	{r4, lr}
 800ef0a:	b16a      	cbz	r2, 800ef28 <strncmp+0x20>
 800ef0c:	3901      	subs	r1, #1
 800ef0e:	1884      	adds	r4, r0, r2
 800ef10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d103      	bne.n	800ef24 <strncmp+0x1c>
 800ef1c:	42a0      	cmp	r0, r4
 800ef1e:	d001      	beq.n	800ef24 <strncmp+0x1c>
 800ef20:	2a00      	cmp	r2, #0
 800ef22:	d1f5      	bne.n	800ef10 <strncmp+0x8>
 800ef24:	1ad0      	subs	r0, r2, r3
 800ef26:	bd10      	pop	{r4, pc}
 800ef28:	4610      	mov	r0, r2
 800ef2a:	e7fc      	b.n	800ef26 <strncmp+0x1e>

0800ef2c <_fstat_r>:
 800ef2c:	b538      	push	{r3, r4, r5, lr}
 800ef2e:	4d07      	ldr	r5, [pc, #28]	@ (800ef4c <_fstat_r+0x20>)
 800ef30:	2300      	movs	r3, #0
 800ef32:	4604      	mov	r4, r0
 800ef34:	4608      	mov	r0, r1
 800ef36:	4611      	mov	r1, r2
 800ef38:	602b      	str	r3, [r5, #0]
 800ef3a:	f7f4 f963 	bl	8003204 <_fstat>
 800ef3e:	1c43      	adds	r3, r0, #1
 800ef40:	d102      	bne.n	800ef48 <_fstat_r+0x1c>
 800ef42:	682b      	ldr	r3, [r5, #0]
 800ef44:	b103      	cbz	r3, 800ef48 <_fstat_r+0x1c>
 800ef46:	6023      	str	r3, [r4, #0]
 800ef48:	bd38      	pop	{r3, r4, r5, pc}
 800ef4a:	bf00      	nop
 800ef4c:	200007b4 	.word	0x200007b4

0800ef50 <_isatty_r>:
 800ef50:	b538      	push	{r3, r4, r5, lr}
 800ef52:	4d06      	ldr	r5, [pc, #24]	@ (800ef6c <_isatty_r+0x1c>)
 800ef54:	2300      	movs	r3, #0
 800ef56:	4604      	mov	r4, r0
 800ef58:	4608      	mov	r0, r1
 800ef5a:	602b      	str	r3, [r5, #0]
 800ef5c:	f7f4 f962 	bl	8003224 <_isatty>
 800ef60:	1c43      	adds	r3, r0, #1
 800ef62:	d102      	bne.n	800ef6a <_isatty_r+0x1a>
 800ef64:	682b      	ldr	r3, [r5, #0]
 800ef66:	b103      	cbz	r3, 800ef6a <_isatty_r+0x1a>
 800ef68:	6023      	str	r3, [r4, #0]
 800ef6a:	bd38      	pop	{r3, r4, r5, pc}
 800ef6c:	200007b4 	.word	0x200007b4

0800ef70 <nan>:
 800ef70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ef78 <nan+0x8>
 800ef74:	4770      	bx	lr
 800ef76:	bf00      	nop
 800ef78:	00000000 	.word	0x00000000
 800ef7c:	7ff80000 	.word	0x7ff80000

0800ef80 <__assert_func>:
 800ef80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef82:	4614      	mov	r4, r2
 800ef84:	461a      	mov	r2, r3
 800ef86:	4b09      	ldr	r3, [pc, #36]	@ (800efac <__assert_func+0x2c>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	4605      	mov	r5, r0
 800ef8c:	68d8      	ldr	r0, [r3, #12]
 800ef8e:	b954      	cbnz	r4, 800efa6 <__assert_func+0x26>
 800ef90:	4b07      	ldr	r3, [pc, #28]	@ (800efb0 <__assert_func+0x30>)
 800ef92:	461c      	mov	r4, r3
 800ef94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef98:	9100      	str	r1, [sp, #0]
 800ef9a:	462b      	mov	r3, r5
 800ef9c:	4905      	ldr	r1, [pc, #20]	@ (800efb4 <__assert_func+0x34>)
 800ef9e:	f000 fba7 	bl	800f6f0 <fiprintf>
 800efa2:	f7fc f84d 	bl	800b040 <abort>
 800efa6:	4b04      	ldr	r3, [pc, #16]	@ (800efb8 <__assert_func+0x38>)
 800efa8:	e7f4      	b.n	800ef94 <__assert_func+0x14>
 800efaa:	bf00      	nop
 800efac:	20000018 	.word	0x20000018
 800efb0:	0800fc45 	.word	0x0800fc45
 800efb4:	0800fc17 	.word	0x0800fc17
 800efb8:	0800fc0a 	.word	0x0800fc0a

0800efbc <_calloc_r>:
 800efbc:	b570      	push	{r4, r5, r6, lr}
 800efbe:	fba1 5402 	umull	r5, r4, r1, r2
 800efc2:	b93c      	cbnz	r4, 800efd4 <_calloc_r+0x18>
 800efc4:	4629      	mov	r1, r5
 800efc6:	f7fc f875 	bl	800b0b4 <_malloc_r>
 800efca:	4606      	mov	r6, r0
 800efcc:	b928      	cbnz	r0, 800efda <_calloc_r+0x1e>
 800efce:	2600      	movs	r6, #0
 800efd0:	4630      	mov	r0, r6
 800efd2:	bd70      	pop	{r4, r5, r6, pc}
 800efd4:	220c      	movs	r2, #12
 800efd6:	6002      	str	r2, [r0, #0]
 800efd8:	e7f9      	b.n	800efce <_calloc_r+0x12>
 800efda:	462a      	mov	r2, r5
 800efdc:	4621      	mov	r1, r4
 800efde:	f7fd f91b 	bl	800c218 <memset>
 800efe2:	e7f5      	b.n	800efd0 <_calloc_r+0x14>

0800efe4 <rshift>:
 800efe4:	6903      	ldr	r3, [r0, #16]
 800efe6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800efea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eff2:	f100 0414 	add.w	r4, r0, #20
 800eff6:	dd45      	ble.n	800f084 <rshift+0xa0>
 800eff8:	f011 011f 	ands.w	r1, r1, #31
 800effc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f000:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f004:	d10c      	bne.n	800f020 <rshift+0x3c>
 800f006:	f100 0710 	add.w	r7, r0, #16
 800f00a:	4629      	mov	r1, r5
 800f00c:	42b1      	cmp	r1, r6
 800f00e:	d334      	bcc.n	800f07a <rshift+0x96>
 800f010:	1a9b      	subs	r3, r3, r2
 800f012:	009b      	lsls	r3, r3, #2
 800f014:	1eea      	subs	r2, r5, #3
 800f016:	4296      	cmp	r6, r2
 800f018:	bf38      	it	cc
 800f01a:	2300      	movcc	r3, #0
 800f01c:	4423      	add	r3, r4
 800f01e:	e015      	b.n	800f04c <rshift+0x68>
 800f020:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f024:	f1c1 0820 	rsb	r8, r1, #32
 800f028:	40cf      	lsrs	r7, r1
 800f02a:	f105 0e04 	add.w	lr, r5, #4
 800f02e:	46a1      	mov	r9, r4
 800f030:	4576      	cmp	r6, lr
 800f032:	46f4      	mov	ip, lr
 800f034:	d815      	bhi.n	800f062 <rshift+0x7e>
 800f036:	1a9a      	subs	r2, r3, r2
 800f038:	0092      	lsls	r2, r2, #2
 800f03a:	3a04      	subs	r2, #4
 800f03c:	3501      	adds	r5, #1
 800f03e:	42ae      	cmp	r6, r5
 800f040:	bf38      	it	cc
 800f042:	2200      	movcc	r2, #0
 800f044:	18a3      	adds	r3, r4, r2
 800f046:	50a7      	str	r7, [r4, r2]
 800f048:	b107      	cbz	r7, 800f04c <rshift+0x68>
 800f04a:	3304      	adds	r3, #4
 800f04c:	1b1a      	subs	r2, r3, r4
 800f04e:	42a3      	cmp	r3, r4
 800f050:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f054:	bf08      	it	eq
 800f056:	2300      	moveq	r3, #0
 800f058:	6102      	str	r2, [r0, #16]
 800f05a:	bf08      	it	eq
 800f05c:	6143      	streq	r3, [r0, #20]
 800f05e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f062:	f8dc c000 	ldr.w	ip, [ip]
 800f066:	fa0c fc08 	lsl.w	ip, ip, r8
 800f06a:	ea4c 0707 	orr.w	r7, ip, r7
 800f06e:	f849 7b04 	str.w	r7, [r9], #4
 800f072:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f076:	40cf      	lsrs	r7, r1
 800f078:	e7da      	b.n	800f030 <rshift+0x4c>
 800f07a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f07e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f082:	e7c3      	b.n	800f00c <rshift+0x28>
 800f084:	4623      	mov	r3, r4
 800f086:	e7e1      	b.n	800f04c <rshift+0x68>

0800f088 <__hexdig_fun>:
 800f088:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f08c:	2b09      	cmp	r3, #9
 800f08e:	d802      	bhi.n	800f096 <__hexdig_fun+0xe>
 800f090:	3820      	subs	r0, #32
 800f092:	b2c0      	uxtb	r0, r0
 800f094:	4770      	bx	lr
 800f096:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f09a:	2b05      	cmp	r3, #5
 800f09c:	d801      	bhi.n	800f0a2 <__hexdig_fun+0x1a>
 800f09e:	3847      	subs	r0, #71	@ 0x47
 800f0a0:	e7f7      	b.n	800f092 <__hexdig_fun+0xa>
 800f0a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f0a6:	2b05      	cmp	r3, #5
 800f0a8:	d801      	bhi.n	800f0ae <__hexdig_fun+0x26>
 800f0aa:	3827      	subs	r0, #39	@ 0x27
 800f0ac:	e7f1      	b.n	800f092 <__hexdig_fun+0xa>
 800f0ae:	2000      	movs	r0, #0
 800f0b0:	4770      	bx	lr
	...

0800f0b4 <__gethex>:
 800f0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b8:	b085      	sub	sp, #20
 800f0ba:	468a      	mov	sl, r1
 800f0bc:	9302      	str	r3, [sp, #8]
 800f0be:	680b      	ldr	r3, [r1, #0]
 800f0c0:	9001      	str	r0, [sp, #4]
 800f0c2:	4690      	mov	r8, r2
 800f0c4:	1c9c      	adds	r4, r3, #2
 800f0c6:	46a1      	mov	r9, r4
 800f0c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f0cc:	2830      	cmp	r0, #48	@ 0x30
 800f0ce:	d0fa      	beq.n	800f0c6 <__gethex+0x12>
 800f0d0:	eba9 0303 	sub.w	r3, r9, r3
 800f0d4:	f1a3 0b02 	sub.w	fp, r3, #2
 800f0d8:	f7ff ffd6 	bl	800f088 <__hexdig_fun>
 800f0dc:	4605      	mov	r5, r0
 800f0de:	2800      	cmp	r0, #0
 800f0e0:	d168      	bne.n	800f1b4 <__gethex+0x100>
 800f0e2:	49a0      	ldr	r1, [pc, #640]	@ (800f364 <__gethex+0x2b0>)
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	4648      	mov	r0, r9
 800f0e8:	f7ff ff0e 	bl	800ef08 <strncmp>
 800f0ec:	4607      	mov	r7, r0
 800f0ee:	2800      	cmp	r0, #0
 800f0f0:	d167      	bne.n	800f1c2 <__gethex+0x10e>
 800f0f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f0f6:	4626      	mov	r6, r4
 800f0f8:	f7ff ffc6 	bl	800f088 <__hexdig_fun>
 800f0fc:	2800      	cmp	r0, #0
 800f0fe:	d062      	beq.n	800f1c6 <__gethex+0x112>
 800f100:	4623      	mov	r3, r4
 800f102:	7818      	ldrb	r0, [r3, #0]
 800f104:	2830      	cmp	r0, #48	@ 0x30
 800f106:	4699      	mov	r9, r3
 800f108:	f103 0301 	add.w	r3, r3, #1
 800f10c:	d0f9      	beq.n	800f102 <__gethex+0x4e>
 800f10e:	f7ff ffbb 	bl	800f088 <__hexdig_fun>
 800f112:	fab0 f580 	clz	r5, r0
 800f116:	096d      	lsrs	r5, r5, #5
 800f118:	f04f 0b01 	mov.w	fp, #1
 800f11c:	464a      	mov	r2, r9
 800f11e:	4616      	mov	r6, r2
 800f120:	3201      	adds	r2, #1
 800f122:	7830      	ldrb	r0, [r6, #0]
 800f124:	f7ff ffb0 	bl	800f088 <__hexdig_fun>
 800f128:	2800      	cmp	r0, #0
 800f12a:	d1f8      	bne.n	800f11e <__gethex+0x6a>
 800f12c:	498d      	ldr	r1, [pc, #564]	@ (800f364 <__gethex+0x2b0>)
 800f12e:	2201      	movs	r2, #1
 800f130:	4630      	mov	r0, r6
 800f132:	f7ff fee9 	bl	800ef08 <strncmp>
 800f136:	2800      	cmp	r0, #0
 800f138:	d13f      	bne.n	800f1ba <__gethex+0x106>
 800f13a:	b944      	cbnz	r4, 800f14e <__gethex+0x9a>
 800f13c:	1c74      	adds	r4, r6, #1
 800f13e:	4622      	mov	r2, r4
 800f140:	4616      	mov	r6, r2
 800f142:	3201      	adds	r2, #1
 800f144:	7830      	ldrb	r0, [r6, #0]
 800f146:	f7ff ff9f 	bl	800f088 <__hexdig_fun>
 800f14a:	2800      	cmp	r0, #0
 800f14c:	d1f8      	bne.n	800f140 <__gethex+0x8c>
 800f14e:	1ba4      	subs	r4, r4, r6
 800f150:	00a7      	lsls	r7, r4, #2
 800f152:	7833      	ldrb	r3, [r6, #0]
 800f154:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f158:	2b50      	cmp	r3, #80	@ 0x50
 800f15a:	d13e      	bne.n	800f1da <__gethex+0x126>
 800f15c:	7873      	ldrb	r3, [r6, #1]
 800f15e:	2b2b      	cmp	r3, #43	@ 0x2b
 800f160:	d033      	beq.n	800f1ca <__gethex+0x116>
 800f162:	2b2d      	cmp	r3, #45	@ 0x2d
 800f164:	d034      	beq.n	800f1d0 <__gethex+0x11c>
 800f166:	1c71      	adds	r1, r6, #1
 800f168:	2400      	movs	r4, #0
 800f16a:	7808      	ldrb	r0, [r1, #0]
 800f16c:	f7ff ff8c 	bl	800f088 <__hexdig_fun>
 800f170:	1e43      	subs	r3, r0, #1
 800f172:	b2db      	uxtb	r3, r3
 800f174:	2b18      	cmp	r3, #24
 800f176:	d830      	bhi.n	800f1da <__gethex+0x126>
 800f178:	f1a0 0210 	sub.w	r2, r0, #16
 800f17c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f180:	f7ff ff82 	bl	800f088 <__hexdig_fun>
 800f184:	f100 3cff 	add.w	ip, r0, #4294967295
 800f188:	fa5f fc8c 	uxtb.w	ip, ip
 800f18c:	f1bc 0f18 	cmp.w	ip, #24
 800f190:	f04f 030a 	mov.w	r3, #10
 800f194:	d91e      	bls.n	800f1d4 <__gethex+0x120>
 800f196:	b104      	cbz	r4, 800f19a <__gethex+0xe6>
 800f198:	4252      	negs	r2, r2
 800f19a:	4417      	add	r7, r2
 800f19c:	f8ca 1000 	str.w	r1, [sl]
 800f1a0:	b1ed      	cbz	r5, 800f1de <__gethex+0x12a>
 800f1a2:	f1bb 0f00 	cmp.w	fp, #0
 800f1a6:	bf0c      	ite	eq
 800f1a8:	2506      	moveq	r5, #6
 800f1aa:	2500      	movne	r5, #0
 800f1ac:	4628      	mov	r0, r5
 800f1ae:	b005      	add	sp, #20
 800f1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b4:	2500      	movs	r5, #0
 800f1b6:	462c      	mov	r4, r5
 800f1b8:	e7b0      	b.n	800f11c <__gethex+0x68>
 800f1ba:	2c00      	cmp	r4, #0
 800f1bc:	d1c7      	bne.n	800f14e <__gethex+0x9a>
 800f1be:	4627      	mov	r7, r4
 800f1c0:	e7c7      	b.n	800f152 <__gethex+0x9e>
 800f1c2:	464e      	mov	r6, r9
 800f1c4:	462f      	mov	r7, r5
 800f1c6:	2501      	movs	r5, #1
 800f1c8:	e7c3      	b.n	800f152 <__gethex+0x9e>
 800f1ca:	2400      	movs	r4, #0
 800f1cc:	1cb1      	adds	r1, r6, #2
 800f1ce:	e7cc      	b.n	800f16a <__gethex+0xb6>
 800f1d0:	2401      	movs	r4, #1
 800f1d2:	e7fb      	b.n	800f1cc <__gethex+0x118>
 800f1d4:	fb03 0002 	mla	r0, r3, r2, r0
 800f1d8:	e7ce      	b.n	800f178 <__gethex+0xc4>
 800f1da:	4631      	mov	r1, r6
 800f1dc:	e7de      	b.n	800f19c <__gethex+0xe8>
 800f1de:	eba6 0309 	sub.w	r3, r6, r9
 800f1e2:	3b01      	subs	r3, #1
 800f1e4:	4629      	mov	r1, r5
 800f1e6:	2b07      	cmp	r3, #7
 800f1e8:	dc0a      	bgt.n	800f200 <__gethex+0x14c>
 800f1ea:	9801      	ldr	r0, [sp, #4]
 800f1ec:	f7fd ff92 	bl	800d114 <_Balloc>
 800f1f0:	4604      	mov	r4, r0
 800f1f2:	b940      	cbnz	r0, 800f206 <__gethex+0x152>
 800f1f4:	4b5c      	ldr	r3, [pc, #368]	@ (800f368 <__gethex+0x2b4>)
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	21e4      	movs	r1, #228	@ 0xe4
 800f1fa:	485c      	ldr	r0, [pc, #368]	@ (800f36c <__gethex+0x2b8>)
 800f1fc:	f7ff fec0 	bl	800ef80 <__assert_func>
 800f200:	3101      	adds	r1, #1
 800f202:	105b      	asrs	r3, r3, #1
 800f204:	e7ef      	b.n	800f1e6 <__gethex+0x132>
 800f206:	f100 0a14 	add.w	sl, r0, #20
 800f20a:	2300      	movs	r3, #0
 800f20c:	4655      	mov	r5, sl
 800f20e:	469b      	mov	fp, r3
 800f210:	45b1      	cmp	r9, r6
 800f212:	d337      	bcc.n	800f284 <__gethex+0x1d0>
 800f214:	f845 bb04 	str.w	fp, [r5], #4
 800f218:	eba5 050a 	sub.w	r5, r5, sl
 800f21c:	10ad      	asrs	r5, r5, #2
 800f21e:	6125      	str	r5, [r4, #16]
 800f220:	4658      	mov	r0, fp
 800f222:	f7fe f869 	bl	800d2f8 <__hi0bits>
 800f226:	016d      	lsls	r5, r5, #5
 800f228:	f8d8 6000 	ldr.w	r6, [r8]
 800f22c:	1a2d      	subs	r5, r5, r0
 800f22e:	42b5      	cmp	r5, r6
 800f230:	dd54      	ble.n	800f2dc <__gethex+0x228>
 800f232:	1bad      	subs	r5, r5, r6
 800f234:	4629      	mov	r1, r5
 800f236:	4620      	mov	r0, r4
 800f238:	f7fe fbfd 	bl	800da36 <__any_on>
 800f23c:	4681      	mov	r9, r0
 800f23e:	b178      	cbz	r0, 800f260 <__gethex+0x1ac>
 800f240:	1e6b      	subs	r3, r5, #1
 800f242:	1159      	asrs	r1, r3, #5
 800f244:	f003 021f 	and.w	r2, r3, #31
 800f248:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f24c:	f04f 0901 	mov.w	r9, #1
 800f250:	fa09 f202 	lsl.w	r2, r9, r2
 800f254:	420a      	tst	r2, r1
 800f256:	d003      	beq.n	800f260 <__gethex+0x1ac>
 800f258:	454b      	cmp	r3, r9
 800f25a:	dc36      	bgt.n	800f2ca <__gethex+0x216>
 800f25c:	f04f 0902 	mov.w	r9, #2
 800f260:	4629      	mov	r1, r5
 800f262:	4620      	mov	r0, r4
 800f264:	f7ff febe 	bl	800efe4 <rshift>
 800f268:	442f      	add	r7, r5
 800f26a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f26e:	42bb      	cmp	r3, r7
 800f270:	da42      	bge.n	800f2f8 <__gethex+0x244>
 800f272:	9801      	ldr	r0, [sp, #4]
 800f274:	4621      	mov	r1, r4
 800f276:	f7fd ff8d 	bl	800d194 <_Bfree>
 800f27a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f27c:	2300      	movs	r3, #0
 800f27e:	6013      	str	r3, [r2, #0]
 800f280:	25a3      	movs	r5, #163	@ 0xa3
 800f282:	e793      	b.n	800f1ac <__gethex+0xf8>
 800f284:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f288:	2a2e      	cmp	r2, #46	@ 0x2e
 800f28a:	d012      	beq.n	800f2b2 <__gethex+0x1fe>
 800f28c:	2b20      	cmp	r3, #32
 800f28e:	d104      	bne.n	800f29a <__gethex+0x1e6>
 800f290:	f845 bb04 	str.w	fp, [r5], #4
 800f294:	f04f 0b00 	mov.w	fp, #0
 800f298:	465b      	mov	r3, fp
 800f29a:	7830      	ldrb	r0, [r6, #0]
 800f29c:	9303      	str	r3, [sp, #12]
 800f29e:	f7ff fef3 	bl	800f088 <__hexdig_fun>
 800f2a2:	9b03      	ldr	r3, [sp, #12]
 800f2a4:	f000 000f 	and.w	r0, r0, #15
 800f2a8:	4098      	lsls	r0, r3
 800f2aa:	ea4b 0b00 	orr.w	fp, fp, r0
 800f2ae:	3304      	adds	r3, #4
 800f2b0:	e7ae      	b.n	800f210 <__gethex+0x15c>
 800f2b2:	45b1      	cmp	r9, r6
 800f2b4:	d8ea      	bhi.n	800f28c <__gethex+0x1d8>
 800f2b6:	492b      	ldr	r1, [pc, #172]	@ (800f364 <__gethex+0x2b0>)
 800f2b8:	9303      	str	r3, [sp, #12]
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	4630      	mov	r0, r6
 800f2be:	f7ff fe23 	bl	800ef08 <strncmp>
 800f2c2:	9b03      	ldr	r3, [sp, #12]
 800f2c4:	2800      	cmp	r0, #0
 800f2c6:	d1e1      	bne.n	800f28c <__gethex+0x1d8>
 800f2c8:	e7a2      	b.n	800f210 <__gethex+0x15c>
 800f2ca:	1ea9      	subs	r1, r5, #2
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	f7fe fbb2 	bl	800da36 <__any_on>
 800f2d2:	2800      	cmp	r0, #0
 800f2d4:	d0c2      	beq.n	800f25c <__gethex+0x1a8>
 800f2d6:	f04f 0903 	mov.w	r9, #3
 800f2da:	e7c1      	b.n	800f260 <__gethex+0x1ac>
 800f2dc:	da09      	bge.n	800f2f2 <__gethex+0x23e>
 800f2de:	1b75      	subs	r5, r6, r5
 800f2e0:	4621      	mov	r1, r4
 800f2e2:	9801      	ldr	r0, [sp, #4]
 800f2e4:	462a      	mov	r2, r5
 800f2e6:	f7fe f96d 	bl	800d5c4 <__lshift>
 800f2ea:	1b7f      	subs	r7, r7, r5
 800f2ec:	4604      	mov	r4, r0
 800f2ee:	f100 0a14 	add.w	sl, r0, #20
 800f2f2:	f04f 0900 	mov.w	r9, #0
 800f2f6:	e7b8      	b.n	800f26a <__gethex+0x1b6>
 800f2f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f2fc:	42bd      	cmp	r5, r7
 800f2fe:	dd6f      	ble.n	800f3e0 <__gethex+0x32c>
 800f300:	1bed      	subs	r5, r5, r7
 800f302:	42ae      	cmp	r6, r5
 800f304:	dc34      	bgt.n	800f370 <__gethex+0x2bc>
 800f306:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f30a:	2b02      	cmp	r3, #2
 800f30c:	d022      	beq.n	800f354 <__gethex+0x2a0>
 800f30e:	2b03      	cmp	r3, #3
 800f310:	d024      	beq.n	800f35c <__gethex+0x2a8>
 800f312:	2b01      	cmp	r3, #1
 800f314:	d115      	bne.n	800f342 <__gethex+0x28e>
 800f316:	42ae      	cmp	r6, r5
 800f318:	d113      	bne.n	800f342 <__gethex+0x28e>
 800f31a:	2e01      	cmp	r6, #1
 800f31c:	d10b      	bne.n	800f336 <__gethex+0x282>
 800f31e:	9a02      	ldr	r2, [sp, #8]
 800f320:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f324:	6013      	str	r3, [r2, #0]
 800f326:	2301      	movs	r3, #1
 800f328:	6123      	str	r3, [r4, #16]
 800f32a:	f8ca 3000 	str.w	r3, [sl]
 800f32e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f330:	2562      	movs	r5, #98	@ 0x62
 800f332:	601c      	str	r4, [r3, #0]
 800f334:	e73a      	b.n	800f1ac <__gethex+0xf8>
 800f336:	1e71      	subs	r1, r6, #1
 800f338:	4620      	mov	r0, r4
 800f33a:	f7fe fb7c 	bl	800da36 <__any_on>
 800f33e:	2800      	cmp	r0, #0
 800f340:	d1ed      	bne.n	800f31e <__gethex+0x26a>
 800f342:	9801      	ldr	r0, [sp, #4]
 800f344:	4621      	mov	r1, r4
 800f346:	f7fd ff25 	bl	800d194 <_Bfree>
 800f34a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f34c:	2300      	movs	r3, #0
 800f34e:	6013      	str	r3, [r2, #0]
 800f350:	2550      	movs	r5, #80	@ 0x50
 800f352:	e72b      	b.n	800f1ac <__gethex+0xf8>
 800f354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f356:	2b00      	cmp	r3, #0
 800f358:	d1f3      	bne.n	800f342 <__gethex+0x28e>
 800f35a:	e7e0      	b.n	800f31e <__gethex+0x26a>
 800f35c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d1dd      	bne.n	800f31e <__gethex+0x26a>
 800f362:	e7ee      	b.n	800f342 <__gethex+0x28e>
 800f364:	0800fa98 	.word	0x0800fa98
 800f368:	0800f92d 	.word	0x0800f92d
 800f36c:	0800fc46 	.word	0x0800fc46
 800f370:	1e6f      	subs	r7, r5, #1
 800f372:	f1b9 0f00 	cmp.w	r9, #0
 800f376:	d130      	bne.n	800f3da <__gethex+0x326>
 800f378:	b127      	cbz	r7, 800f384 <__gethex+0x2d0>
 800f37a:	4639      	mov	r1, r7
 800f37c:	4620      	mov	r0, r4
 800f37e:	f7fe fb5a 	bl	800da36 <__any_on>
 800f382:	4681      	mov	r9, r0
 800f384:	117a      	asrs	r2, r7, #5
 800f386:	2301      	movs	r3, #1
 800f388:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f38c:	f007 071f 	and.w	r7, r7, #31
 800f390:	40bb      	lsls	r3, r7
 800f392:	4213      	tst	r3, r2
 800f394:	4629      	mov	r1, r5
 800f396:	4620      	mov	r0, r4
 800f398:	bf18      	it	ne
 800f39a:	f049 0902 	orrne.w	r9, r9, #2
 800f39e:	f7ff fe21 	bl	800efe4 <rshift>
 800f3a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f3a6:	1b76      	subs	r6, r6, r5
 800f3a8:	2502      	movs	r5, #2
 800f3aa:	f1b9 0f00 	cmp.w	r9, #0
 800f3ae:	d047      	beq.n	800f440 <__gethex+0x38c>
 800f3b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f3b4:	2b02      	cmp	r3, #2
 800f3b6:	d015      	beq.n	800f3e4 <__gethex+0x330>
 800f3b8:	2b03      	cmp	r3, #3
 800f3ba:	d017      	beq.n	800f3ec <__gethex+0x338>
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d109      	bne.n	800f3d4 <__gethex+0x320>
 800f3c0:	f019 0f02 	tst.w	r9, #2
 800f3c4:	d006      	beq.n	800f3d4 <__gethex+0x320>
 800f3c6:	f8da 3000 	ldr.w	r3, [sl]
 800f3ca:	ea49 0903 	orr.w	r9, r9, r3
 800f3ce:	f019 0f01 	tst.w	r9, #1
 800f3d2:	d10e      	bne.n	800f3f2 <__gethex+0x33e>
 800f3d4:	f045 0510 	orr.w	r5, r5, #16
 800f3d8:	e032      	b.n	800f440 <__gethex+0x38c>
 800f3da:	f04f 0901 	mov.w	r9, #1
 800f3de:	e7d1      	b.n	800f384 <__gethex+0x2d0>
 800f3e0:	2501      	movs	r5, #1
 800f3e2:	e7e2      	b.n	800f3aa <__gethex+0x2f6>
 800f3e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3e6:	f1c3 0301 	rsb	r3, r3, #1
 800f3ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f3ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d0f0      	beq.n	800f3d4 <__gethex+0x320>
 800f3f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f3f6:	f104 0314 	add.w	r3, r4, #20
 800f3fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f3fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f402:	f04f 0c00 	mov.w	ip, #0
 800f406:	4618      	mov	r0, r3
 800f408:	f853 2b04 	ldr.w	r2, [r3], #4
 800f40c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f410:	d01b      	beq.n	800f44a <__gethex+0x396>
 800f412:	3201      	adds	r2, #1
 800f414:	6002      	str	r2, [r0, #0]
 800f416:	2d02      	cmp	r5, #2
 800f418:	f104 0314 	add.w	r3, r4, #20
 800f41c:	d13c      	bne.n	800f498 <__gethex+0x3e4>
 800f41e:	f8d8 2000 	ldr.w	r2, [r8]
 800f422:	3a01      	subs	r2, #1
 800f424:	42b2      	cmp	r2, r6
 800f426:	d109      	bne.n	800f43c <__gethex+0x388>
 800f428:	1171      	asrs	r1, r6, #5
 800f42a:	2201      	movs	r2, #1
 800f42c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f430:	f006 061f 	and.w	r6, r6, #31
 800f434:	fa02 f606 	lsl.w	r6, r2, r6
 800f438:	421e      	tst	r6, r3
 800f43a:	d13a      	bne.n	800f4b2 <__gethex+0x3fe>
 800f43c:	f045 0520 	orr.w	r5, r5, #32
 800f440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f442:	601c      	str	r4, [r3, #0]
 800f444:	9b02      	ldr	r3, [sp, #8]
 800f446:	601f      	str	r7, [r3, #0]
 800f448:	e6b0      	b.n	800f1ac <__gethex+0xf8>
 800f44a:	4299      	cmp	r1, r3
 800f44c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f450:	d8d9      	bhi.n	800f406 <__gethex+0x352>
 800f452:	68a3      	ldr	r3, [r4, #8]
 800f454:	459b      	cmp	fp, r3
 800f456:	db17      	blt.n	800f488 <__gethex+0x3d4>
 800f458:	6861      	ldr	r1, [r4, #4]
 800f45a:	9801      	ldr	r0, [sp, #4]
 800f45c:	3101      	adds	r1, #1
 800f45e:	f7fd fe59 	bl	800d114 <_Balloc>
 800f462:	4681      	mov	r9, r0
 800f464:	b918      	cbnz	r0, 800f46e <__gethex+0x3ba>
 800f466:	4b1a      	ldr	r3, [pc, #104]	@ (800f4d0 <__gethex+0x41c>)
 800f468:	4602      	mov	r2, r0
 800f46a:	2184      	movs	r1, #132	@ 0x84
 800f46c:	e6c5      	b.n	800f1fa <__gethex+0x146>
 800f46e:	6922      	ldr	r2, [r4, #16]
 800f470:	3202      	adds	r2, #2
 800f472:	f104 010c 	add.w	r1, r4, #12
 800f476:	0092      	lsls	r2, r2, #2
 800f478:	300c      	adds	r0, #12
 800f47a:	f7fc ffa0 	bl	800c3be <memcpy>
 800f47e:	4621      	mov	r1, r4
 800f480:	9801      	ldr	r0, [sp, #4]
 800f482:	f7fd fe87 	bl	800d194 <_Bfree>
 800f486:	464c      	mov	r4, r9
 800f488:	6923      	ldr	r3, [r4, #16]
 800f48a:	1c5a      	adds	r2, r3, #1
 800f48c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f490:	6122      	str	r2, [r4, #16]
 800f492:	2201      	movs	r2, #1
 800f494:	615a      	str	r2, [r3, #20]
 800f496:	e7be      	b.n	800f416 <__gethex+0x362>
 800f498:	6922      	ldr	r2, [r4, #16]
 800f49a:	455a      	cmp	r2, fp
 800f49c:	dd0b      	ble.n	800f4b6 <__gethex+0x402>
 800f49e:	2101      	movs	r1, #1
 800f4a0:	4620      	mov	r0, r4
 800f4a2:	f7ff fd9f 	bl	800efe4 <rshift>
 800f4a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f4aa:	3701      	adds	r7, #1
 800f4ac:	42bb      	cmp	r3, r7
 800f4ae:	f6ff aee0 	blt.w	800f272 <__gethex+0x1be>
 800f4b2:	2501      	movs	r5, #1
 800f4b4:	e7c2      	b.n	800f43c <__gethex+0x388>
 800f4b6:	f016 061f 	ands.w	r6, r6, #31
 800f4ba:	d0fa      	beq.n	800f4b2 <__gethex+0x3fe>
 800f4bc:	4453      	add	r3, sl
 800f4be:	f1c6 0620 	rsb	r6, r6, #32
 800f4c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f4c6:	f7fd ff17 	bl	800d2f8 <__hi0bits>
 800f4ca:	42b0      	cmp	r0, r6
 800f4cc:	dbe7      	blt.n	800f49e <__gethex+0x3ea>
 800f4ce:	e7f0      	b.n	800f4b2 <__gethex+0x3fe>
 800f4d0:	0800f92d 	.word	0x0800f92d

0800f4d4 <L_shift>:
 800f4d4:	f1c2 0208 	rsb	r2, r2, #8
 800f4d8:	0092      	lsls	r2, r2, #2
 800f4da:	b570      	push	{r4, r5, r6, lr}
 800f4dc:	f1c2 0620 	rsb	r6, r2, #32
 800f4e0:	6843      	ldr	r3, [r0, #4]
 800f4e2:	6804      	ldr	r4, [r0, #0]
 800f4e4:	fa03 f506 	lsl.w	r5, r3, r6
 800f4e8:	432c      	orrs	r4, r5
 800f4ea:	40d3      	lsrs	r3, r2
 800f4ec:	6004      	str	r4, [r0, #0]
 800f4ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800f4f2:	4288      	cmp	r0, r1
 800f4f4:	d3f4      	bcc.n	800f4e0 <L_shift+0xc>
 800f4f6:	bd70      	pop	{r4, r5, r6, pc}

0800f4f8 <__match>:
 800f4f8:	b530      	push	{r4, r5, lr}
 800f4fa:	6803      	ldr	r3, [r0, #0]
 800f4fc:	3301      	adds	r3, #1
 800f4fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f502:	b914      	cbnz	r4, 800f50a <__match+0x12>
 800f504:	6003      	str	r3, [r0, #0]
 800f506:	2001      	movs	r0, #1
 800f508:	bd30      	pop	{r4, r5, pc}
 800f50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f50e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f512:	2d19      	cmp	r5, #25
 800f514:	bf98      	it	ls
 800f516:	3220      	addls	r2, #32
 800f518:	42a2      	cmp	r2, r4
 800f51a:	d0f0      	beq.n	800f4fe <__match+0x6>
 800f51c:	2000      	movs	r0, #0
 800f51e:	e7f3      	b.n	800f508 <__match+0x10>

0800f520 <__hexnan>:
 800f520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f524:	680b      	ldr	r3, [r1, #0]
 800f526:	6801      	ldr	r1, [r0, #0]
 800f528:	115e      	asrs	r6, r3, #5
 800f52a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f52e:	f013 031f 	ands.w	r3, r3, #31
 800f532:	b087      	sub	sp, #28
 800f534:	bf18      	it	ne
 800f536:	3604      	addne	r6, #4
 800f538:	2500      	movs	r5, #0
 800f53a:	1f37      	subs	r7, r6, #4
 800f53c:	4682      	mov	sl, r0
 800f53e:	4690      	mov	r8, r2
 800f540:	9301      	str	r3, [sp, #4]
 800f542:	f846 5c04 	str.w	r5, [r6, #-4]
 800f546:	46b9      	mov	r9, r7
 800f548:	463c      	mov	r4, r7
 800f54a:	9502      	str	r5, [sp, #8]
 800f54c:	46ab      	mov	fp, r5
 800f54e:	784a      	ldrb	r2, [r1, #1]
 800f550:	1c4b      	adds	r3, r1, #1
 800f552:	9303      	str	r3, [sp, #12]
 800f554:	b342      	cbz	r2, 800f5a8 <__hexnan+0x88>
 800f556:	4610      	mov	r0, r2
 800f558:	9105      	str	r1, [sp, #20]
 800f55a:	9204      	str	r2, [sp, #16]
 800f55c:	f7ff fd94 	bl	800f088 <__hexdig_fun>
 800f560:	2800      	cmp	r0, #0
 800f562:	d151      	bne.n	800f608 <__hexnan+0xe8>
 800f564:	9a04      	ldr	r2, [sp, #16]
 800f566:	9905      	ldr	r1, [sp, #20]
 800f568:	2a20      	cmp	r2, #32
 800f56a:	d818      	bhi.n	800f59e <__hexnan+0x7e>
 800f56c:	9b02      	ldr	r3, [sp, #8]
 800f56e:	459b      	cmp	fp, r3
 800f570:	dd13      	ble.n	800f59a <__hexnan+0x7a>
 800f572:	454c      	cmp	r4, r9
 800f574:	d206      	bcs.n	800f584 <__hexnan+0x64>
 800f576:	2d07      	cmp	r5, #7
 800f578:	dc04      	bgt.n	800f584 <__hexnan+0x64>
 800f57a:	462a      	mov	r2, r5
 800f57c:	4649      	mov	r1, r9
 800f57e:	4620      	mov	r0, r4
 800f580:	f7ff ffa8 	bl	800f4d4 <L_shift>
 800f584:	4544      	cmp	r4, r8
 800f586:	d952      	bls.n	800f62e <__hexnan+0x10e>
 800f588:	2300      	movs	r3, #0
 800f58a:	f1a4 0904 	sub.w	r9, r4, #4
 800f58e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f592:	f8cd b008 	str.w	fp, [sp, #8]
 800f596:	464c      	mov	r4, r9
 800f598:	461d      	mov	r5, r3
 800f59a:	9903      	ldr	r1, [sp, #12]
 800f59c:	e7d7      	b.n	800f54e <__hexnan+0x2e>
 800f59e:	2a29      	cmp	r2, #41	@ 0x29
 800f5a0:	d157      	bne.n	800f652 <__hexnan+0x132>
 800f5a2:	3102      	adds	r1, #2
 800f5a4:	f8ca 1000 	str.w	r1, [sl]
 800f5a8:	f1bb 0f00 	cmp.w	fp, #0
 800f5ac:	d051      	beq.n	800f652 <__hexnan+0x132>
 800f5ae:	454c      	cmp	r4, r9
 800f5b0:	d206      	bcs.n	800f5c0 <__hexnan+0xa0>
 800f5b2:	2d07      	cmp	r5, #7
 800f5b4:	dc04      	bgt.n	800f5c0 <__hexnan+0xa0>
 800f5b6:	462a      	mov	r2, r5
 800f5b8:	4649      	mov	r1, r9
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	f7ff ff8a 	bl	800f4d4 <L_shift>
 800f5c0:	4544      	cmp	r4, r8
 800f5c2:	d936      	bls.n	800f632 <__hexnan+0x112>
 800f5c4:	f1a8 0204 	sub.w	r2, r8, #4
 800f5c8:	4623      	mov	r3, r4
 800f5ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800f5ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800f5d2:	429f      	cmp	r7, r3
 800f5d4:	d2f9      	bcs.n	800f5ca <__hexnan+0xaa>
 800f5d6:	1b3b      	subs	r3, r7, r4
 800f5d8:	f023 0303 	bic.w	r3, r3, #3
 800f5dc:	3304      	adds	r3, #4
 800f5de:	3401      	adds	r4, #1
 800f5e0:	3e03      	subs	r6, #3
 800f5e2:	42b4      	cmp	r4, r6
 800f5e4:	bf88      	it	hi
 800f5e6:	2304      	movhi	r3, #4
 800f5e8:	4443      	add	r3, r8
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	f843 2b04 	str.w	r2, [r3], #4
 800f5f0:	429f      	cmp	r7, r3
 800f5f2:	d2fb      	bcs.n	800f5ec <__hexnan+0xcc>
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	b91b      	cbnz	r3, 800f600 <__hexnan+0xe0>
 800f5f8:	4547      	cmp	r7, r8
 800f5fa:	d128      	bne.n	800f64e <__hexnan+0x12e>
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	603b      	str	r3, [r7, #0]
 800f600:	2005      	movs	r0, #5
 800f602:	b007      	add	sp, #28
 800f604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f608:	3501      	adds	r5, #1
 800f60a:	2d08      	cmp	r5, #8
 800f60c:	f10b 0b01 	add.w	fp, fp, #1
 800f610:	dd06      	ble.n	800f620 <__hexnan+0x100>
 800f612:	4544      	cmp	r4, r8
 800f614:	d9c1      	bls.n	800f59a <__hexnan+0x7a>
 800f616:	2300      	movs	r3, #0
 800f618:	f844 3c04 	str.w	r3, [r4, #-4]
 800f61c:	2501      	movs	r5, #1
 800f61e:	3c04      	subs	r4, #4
 800f620:	6822      	ldr	r2, [r4, #0]
 800f622:	f000 000f 	and.w	r0, r0, #15
 800f626:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f62a:	6020      	str	r0, [r4, #0]
 800f62c:	e7b5      	b.n	800f59a <__hexnan+0x7a>
 800f62e:	2508      	movs	r5, #8
 800f630:	e7b3      	b.n	800f59a <__hexnan+0x7a>
 800f632:	9b01      	ldr	r3, [sp, #4]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d0dd      	beq.n	800f5f4 <__hexnan+0xd4>
 800f638:	f1c3 0320 	rsb	r3, r3, #32
 800f63c:	f04f 32ff 	mov.w	r2, #4294967295
 800f640:	40da      	lsrs	r2, r3
 800f642:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f646:	4013      	ands	r3, r2
 800f648:	f846 3c04 	str.w	r3, [r6, #-4]
 800f64c:	e7d2      	b.n	800f5f4 <__hexnan+0xd4>
 800f64e:	3f04      	subs	r7, #4
 800f650:	e7d0      	b.n	800f5f4 <__hexnan+0xd4>
 800f652:	2004      	movs	r0, #4
 800f654:	e7d5      	b.n	800f602 <__hexnan+0xe2>

0800f656 <__ascii_mbtowc>:
 800f656:	b082      	sub	sp, #8
 800f658:	b901      	cbnz	r1, 800f65c <__ascii_mbtowc+0x6>
 800f65a:	a901      	add	r1, sp, #4
 800f65c:	b142      	cbz	r2, 800f670 <__ascii_mbtowc+0x1a>
 800f65e:	b14b      	cbz	r3, 800f674 <__ascii_mbtowc+0x1e>
 800f660:	7813      	ldrb	r3, [r2, #0]
 800f662:	600b      	str	r3, [r1, #0]
 800f664:	7812      	ldrb	r2, [r2, #0]
 800f666:	1e10      	subs	r0, r2, #0
 800f668:	bf18      	it	ne
 800f66a:	2001      	movne	r0, #1
 800f66c:	b002      	add	sp, #8
 800f66e:	4770      	bx	lr
 800f670:	4610      	mov	r0, r2
 800f672:	e7fb      	b.n	800f66c <__ascii_mbtowc+0x16>
 800f674:	f06f 0001 	mvn.w	r0, #1
 800f678:	e7f8      	b.n	800f66c <__ascii_mbtowc+0x16>

0800f67a <_realloc_r>:
 800f67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f67e:	4680      	mov	r8, r0
 800f680:	4615      	mov	r5, r2
 800f682:	460c      	mov	r4, r1
 800f684:	b921      	cbnz	r1, 800f690 <_realloc_r+0x16>
 800f686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f68a:	4611      	mov	r1, r2
 800f68c:	f7fb bd12 	b.w	800b0b4 <_malloc_r>
 800f690:	b92a      	cbnz	r2, 800f69e <_realloc_r+0x24>
 800f692:	f7fd fcf5 	bl	800d080 <_free_r>
 800f696:	2400      	movs	r4, #0
 800f698:	4620      	mov	r0, r4
 800f69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f69e:	f000 f839 	bl	800f714 <_malloc_usable_size_r>
 800f6a2:	4285      	cmp	r5, r0
 800f6a4:	4606      	mov	r6, r0
 800f6a6:	d802      	bhi.n	800f6ae <_realloc_r+0x34>
 800f6a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f6ac:	d8f4      	bhi.n	800f698 <_realloc_r+0x1e>
 800f6ae:	4629      	mov	r1, r5
 800f6b0:	4640      	mov	r0, r8
 800f6b2:	f7fb fcff 	bl	800b0b4 <_malloc_r>
 800f6b6:	4607      	mov	r7, r0
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	d0ec      	beq.n	800f696 <_realloc_r+0x1c>
 800f6bc:	42b5      	cmp	r5, r6
 800f6be:	462a      	mov	r2, r5
 800f6c0:	4621      	mov	r1, r4
 800f6c2:	bf28      	it	cs
 800f6c4:	4632      	movcs	r2, r6
 800f6c6:	f7fc fe7a 	bl	800c3be <memcpy>
 800f6ca:	4621      	mov	r1, r4
 800f6cc:	4640      	mov	r0, r8
 800f6ce:	f7fd fcd7 	bl	800d080 <_free_r>
 800f6d2:	463c      	mov	r4, r7
 800f6d4:	e7e0      	b.n	800f698 <_realloc_r+0x1e>

0800f6d6 <__ascii_wctomb>:
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	4608      	mov	r0, r1
 800f6da:	b141      	cbz	r1, 800f6ee <__ascii_wctomb+0x18>
 800f6dc:	2aff      	cmp	r2, #255	@ 0xff
 800f6de:	d904      	bls.n	800f6ea <__ascii_wctomb+0x14>
 800f6e0:	228a      	movs	r2, #138	@ 0x8a
 800f6e2:	601a      	str	r2, [r3, #0]
 800f6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f6e8:	4770      	bx	lr
 800f6ea:	700a      	strb	r2, [r1, #0]
 800f6ec:	2001      	movs	r0, #1
 800f6ee:	4770      	bx	lr

0800f6f0 <fiprintf>:
 800f6f0:	b40e      	push	{r1, r2, r3}
 800f6f2:	b503      	push	{r0, r1, lr}
 800f6f4:	4601      	mov	r1, r0
 800f6f6:	ab03      	add	r3, sp, #12
 800f6f8:	4805      	ldr	r0, [pc, #20]	@ (800f710 <fiprintf+0x20>)
 800f6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6fe:	6800      	ldr	r0, [r0, #0]
 800f700:	9301      	str	r3, [sp, #4]
 800f702:	f7ff f9c1 	bl	800ea88 <_vfiprintf_r>
 800f706:	b002      	add	sp, #8
 800f708:	f85d eb04 	ldr.w	lr, [sp], #4
 800f70c:	b003      	add	sp, #12
 800f70e:	4770      	bx	lr
 800f710:	20000018 	.word	0x20000018

0800f714 <_malloc_usable_size_r>:
 800f714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f718:	1f18      	subs	r0, r3, #4
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	bfbc      	itt	lt
 800f71e:	580b      	ldrlt	r3, [r1, r0]
 800f720:	18c0      	addlt	r0, r0, r3
 800f722:	4770      	bx	lr

0800f724 <_init>:
 800f724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f726:	bf00      	nop
 800f728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f72a:	bc08      	pop	{r3}
 800f72c:	469e      	mov	lr, r3
 800f72e:	4770      	bx	lr

0800f730 <_fini>:
 800f730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f732:	bf00      	nop
 800f734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f736:	bc08      	pop	{r3}
 800f738:	469e      	mov	lr, r3
 800f73a:	4770      	bx	lr
