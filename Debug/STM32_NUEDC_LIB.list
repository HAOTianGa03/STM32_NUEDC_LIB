
STM32_NUEDC_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b60  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  08012d40  08012d40  00013d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801339c  0801339c  000151d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801339c  0801339c  0001439c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080133a4  080133a4  000151d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080133a4  080133a4  000143a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080133ac  080133ac  000143ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080133b4  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001e16c  200001d4  08013588  000151d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001e340  08013588  00015340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000151d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bdff  00000000  00000000  00015204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c56  00000000  00000000  00041003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022e8  00000000  00000000  00045c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b24  00000000  00000000  00047f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030f42  00000000  00000000  00049a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028411  00000000  00000000  0007a9ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001428b1  00000000  00000000  000a2dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e5670  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b358  00000000  00000000  001e56b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001f0a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012d28 	.word	0x08012d28

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08012d28 	.word	0x08012d28

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b09a      	sub	sp, #104	@ 0x68
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800105a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	223c      	movs	r2, #60	@ 0x3c
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f00d ffd2 	bl	800f018 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001074:	463b      	mov	r3, r7
 8001076:	2220      	movs	r2, #32
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f00d ffcc 	bl	800f018 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001080:	4b53      	ldr	r3, [pc, #332]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 8001082:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001086:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001088:	4b51      	ldr	r3, [pc, #324]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 800108a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800108e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001090:	4b4f      	ldr	r3, [pc, #316]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001096:	4b4e      	ldr	r3, [pc, #312]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800109c:	4b4c      	ldr	r3, [pc, #304]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010a2:	4b4b      	ldr	r3, [pc, #300]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010a8:	4b49      	ldr	r3, [pc, #292]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 80010aa:	2208      	movs	r2, #8
 80010ac:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010ae:	4b48      	ldr	r3, [pc, #288]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010b4:	4b46      	ldr	r3, [pc, #280]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80010ba:	4b45      	ldr	r3, [pc, #276]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 80010bc:	2202      	movs	r2, #2
 80010be:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c0:	4b43      	ldr	r3, [pc, #268]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c8:	4b41      	ldr	r3, [pc, #260]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ce:	4b40      	ldr	r3, [pc, #256]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010d4:	4b3e      	ldr	r3, [pc, #248]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010dc:	4b3c      	ldr	r3, [pc, #240]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010e2:	4b3b      	ldr	r3, [pc, #236]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ea:	4839      	ldr	r0, [pc, #228]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 80010ec:	f003 fcfc 	bl	8004ae8 <HAL_ADC_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010f6:	f001 ff4f 	bl	8002f98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010fa:	2300      	movs	r3, #0
 80010fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010fe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001102:	4619      	mov	r1, r3
 8001104:	4832      	ldr	r0, [pc, #200]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 8001106:	f005 fef1 	bl	8006eec <HAL_ADCEx_MultiModeConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8001110:	f001 ff42 	bl	8002f98 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8001114:	4b2f      	ldr	r3, [pc, #188]	@ (80011d4 <MX_ADC1_Init+0x180>)
 8001116:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001118:	2309      	movs	r3, #9
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800111c:	2304      	movs	r3, #4
 800111e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001120:	237f      	movs	r3, #127	@ 0x7f
 8001122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001124:	2304      	movs	r3, #4
 8001126:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjectedOffset = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigInjected.InjectedNbrOfConversion = 2;
 800112c:	2302      	movs	r3, #2
 800112e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  sConfigInjected.QueueInjectedContext = DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_HRTIM_TRG2;
 8001142:	23cc      	movs	r3, #204	@ 0xcc
 8001144:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001146:	2380      	movs	r3, #128	@ 0x80
 8001148:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001150:	f107 0320 	add.w	r3, r7, #32
 8001154:	4619      	mov	r1, r3
 8001156:	481e      	ldr	r0, [pc, #120]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 8001158:	f005 f99c 	bl	8006494 <HAL_ADCEx_InjectedConfigChannel>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001162:	f001 ff19 	bl	8002f98 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001166:	f240 130f 	movw	r3, #271	@ 0x10f
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	4619      	mov	r1, r3
 8001172:	4817      	ldr	r0, [pc, #92]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 8001174:	f005 f98e 	bl	8006494 <HAL_ADCEx_InjectedConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 800117e:	f001 ff0b 	bl	8002f98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_ADC1_Init+0x180>)
 8001184:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001186:	2306      	movs	r3, #6
 8001188:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800118a:	2307      	movs	r3, #7
 800118c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800118e:	237f      	movs	r3, #127	@ 0x7f
 8001190:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001192:	2304      	movs	r3, #4
 8001194:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 80011a0:	f004 f9b0 	bl	8005504 <HAL_ADC_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 80011aa:	f001 fef5 	bl	8002f98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011ae:	230c      	movs	r3, #12
 80011b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	@ (80011d0 <MX_ADC1_Init+0x17c>)
 80011b8:	f004 f9a4 	bl	8005504 <HAL_ADC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 80011c2:	f001 fee9 	bl	8002f98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3768      	adds	r7, #104	@ 0x68
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001f0 	.word	0x200001f0
 80011d4:	19200040 	.word	0x19200040

080011d8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b098      	sub	sp, #96	@ 0x60
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011e2:	2220      	movs	r2, #32
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f00d ff16 	bl	800f018 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	223c      	movs	r2, #60	@ 0x3c
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f00d ff10 	bl	800f018 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001334 <MX_ADC2_Init+0x15c>)
 80011fa:	4a4f      	ldr	r2, [pc, #316]	@ (8001338 <MX_ADC2_Init+0x160>)
 80011fc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001334 <MX_ADC2_Init+0x15c>)
 8001200:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001204:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001206:	4b4b      	ldr	r3, [pc, #300]	@ (8001334 <MX_ADC2_Init+0x15c>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800120c:	4b49      	ldr	r3, [pc, #292]	@ (8001334 <MX_ADC2_Init+0x15c>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001212:	4b48      	ldr	r3, [pc, #288]	@ (8001334 <MX_ADC2_Init+0x15c>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001218:	4b46      	ldr	r3, [pc, #280]	@ (8001334 <MX_ADC2_Init+0x15c>)
 800121a:	2201      	movs	r2, #1
 800121c:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800121e:	4b45      	ldr	r3, [pc, #276]	@ (8001334 <MX_ADC2_Init+0x15c>)
 8001220:	2208      	movs	r2, #8
 8001222:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001224:	4b43      	ldr	r3, [pc, #268]	@ (8001334 <MX_ADC2_Init+0x15c>)
 8001226:	2200      	movs	r2, #0
 8001228:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800122a:	4b42      	ldr	r3, [pc, #264]	@ (8001334 <MX_ADC2_Init+0x15c>)
 800122c:	2200      	movs	r2, #0
 800122e:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001230:	4b40      	ldr	r3, [pc, #256]	@ (8001334 <MX_ADC2_Init+0x15c>)
 8001232:	2201      	movs	r2, #1
 8001234:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001236:	4b3f      	ldr	r3, [pc, #252]	@ (8001334 <MX_ADC2_Init+0x15c>)
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800123e:	4b3d      	ldr	r3, [pc, #244]	@ (8001334 <MX_ADC2_Init+0x15c>)
 8001240:	2200      	movs	r2, #0
 8001242:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001244:	4b3b      	ldr	r3, [pc, #236]	@ (8001334 <MX_ADC2_Init+0x15c>)
 8001246:	2200      	movs	r2, #0
 8001248:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800124a:	4b3a      	ldr	r3, [pc, #232]	@ (8001334 <MX_ADC2_Init+0x15c>)
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001252:	4b38      	ldr	r3, [pc, #224]	@ (8001334 <MX_ADC2_Init+0x15c>)
 8001254:	2200      	movs	r2, #0
 8001256:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001258:	4b36      	ldr	r3, [pc, #216]	@ (8001334 <MX_ADC2_Init+0x15c>)
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001260:	4834      	ldr	r0, [pc, #208]	@ (8001334 <MX_ADC2_Init+0x15c>)
 8001262:	f003 fc41 	bl	8004ae8 <HAL_ADC_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_ADC2_Init+0x98>
  {
    Error_Handler();
 800126c:	f001 fe94 	bl	8002f98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001270:	4b32      	ldr	r3, [pc, #200]	@ (800133c <MX_ADC2_Init+0x164>)
 8001272:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001274:	2306      	movs	r3, #6
 8001276:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001278:	2300      	movs	r3, #0
 800127a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800127c:	237f      	movs	r3, #127	@ 0x7f
 800127e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001280:	2304      	movs	r3, #4
 8001282:	653b      	str	r3, [r7, #80]	@ 0x50
  sConfig.Offset = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001288:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800128c:	4619      	mov	r1, r3
 800128e:	4829      	ldr	r0, [pc, #164]	@ (8001334 <MX_ADC2_Init+0x15c>)
 8001290:	f004 f938 	bl	8005504 <HAL_ADC_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 800129a:	f001 fe7d 	bl	8002f98 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800129e:	4b27      	ldr	r3, [pc, #156]	@ (800133c <MX_ADC2_Init+0x164>)
 80012a0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80012a2:	2309      	movs	r3, #9
 80012a4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80012a6:	2304      	movs	r3, #4
 80012a8:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80012aa:	237f      	movs	r3, #127	@ 0x7f
 80012ac:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80012ae:	2304      	movs	r3, #4
 80012b0:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80012b6:	2303      	movs	r3, #3
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_HRTIM_TRG4;
 80012cc:	23d0      	movs	r3, #208	@ 0xd0
 80012ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80012d0:	2380      	movs	r3, #128	@ 0x80
 80012d2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	4815      	ldr	r0, [pc, #84]	@ (8001334 <MX_ADC2_Init+0x15c>)
 80012e0:	f005 f8d8 	bl	8006494 <HAL_ADCEx_InjectedConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_ADC2_Init+0x116>
  {
    Error_Handler();
 80012ea:	f001 fe55 	bl	8002f98 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80012ee:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <MX_ADC2_Init+0x168>)
 80012f0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80012f2:	f240 130f 	movw	r3, #271	@ 0x10f
 80012f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	480d      	ldr	r0, [pc, #52]	@ (8001334 <MX_ADC2_Init+0x15c>)
 80012fe:	f005 f8c9 	bl	8006494 <HAL_ADCEx_InjectedConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_ADC2_Init+0x134>
  {
    Error_Handler();
 8001308:	f001 fe46 	bl	8002f98 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800130c:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <MX_ADC2_Init+0x16c>)
 800130e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001310:	f240 2315 	movw	r3, #533	@ 0x215
 8001314:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	@ (8001334 <MX_ADC2_Init+0x15c>)
 800131c:	f005 f8ba 	bl	8006494 <HAL_ADCEx_InjectedConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_ADC2_Init+0x152>
  {
    Error_Handler();
 8001326:	f001 fe37 	bl	8002f98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	3760      	adds	r7, #96	@ 0x60
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000025c 	.word	0x2000025c
 8001338:	50000100 	.word	0x50000100
 800133c:	04300002 	.word	0x04300002
 8001340:	08600004 	.word	0x08600004
 8001344:	0c900008 	.word	0x0c900008

08001348 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b09a      	sub	sp, #104	@ 0x68
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800134e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800135a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800135e:	2220      	movs	r2, #32
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f00d fe58 	bl	800f018 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001368:	463b      	mov	r3, r7
 800136a:	223c      	movs	r2, #60	@ 0x3c
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f00d fe52 	bl	800f018 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001374:	4b4d      	ldr	r3, [pc, #308]	@ (80014ac <MX_ADC3_Init+0x164>)
 8001376:	4a4e      	ldr	r2, [pc, #312]	@ (80014b0 <MX_ADC3_Init+0x168>)
 8001378:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800137a:	4b4c      	ldr	r3, [pc, #304]	@ (80014ac <MX_ADC3_Init+0x164>)
 800137c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001380:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001382:	4b4a      	ldr	r3, [pc, #296]	@ (80014ac <MX_ADC3_Init+0x164>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001388:	4b48      	ldr	r3, [pc, #288]	@ (80014ac <MX_ADC3_Init+0x164>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800138e:	4b47      	ldr	r3, [pc, #284]	@ (80014ac <MX_ADC3_Init+0x164>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001394:	4b45      	ldr	r3, [pc, #276]	@ (80014ac <MX_ADC3_Init+0x164>)
 8001396:	2201      	movs	r2, #1
 8001398:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800139a:	4b44      	ldr	r3, [pc, #272]	@ (80014ac <MX_ADC3_Init+0x164>)
 800139c:	2204      	movs	r2, #4
 800139e:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013a0:	4b42      	ldr	r3, [pc, #264]	@ (80014ac <MX_ADC3_Init+0x164>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80013a6:	4b41      	ldr	r3, [pc, #260]	@ (80014ac <MX_ADC3_Init+0x164>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80013ac:	4b3f      	ldr	r3, [pc, #252]	@ (80014ac <MX_ADC3_Init+0x164>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013b2:	4b3e      	ldr	r3, [pc, #248]	@ (80014ac <MX_ADC3_Init+0x164>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ba:	4b3c      	ldr	r3, [pc, #240]	@ (80014ac <MX_ADC3_Init+0x164>)
 80013bc:	2200      	movs	r2, #0
 80013be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013c0:	4b3a      	ldr	r3, [pc, #232]	@ (80014ac <MX_ADC3_Init+0x164>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80013c6:	4b39      	ldr	r3, [pc, #228]	@ (80014ac <MX_ADC3_Init+0x164>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013ce:	4b37      	ldr	r3, [pc, #220]	@ (80014ac <MX_ADC3_Init+0x164>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80013d4:	4b35      	ldr	r3, [pc, #212]	@ (80014ac <MX_ADC3_Init+0x164>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013dc:	4833      	ldr	r0, [pc, #204]	@ (80014ac <MX_ADC3_Init+0x164>)
 80013de:	f003 fb83 	bl	8004ae8 <HAL_ADC_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80013e8:	f001 fdd6 	bl	8002f98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013ec:	2300      	movs	r3, #0
 80013ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80013f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80013f4:	4619      	mov	r1, r3
 80013f6:	482d      	ldr	r0, [pc, #180]	@ (80014ac <MX_ADC3_Init+0x164>)
 80013f8:	f005 fd78 	bl	8006eec <HAL_ADCEx_MultiModeConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_ADC3_Init+0xbe>
  {
    Error_Handler();
 8001402:	f001 fdc9 	bl	8002f98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001406:	4b2b      	ldr	r3, [pc, #172]	@ (80014b4 <MX_ADC3_Init+0x16c>)
 8001408:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800140a:	2306      	movs	r3, #6
 800140c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800140e:	2300      	movs	r3, #0
 8001410:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001412:	237f      	movs	r3, #127	@ 0x7f
 8001414:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001416:	2304      	movs	r3, #4
 8001418:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800141e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001422:	4619      	mov	r1, r3
 8001424:	4821      	ldr	r0, [pc, #132]	@ (80014ac <MX_ADC3_Init+0x164>)
 8001426:	f004 f86d 	bl	8005504 <HAL_ADC_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 8001430:	f001 fdb2 	bl	8002f98 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001434:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <MX_ADC3_Init+0x170>)
 8001436:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001438:	2309      	movs	r3, #9
 800143a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800143c:	2304      	movs	r3, #4
 800143e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001440:	237f      	movs	r3, #127	@ 0x7f
 8001442:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001444:	2304      	movs	r3, #4
 8001446:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800144c:	2302      	movs	r3, #2
 800144e:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_HRTIM_TRG3;
 8001462:	23f0      	movs	r3, #240	@ 0xf0
 8001464:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001466:	2380      	movs	r3, #128	@ 0x80
 8001468:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8001470:	463b      	mov	r3, r7
 8001472:	4619      	mov	r1, r3
 8001474:	480d      	ldr	r0, [pc, #52]	@ (80014ac <MX_ADC3_Init+0x164>)
 8001476:	f005 f80d 	bl	8006494 <HAL_ADCEx_InjectedConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_ADC3_Init+0x13c>
  {
    Error_Handler();
 8001480:	f001 fd8a 	bl	8002f98 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001484:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <MX_ADC3_Init+0x16c>)
 8001486:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001488:	f240 130f 	movw	r3, #271	@ 0x10f
 800148c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800148e:	463b      	mov	r3, r7
 8001490:	4619      	mov	r1, r3
 8001492:	4806      	ldr	r0, [pc, #24]	@ (80014ac <MX_ADC3_Init+0x164>)
 8001494:	f004 fffe 	bl	8006494 <HAL_ADCEx_InjectedConfigChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_ADC3_Init+0x15a>
  {
    Error_Handler();
 800149e:	f001 fd7b 	bl	8002f98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	3768      	adds	r7, #104	@ 0x68
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200002c8 	.word	0x200002c8
 80014b0:	50000400 	.word	0x50000400
 80014b4:	32601000 	.word	0x32601000
 80014b8:	04300002 	.word	0x04300002

080014bc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b0a2      	sub	sp, #136	@ 0x88
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d4:	f107 0320 	add.w	r3, r7, #32
 80014d8:	2254      	movs	r2, #84	@ 0x54
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f00d fd9b 	bl	800f018 <memset>
  if(adcHandle->Instance==ADC1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014ea:	d170      	bne.n	80015ce <HAL_ADC_MspInit+0x112>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014f0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014f2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80014f6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f8:	f107 0320 	add.w	r3, r7, #32
 80014fc:	4618      	mov	r0, r3
 80014fe:	f008 fe0f 	bl	800a120 <HAL_RCCEx_PeriphCLKConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001508:	f001 fd46 	bl	8002f98 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800150c:	4b78      	ldr	r3, [pc, #480]	@ (80016f0 <HAL_ADC_MspInit+0x234>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	4a77      	ldr	r2, [pc, #476]	@ (80016f0 <HAL_ADC_MspInit+0x234>)
 8001514:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001516:	4b76      	ldr	r3, [pc, #472]	@ (80016f0 <HAL_ADC_MspInit+0x234>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d10b      	bne.n	8001536 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800151e:	4b75      	ldr	r3, [pc, #468]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001522:	4a74      	ldr	r2, [pc, #464]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 8001524:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152a:	4b72      	ldr	r3, [pc, #456]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	4b6f      	ldr	r3, [pc, #444]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153a:	4a6e      	ldr	r2, [pc, #440]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001542:	4b6c      	ldr	r3, [pc, #432]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	61bb      	str	r3, [r7, #24]
 800154c:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800154e:	2301      	movs	r3, #1
 8001550:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001552:	2303      	movs	r3, #3
 8001554:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800155e:	4619      	mov	r1, r3
 8001560:	4865      	ldr	r0, [pc, #404]	@ (80016f8 <HAL_ADC_MspInit+0x23c>)
 8001562:	f006 fa27 	bl	80079b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001566:	4b65      	ldr	r3, [pc, #404]	@ (80016fc <HAL_ADC_MspInit+0x240>)
 8001568:	4a65      	ldr	r2, [pc, #404]	@ (8001700 <HAL_ADC_MspInit+0x244>)
 800156a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800156c:	4b63      	ldr	r3, [pc, #396]	@ (80016fc <HAL_ADC_MspInit+0x240>)
 800156e:	2205      	movs	r2, #5
 8001570:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001572:	4b62      	ldr	r3, [pc, #392]	@ (80016fc <HAL_ADC_MspInit+0x240>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001578:	4b60      	ldr	r3, [pc, #384]	@ (80016fc <HAL_ADC_MspInit+0x240>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800157e:	4b5f      	ldr	r3, [pc, #380]	@ (80016fc <HAL_ADC_MspInit+0x240>)
 8001580:	2280      	movs	r2, #128	@ 0x80
 8001582:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001584:	4b5d      	ldr	r3, [pc, #372]	@ (80016fc <HAL_ADC_MspInit+0x240>)
 8001586:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800158a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800158c:	4b5b      	ldr	r3, [pc, #364]	@ (80016fc <HAL_ADC_MspInit+0x240>)
 800158e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001592:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001594:	4b59      	ldr	r3, [pc, #356]	@ (80016fc <HAL_ADC_MspInit+0x240>)
 8001596:	2220      	movs	r2, #32
 8001598:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800159a:	4b58      	ldr	r3, [pc, #352]	@ (80016fc <HAL_ADC_MspInit+0x240>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015a0:	4856      	ldr	r0, [pc, #344]	@ (80016fc <HAL_ADC_MspInit+0x240>)
 80015a2:	f005 fed5 	bl	8007350 <HAL_DMA_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <HAL_ADC_MspInit+0xf4>
    {
      Error_Handler();
 80015ac:	f001 fcf4 	bl	8002f98 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a52      	ldr	r2, [pc, #328]	@ (80016fc <HAL_ADC_MspInit+0x240>)
 80015b4:	655a      	str	r2, [r3, #84]	@ 0x54
 80015b6:	4a51      	ldr	r2, [pc, #324]	@ (80016fc <HAL_ADC_MspInit+0x240>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	2100      	movs	r1, #0
 80015c0:	2012      	movs	r0, #18
 80015c2:	f005 fe8c 	bl	80072de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80015c6:	2012      	movs	r0, #18
 80015c8:	f005 fea3 	bl	8007312 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80015cc:	e08c      	b.n	80016e8 <HAL_ADC_MspInit+0x22c>
  else if(adcHandle->Instance==ADC2)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001704 <HAL_ADC_MspInit+0x248>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d146      	bne.n	8001666 <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80015d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015dc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80015e2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e4:	f107 0320 	add.w	r3, r7, #32
 80015e8:	4618      	mov	r0, r3
 80015ea:	f008 fd99 	bl	800a120 <HAL_RCCEx_PeriphCLKConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_ADC_MspInit+0x13c>
      Error_Handler();
 80015f4:	f001 fcd0 	bl	8002f98 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80015f8:	4b3d      	ldr	r3, [pc, #244]	@ (80016f0 <HAL_ADC_MspInit+0x234>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	4a3c      	ldr	r2, [pc, #240]	@ (80016f0 <HAL_ADC_MspInit+0x234>)
 8001600:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001602:	4b3b      	ldr	r3, [pc, #236]	@ (80016f0 <HAL_ADC_MspInit+0x234>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d10b      	bne.n	8001622 <HAL_ADC_MspInit+0x166>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800160a:	4b3a      	ldr	r3, [pc, #232]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160e:	4a39      	ldr	r2, [pc, #228]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 8001610:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001616:	4b37      	ldr	r3, [pc, #220]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	4b34      	ldr	r3, [pc, #208]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001626:	4a33      	ldr	r2, [pc, #204]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162e:	4b31      	ldr	r3, [pc, #196]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
 800163a:	2343      	movs	r3, #67	@ 0x43
 800163c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163e:	2303      	movs	r3, #3
 8001640:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800164a:	4619      	mov	r1, r3
 800164c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001650:	f006 f9b0 	bl	80079b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	2012      	movs	r0, #18
 800165a:	f005 fe40 	bl	80072de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800165e:	2012      	movs	r0, #18
 8001660:	f005 fe57 	bl	8007312 <HAL_NVIC_EnableIRQ>
}
 8001664:	e040      	b.n	80016e8 <HAL_ADC_MspInit+0x22c>
  else if(adcHandle->Instance==ADC3)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a27      	ldr	r2, [pc, #156]	@ (8001708 <HAL_ADC_MspInit+0x24c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d13b      	bne.n	80016e8 <HAL_ADC_MspInit+0x22c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001670:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001674:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001676:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800167a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800167c:	f107 0320 	add.w	r3, r7, #32
 8001680:	4618      	mov	r0, r3
 8001682:	f008 fd4d 	bl	800a120 <HAL_RCCEx_PeriphCLKConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 800168c:	f001 fc84 	bl	8002f98 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001690:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001694:	4a17      	ldr	r2, [pc, #92]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 8001696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800169a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169c:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 800169e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 80016aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ac:	4a11      	ldr	r2, [pc, #68]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b4:	4b0f      	ldr	r3, [pc, #60]	@ (80016f4 <HAL_ADC_MspInit+0x238>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016c0:	2303      	movs	r3, #3
 80016c2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c4:	2303      	movs	r3, #3
 80016c6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80016d0:	4619      	mov	r1, r3
 80016d2:	480e      	ldr	r0, [pc, #56]	@ (800170c <HAL_ADC_MspInit+0x250>)
 80016d4:	f006 f96e 	bl	80079b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	202f      	movs	r0, #47	@ 0x2f
 80016de:	f005 fdfe 	bl	80072de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80016e2:	202f      	movs	r0, #47	@ 0x2f
 80016e4:	f005 fe15 	bl	8007312 <HAL_NVIC_EnableIRQ>
}
 80016e8:	bf00      	nop
 80016ea:	3788      	adds	r7, #136	@ 0x88
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000394 	.word	0x20000394
 80016f4:	40021000 	.word	0x40021000
 80016f8:	48000800 	.word	0x48000800
 80016fc:	20000334 	.word	0x20000334
 8001700:	40020030 	.word	0x40020030
 8001704:	50000100 	.word	0x50000100
 8001708:	50000400 	.word	0x50000400
 800170c:	48000400 	.word	0x48000400

08001710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001716:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <MX_DMA_Init+0x70>)
 8001718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800171a:	4a19      	ldr	r2, [pc, #100]	@ (8001780 <MX_DMA_Init+0x70>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6493      	str	r3, [r2, #72]	@ 0x48
 8001722:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <MX_DMA_Init+0x70>)
 8001724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800172e:	4b14      	ldr	r3, [pc, #80]	@ (8001780 <MX_DMA_Init+0x70>)
 8001730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001732:	4a13      	ldr	r2, [pc, #76]	@ (8001780 <MX_DMA_Init+0x70>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6493      	str	r3, [r2, #72]	@ 0x48
 800173a:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <MX_DMA_Init+0x70>)
 800173c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	200b      	movs	r0, #11
 800174c:	f005 fdc7 	bl	80072de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001750:	200b      	movs	r0, #11
 8001752:	f005 fdde 	bl	8007312 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	200c      	movs	r0, #12
 800175c:	f005 fdbf 	bl	80072de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001760:	200c      	movs	r0, #12
 8001762:	f005 fdd6 	bl	8007312 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	200d      	movs	r0, #13
 800176c:	f005 fdb7 	bl	80072de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001770:	200d      	movs	r0, #13
 8001772:	f005 fdce 	bl	8007312 <HAL_NVIC_EnableIRQ>

}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000

08001784 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	@ 0x28
 8001788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800179a:	4b24      	ldr	r3, [pc, #144]	@ (800182c <MX_GPIO_Init+0xa8>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179e:	4a23      	ldr	r2, [pc, #140]	@ (800182c <MX_GPIO_Init+0xa8>)
 80017a0:	f043 0320 	orr.w	r3, r3, #32
 80017a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a6:	4b21      	ldr	r3, [pc, #132]	@ (800182c <MX_GPIO_Init+0xa8>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017aa:	f003 0320 	and.w	r3, r3, #32
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <MX_GPIO_Init+0xa8>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b6:	4a1d      	ldr	r2, [pc, #116]	@ (800182c <MX_GPIO_Init+0xa8>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017be:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <MX_GPIO_Init+0xa8>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b18      	ldr	r3, [pc, #96]	@ (800182c <MX_GPIO_Init+0xa8>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ce:	4a17      	ldr	r2, [pc, #92]	@ (800182c <MX_GPIO_Init+0xa8>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <MX_GPIO_Init+0xa8>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b12      	ldr	r3, [pc, #72]	@ (800182c <MX_GPIO_Init+0xa8>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e6:	4a11      	ldr	r2, [pc, #68]	@ (800182c <MX_GPIO_Init+0xa8>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ee:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <MX_GPIO_Init+0xa8>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001800:	480b      	ldr	r0, [pc, #44]	@ (8001830 <MX_GPIO_Init+0xac>)
 8001802:	f006 fa59 	bl	8007cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY1_Pin;
 8001806:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800180a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY1_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4619      	mov	r1, r3
 800181e:	4804      	ldr	r0, [pc, #16]	@ (8001830 <MX_GPIO_Init+0xac>)
 8001820:	f006 f8c8 	bl	80079b4 <HAL_GPIO_Init>

}
 8001824:	bf00      	nop
 8001826:	3728      	adds	r7, #40	@ 0x28
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000
 8001830:	48000800 	.word	0x48000800

08001834 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b0ba      	sub	sp, #232	@ 0xe8
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 800183a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001844:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8001852:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]
 8001862:	615a      	str	r2, [r3, #20]
 8001864:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001866:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800186a:	2260      	movs	r2, #96	@ 0x60
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f00d fbd2 	bl	800f018 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8001874:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 8001880:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001884:	2224      	movs	r2, #36	@ 0x24
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f00d fbc5 	bl	800f018 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2220      	movs	r2, #32
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f00d fbbf 	bl	800f018 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 800189a:	4bc7      	ldr	r3, [pc, #796]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 800189c:	4ac7      	ldr	r2, [pc, #796]	@ (8001bbc <MX_HRTIM1_Init+0x388>)
 800189e:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80018a0:	4bc5      	ldr	r3, [pc, #788]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80018a6:	4bc4      	ldr	r3, [pc, #784]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80018ac:	48c2      	ldr	r0, [pc, #776]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 80018ae:	f006 fa1b 	bl	8007ce8 <HAL_HRTIM_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 80018b8:	f001 fb6e 	bl	8002f98 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 80018bc:	210c      	movs	r1, #12
 80018be:	48be      	ldr	r0, [pc, #760]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 80018c0:	f006 fae2 	bl	8007e88 <HAL_HRTIM_DLLCalibrationStart>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 80018ca:	f001 fb65 	bl	8002f98 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 80018ce:	210a      	movs	r1, #10
 80018d0:	48b9      	ldr	r0, [pc, #740]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 80018d2:	f006 fb31 	bl	8007f38 <HAL_HRTIM_PollForDLLCalibration>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 80018dc:	f001 fb5c 	bl	8002f98 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_A;
 80018e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT24_TIMERA_CMP2;
 80018e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_2, &pADCTriggerCfg) != HAL_OK)
 80018f0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80018f4:	461a      	mov	r2, r3
 80018f6:	2102      	movs	r1, #2
 80018f8:	48af      	ldr	r0, [pc, #700]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 80018fa:	f006 fb79 	bl	8007ff0 <HAL_HRTIM_ADCTriggerConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_HRTIM1_Init+0xd4>
  {
    Error_Handler();
 8001904:	f001 fb48 	bl	8002f98 <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_2, 0) != HAL_OK)
 8001908:	2200      	movs	r2, #0
 800190a:	2102      	movs	r1, #2
 800190c:	48aa      	ldr	r0, [pc, #680]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 800190e:	f006 fd5b 	bl	80083c8 <HAL_HRTIM_ADCPostScalerConfig>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_HRTIM1_Init+0xe8>
  {
    Error_Handler();
 8001918:	f001 fb3e 	bl	8002f98 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_C;
 800191c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001920:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERC_CMP3;
 8001924:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001928:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, &pADCTriggerCfg) != HAL_OK)
 800192c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001930:	461a      	mov	r2, r3
 8001932:	2104      	movs	r1, #4
 8001934:	48a0      	ldr	r0, [pc, #640]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 8001936:	f006 fb5b 	bl	8007ff0 <HAL_HRTIM_ADCTriggerConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_HRTIM1_Init+0x110>
  {
    Error_Handler();
 8001940:	f001 fb2a 	bl	8002f98 <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, 0x0) != HAL_OK)
 8001944:	2200      	movs	r2, #0
 8001946:	2104      	movs	r1, #4
 8001948:	489b      	ldr	r0, [pc, #620]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 800194a:	f006 fd3d 	bl	80083c8 <HAL_HRTIM_ADCPostScalerConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_HRTIM1_Init+0x124>
  {
    Error_Handler();
 8001954:	f001 fb20 	bl	8002f98 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_B;
 8001958:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800195c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT24_TIMERB_CMP4;
 8001960:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001964:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_4, &pADCTriggerCfg) != HAL_OK)
 8001968:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800196c:	461a      	mov	r2, r3
 800196e:	2108      	movs	r1, #8
 8001970:	4891      	ldr	r0, [pc, #580]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 8001972:	f006 fb3d 	bl	8007ff0 <HAL_HRTIM_ADCTriggerConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_HRTIM1_Init+0x14c>
  {
    Error_Handler();
 800197c:	f001 fb0c 	bl	8002f98 <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_4, 0x0) != HAL_OK)
 8001980:	2200      	movs	r2, #0
 8001982:	2108      	movs	r1, #8
 8001984:	488c      	ldr	r0, [pc, #560]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 8001986:	f006 fd1f 	bl	80083c8 <HAL_HRTIM_ADCPostScalerConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_HRTIM1_Init+0x160>
  {
    Error_Handler();
 8001990:	f001 fb02 	bl	8002f98 <Error_Handler>
  }
  pTimeBaseCfg.Period = 10000;
 8001994:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 80019a2:	2305      	movs	r3, #5
 80019a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80019a8:	2308      	movs	r3, #8
 80019aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80019ae:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80019b2:	461a      	mov	r2, r3
 80019b4:	2100      	movs	r1, #0
 80019b6:	4880      	ldr	r0, [pc, #512]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 80019b8:	f006 faf2 	bl	8007fa0 <HAL_HRTIM_TimeBaseConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_HRTIM1_Init+0x192>
  {
    Error_Handler();
 80019c2:	f001 fae9 	bl	8002f98 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 80019d8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80019dc:	461a      	mov	r2, r3
 80019de:	2100      	movs	r1, #0
 80019e0:	4875      	ldr	r0, [pc, #468]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 80019e2:	f006 fec8 	bl	8008776 <HAL_HRTIM_WaveformTimerControl>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_HRTIM1_Init+0x1bc>
  {
    Error_Handler();
 80019ec:	f001 fad4 	bl	8002f98 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.DMASrcAddress = 0x0000;
 80019f8:	2300      	movs	r3, #0
 80019fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.DMADstAddress = 0x0000;
 80019fc:	2300      	movs	r3, #0
 80019fe:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.DMASize = 0x1;
 8001a00:	2301      	movs	r3, #1
 8001a02:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001a04:	2300      	movs	r3, #0
 8001a06:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001a10:	2300      	movs	r3, #0
 8001a12:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8001a40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001a66:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4852      	ldr	r0, [pc, #328]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 8001a70:	f006 fdf4 	bl	800865c <HAL_HRTIM_WaveformTimerConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_HRTIM1_Init+0x24a>
  {
    Error_Handler();
 8001a7a:	f001 fa8d 	bl	8002f98 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8001a7e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a82:	461a      	mov	r2, r3
 8001a84:	2101      	movs	r1, #1
 8001a86:	484c      	ldr	r0, [pc, #304]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 8001a88:	f006 fde8 	bl	800865c <HAL_HRTIM_WaveformTimerConfig>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_HRTIM1_Init+0x262>
  {
    Error_Handler();
 8001a92:	f001 fa81 	bl	8002f98 <Error_Handler>
  }
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8001a9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	4844      	ldr	r0, [pc, #272]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 8001aa6:	f006 fdd9 	bl	800865c <HAL_HRTIM_WaveformTimerConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_HRTIM1_Init+0x280>
  {
    Error_Handler();
 8001ab0:	f001 fa72 	bl	8002f98 <Error_Handler>
  }
  pCompareCfg.CompareValue = 10000;
 8001ab4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8001aba:	2300      	movs	r3, #0
 8001abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	653b      	str	r3, [r7, #80]	@ 0x50

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001ac2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	2100      	movs	r1, #0
 8001aca:	483b      	ldr	r0, [pc, #236]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 8001acc:	f006 ff06 	bl	80088dc <HAL_HRTIM_WaveformCompareConfig>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_HRTIM1_Init+0x2a6>
  {
    Error_Handler();
 8001ad6:	f001 fa5f 	bl	8002f98 <Error_Handler>
  }
  pCompareCfg.CompareValue = 5000;
 8001ada:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001ade:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8001ae0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	4833      	ldr	r0, [pc, #204]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 8001aea:	f006 fef7 	bl	80088dc <HAL_HRTIM_WaveformCompareConfig>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_HRTIM1_Init+0x2c4>
  {
    Error_Handler();
 8001af4:	f001 fa50 	bl	8002f98 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_DIV1;
 8001af8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
  pDeadTimeCfg.RisingValue = 50;
 8001afe:	2332      	movs	r3, #50	@ 0x32
 8001b00:	62bb      	str	r3, [r7, #40]	@ 0x28
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	633b      	str	r3, [r7, #48]	@ 0x30
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	637b      	str	r3, [r7, #52]	@ 0x34
  pDeadTimeCfg.FallingValue = 50;
 8001b0e:	2332      	movs	r3, #50	@ 0x32
 8001b10:	63bb      	str	r3, [r7, #56]	@ 0x38
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	643b      	str	r3, [r7, #64]	@ 0x40
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8001b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b22:	461a      	mov	r2, r3
 8001b24:	2100      	movs	r1, #0
 8001b26:	4824      	ldr	r0, [pc, #144]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 8001b28:	f006 fe58 	bl	80087dc <HAL_HRTIM_DeadTimeConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_HRTIM1_Init+0x302>
  {
    Error_Handler();
 8001b32:	f001 fa31 	bl	8002f98 <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pDeadTimeCfg) != HAL_OK)
 8001b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	481e      	ldr	r0, [pc, #120]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 8001b40:	f006 fe4c 	bl	80087dc <HAL_HRTIM_DeadTimeConfig>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_HRTIM1_Init+0x31a>
  {
    Error_Handler();
 8001b4a:	f001 fa25 	bl	8002f98 <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pDeadTimeCfg) != HAL_OK)
 8001b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b52:	461a      	mov	r2, r3
 8001b54:	2102      	movs	r1, #2
 8001b56:	4818      	ldr	r0, [pc, #96]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 8001b58:	f006 fe40 	bl	80087dc <HAL_HRTIM_DeadTimeConfig>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_HRTIM1_Init+0x332>
  {
    Error_Handler();
 8001b62:	f001 fa19 	bl	8002f98 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8001b6e:	2310      	movs	r3, #16
 8001b70:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2201      	movs	r2, #1
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	480a      	ldr	r0, [pc, #40]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 8001b8e:	f007 f813 	bl	8008bb8 <HAL_HRTIM_WaveformOutputConfig>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_HRTIM1_Init+0x368>
  {
    Error_Handler();
 8001b98:	f001 f9fe 	bl	8002f98 <Error_Handler>
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	4804      	ldr	r0, [pc, #16]	@ (8001bb8 <MX_HRTIM1_Init+0x384>)
 8001ba8:	f007 f806 	bl	8008bb8 <HAL_HRTIM_WaveformOutputConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <MX_HRTIM1_Init+0x38c>
  {
    Error_Handler();
 8001bb2:	f001 f9f1 	bl	8002f98 <Error_Handler>
 8001bb6:	e003      	b.n	8001bc0 <MX_HRTIM1_Init+0x38c>
 8001bb8:	20000398 	.word	0x20000398
 8001bbc:	40016800 	.word	0x40016800
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMPER;
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	2210      	movs	r2, #16
 8001bc8:	2102      	movs	r1, #2
 8001bca:	483f      	ldr	r0, [pc, #252]	@ (8001cc8 <MX_HRTIM1_Init+0x494>)
 8001bcc:	f006 fff4 	bl	8008bb8 <HAL_HRTIM_WaveformOutputConfig>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_HRTIM1_Init+0x3a6>
  {
    Error_Handler();
 8001bd6:	f001 f9df 	bl	8002f98 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	2202      	movs	r2, #2
 8001be6:	2100      	movs	r1, #0
 8001be8:	4837      	ldr	r0, [pc, #220]	@ (8001cc8 <MX_HRTIM1_Init+0x494>)
 8001bea:	f006 ffe5 	bl	8008bb8 <HAL_HRTIM_WaveformOutputConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_HRTIM1_Init+0x3c4>
  {
    Error_Handler();
 8001bf4:	f001 f9d0 	bl	8002f98 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	2208      	movs	r2, #8
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4832      	ldr	r0, [pc, #200]	@ (8001cc8 <MX_HRTIM1_Init+0x494>)
 8001c00:	f006 ffda 	bl	8008bb8 <HAL_HRTIM_WaveformOutputConfig>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_HRTIM1_Init+0x3da>
  {
    Error_Handler();
 8001c0a:	f001 f9c5 	bl	8002f98 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2220      	movs	r2, #32
 8001c12:	2102      	movs	r1, #2
 8001c14:	482c      	ldr	r0, [pc, #176]	@ (8001cc8 <MX_HRTIM1_Init+0x494>)
 8001c16:	f006 ffcf 	bl	8008bb8 <HAL_HRTIM_WaveformOutputConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_HRTIM1_Init+0x3f0>
  {
    Error_Handler();
 8001c20:	f001 f9ba 	bl	8002f98 <Error_Handler>
  }
  pTimeBaseCfg.Period = 5000;
 8001c24:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001c28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8001c2c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001c30:	461a      	mov	r2, r3
 8001c32:	2101      	movs	r1, #1
 8001c34:	4824      	ldr	r0, [pc, #144]	@ (8001cc8 <MX_HRTIM1_Init+0x494>)
 8001c36:	f006 f9b3 	bl	8007fa0 <HAL_HRTIM_TimeBaseConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_HRTIM1_Init+0x410>
  {
    Error_Handler();
 8001c40:	f001 f9aa 	bl	8002f98 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 8001c44:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	481e      	ldr	r0, [pc, #120]	@ (8001cc8 <MX_HRTIM1_Init+0x494>)
 8001c4e:	f006 fd92 	bl	8008776 <HAL_HRTIM_WaveformTimerControl>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_HRTIM1_Init+0x428>
  {
    Error_Handler();
 8001c58:	f001 f99e 	bl	8002f98 <Error_Handler>
  }
  pTimeBaseCfg.Period = 2000;
 8001c5c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001c60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8001c64:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001c68:	461a      	mov	r2, r3
 8001c6a:	2102      	movs	r1, #2
 8001c6c:	4816      	ldr	r0, [pc, #88]	@ (8001cc8 <MX_HRTIM1_Init+0x494>)
 8001c6e:	f006 f997 	bl	8007fa0 <HAL_HRTIM_TimeBaseConfig>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_HRTIM1_Init+0x448>
  {
    Error_Handler();
 8001c78:	f001 f98e 	bl	8002f98 <Error_Handler>
  }
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 8001c82:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001c86:	461a      	mov	r2, r3
 8001c88:	2102      	movs	r1, #2
 8001c8a:	480f      	ldr	r0, [pc, #60]	@ (8001cc8 <MX_HRTIM1_Init+0x494>)
 8001c8c:	f006 fd73 	bl	8008776 <HAL_HRTIM_WaveformTimerControl>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_HRTIM1_Init+0x466>
  {
    Error_Handler();
 8001c96:	f001 f97f 	bl	8002f98 <Error_Handler>
  }
  pCompareCfg.CompareValue = 2000;
 8001c9a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001ca0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	4807      	ldr	r0, [pc, #28]	@ (8001cc8 <MX_HRTIM1_Init+0x494>)
 8001caa:	f006 fe17 	bl	80088dc <HAL_HRTIM_WaveformCompareConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_HRTIM1_Init+0x484>
  {
    Error_Handler();
 8001cb4:	f001 f970 	bl	8002f98 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001cb8:	4803      	ldr	r0, [pc, #12]	@ (8001cc8 <MX_HRTIM1_Init+0x494>)
 8001cba:	f000 f827 	bl	8001d0c <HAL_HRTIM_MspPostInit>

}
 8001cbe:	bf00      	nop
 8001cc0:	37e8      	adds	r7, #232	@ 0xe8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000398 	.word	0x20000398

08001ccc <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <HAL_HRTIM_MspInit+0x38>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001cde:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <HAL_HRTIM_MspInit+0x3c>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce2:	4a09      	ldr	r2, [pc, #36]	@ (8001d08 <HAL_HRTIM_MspInit+0x3c>)
 8001ce4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ce8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cea:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <HAL_HRTIM_MspInit+0x3c>)
 8001cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40016800 	.word	0x40016800
 8001d08:	40021000 	.word	0x40021000

08001d0c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	@ 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a20      	ldr	r2, [pc, #128]	@ (8001dac <HAL_HRTIM_MspPostInit+0xa0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d13a      	bne.n	8001da4 <HAL_HRTIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	4b20      	ldr	r3, [pc, #128]	@ (8001db0 <HAL_HRTIM_MspPostInit+0xa4>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d32:	4a1f      	ldr	r2, [pc, #124]	@ (8001db0 <HAL_HRTIM_MspPostInit+0xa4>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <HAL_HRTIM_MspPostInit+0xa4>)
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <HAL_HRTIM_MspPostInit+0xa4>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4a:	4a19      	ldr	r2, [pc, #100]	@ (8001db0 <HAL_HRTIM_MspPostInit+0xa4>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d52:	4b17      	ldr	r3, [pc, #92]	@ (8001db0 <HAL_HRTIM_MspPostInit+0xa4>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001d5e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001d70:	230d      	movs	r3, #13
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480e      	ldr	r0, [pc, #56]	@ (8001db4 <HAL_HRTIM_MspPostInit+0xa8>)
 8001d7c:	f005 fe1a 	bl	80079b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001d80:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001d92:	230d      	movs	r3, #13
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da0:	f005 fe08 	bl	80079b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001da4:	bf00      	nop
 8001da6:	3728      	adds	r7, #40	@ 0x28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40016800 	.word	0x40016800
 8001db0:	40021000 	.word	0x40021000
 8001db4:	48000400 	.word	0x48000400

08001db8 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8001dbc:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_ZSt21is_constant_evaluatedv>:

  /// Returns true only when called during constant evaluation.
  /// @since C++20
  constexpr inline bool
  is_constant_evaluated() noexcept
  {
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
    if consteval { return true; } else { return false; }
#else
    return __builtin_is_constant_evaluated();
 8001dcc:	2300      	movs	r3, #0
#endif
  }
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t>:

////sysclk到tim不要分频！！！注意
class Hardware_STM32_HRTIM_PWM
{
public:
  void begin(HRTIM_HandleTypeDef *hhrtim,hw_port_hrtim_pwm_channel_t hrtim_timer_id,hw_port_hrtim_pwm_compare_unit_t compare_unit) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	70fb      	strb	r3, [r7, #3]
    if (hhrtim == nullptr) {
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 8088 	beq.w	8001efe <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0x126>
	return;
    }
    hhrtim_ = hhrtim;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	601a      	str	r2, [r3, #0]
    channel_=hrtim_timer_id;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	60da      	str	r2, [r3, #12]
    compare_unit_=compare_unit;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	78fa      	ldrb	r2, [r7, #3]
 8001dfe:	745a      	strb	r2, [r3, #17]
    sysclk_frequency_=HAL_RCC_GetSysClockFreq();
 8001e00:	f008 f8ae 	bl	8009f60 <HAL_RCC_GetSysClockFreq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	615a      	str	r2, [r3, #20]
    //启动互补输出
    switch (channel_) {
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e12:	d053      	beq.n	8001ebc <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xe4>
 8001e14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e18:	dc5c      	bgt.n	8001ed4 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
 8001e1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001e1e:	d042      	beq.n	8001ea6 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xce>
 8001e20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001e24:	dc56      	bgt.n	8001ed4 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
 8001e26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e2a:	d032      	beq.n	8001e92 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xba>
 8001e2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e30:	dc50      	bgt.n	8001ed4 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
 8001e32:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001e36:	d022      	beq.n	8001e7e <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xa6>
 8001e38:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001e3c:	dc4a      	bgt.n	8001ed4 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
 8001e3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001e42:	d012      	beq.n	8001e6a <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0x92>
 8001e44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001e48:	dc44      	bgt.n	8001ed4 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
 8001e4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e4e:	d040      	beq.n	8001ed2 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfa>
 8001e50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e54:	d13e      	bne.n	8001ed4 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
      case HRTIM_TIMER_MASTER:
	break;
      case HRTIM_TIMER_A:
	HAL_HRTIM_WaveformOutputStart(hhrtim_, HRTIM_OUTPUT_TA1|HRTIM_OUTPUT_TA2);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2103      	movs	r1, #3
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f006 fedc 	bl	8008c1a <HAL_HRTIM_WaveformOutputStart>
	id_=HRTIM_TIMER_A_ID;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	741a      	strb	r2, [r3, #16]
	break;
 8001e68:	e034      	b.n	8001ed4 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
      case HRTIM_TIMER_B:
	HAL_HRTIM_WaveformOutputStart(hhrtim_,
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	210c      	movs	r1, #12
 8001e70:	4618      	mov	r0, r3
 8001e72:	f006 fed2 	bl	8008c1a <HAL_HRTIM_WaveformOutputStart>
				      HRTIM_OUTPUT_TB1 | HRTIM_OUTPUT_TB2);
	id_=HRTIM_TIMER_B_ID;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	741a      	strb	r2, [r3, #16]
	break;
 8001e7c:	e02a      	b.n	8001ed4 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
      case HRTIM_TIMER_C:
	HAL_HRTIM_WaveformOutputStart(hhrtim_,
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2130      	movs	r1, #48	@ 0x30
 8001e84:	4618      	mov	r0, r3
 8001e86:	f006 fec8 	bl	8008c1a <HAL_HRTIM_WaveformOutputStart>
				      HRTIM_OUTPUT_TC1 | HRTIM_OUTPUT_TC2);
	id_=HRTIM_TIMER_C_ID;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	741a      	strb	r2, [r3, #16]
	break;
 8001e90:	e020      	b.n	8001ed4 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
      case HRTIM_TIMER_D:
	HAL_HRTIM_WaveformOutputStart(hhrtim_,
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	21c0      	movs	r1, #192	@ 0xc0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f006 febe 	bl	8008c1a <HAL_HRTIM_WaveformOutputStart>
				      HRTIM_OUTPUT_TD1 | HRTIM_OUTPUT_TD2);
	id_=HRTIM_TIMER_D_ID;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	741a      	strb	r2, [r3, #16]
	break;
 8001ea4:	e016      	b.n	8001ed4 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
      case HRTIM_TIMER_E:
	HAL_HRTIM_WaveformOutputStart(hhrtim_,
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f006 feb3 	bl	8008c1a <HAL_HRTIM_WaveformOutputStart>
				      HRTIM_OUTPUT_TE1 | HRTIM_OUTPUT_TE2);
	id_=HRTIM_TIMER_E_ID;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	741a      	strb	r2, [r3, #16]
	break;
 8001eba:	e00b      	b.n	8001ed4 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
      case HRTIM_TIMER_F:
	HAL_HRTIM_WaveformOutputStart(hhrtim_,
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f006 fea8 	bl	8008c1a <HAL_HRTIM_WaveformOutputStart>
				      HRTIM_OUTPUT_TF1 | HRTIM_OUTPUT_TF2);
	id_=HRTIM_TIMER_F_ID;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2205      	movs	r2, #5
 8001ece:	741a      	strb	r2, [r3, #16]
	break;
 8001ed0:	e000      	b.n	8001ed4 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0xfc>
	break;
 8001ed2:	bf00      	nop
    }
    period_=__HAL_HRTIM_GETPERIOD(hhrtim_, id_);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	7c1b      	ldrb	r3, [r3, #16]
 8001ed8:	2b06      	cmp	r3, #6
 8001eda:	d104      	bne.n	8001ee6 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0x10e>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	e008      	b.n	8001ef8 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0x120>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	7c1b      	ldrb	r3, [r3, #16]
 8001ef0:	01db      	lsls	r3, r3, #7
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3394      	adds	r3, #148	@ 0x94
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	6053      	str	r3, [r2, #4]
 8001efc:	e000      	b.n	8001f00 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t+0x128>
	return;
 8001efe:	bf00      	nop
  }
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_ZN24Hardware_STM32_HRTIM_PWM9setOutputEv>:

  void setOutput()
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  {
    HAL_HRTIM_WaveformCounterStart(hhrtim_, channel_);  // Start the counter of the Timer
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	4619      	mov	r1, r3
 8001f18:	4610      	mov	r0, r2
 8001f1a:	f006 feab 	bl	8008c74 <HAL_HRTIM_WaveformCountStart>
  }
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf>:
  float getMaxFrequency()
  {
    return sysclk_frequency_ / period_ * 1.0f;
  }

  void setDutyCycle(float duty) {
 8001f26:	b480      	push	{r7}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	ed87 0a00 	vstr	s0, [r7]
    duty_=duty;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	609a      	str	r2, [r3, #8]
    uint32_t newCompareValue = period_* duty_;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f52:	ee17 3a90 	vmov	r3, s15
 8001f56:	60fb      	str	r3, [r7, #12]
    __HAL_HRTIM_SETCOMPARE(hhrtim_, id_, compare_unit_,newCompareValue );//timer参数可能要改一下
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	7c1b      	ldrb	r3, [r3, #16]
 8001f5c:	2b06      	cmp	r3, #6
 8001f5e:	d123      	bne.n	8001fa8 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0x82>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	7c5b      	ldrb	r3, [r3, #17]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d105      	bne.n	8001f74 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0x4e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	61da      	str	r2, [r3, #28]
  }
 8001f72:	e050      	b.n	8002016 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xf0>
    __HAL_HRTIM_SETCOMPARE(hhrtim_, id_, compare_unit_,newCompareValue );//timer参数可能要改一下
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	7c5b      	ldrb	r3, [r3, #17]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d105      	bne.n	8001f88 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0x62>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	625a      	str	r2, [r3, #36]	@ 0x24
  }
 8001f86:	e046      	b.n	8002016 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xf0>
    __HAL_HRTIM_SETCOMPARE(hhrtim_, id_, compare_unit_,newCompareValue );//timer参数可能要改一下
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7c5b      	ldrb	r3, [r3, #17]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d105      	bne.n	8001f9c <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0x76>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	629a      	str	r2, [r3, #40]	@ 0x28
  }
 8001f9a:	e03c      	b.n	8002016 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xf0>
    __HAL_HRTIM_SETCOMPARE(hhrtim_, id_, compare_unit_,newCompareValue );//timer参数可能要改一下
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
 8001fa6:	e036      	b.n	8002016 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xf0>
    __HAL_HRTIM_SETCOMPARE(hhrtim_, id_, compare_unit_,newCompareValue );//timer参数可能要改一下
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7c5b      	ldrb	r3, [r3, #17]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d10a      	bne.n	8001fc6 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xa0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7c1b      	ldrb	r3, [r3, #16]
 8001fba:	01db      	lsls	r3, r3, #7
 8001fbc:	4413      	add	r3, r2
 8001fbe:	339c      	adds	r3, #156	@ 0x9c
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	601a      	str	r2, [r3, #0]
  }
 8001fc4:	e027      	b.n	8002016 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xf0>
    __HAL_HRTIM_SETCOMPARE(hhrtim_, id_, compare_unit_,newCompareValue );//timer参数可能要改一下
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	7c5b      	ldrb	r3, [r3, #17]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d10a      	bne.n	8001fe4 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xbe>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7c1b      	ldrb	r3, [r3, #16]
 8001fd8:	01db      	lsls	r3, r3, #7
 8001fda:	4413      	add	r3, r2
 8001fdc:	33a4      	adds	r3, #164	@ 0xa4
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	601a      	str	r2, [r3, #0]
  }
 8001fe2:	e018      	b.n	8002016 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xf0>
    __HAL_HRTIM_SETCOMPARE(hhrtim_, id_, compare_unit_,newCompareValue );//timer参数可能要改一下
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7c5b      	ldrb	r3, [r3, #17]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d10a      	bne.n	8002002 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xdc>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	7c1b      	ldrb	r3, [r3, #16]
 8001ff6:	01db      	lsls	r3, r3, #7
 8001ff8:	4413      	add	r3, r2
 8001ffa:	33a8      	adds	r3, #168	@ 0xa8
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	601a      	str	r2, [r3, #0]
  }
 8002000:	e009      	b.n	8002016 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf+0xf0>
    __HAL_HRTIM_SETCOMPARE(hhrtim_, id_, compare_unit_,newCompareValue );//timer参数可能要改一下
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7c1b      	ldrb	r3, [r3, #16]
 800200c:	01db      	lsls	r3, r3, #7
 800200e:	4413      	add	r3, r2
 8002010:	33ac      	adds	r3, #172	@ 0xac
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	601a      	str	r2, [r3, #0]
  }
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <_ZN15stm32_hrtim_pwm15getTimerAOutputEv>:
#include "hw_port_hrtim_pwm.h"

namespace stm32_hrtim_pwm
{
  Hardware_STM32_HRTIM_PWM getTimerAOutput()
  {
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
    Hardware_STM32_HRTIM_PWM hrtim_pwm;
    hrtim_pwm.begin(&hhrtim1, HRTIM_TIMER_A, HRTIM_COMPARE_EVENT_2);
 800202c:	2302      	movs	r3, #2
 800202e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002032:	4904      	ldr	r1, [pc, #16]	@ (8002044 <_ZN15stm32_hrtim_pwm15getTimerAOutputEv+0x20>)
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff fecf 	bl	8001dd8 <_ZN24Hardware_STM32_HRTIM_PWM5beginEP19HRTIM_HandleTypeDef27hw_port_hrtim_pwm_channel_t32hw_port_hrtim_pwm_compare_unit_t>
    return hrtim_pwm;
 800203a:	bf00      	nop
  }
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000398 	.word	0x20000398

08002048 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 ffa0 	bl	8002fc4 <_ZNSaImED1Ev>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4618      	mov	r0, r3
 800209a:	f000 ff83 	bl	8002fa4 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_ZNSt6vectorImSaImEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ffeb 	bl	800208e <_ZNSt12_Vector_baseImSaImEEC1Ev>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <_ZN18Hardware_STM32_ADCC1Ev>:


class Hardware_STM32_ADC
{
public:
  Hardware_STM32_ADC(){}
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ffeb 	bl	80020a8 <_ZNSt6vectorImSaImEEC1Ev>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	741a      	strb	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	745a      	strb	r2, [r3, #17]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_ZN18Hardware_STM32_ADCaSEOS_>:

  // 移动构造函数
  Hardware_STM32_ADC(Hardware_STM32_ADC&& other)noexcept = default;

  Hardware_STM32_ADC& operator=(Hardware_STM32_ADC&& other) noexcept
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  {
    // 自我赋值检查
    if (this == &other)
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d101      	bne.n	80020fe <_ZN18Hardware_STM32_ADCaSEOS_+0x16>
      {
	return *this;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	e021      	b.n	8002142 <_ZN18Hardware_STM32_ADCaSEOS_+0x5a>
      }

    // 使用 std::swap 交换资源
    std::swap(hadc_, other.hadc_);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f103 020c 	add.w	r2, r3, #12
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	330c      	adds	r3, #12
 8002108:	4619      	mov	r1, r3
 800210a:	4610      	mov	r0, r2
 800210c:	f000 ff99 	bl	8003042 <_ZSt4swapIP17ADC_HandleTypeDefENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
    std::swap(isDataReady_, other.isDataReady_);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f103 0210 	add.w	r2, r3, #16
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	3310      	adds	r3, #16
 800211a:	4619      	mov	r1, r3
 800211c:	4610      	mov	r0, r2
 800211e:	f000 ffaf 	bl	8003080 <_ZSt4swapI24hw_stm32_adc_dma_ready_tENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
    std::swap(isDataReady_IT_, other.isDataReady_IT_);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f103 0211 	add.w	r2, r3, #17
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	3311      	adds	r3, #17
 800212c:	4619      	mov	r1, r3
 800212e:	4610      	mov	r0, r2
 8002130:	f000 ffc5 	bl	80030be <_ZSt4swapI23hw_stm32_adc_it_ready_tENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
    std::swap(readData_, other.readData_);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f000 ffde 	bl	80030fc <_ZSt4swapImSaImEEvRSt6vectorIT_T0_ES5_>

    return *this;
 8002140:	687b      	ldr	r3, [r7, #4]
  }
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <_ZN18Hardware_STM32_ADC5beginEP17ADC_HandleTypeDef19hw_stm32_adc_mode_t>:
  void begin(ADC_HandleTypeDef *hadc,hw_stm32_adc_mode_t mode) {
 800214a:	b580      	push	{r7, lr}
 800214c:	b08a      	sub	sp, #40	@ 0x28
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
    if (hadc == nullptr) {
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d02a      	beq.n	80021b2 <_ZN18Hardware_STM32_ADC5beginEP17ADC_HandleTypeDef19hw_stm32_adc_mode_t+0x68>
	return;
    }
    hadc_ = hadc;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	60da      	str	r2, [r3, #12]
    readData_=std::vector<uint32_t>(2,0);
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
 8002166:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800216a:	4618      	mov	r0, r3
 800216c:	f000 ffd3 	bl	8003116 <_ZNSaImEC1Ev>
 8002170:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002174:	f107 0220 	add.w	r2, r7, #32
 8002178:	f107 0014 	add.w	r0, r7, #20
 800217c:	2102      	movs	r1, #2
 800217e:	f000 ffd6 	bl	800312e <_ZNSt6vectorImSaImEEC1EjRKmRKS0_>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f107 0214 	add.w	r2, r7, #20
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f000 ffeb 	bl	8003166 <_ZNSt6vectorImSaImEEaSEOS1_>
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	4618      	mov	r0, r3
 8002196:	f000 ff39 	bl	800300c <_ZNSt6vectorImSaImEED1Ev>
 800219a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 ff10 	bl	8002fc4 <_ZNSaImED1Ev>
    HAL_ADCEx_Calibration_Start(hadc_,mode);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 f8e8 	bl	8006380 <HAL_ADCEx_Calibration_Start>
 80021b0:	e000      	b.n	80021b4 <_ZN18Hardware_STM32_ADC5beginEP17ADC_HandleTypeDef19hw_stm32_adc_mode_t+0x6a>
	return;
 80021b2:	bf00      	nop
  }
 80021b4:	3728      	adds	r7, #40	@ 0x28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <_ZN18Hardware_STM32_ADC11startSampleEv>:

  void startSample()
 80021ba:	b5b0      	push	{r4, r5, r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  {
    HAL_ADC_Start_DMA(hadc_, readData_.data(), readData_.size());\
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68dc      	ldr	r4, [r3, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 ffe1 	bl	8003190 <_ZNSt6vectorImSaImEE4dataEv>
 80021ce:	4605      	mov	r5, r0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 ffeb 	bl	80031ae <_ZNKSt6vectorImSaImEE4sizeEv>
 80021d8:	4603      	mov	r3, r0
 80021da:	461a      	mov	r2, r3
 80021dc:	4629      	mov	r1, r5
 80021de:	4620      	mov	r0, r4
 80021e0:	f002 fe3e 	bl	8004e60 <HAL_ADC_Start_DMA>
  }
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bdb0      	pop	{r4, r5, r7, pc}

080021ec <_ZN18Hardware_STM32_ADC11readVoltageEv>:
  void stopSample_IT()
  {
    HAL_ADCEx_InjectedStop_IT(hadc_);
  }

  float readVoltage() {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
    while(isDataReady_!=STM32_ADC_DMA_READY){}
 80021f4:	bf00      	nop
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	7c1b      	ldrb	r3, [r3, #16]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d1fb      	bne.n	80021f6 <_ZN18Hardware_STM32_ADC11readVoltageEv+0xa>
    //		uint32_t temp=0;
    //		for (int i = 0; i < 20; i+=2) {
    //			temp += readData_[i];//读十次取平均
    //		}
    isDataReady_=STM32_ADC_DMA_NOT_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	741a      	strb	r2, [r3, #16]
    //		HAL_ADC_Start_DMA(hadc_,readData_,(sizeof(readData_)/sizeof(readData_[0])));
    return readData_[0] / 4096.0f * 3.3f;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f000 ffe0 	bl	80031ce <_ZNSt6vectorImSaImEEixEj>
 800220e:	4603      	mov	r3, r0
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800221a:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002234 <_ZN18Hardware_STM32_ADC11readVoltageEv+0x48>
 800221e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002222:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002238 <_ZN18Hardware_STM32_ADC11readVoltageEv+0x4c>
 8002226:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
 800222a:	eeb0 0a67 	vmov.f32	s0, s15
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	45800000 	.word	0x45800000
 8002238:	40533333 	.word	0x40533333

0800223c <_ZN18Hardware_STM32_ADC11readCurrentEv>:

  float readCurrent() {
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
    while(isDataReady_!=STM32_ADC_DMA_READY){}
 8002244:	bf00      	nop
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7c1b      	ldrb	r3, [r3, #16]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d1fb      	bne.n	8002246 <_ZN18Hardware_STM32_ADC11readCurrentEv+0xa>
    //		uint32_t temp=0;
    //		for (int i = 1; i < 20; i+=2) {
    //			temp += readData_[i];//读十次取平均
    //		}
    isDataReady_=STM32_ADC_DMA_NOT_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	741a      	strb	r2, [r3, #16]
    //		HAL_ADC_Start_DMA(hadc_,readData_,(sizeof(readData_)/sizeof(readData_[0])));
    return readData_[1] / 4096.0f * 3.3f;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2101      	movs	r1, #1
 8002258:	4618      	mov	r0, r3
 800225a:	f000 ffb8 	bl	80031ce <_ZNSt6vectorImSaImEEixEj>
 800225e:	4603      	mov	r3, r0
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800226a:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002284 <_ZN18Hardware_STM32_ADC11readCurrentEv+0x48>
 800226e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002272:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002288 <_ZN18Hardware_STM32_ADC11readCurrentEv+0x4c>
 8002276:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
 800227a:	eeb0 0a67 	vmov.f32	s0, s15
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	45800000 	.word	0x45800000
 8002288:	40533333 	.word	0x40533333

0800228c <_ZN18Hardware_STM32_ADCD1Ev>:
class Hardware_STM32_ADC
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4618      	mov	r0, r3
 8002298:	f000 feb8 	bl	800300c <_ZNSt6vectorImSaImEED1Ev>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <_ZN9stm32_adc7getADC1Ev>:
#include "adc.h"

namespace stm32_adc
{
  Hardware_STM32_ADC getADC1()
  {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    Hardware_STM32_ADC adc;
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff06 	bl	80020c2 <_ZN18Hardware_STM32_ADCC1Ev>
    adc.begin(&hadc1, STM32_ADC_SINGLE_ENDED);
 80022b6:	227f      	movs	r2, #127	@ 0x7f
 80022b8:	4904      	ldr	r1, [pc, #16]	@ (80022cc <_ZN9stm32_adc7getADC1Ev+0x24>)
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ff45 	bl	800214a <_ZN18Hardware_STM32_ADC5beginEP17ADC_HandleTypeDef19hw_stm32_adc_mode_t>

    return adc;
 80022c0:	bf00      	nop
  }
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200001f0 	.word	0x200001f0

080022d0 <_ZN14Algorithim_PID5beginEffffff>:
  float output_limit=0;    // 输出限幅
  float delta_output_limit=0; // 输出变化速率限制


  // 初始化方法
  void begin(float kp, float ki, float kd,float integral_limit=-1, float output_limit=-1, float delta_output_limit=-1){
 80022d0:	b480      	push	{r7}
 80022d2:	b089      	sub	sp, #36	@ 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	61f8      	str	r0, [r7, #28]
 80022d8:	ed87 0a06 	vstr	s0, [r7, #24]
 80022dc:	edc7 0a05 	vstr	s1, [r7, #20]
 80022e0:	ed87 1a04 	vstr	s2, [r7, #16]
 80022e4:	edc7 1a03 	vstr	s3, [r7, #12]
 80022e8:	ed87 2a02 	vstr	s4, [r7, #8]
 80022ec:	edc7 2a01 	vstr	s5, [r7, #4]
    this->kp = kp;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	601a      	str	r2, [r3, #0]
    this->ki = ki;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	605a      	str	r2, [r3, #4]
    this->kd = kd;
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	609a      	str	r2, [r3, #8]
    this->lastError = 0;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	60da      	str	r2, [r3, #12]
    this->integral = 0;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	615a      	str	r2, [r3, #20]
    this->last_lastError = 0;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	611a      	str	r2, [r3, #16]
    this->lastOutput = 0;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	619a      	str	r2, [r3, #24]
    this->integral_limit = integral_limit;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	61da      	str	r2, [r3, #28]
    this->output_limit = output_limit;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	621a      	str	r2, [r3, #32]
    this->delta_output_limit = delta_output_limit;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	625a      	str	r2, [r3, #36]	@ 0x24
  }
 8002334:	bf00      	nop
 8002336:	3724      	adds	r7, #36	@ 0x24
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_ZN14Algorithim_PID12cal_increaseEff>:

    return output;
  }

  // 绝对式PID计算输出
  float cal_increase(float target_value, float measured_value) {
 8002340:	b480      	push	{r7}
 8002342:	b08b      	sub	sp, #44	@ 0x2c
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	ed87 0a02 	vstr	s0, [r7, #8]
 800234c:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = target_value - measured_value; // 计算误差
 8002350:	ed97 7a02 	vldr	s14, [r7, #8]
 8002354:	edd7 7a01 	vldr	s15, [r7, #4]
 8002358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235c:	edc7 7a08 	vstr	s15, [r7, #32]
    float proportional = kp * (error-lastError);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	ed93 7a00 	vldr	s14, [r3]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	edd3 7a03 	vldr	s15, [r3, #12]
 800236c:	edd7 6a08 	vldr	s13, [r7, #32]
 8002370:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002378:	edc7 7a07 	vstr	s15, [r7, #28]
    integral += error;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002382:	edd7 7a08 	vldr	s15, [r7, #32]
 8002386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	edc3 7a05 	vstr	s15, [r3, #20]
    // 限幅
    if (integral_limit > 0) {
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	edd3 7a07 	vldr	s15, [r3, #28]
 8002396:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800239a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239e:	dd27      	ble.n	80023f0 <_ZN14Algorithim_PID12cal_increaseEff+0xb0>
	integral = LIMIT(integral, -integral_limit, integral_limit);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	ed93 7a05 	vldr	s14, [r3, #20]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80023ac:	eef1 7a67 	vneg.f32	s15, s15
 80023b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b8:	d505      	bpl.n	80023c6 <_ZN14Algorithim_PID12cal_increaseEff+0x86>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	edd3 7a07 	vldr	s15, [r3, #28]
 80023c0:	eef1 7a67 	vneg.f32	s15, s15
 80023c4:	e011      	b.n	80023ea <_ZN14Algorithim_PID12cal_increaseEff+0xaa>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	ed93 7a05 	vldr	s14, [r3, #20]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80023d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023da:	dd03      	ble.n	80023e4 <_ZN14Algorithim_PID12cal_increaseEff+0xa4>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	edd3 7a07 	vldr	s15, [r3, #28]
 80023e2:	e002      	b.n	80023ea <_ZN14Algorithim_PID12cal_increaseEff+0xaa>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	edc3 7a05 	vstr	s15, [r3, #20]
    }

    float integralTerm = ki * integral;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80023fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002400:	edc7 7a06 	vstr	s15, [r7, #24]
    float derivative = kd * (error - 2*lastError + last_lastError);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	ed93 7a02 	vldr	s14, [r3, #8]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002410:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002414:	edd7 6a08 	vldr	s13, [r7, #32]
 8002418:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242a:	edc7 7a05 	vstr	s15, [r7, #20]
    float output = lastOutput + proportional + integralTerm + derivative;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	ed93 7a06 	vldr	s14, [r3, #24]
 8002434:	edd7 7a07 	vldr	s15, [r7, #28]
 8002438:	ee37 7a27 	vadd.f32	s14, s14, s15
 800243c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002444:	ed97 7a05 	vldr	s14, [r7, #20]
 8002448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800244c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    if (output_limit > 0) {
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	edd3 7a08 	vldr	s15, [r3, #32]
 8002456:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800245a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245e:	dd23      	ble.n	80024a8 <_ZN14Algorithim_PID12cal_increaseEff+0x168>
	output = LIMIT(output, -output_limit, output_limit);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	edd3 7a08 	vldr	s15, [r3, #32]
 8002466:	eef1 7a67 	vneg.f32	s15, s15
 800246a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800246e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	d505      	bpl.n	8002484 <_ZN14Algorithim_PID12cal_increaseEff+0x144>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	edd3 7a08 	vldr	s15, [r3, #32]
 800247e:	eef1 7a67 	vneg.f32	s15, s15
 8002482:	e00f      	b.n	80024a4 <_ZN14Algorithim_PID12cal_increaseEff+0x164>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	edd3 7a08 	vldr	s15, [r3, #32]
 800248a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800248e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002496:	dd03      	ble.n	80024a0 <_ZN14Algorithim_PID12cal_increaseEff+0x160>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	edd3 7a08 	vldr	s15, [r3, #32]
 800249e:	e001      	b.n	80024a4 <_ZN14Algorithim_PID12cal_increaseEff+0x164>
 80024a0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80024a4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }

    if(delta_output_limit > 0){//设为-1可以禁用
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80024ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	dd33      	ble.n	8002520 <_ZN14Algorithim_PID12cal_increaseEff+0x1e0>
	// 对PID的变化速率进行限制
	float output_rate = output - lastOutput;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80024be:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80024c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c6:	edc7 7a04 	vstr	s15, [r7, #16]
	if (output_rate > delta_output_limit)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80024d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80024d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024dc:	dd0a      	ble.n	80024f4 <_ZN14Algorithim_PID12cal_increaseEff+0x1b4>
	  output = lastOutput + delta_output_limit;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	ed93 7a06 	vldr	s14, [r3, #24]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80024ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 80024f2:	e015      	b.n	8002520 <_ZN14Algorithim_PID12cal_increaseEff+0x1e0>
	else if (output_rate < -delta_output_limit)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80024fa:	eef1 7a67 	vneg.f32	s15, s15
 80024fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8002502:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250a:	d509      	bpl.n	8002520 <_ZN14Algorithim_PID12cal_increaseEff+0x1e0>
	  output = lastOutput - delta_output_limit;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800251c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }

    // 更新状态变量
    last_lastError = lastError;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	611a      	str	r2, [r3, #16]
    lastError = error;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a3a      	ldr	r2, [r7, #32]
 800252c:	60da      	str	r2, [r3, #12]
    lastOutput = output;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002532:	619a      	str	r2, [r3, #24]

    return output;
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	ee07 3a90 	vmov	s15, r3
  }
 800253a:	eeb0 0a67 	vmov.f32	s0, s15
 800253e:	372c      	adds	r7, #44	@ 0x2c
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <_ZN20Hardware_STM32_Relay5beginEP12GPIO_TypeDefth>:
#include "hw_hal_relay.h"

class Hardware_STM32_Relay
{
public:
  void begin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin ,uint8_t active_level) {
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	4611      	mov	r1, r2
 8002554:	461a      	mov	r2, r3
 8002556:	460b      	mov	r3, r1
 8002558:	80fb      	strh	r3, [r7, #6]
 800255a:	4613      	mov	r3, r2
 800255c:	717b      	strb	r3, [r7, #5]
    if (GPIOx == nullptr) {
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d009      	beq.n	8002578 <_ZN20Hardware_STM32_Relay5beginEP12GPIO_TypeDefth+0x30>
	return;
    }
    GPIOx_ = GPIOx;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	601a      	str	r2, [r3, #0]
    GPIO_Pin_ = GPIO_Pin;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	88fa      	ldrh	r2, [r7, #6]
 800256e:	809a      	strh	r2, [r3, #4]
    active_level_=active_level;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	797a      	ldrb	r2, [r7, #5]
 8002574:	719a      	strb	r2, [r3, #6]
 8002576:	e000      	b.n	800257a <_ZN20Hardware_STM32_Relay5beginEP12GPIO_TypeDefth+0x32>
	return;
 8002578:	bf00      	nop
  }
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <_ZN20Hardware_STM32_Relay2onEv>:
  void on() {
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
    if (GPIOx_ == nullptr) {
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <_ZN20Hardware_STM32_Relay2onEv+0x38>
	return;
    }
    GPIO_PinState state=((active_level_)==0)?GPIO_PIN_RESET:GPIO_PIN_SET;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	799b      	ldrb	r3, [r3, #6]
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf14      	ite	ne
 800259c:	2301      	movne	r3, #1
 800259e:	2300      	moveq	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GPIOx_, GPIO_Pin_, state);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	889b      	ldrh	r3, [r3, #4]
 80025ac:	7bfa      	ldrb	r2, [r7, #15]
 80025ae:	4619      	mov	r1, r3
 80025b0:	f005 fb82 	bl	8007cb8 <HAL_GPIO_WritePin>
    state_=true;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	71da      	strb	r2, [r3, #7]
 80025ba:	e000      	b.n	80025be <_ZN20Hardware_STM32_Relay2onEv+0x3a>
	return;
 80025bc:	bf00      	nop
  }
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <_ZN20Hardware_STM32_Relay3offEv>:
  void off() {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
    if (GPIOx_ == nullptr) {
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <_ZN20Hardware_STM32_Relay3offEv+0x38>
	return;
    }
    GPIO_PinState state=((active_level_)==0)?GPIO_PIN_SET:GPIO_PIN_RESET;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	799b      	ldrb	r3, [r3, #6]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <_ZN20Hardware_STM32_Relay3offEv+0x1c>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <_ZN20Hardware_STM32_Relay3offEv+0x1e>
 80025e0:	2300      	movs	r3, #0
 80025e2:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GPIOx_, GPIO_Pin_, state);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	889b      	ldrh	r3, [r3, #4]
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	4619      	mov	r1, r3
 80025f0:	f005 fb62 	bl	8007cb8 <HAL_GPIO_WritePin>
    state_=false;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	71da      	strb	r2, [r3, #7]
 80025fa:	e000      	b.n	80025fe <_ZN20Hardware_STM32_Relay3offEv+0x3a>
	return;
 80025fc:	bf00      	nop
  }
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <_ZN11stm32_relay9getRelay1Ev>:
#include"hw_port_relay.h"

namespace stm32_relay
{
  Hardware_STM32_Relay getRelay1()
  {
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
    Hardware_STM32_Relay relay;
    relay.begin(RELAY1_GPIO_Port,RELAY1_Pin,1);
 800260c:	2301      	movs	r3, #1
 800260e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002612:	4904      	ldr	r1, [pc, #16]	@ (8002624 <_ZN11stm32_relay9getRelay1Ev+0x20>)
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff97 	bl	8002548 <_ZN20Hardware_STM32_Relay5beginEP12GPIO_TypeDefth>
    return relay;
 800261a:	bf00      	nop
  }
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	48000800 	.word	0x48000800

08002628 <_ZN13stm32_dc_buck10getDCBuck1EP24Hardware_STM32_HRTIM_PWMP18Hardware_STM32_ADCP20Hardware_STM32_Relay>:
namespace stm32_dc_buck
{
  Algorithim_DC_Buck<Hardware_STM32_HRTIM_PWM, Hardware_STM32_ADC,
  Hardware_STM32_Relay>
  getDCBuck1(Hardware_STM32_HRTIM_PWM *pwm, Hardware_STM32_ADC *adc, Hardware_STM32_Relay *relay)
  {
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af02      	add	r7, sp, #8
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
 8002634:	603b      	str	r3, [r7, #0]
    Algorithim_DC_Buck<Hardware_STM32_HRTIM_PWM, Hardware_STM32_ADC,
    Hardware_STM32_Relay>
    dc_buck;
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fdd9 	bl	80031ee <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayEC1Ev>
    dc_buck.begin(pwm, 0, 0,
 800263c:	2300      	movs	r3, #0
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 8002664 <_ZN13stm32_dc_buck10getDCBuck1EP24Hardware_STM32_HRTIM_PWMP18Hardware_STM32_ADCP20Hardware_STM32_Relay+0x3c>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8002664 <_ZN13stm32_dc_buck10getDCBuck1EP24Hardware_STM32_HRTIM_PWMP18Hardware_STM32_ADCP20Hardware_STM32_Relay+0x3c>
 800264c:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8002664 <_ZN13stm32_dc_buck10getDCBuck1EP24Hardware_STM32_HRTIM_PWMP18Hardware_STM32_ADCP20Hardware_STM32_Relay+0x3c>
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fdd9 	bl	800320a <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE5beginEPS0_ffPS1_PS2_fS5_>
		  adc, relay, 0);
    return dc_buck;
 8002658:	bf00      	nop
  }
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	00000000 	.word	0x00000000

08002668 <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef>:
typedef void (*MessageCallback)(uint8_t *data, uint16_t len);

class Hardware_STM32_Message
{
public:
  void begin(uint16_t buffer_num, size_t buffer_len, UART_HandleTypeDef *huart)
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	460b      	mov	r3, r1
 8002676:	817b      	strh	r3, [r7, #10]
  {
    if (!huart) {
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d036      	beq.n	80026ec <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x84>
	return;
    }
    if (buffer_num == 0 || buffer_len == 0) {
 800267e:	897b      	ldrh	r3, [r7, #10]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d035      	beq.n	80026f0 <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x88>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d032      	beq.n	80026f0 <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x88>
	return;
    }
    _buffer_num = buffer_num;
 800268a:	897b      	ldrh	r3, [r7, #10]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	721a      	strb	r2, [r3, #8]
    _buffer_len = buffer_len;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	725a      	strb	r2, [r3, #9]
    _huart = huart;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	601a      	str	r2, [r3, #0]
    _buffer = new uint8_t*[buffer_num];
 80026a0:	897b      	ldrh	r3, [r7, #10]
 80026a2:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d201      	bcs.n	80026ae <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x46>
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	e001      	b.n	80026b2 <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x4a>
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	4618      	mov	r0, r3
 80026b4:	f00b fb15 	bl	800dce2 <_Znaj>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < buffer_num; i++) {
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	e00d      	b.n	80026e2 <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x7a>
	_buffer[i] = new uint8_t[buffer_len];
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	18d4      	adds	r4, r2, r3
 80026d2:	4608      	mov	r0, r1
 80026d4:	f00b fb05 	bl	800dce2 <_Znaj>
 80026d8:	4603      	mov	r3, r0
 80026da:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < buffer_num; i++) {
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3301      	adds	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	897b      	ldrh	r3, [r7, #10]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	dbed      	blt.n	80026c6 <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x5e>
 80026ea:	e002      	b.n	80026f2 <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x8a>
	return;
 80026ec:	bf00      	nop
 80026ee:	e000      	b.n	80026f2 <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef+0x8a>
	return;
 80026f0:	bf00      	nop
    }
  }
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd90      	pop	{r4, r7, pc}

080026f8 <_ZN22Hardware_STM32_Message12startReceiveEv>:

  void startReceive()
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  {
    _startDMA();
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f848 	bl	8002796 <_ZN22Hardware_STM32_Message9_startDMAEv>
  }
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <_ZN22Hardware_STM32_Message11attachEventEPFvPhtE12ProcessEvent>:
	_receiveBufferIndex = (_receiveBufferIndex + 1) % _buffer_num;
	_startDMA();
    }
  }

  void attachEvent(MessageCallback cb, ProcessEvent event) {
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	4613      	mov	r3, r2
 800271a:	71fb      	strb	r3, [r7, #7]
    _cb[event] = cb;
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	3304      	adds	r3, #4
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	605a      	str	r2, [r3, #4]
  }
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <_ZN22Hardware_STM32_Message14processHandlerEv>:

  void stopEvent(MessageCallback cb, ProcessEvent event) {
    _cb[event] = NULL;
  }

  void processHandler() {
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
    if (_new_data_available) {
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	7c1b      	ldrb	r3, [r3, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d023      	beq.n	800278e <_ZN22Hardware_STM32_Message14processHandlerEv+0x58>
	_new_data_available = false;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	741a      	strb	r2, [r3, #16]
	_processBufferIndex = (_processBufferIndex + 1) % _buffer_num;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8002752:	3301      	adds	r3, #1
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	7a12      	ldrb	r2, [r2, #8]
 8002758:	fb93 f1f2 	sdiv	r1, r3, r2
 800275c:	fb01 f202 	mul.w	r2, r1, r2
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	b25a      	sxtb	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	749a      	strb	r2, [r3, #18]
	if (_cb[PINGPONG_BUFFER]) {
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00e      	beq.n	800278e <_ZN22Hardware_STM32_Message14processHandlerEv+0x58>
	    _cb[PINGPONG_BUFFER](_buffer[_processBufferIndex], _data_len);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6851      	ldr	r1, [r2, #4]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	f992 2012 	ldrsb.w	r2, [r2, #18]
 800277e:	0092      	lsls	r2, r2, #2
 8002780:	440a      	add	r2, r1
 8002782:	6810      	ldr	r0, [r2, #0]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	68d2      	ldr	r2, [r2, #12]
 8002788:	b292      	uxth	r2, r2
 800278a:	4611      	mov	r1, r2
 800278c:	4798      	blx	r3
	}
    }
  }
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <_ZN22Hardware_STM32_Message9_startDMAEv>:
  bool _new_data_available = 0;
  uint8_t _receiveBufferIndex = 0;
  int8_t _processBufferIndex = -1;
  MessageCallback _cb[number_of_event];

  void _startDMA()
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  {
    HAL_UARTEx_ReceiveToIdle_DMA(_huart, _buffer[_receiveBufferIndex], 2 * _buffer_len);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	7c5b      	ldrb	r3, [r3, #17]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	6819      	ldr	r1, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7a5b      	ldrb	r3, [r3, #9]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	f00a f85f 	bl	800c87c <HAL_UARTEx_ReceiveToIdle_DMA>
  }
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <_ZN22Hardware_STM32_MessageC1Ev>:
class Hardware_STM32_Message
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	741a      	strb	r2, [r3, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	745a      	strb	r2, [r3, #17]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	22ff      	movs	r2, #255	@ 0xff
 80027de:	749a      	strb	r2, [r3, #18]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <_ZN13stm32_message8getUART1Ev>:


namespace stm32_message
{
  Hardware_STM32_Message getUART1()
  {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
    Hardware_STM32_Message message;
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ffe4 	bl	80027c6 <_ZN22Hardware_STM32_MessageC1Ev>
    message.begin(2, 20, &huart1);
 80027fe:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <_ZN13stm32_message8getUART1Ev+0x24>)
 8002800:	2214      	movs	r2, #20
 8002802:	2102      	movs	r1, #2
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ff2f 	bl	8002668 <_ZN22Hardware_STM32_Message5beginEtjP20__UART_HandleTypeDef>
    return message;
 800280a:	bf00      	nop
  }
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000604 	.word	0x20000604

08002818 <_ZN10stm32_test19vofaReceiveCallbackEPht>:
  power_control_mode_t g_power_control_mode = VOLTAGE_CLOSE_LOOP;
  Algorithim_PID g_voltage_pid_vofa_set;
  Algorithim_PID g_current_pid_vofa_set;

  void vofaReceiveCallback(uint8_t *data,uint16_t len)
  {
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
    float temp;
    char s[20];
    memcpy(s,data,len);
 8002824:	887a      	ldrh	r2, [r7, #2]
 8002826:	f107 0308 	add.w	r3, r7, #8
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4618      	mov	r0, r3
 800282e:	f00c fcc6 	bl	800f1be <memcpy>
    s[len]='\0';
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	3320      	adds	r3, #32
 8002836:	443b      	add	r3, r7
 8002838:	2200      	movs	r2, #0
 800283a:	f803 2c18 	strb.w	r2, [r3, #-24]
    if (sscanf(s, "VP=%f", &temp) >0)
 800283e:	f107 021c 	add.w	r2, r7, #28
 8002842:	f107 0308 	add.w	r3, r7, #8
 8002846:	49a6      	ldr	r1, [pc, #664]	@ (8002ae0 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2c8>)
 8002848:	4618      	mov	r0, r3
 800284a:	f00c fae1 	bl	800ee10 <siscanf>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	bfcc      	ite	gt
 8002854:	2301      	movgt	r3, #1
 8002856:	2300      	movle	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00c      	beq.n	8002878 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x60>
      {
	g_voltage_pid_vofa_set.kp=temp;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	4aa0      	ldr	r2, [pc, #640]	@ (8002ae4 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2cc>)
 8002862:	6013      	str	r3, [r2, #0]
	printf("VP: %f\n", temp);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fea6 	bl	80005b8 <__aeabi_f2d>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	489d      	ldr	r0, [pc, #628]	@ (8002ae8 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2d0>)
 8002872:	f00c fa3d 	bl	800ecf0 <iprintf>
	g_current_pid_vofa_set.ki = 0;
	g_current_pid_vofa_set.kd = 0;
	g_bool_isResetPID = RESET_PID;
	printf("RESET PID\n");
      }
  }
 8002876:	e1d1      	b.n	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
    else if (sscanf(s, "VI=%f", &temp) >0)
 8002878:	f107 021c 	add.w	r2, r7, #28
 800287c:	f107 0308 	add.w	r3, r7, #8
 8002880:	499a      	ldr	r1, [pc, #616]	@ (8002aec <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2d4>)
 8002882:	4618      	mov	r0, r3
 8002884:	f00c fac4 	bl	800ee10 <siscanf>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	bfcc      	ite	gt
 800288e:	2301      	movgt	r3, #1
 8002890:	2300      	movle	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00c      	beq.n	80028b2 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x9a>
	g_voltage_pid_vofa_set.ki=temp;
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4a92      	ldr	r2, [pc, #584]	@ (8002ae4 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2cc>)
 800289c:	6053      	str	r3, [r2, #4]
	printf("VI: %f\n", temp);
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fd fe89 	bl	80005b8 <__aeabi_f2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4891      	ldr	r0, [pc, #580]	@ (8002af0 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2d8>)
 80028ac:	f00c fa20 	bl	800ecf0 <iprintf>
  }
 80028b0:	e1b4      	b.n	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
    else if (sscanf(s, "VD=%f", &temp) >0)
 80028b2:	f107 021c 	add.w	r2, r7, #28
 80028b6:	f107 0308 	add.w	r3, r7, #8
 80028ba:	498e      	ldr	r1, [pc, #568]	@ (8002af4 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2dc>)
 80028bc:	4618      	mov	r0, r3
 80028be:	f00c faa7 	bl	800ee10 <siscanf>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bfcc      	ite	gt
 80028c8:	2301      	movgt	r3, #1
 80028ca:	2300      	movle	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00c      	beq.n	80028ec <_ZN10stm32_test19vofaReceiveCallbackEPht+0xd4>
	g_voltage_pid_vofa_set.kd=temp;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	4a83      	ldr	r2, [pc, #524]	@ (8002ae4 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2cc>)
 80028d6:	6093      	str	r3, [r2, #8]
	printf("VD: %f\n", temp);
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fd fe6c 	bl	80005b8 <__aeabi_f2d>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4884      	ldr	r0, [pc, #528]	@ (8002af8 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2e0>)
 80028e6:	f00c fa03 	bl	800ecf0 <iprintf>
  }
 80028ea:	e197      	b.n	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
    else if (sscanf(s, "CP=%f", &temp) >0)
 80028ec:	f107 021c 	add.w	r2, r7, #28
 80028f0:	f107 0308 	add.w	r3, r7, #8
 80028f4:	4981      	ldr	r1, [pc, #516]	@ (8002afc <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2e4>)
 80028f6:	4618      	mov	r0, r3
 80028f8:	f00c fa8a 	bl	800ee10 <siscanf>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bfcc      	ite	gt
 8002902:	2301      	movgt	r3, #1
 8002904:	2300      	movle	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00c      	beq.n	8002926 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x10e>
	g_current_pid_vofa_set.kp=temp;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	4a7c      	ldr	r2, [pc, #496]	@ (8002b00 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2e8>)
 8002910:	6013      	str	r3, [r2, #0]
	printf("CP: %f\n", temp);
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	4618      	mov	r0, r3
 8002916:	f7fd fe4f 	bl	80005b8 <__aeabi_f2d>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4879      	ldr	r0, [pc, #484]	@ (8002b04 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2ec>)
 8002920:	f00c f9e6 	bl	800ecf0 <iprintf>
  }
 8002924:	e17a      	b.n	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
    else if (sscanf(s, "CI=%f", &temp) >0)
 8002926:	f107 021c 	add.w	r2, r7, #28
 800292a:	f107 0308 	add.w	r3, r7, #8
 800292e:	4976      	ldr	r1, [pc, #472]	@ (8002b08 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2f0>)
 8002930:	4618      	mov	r0, r3
 8002932:	f00c fa6d 	bl	800ee10 <siscanf>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	bfcc      	ite	gt
 800293c:	2301      	movgt	r3, #1
 800293e:	2300      	movle	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00c      	beq.n	8002960 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x148>
	g_current_pid_vofa_set.ki=temp;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	4a6d      	ldr	r2, [pc, #436]	@ (8002b00 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2e8>)
 800294a:	6053      	str	r3, [r2, #4]
	printf("CI: %f\n", temp);
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fe32 	bl	80005b8 <__aeabi_f2d>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	486c      	ldr	r0, [pc, #432]	@ (8002b0c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2f4>)
 800295a:	f00c f9c9 	bl	800ecf0 <iprintf>
  }
 800295e:	e15d      	b.n	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
    else if (sscanf(s, "CD=%f", &temp) >0)
 8002960:	f107 021c 	add.w	r2, r7, #28
 8002964:	f107 0308 	add.w	r3, r7, #8
 8002968:	4969      	ldr	r1, [pc, #420]	@ (8002b10 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2f8>)
 800296a:	4618      	mov	r0, r3
 800296c:	f00c fa50 	bl	800ee10 <siscanf>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	bfcc      	ite	gt
 8002976:	2301      	movgt	r3, #1
 8002978:	2300      	movle	r3, #0
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00c      	beq.n	800299a <_ZN10stm32_test19vofaReceiveCallbackEPht+0x182>
	g_current_pid_vofa_set.kd=temp;
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	4a5f      	ldr	r2, [pc, #380]	@ (8002b00 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2e8>)
 8002984:	6093      	str	r3, [r2, #8]
	printf("CD: %f\n", temp);
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	4618      	mov	r0, r3
 800298a:	f7fd fe15 	bl	80005b8 <__aeabi_f2d>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4860      	ldr	r0, [pc, #384]	@ (8002b14 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2fc>)
 8002994:	f00c f9ac 	bl	800ecf0 <iprintf>
  }
 8002998:	e140      	b.n	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
    else if (sscanf(s, "V=%f", &temp)>0)
 800299a:	f107 021c 	add.w	r2, r7, #28
 800299e:	f107 0308 	add.w	r3, r7, #8
 80029a2:	495d      	ldr	r1, [pc, #372]	@ (8002b18 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x300>)
 80029a4:	4618      	mov	r0, r3
 80029a6:	f00c fa33 	bl	800ee10 <siscanf>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bfcc      	ite	gt
 80029b0:	2301      	movgt	r3, #1
 80029b2:	2300      	movle	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00c      	beq.n	80029d4 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x1bc>
	g_target_vofa_set.target_voltage = temp;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	4a57      	ldr	r2, [pc, #348]	@ (8002b1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x304>)
 80029be:	6013      	str	r3, [r2, #0]
	printf("V: %f\n", temp);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fd fdf8 	bl	80005b8 <__aeabi_f2d>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4854      	ldr	r0, [pc, #336]	@ (8002b20 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x308>)
 80029ce:	f00c f98f 	bl	800ecf0 <iprintf>
  }
 80029d2:	e123      	b.n	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
    else if (sscanf(s, "C=%f", &temp)>0)
 80029d4:	f107 021c 	add.w	r2, r7, #28
 80029d8:	f107 0308 	add.w	r3, r7, #8
 80029dc:	4951      	ldr	r1, [pc, #324]	@ (8002b24 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x30c>)
 80029de:	4618      	mov	r0, r3
 80029e0:	f00c fa16 	bl	800ee10 <siscanf>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	bfcc      	ite	gt
 80029ea:	2301      	movgt	r3, #1
 80029ec:	2300      	movle	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00c      	beq.n	8002a0e <_ZN10stm32_test19vofaReceiveCallbackEPht+0x1f6>
	g_target_vofa_set.target_current = temp;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	4a49      	ldr	r2, [pc, #292]	@ (8002b1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x304>)
 80029f8:	6053      	str	r3, [r2, #4]
	printf("C: %f\n", temp);
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fd fddb 	bl	80005b8 <__aeabi_f2d>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4848      	ldr	r0, [pc, #288]	@ (8002b28 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x310>)
 8002a08:	f00c f972 	bl	800ecf0 <iprintf>
  }
 8002a0c:	e106      	b.n	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
    else if (sscanf(s, "VL=%f", &temp)>0)
 8002a0e:	f107 021c 	add.w	r2, r7, #28
 8002a12:	f107 0308 	add.w	r3, r7, #8
 8002a16:	4945      	ldr	r1, [pc, #276]	@ (8002b2c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x314>)
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f00c f9f9 	bl	800ee10 <siscanf>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bfcc      	ite	gt
 8002a24:	2301      	movgt	r3, #1
 8002a26:	2300      	movle	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00c      	beq.n	8002a48 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x230>
	g_voltage_pid_vofa_set.integral_limit=temp;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4a2c      	ldr	r2, [pc, #176]	@ (8002ae4 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2cc>)
 8002a32:	61d3      	str	r3, [r2, #28]
	printf("VL: %f\n", temp);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fdbe 	bl	80005b8 <__aeabi_f2d>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	483b      	ldr	r0, [pc, #236]	@ (8002b30 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x318>)
 8002a42:	f00c f955 	bl	800ecf0 <iprintf>
  }
 8002a46:	e0e9      	b.n	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
    else if (sscanf(s, "CL=%f", &temp) >0)
 8002a48:	f107 021c 	add.w	r2, r7, #28
 8002a4c:	f107 0308 	add.w	r3, r7, #8
 8002a50:	4938      	ldr	r1, [pc, #224]	@ (8002b34 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x31c>)
 8002a52:	4618      	mov	r0, r3
 8002a54:	f00c f9dc 	bl	800ee10 <siscanf>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	bfcc      	ite	gt
 8002a5e:	2301      	movgt	r3, #1
 8002a60:	2300      	movle	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00c      	beq.n	8002a82 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x26a>
	g_current_pid_vofa_set.integral_limit=temp;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	4a25      	ldr	r2, [pc, #148]	@ (8002b00 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2e8>)
 8002a6c:	61d3      	str	r3, [r2, #28]
	printf("CL: %f\n", temp);
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fda1 	bl	80005b8 <__aeabi_f2d>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	482f      	ldr	r0, [pc, #188]	@ (8002b38 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x320>)
 8002a7c:	f00c f938 	bl	800ecf0 <iprintf>
  }
 8002a80:	e0cc      	b.n	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
    else if (sscanf(s, "MODE=%f", &temp) >0)
 8002a82:	f107 021c 	add.w	r2, r7, #28
 8002a86:	f107 0308 	add.w	r3, r7, #8
 8002a8a:	492c      	ldr	r1, [pc, #176]	@ (8002b3c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x324>)
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f00c f9bf 	bl	800ee10 <siscanf>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bfcc      	ite	gt
 8002a98:	2301      	movgt	r3, #1
 8002a9a:	2300      	movle	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d054      	beq.n	8002b4c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x334>
	if (temp == 0)
 8002aa2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002aa6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aae:	d106      	bne.n	8002abe <_ZN10stm32_test19vofaReceiveCallbackEPht+0x2a6>
	    printf("VOLTAGE MODE\n");
 8002ab0:	4823      	ldr	r0, [pc, #140]	@ (8002b40 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x328>)
 8002ab2:	f00c f985 	bl	800edc0 <puts>
	    g_power_control_mode = VOLTAGE_CLOSE_LOOP;
 8002ab6:	4b23      	ldr	r3, [pc, #140]	@ (8002b44 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x32c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
  }
 8002abc:	e0ae      	b.n	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
	else if (temp == 1)
 8002abe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ac2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ac6:	eef4 7a47 	vcmp.f32	s15, s14
 8002aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ace:	f040 80a5 	bne.w	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
	    printf("CURRENT MODE\n");
 8002ad2:	481d      	ldr	r0, [pc, #116]	@ (8002b48 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x330>)
 8002ad4:	f00c f974 	bl	800edc0 <puts>
	    g_power_control_mode = CURRENT_CLOSE_LOOP;
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b44 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x32c>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
  }
 8002ade:	e09d      	b.n	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
 8002ae0:	08012d40 	.word	0x08012d40
 8002ae4:	200004a0 	.word	0x200004a0
 8002ae8:	08012d48 	.word	0x08012d48
 8002aec:	08012d50 	.word	0x08012d50
 8002af0:	08012d58 	.word	0x08012d58
 8002af4:	08012d60 	.word	0x08012d60
 8002af8:	08012d68 	.word	0x08012d68
 8002afc:	08012d70 	.word	0x08012d70
 8002b00:	200004c8 	.word	0x200004c8
 8002b04:	08012d78 	.word	0x08012d78
 8002b08:	08012d80 	.word	0x08012d80
 8002b0c:	08012d88 	.word	0x08012d88
 8002b10:	08012d90 	.word	0x08012d90
 8002b14:	08012d98 	.word	0x08012d98
 8002b18:	08012da0 	.word	0x08012da0
 8002b1c:	20000494 	.word	0x20000494
 8002b20:	08012da8 	.word	0x08012da8
 8002b24:	08012db0 	.word	0x08012db0
 8002b28:	08012db8 	.word	0x08012db8
 8002b2c:	08012dc0 	.word	0x08012dc0
 8002b30:	08012dc8 	.word	0x08012dc8
 8002b34:	08012dd0 	.word	0x08012dd0
 8002b38:	08012dd8 	.word	0x08012dd8
 8002b3c:	08012de0 	.word	0x08012de0
 8002b40:	08012de8 	.word	0x08012de8
 8002b44:	2000049e 	.word	0x2000049e
 8002b48:	08012df8 	.word	0x08012df8
    else if (sscanf(s, "EN=%f", &temp) >0)
 8002b4c:	f107 021c 	add.w	r2, r7, #28
 8002b50:	f107 0308 	add.w	r3, r7, #8
 8002b54:	4933      	ldr	r1, [pc, #204]	@ (8002c24 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x40c>)
 8002b56:	4618      	mov	r0, r3
 8002b58:	f00c f95a 	bl	800ee10 <siscanf>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	bfcc      	ite	gt
 8002b62:	2301      	movgt	r3, #1
 8002b64:	2300      	movle	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01d      	beq.n	8002ba8 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x390>
	if (temp == 0)
 8002b6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b70:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b78:	d106      	bne.n	8002b88 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x370>
	    g_bool_isOutput = OUTPUT_STOP;
 8002b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c28 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x410>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
	    printf("OUTPUT STOP\n");
 8002b80:	482a      	ldr	r0, [pc, #168]	@ (8002c2c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x414>)
 8002b82:	f00c f91d 	bl	800edc0 <puts>
  }
 8002b86:	e049      	b.n	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
	else if (temp == 1)
 8002b88:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b90:	eef4 7a47 	vcmp.f32	s15, s14
 8002b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b98:	d140      	bne.n	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
	    g_bool_isOutput = OUTPUT_START;
 8002b9a:	4b23      	ldr	r3, [pc, #140]	@ (8002c28 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x410>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
	    printf("OUTPUT START\n");
 8002ba0:	4823      	ldr	r0, [pc, #140]	@ (8002c30 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x418>)
 8002ba2:	f00c f90d 	bl	800edc0 <puts>
  }
 8002ba6:	e039      	b.n	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
    else if (strcmp (s, "RESET") == 0)
 8002ba8:	f107 0308 	add.w	r3, r7, #8
 8002bac:	4921      	ldr	r1, [pc, #132]	@ (8002c34 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x41c>)
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fd fb36 	bl	8000220 <strcmp>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d105      	bne.n	8002bc6 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x3ae>
	printf("RESET\n");
 8002bba:	481e      	ldr	r0, [pc, #120]	@ (8002c34 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x41c>)
 8002bbc:	f00c f900 	bl	800edc0 <puts>
	HAL_NVIC_SystemReset();
 8002bc0:	f004 fbb5 	bl	800732e <HAL_NVIC_SystemReset>
  }
 8002bc4:	e02a      	b.n	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
    else if (strcmp (s, "CLEAR") == 0)
 8002bc6:	f107 0308 	add.w	r3, r7, #8
 8002bca:	491b      	ldr	r1, [pc, #108]	@ (8002c38 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x420>)
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fb27 	bl	8000220 <strcmp>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d121      	bne.n	8002c1c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x404>
	g_voltage_pid_vofa_set.kp = 0;
 8002bd8:	4b18      	ldr	r3, [pc, #96]	@ (8002c3c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x424>)
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
	g_voltage_pid_vofa_set.ki = 0;
 8002be0:	4b16      	ldr	r3, [pc, #88]	@ (8002c3c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x424>)
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	605a      	str	r2, [r3, #4]
	g_voltage_pid_vofa_set.kd = 0;
 8002be8:	4b14      	ldr	r3, [pc, #80]	@ (8002c3c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x424>)
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	609a      	str	r2, [r3, #8]
	g_voltage_pid_vofa_set.integral_limit = 0;
 8002bf0:	4b12      	ldr	r3, [pc, #72]	@ (8002c3c <_ZN10stm32_test19vofaReceiveCallbackEPht+0x424>)
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	61da      	str	r2, [r3, #28]
	g_current_pid_vofa_set.kp = 0;
 8002bf8:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x428>)
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
	g_current_pid_vofa_set.ki = 0;
 8002c00:	4b0f      	ldr	r3, [pc, #60]	@ (8002c40 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x428>)
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	605a      	str	r2, [r3, #4]
	g_current_pid_vofa_set.kd = 0;
 8002c08:	4b0d      	ldr	r3, [pc, #52]	@ (8002c40 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x428>)
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
	g_bool_isResetPID = RESET_PID;
 8002c10:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x42c>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
	printf("RESET PID\n");
 8002c16:	480c      	ldr	r0, [pc, #48]	@ (8002c48 <_ZN10stm32_test19vofaReceiveCallbackEPht+0x430>)
 8002c18:	f00c f8d2 	bl	800edc0 <puts>
  }
 8002c1c:	bf00      	nop
 8002c1e:	3720      	adds	r7, #32
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	08012e08 	.word	0x08012e08
 8002c28:	2000049d 	.word	0x2000049d
 8002c2c:	08012e10 	.word	0x08012e10
 8002c30:	08012e1c 	.word	0x08012e1c
 8002c34:	08012e2c 	.word	0x08012e2c
 8002c38:	08012e34 	.word	0x08012e34
 8002c3c:	200004a0 	.word	0x200004a0
 8002c40:	200004c8 	.word	0x200004c8
 8002c44:	2000049c 	.word	0x2000049c
 8002c48:	08012e3c 	.word	0x08012e3c

08002c4c <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv>:
	g_dc_buck_handler.closedVoltageLoopControl();
      }
  }

  void dc_dc_doubleMode_closedLoop_test()
  {
 8002c4c:	b5b0      	push	{r4, r5, r7, lr}
 8002c4e:	b08a      	sub	sp, #40	@ 0x28
 8002c50:	af00      	add	r7, sp, #0
    g_dc_buck_handler=stm32_dc_buck::getDCBuck1(&g_hrtimerA_pwm_handler,&g_adc1_handler,&g_relay1_handler);
 8002c52:	4c53      	ldr	r4, [pc, #332]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002c54:	4638      	mov	r0, r7
 8002c56:	4b53      	ldr	r3, [pc, #332]	@ (8002da4 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x158>)
 8002c58:	4a53      	ldr	r2, [pc, #332]	@ (8002da8 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x15c>)
 8002c5a:	4954      	ldr	r1, [pc, #336]	@ (8002dac <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x160>)
 8002c5c:	f7ff fce4 	bl	8002628 <_ZN13stm32_dc_buck10getDCBuck1EP24Hardware_STM32_HRTIM_PWMP18Hardware_STM32_ADCP20Hardware_STM32_Relay>
 8002c60:	4625      	mov	r5, r4
 8002c62:	463c      	mov	r4, r7
 8002c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c70:	e885 0003 	stmia.w	r5, {r0, r1}
    g_dc_buck_handler.setVin(5);
 8002c74:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8002c78:	4849      	ldr	r0, [pc, #292]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002c7a:	f000 faee 	bl	800325a <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE6setVinEf>
    g_dc_buck_handler.setVout(3.3);
 8002c7e:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8002db0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x164>
 8002c82:	4847      	ldr	r0, [pc, #284]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002c84:	f000 faf8 	bl	8003278 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE7setVoutEf>
    g_voltage_pid.begin(1, 1, 1);
 8002c88:	eeff 2a00 	vmov.f32	s5, #240	@ 0xbf800000 -1.0
 8002c8c:	eebf 2a00 	vmov.f32	s4, #240	@ 0xbf800000 -1.0
 8002c90:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 8002c94:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002c98:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002c9c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002ca0:	4844      	ldr	r0, [pc, #272]	@ (8002db4 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x168>)
 8002ca2:	f7ff fb15 	bl	80022d0 <_ZN14Algorithim_PID5beginEffffff>
    g_current_pid.begin(2, 2, 2);
 8002ca6:	eeff 2a00 	vmov.f32	s5, #240	@ 0xbf800000 -1.0
 8002caa:	eebf 2a00 	vmov.f32	s4, #240	@ 0xbf800000 -1.0
 8002cae:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 8002cb2:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8002cb6:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002cba:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8002cbe:	483e      	ldr	r0, [pc, #248]	@ (8002db8 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x16c>)
 8002cc0:	f7ff fb06 	bl	80022d0 <_ZN14Algorithim_PID5beginEffffff>
    g_dc_buck_handler.setCV_PID(&g_voltage_pid);
 8002cc4:	493b      	ldr	r1, [pc, #236]	@ (8002db4 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x168>)
 8002cc6:	4836      	ldr	r0, [pc, #216]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002cc8:	f000 faf5 	bl	80032b6 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE9setCV_PIDEP14Algorithim_PID>
    g_dc_buck_handler.setCC_PID(&g_current_pid);
 8002ccc:	493a      	ldr	r1, [pc, #232]	@ (8002db8 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x16c>)
 8002cce:	4834      	ldr	r0, [pc, #208]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002cd0:	f000 fb74 	bl	80033bc <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE9setCC_PIDEP14Algorithim_PID>
    g_adc1_handler.startSample();
 8002cd4:	4834      	ldr	r0, [pc, #208]	@ (8002da8 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x15c>)
 8002cd6:	f7ff fa70 	bl	80021ba <_ZN18Hardware_STM32_ADC11startSampleEv>
//    __HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);

    g_message_handler.attachEvent(vofaReceiveCallback,PINGPONG_BUFFER);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	4937      	ldr	r1, [pc, #220]	@ (8002dbc <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x170>)
 8002cde:	4838      	ldr	r0, [pc, #224]	@ (8002dc0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x174>)
 8002ce0:	f7ff fd15 	bl	800270e <_ZN22Hardware_STM32_Message11attachEventEPFvPhtE12ProcessEvent>

    while (1)
      {
	SEGGER_SYSVIEW_RecordVoid(33);
 8002ce4:	2021      	movs	r0, #33	@ 0x21
 8002ce6:	f00a fb83 	bl	800d3f0 <SEGGER_SYSVIEW_RecordVoid>
	if(g_bool_isOutput == OUTPUT_START)
 8002cea:	4b36      	ldr	r3, [pc, #216]	@ (8002dc4 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x178>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d103      	bne.n	8002cfa <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0xae>
	  {
	    g_dc_buck_handler.enable();
 8002cf2:	482b      	ldr	r0, [pc, #172]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002cf4:	f000 facf 	bl	8003296 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE6enableEv>
 8002cf8:	e002      	b.n	8002d00 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0xb4>
	  }
	else
	  {
	    g_dc_buck_handler.disable();
 8002cfa:	4829      	ldr	r0, [pc, #164]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002cfc:	f000 fb6c 	bl	80033d8 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE7disableEv>
	  }
	printf("%d\n",g_dc_buck_handler.isEnable());
 8002d00:	4827      	ldr	r0, [pc, #156]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002d02:	f000 fb79 	bl	80033f8 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE8isEnableEv>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4619      	mov	r1, r3
 8002d0a:	482f      	ldr	r0, [pc, #188]	@ (8002dc8 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x17c>)
 8002d0c:	f00b fff0 	bl	800ecf0 <iprintf>
	SEGGER_SYSVIEW_RecordEndCall(33);
 8002d10:	2021      	movs	r0, #33	@ 0x21
 8002d12:	f00a fe65 	bl	800d9e0 <SEGGER_SYSVIEW_RecordEndCall>
	HAL_Delay(500);
 8002d16:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d1a:	f001 fc5d 	bl	80045d8 <HAL_Delay>
	switch(g_power_control_mode)
 8002d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002dcc <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x180>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0xe0>
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d01c      	beq.n	8002d64 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x118>
 8002d2a:	e037      	b.n	8002d9c <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x150>
	{
	  case VOLTAGE_CLOSE_LOOP:
	    if (g_bool_isResetPID == RESET_PID)
 8002d2c:	4b28      	ldr	r3, [pc, #160]	@ (8002dd0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x184>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d113      	bne.n	8002d5c <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x110>
	      {
		g_dc_buck_handler.cv_pid_->kp=g_voltage_pid_vofa_set.kp;
 8002d34:	4b1a      	ldr	r3, [pc, #104]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	4a26      	ldr	r2, [pc, #152]	@ (8002dd4 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x188>)
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	601a      	str	r2, [r3, #0]
		g_dc_buck_handler.cv_pid_->ki=g_voltage_pid_vofa_set.ki;
 8002d3e:	4b18      	ldr	r3, [pc, #96]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	4a24      	ldr	r2, [pc, #144]	@ (8002dd4 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x188>)
 8002d44:	6852      	ldr	r2, [r2, #4]
 8002d46:	605a      	str	r2, [r3, #4]
		g_dc_buck_handler.cv_pid_->kd=g_voltage_pid_vofa_set.kd;
 8002d48:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	4a21      	ldr	r2, [pc, #132]	@ (8002dd4 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x188>)
 8002d4e:	6892      	ldr	r2, [r2, #8]
 8002d50:	609a      	str	r2, [r3, #8]
		g_dc_buck_handler.cv_pid_->integral_limit=g_voltage_pid_vofa_set.integral_limit;
 8002d52:	4b13      	ldr	r3, [pc, #76]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	4a1f      	ldr	r2, [pc, #124]	@ (8002dd4 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x188>)
 8002d58:	69d2      	ldr	r2, [r2, #28]
 8002d5a:	61da      	str	r2, [r3, #28]
	      }
	    g_dc_buck_handler.closedVoltageLoopControl ();
 8002d5c:	4810      	ldr	r0, [pc, #64]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002d5e:	f000 fab9 	bl	80032d4 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedVoltageLoopControlEv>

	    break;
 8002d62:	e01b      	b.n	8002d9c <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x150>
	  case CURRENT_CLOSE_LOOP:
	    if (g_bool_isResetPID == RESET_PID)
 8002d64:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x184>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d113      	bne.n	8002d94 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x148>
	      {
		g_dc_buck_handler.cc_pid_->kp=g_current_pid_vofa_set.kp;
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	4a19      	ldr	r2, [pc, #100]	@ (8002dd8 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x18c>)
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	601a      	str	r2, [r3, #0]
		g_dc_buck_handler.cc_pid_->ki=g_current_pid_vofa_set.ki;
 8002d76:	4b0a      	ldr	r3, [pc, #40]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	4a17      	ldr	r2, [pc, #92]	@ (8002dd8 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x18c>)
 8002d7c:	6852      	ldr	r2, [r2, #4]
 8002d7e:	605a      	str	r2, [r3, #4]
		g_dc_buck_handler.cc_pid_->kd=g_current_pid_vofa_set.kd;
 8002d80:	4b07      	ldr	r3, [pc, #28]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	4a14      	ldr	r2, [pc, #80]	@ (8002dd8 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x18c>)
 8002d86:	6892      	ldr	r2, [r2, #8]
 8002d88:	609a      	str	r2, [r3, #8]
		g_dc_buck_handler.cc_pid_->integral_limit=g_current_pid_vofa_set.integral_limit;
 8002d8a:	4b05      	ldr	r3, [pc, #20]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	4a12      	ldr	r2, [pc, #72]	@ (8002dd8 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x18c>)
 8002d90:	69d2      	ldr	r2, [r2, #28]
 8002d92:	61da      	str	r2, [r3, #28]
	      }
	    g_dc_buck_handler.closedCurrentLoopControl ();
 8002d94:	4802      	ldr	r0, [pc, #8]	@ (8002da0 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x154>)
 8002d96:	f000 fb3b 	bl	8003410 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedCurrentLoopControlEv>
	    break;
 8002d9a:	bf00      	nop
	SEGGER_SYSVIEW_RecordVoid(33);
 8002d9c:	e7a2      	b.n	8002ce4 <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv+0x98>
 8002d9e:	bf00      	nop
 8002da0:	2000053c 	.word	0x2000053c
 8002da4:	2000051c 	.word	0x2000051c
 8002da8:	20000508 	.word	0x20000508
 8002dac:	200004f0 	.word	0x200004f0
 8002db0:	40533333 	.word	0x40533333
 8002db4:	20000564 	.word	0x20000564
 8002db8:	2000058c 	.word	0x2000058c
 8002dbc:	08002819 	.word	0x08002819
 8002dc0:	20000524 	.word	0x20000524
 8002dc4:	2000049d 	.word	0x2000049d
 8002dc8:	08012e60 	.word	0x08012e60
 8002dcc:	2000049e 	.word	0x2000049e
 8002dd0:	2000049c 	.word	0x2000049c
 8002dd4:	200004a0 	.word	0x200004a0
 8002dd8:	200004c8 	.word	0x200004c8

08002ddc <_ZN10stm32_test14vofa_send_testEv>:
	}
      }
  }

  void vofa_send_test()
  {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
    printf("good\n");
 8002de0:	4804      	ldr	r0, [pc, #16]	@ (8002df4 <_ZN10stm32_test14vofa_send_testEv+0x18>)
 8002de2:	f00b ffed 	bl	800edc0 <puts>
    HAL_Delay(500);
 8002de6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002dea:	f001 fbf5 	bl	80045d8 <HAL_Delay>
  }
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	08012e64 	.word	0x08012e64

08002df8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002df8:	b5b0      	push	{r4, r5, r7, lr}
 8002dfa:	b08c      	sub	sp, #48	@ 0x30
 8002dfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dfe:	f001 fb7a 	bl	80044f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e02:	f000 f873 	bl	8002eec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e06:	f7fe fcbd 	bl	8001784 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e0a:	f7fe fc81 	bl	8001710 <MX_DMA_Init>
  MX_ADC1_Init();
 8002e0e:	f7fe f921 	bl	8001054 <MX_ADC1_Init>
  MX_HRTIM1_Init();
 8002e12:	f7fe fd0f 	bl	8001834 <MX_HRTIM1_Init>
  MX_USART1_UART_Init();
 8002e16:	f001 fa2b 	bl	8004270 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8002e1a:	f7fe f9dd 	bl	80011d8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002e1e:	f7fe fa93 	bl	8001348 <MX_ADC3_Init>
  MX_TIM1_Init();
 8002e22:	f001 f9ab 	bl	800417c <MX_TIM1_Init>

  /* USER CODE BEGIN 2 */
  SEGGER_SYSVIEW_Conf();            /* Configure and initialize SystemView  */
 8002e26:	f00a ff1d 	bl	800dc64 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();           /* Starts SystemView recording*/
 8002e2a:	f00a fb95 	bl	800d558 <SEGGER_SYSVIEW_Start>
  SEGGER_SYSVIEW_OnIdle();          /* Tells SystemView that System is currently in "Idle"*/
 8002e2e:	f00a fe13 	bl	800da58 <SEGGER_SYSVIEW_OnIdle>
  //定时事件处理
  //  HAL_TIM_Base_Start_IT(&htim1);
  //串口抽象层初始化
  g_message_handler=stm32_message::getUART1();
 8002e32:	4c28      	ldr	r4, [pc, #160]	@ (8002ed4 <main+0xdc>)
 8002e34:	463b      	mov	r3, r7
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fcda 	bl	80027f0 <_ZN13stm32_message8getUART1Ev>
 8002e3c:	4625      	mov	r5, r4
 8002e3e:	463c      	mov	r4, r7
 8002e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e48:	e885 0003 	stmia.w	r5, {r0, r1}
  g_message_handler.startReceive();
 8002e4c:	4821      	ldr	r0, [pc, #132]	@ (8002ed4 <main+0xdc>)
 8002e4e:	f7ff fc53 	bl	80026f8 <_ZN22Hardware_STM32_Message12startReceiveEv>

  //高级定时器抽象层初始化
  g_hrtimerA_pwm_handler=stm32_hrtim_pwm::getTimerAOutput();
 8002e52:	4c21      	ldr	r4, [pc, #132]	@ (8002ed8 <main+0xe0>)
 8002e54:	463b      	mov	r3, r7
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f8e4 	bl	8002024 <_ZN15stm32_hrtim_pwm15getTimerAOutputEv>
 8002e5c:	4625      	mov	r5, r4
 8002e5e:	463c      	mov	r4, r7
 8002e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e68:	e885 0003 	stmia.w	r5, {r0, r1}
  g_hrtimerA_pwm_handler.setOutput();
 8002e6c:	481a      	ldr	r0, [pc, #104]	@ (8002ed8 <main+0xe0>)
 8002e6e:	f7ff f84a 	bl	8001f06 <_ZN24Hardware_STM32_HRTIM_PWM9setOutputEv>
  g_hrtimerA_pwm_handler.setDutyCycle(0.3);
 8002e72:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8002edc <main+0xe4>
 8002e76:	4818      	ldr	r0, [pc, #96]	@ (8002ed8 <main+0xe0>)
 8002e78:	f7ff f855 	bl	8001f26 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf>

  //ADC抽象层初始化
  g_adc1_handler=stm32_adc::getADC1();
 8002e7c:	f107 031c 	add.w	r3, r7, #28
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fa11 	bl	80022a8 <_ZN9stm32_adc7getADC1Ev>
 8002e86:	f107 031c 	add.w	r3, r7, #28
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4814      	ldr	r0, [pc, #80]	@ (8002ee0 <main+0xe8>)
 8002e8e:	f7ff f92b 	bl	80020e8 <_ZN18Hardware_STM32_ADCaSEOS_>
 8002e92:	f107 031c 	add.w	r3, r7, #28
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff f9f8 	bl	800228c <_ZN18Hardware_STM32_ADCD1Ev>
  g_adc1_handler.startSample();
 8002e9c:	4810      	ldr	r0, [pc, #64]	@ (8002ee0 <main+0xe8>)
 8002e9e:	f7ff f98c 	bl	80021ba <_ZN18Hardware_STM32_ADC11startSampleEv>
  __HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 8002ea2:	4b10      	ldr	r3, [pc, #64]	@ (8002ee4 <main+0xec>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee4 <main+0xec>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0204 	bic.w	r2, r2, #4
 8002eb0:	601a      	str	r2, [r3, #0]
  //  //继电器抽象层初始化
  g_relay1_handler=stm32_relay::getRelay1();
 8002eb2:	4c0d      	ldr	r4, [pc, #52]	@ (8002ee8 <main+0xf0>)
 8002eb4:	463b      	mov	r3, r7
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fba4 	bl	8002604 <_ZN11stm32_relay9getRelay1Ev>
 8002ebc:	4622      	mov	r2, r4
 8002ebe:	463b      	mov	r3, r7
 8002ec0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ec4:	e882 0003 	stmia.w	r2, {r0, r1}
  while (1)
    {
      /* USER CODE END WHILE */
      //      _TestFunc0();
      //      stm32_test::dc_dc_doubleMode_closedLoop_test();
      stm32_test::dc_dc_doubleMode_closedLoop_test();
 8002ec8:	f7ff fec0 	bl	8002c4c <_ZN10stm32_test32dc_dc_doubleMode_closedLoop_testEv>
      stm32_test::vofa_send_test();
 8002ecc:	f7ff ff86 	bl	8002ddc <_ZN10stm32_test14vofa_send_testEv>
      stm32_test::dc_dc_doubleMode_closedLoop_test();
 8002ed0:	bf00      	nop
 8002ed2:	e7f9      	b.n	8002ec8 <main+0xd0>
 8002ed4:	20000524 	.word	0x20000524
 8002ed8:	200004f0 	.word	0x200004f0
 8002edc:	3e99999a 	.word	0x3e99999a
 8002ee0:	20000508 	.word	0x20000508
 8002ee4:	20000334 	.word	0x20000334
 8002ee8:	2000051c 	.word	0x2000051c

08002eec <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b094      	sub	sp, #80	@ 0x50
 8002ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ef2:	f107 0318 	add.w	r3, r7, #24
 8002ef6:	2238      	movs	r2, #56	@ 0x38
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f00c f88c 	bl	800f018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	60da      	str	r2, [r3, #12]
 8002f0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002f12:	f006 fb23 	bl	800955c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f16:	2302      	movs	r3, #2
 8002f18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f20:	2340      	movs	r3, #64	@ 0x40
 8002f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f24:	2302      	movs	r3, #2
 8002f26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8002f30:	234b      	movs	r3, #75	@ 0x4b
 8002f32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f34:	2302      	movs	r3, #2
 8002f36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f40:	f107 0318 	add.w	r3, r7, #24
 8002f44:	4618      	mov	r0, r3
 8002f46:	f006 fbbd 	bl	80096c4 <HAL_RCC_OscConfig>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf14      	ite	ne
 8002f50:	2301      	movne	r3, #1
 8002f52:	2300      	moveq	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <_Z18SystemClock_Configv+0x72>
    {
      Error_Handler();
 8002f5a:	f000 f81d 	bl	8002f98 <Error_Handler>
    }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f5e:	230f      	movs	r3, #15
 8002f60:	607b      	str	r3, [r7, #4]
      |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f62:	2303      	movs	r3, #3
 8002f64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	2104      	movs	r1, #4
 8002f76:	4618      	mov	r0, r3
 8002f78:	f006 feb6 	bl	8009ce8 <HAL_RCC_ClockConfig>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bf14      	ite	ne
 8002f82:	2301      	movne	r3, #1
 8002f84:	2300      	moveq	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <_Z18SystemClock_Configv+0xa4>
    {
      Error_Handler();
 8002f8c:	f000 f804 	bl	8002f98 <Error_Handler>
    }
}
 8002f90:	bf00      	nop
 8002f92:	3750      	adds	r7, #80	@ 0x50
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f9c:	b672      	cpsid	i
}
 8002f9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fa0:	bf00      	nop
 8002fa2:	e7fd      	b.n	8002fa0 <Error_Handler+0x8>

08002fa4 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f8b2 	bl	8003116 <_ZNSaImEC1Ev>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fa9f 	bl	80034f8 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <_ZNSaImED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fa93 	bl	8003520 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff f83a 	bl	8002076 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <_ZNSt6vectorImSaImEED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 800300c:	b5b0      	push	{r4, r5, r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681c      	ldr	r4, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fa91 	bl	8003546 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8003024:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003026:	461a      	mov	r2, r3
 8003028:	4629      	mov	r1, r5
 800302a:	4620      	mov	r0, r4
 800302c:	f000 fa96 	bl	800355c <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff ffd1 	bl	8002fda <_ZNSt12_Vector_baseImSaImEED1Ev>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bdb0      	pop	{r4, r5, r7, pc}

08003042 <_ZSt4swapIP17ADC_HandleTypeDefENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 fa93 	bl	8003578 <_ZSt4moveIRP17ADC_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 8003052:	4603      	mov	r3, r0
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003058:	6838      	ldr	r0, [r7, #0]
 800305a:	f000 fa8d 	bl	8003578 <_ZSt4moveIRP17ADC_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 800305e:	4603      	mov	r3, r0
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003066:	f107 030c 	add.w	r3, r7, #12
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fa84 	bl	8003578 <_ZSt4moveIRP17ADC_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 8003070:	4603      	mov	r3, r0
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	601a      	str	r2, [r3, #0]
    }
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <_ZSt4swapI24hw_stm32_adc_dma_ready_tENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fa7f 	bl	800358e <_ZSt4moveIR24hw_stm32_adc_dma_ready_tEONSt16remove_referenceIT_E4typeEOS3_>
 8003090:	4603      	mov	r3, r0
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	73fb      	strb	r3, [r7, #15]
      __a = _GLIBCXX_MOVE(__b);
 8003096:	6838      	ldr	r0, [r7, #0]
 8003098:	f000 fa79 	bl	800358e <_ZSt4moveIR24hw_stm32_adc_dma_ready_tEONSt16remove_referenceIT_E4typeEOS3_>
 800309c:	4603      	mov	r3, r0
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	701a      	strb	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80030a4:	f107 030f 	add.w	r3, r7, #15
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fa70 	bl	800358e <_ZSt4moveIR24hw_stm32_adc_dma_ready_tEONSt16remove_referenceIT_E4typeEOS3_>
 80030ae:	4603      	mov	r3, r0
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	701a      	strb	r2, [r3, #0]
    }
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <_ZSt4swapI23hw_stm32_adc_it_ready_tENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fa6b 	bl	80035a4 <_ZSt4moveIR23hw_stm32_adc_it_ready_tEONSt16remove_referenceIT_E4typeEOS3_>
 80030ce:	4603      	mov	r3, r0
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	73fb      	strb	r3, [r7, #15]
      __a = _GLIBCXX_MOVE(__b);
 80030d4:	6838      	ldr	r0, [r7, #0]
 80030d6:	f000 fa65 	bl	80035a4 <_ZSt4moveIR23hw_stm32_adc_it_ready_tEONSt16remove_referenceIT_E4typeEOS3_>
 80030da:	4603      	mov	r3, r0
 80030dc:	781a      	ldrb	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	701a      	strb	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80030e2:	f107 030f 	add.w	r3, r7, #15
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fa5c 	bl	80035a4 <_ZSt4moveIR23hw_stm32_adc_it_ready_tEONSt16remove_referenceIT_E4typeEOS3_>
 80030ec:	4603      	mov	r3, r0
 80030ee:	781a      	ldrb	r2, [r3, #0]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	701a      	strb	r2, [r3, #0]
    }
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <_ZSt4swapImSaImEEvRSt6vectorIT_T0_ES5_>:

  /// See std::vector::swap().
  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))
    { __x.swap(__y); }
 8003106:	6839      	ldr	r1, [r7, #0]
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fa56 	bl	80035ba <_ZNSt6vectorImSaImEE4swapERS1_>
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <_ZNSaImEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fa85 	bl	800362e <_ZNSt15__new_allocatorImEC1Ev>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <_ZNSt6vectorImSaImEEC1EjRKmRKS0_>:
      vector(size_type __n, const value_type& __value,
 800312e:	b590      	push	{r4, r7, lr}
 8003130:	b085      	sub	sp, #20
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	603b      	str	r3, [r7, #0]
      : _Base(_S_check_init_len(__n, __a), __a)
 800313c:	68fc      	ldr	r4, [r7, #12]
 800313e:	6839      	ldr	r1, [r7, #0]
 8003140:	68b8      	ldr	r0, [r7, #8]
 8003142:	f000 fa7f 	bl	8003644 <_ZNSt6vectorImSaImEE17_S_check_init_lenEjRKS0_>
 8003146:	4603      	mov	r3, r0
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	4619      	mov	r1, r3
 800314c:	4620      	mov	r0, r4
 800314e:	f000 faa1 	bl	8003694 <_ZNSt12_Vector_baseImSaImEEC1EjRKS0_>
      { _M_fill_initialize(__n, __value); }
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fab0 	bl	80036bc <_ZNSt6vectorImSaImEE18_M_fill_initializeEjRKm>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	bd90      	pop	{r4, r7, pc}

08003166 <_ZNSt6vectorImSaImEEaSEOS1_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8003166:	b590      	push	{r4, r7, lr}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8003174:	6838      	ldr	r0, [r7, #0]
 8003176:	f000 faba 	bl	80036ee <_ZSt4moveIRSt6vectorImSaImEEEONSt16remove_referenceIT_E4typeEOS5_>
 800317a:	4603      	mov	r3, r0
 800317c:	4622      	mov	r2, r4
 800317e:	4619      	mov	r1, r3
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fabf 	bl	8003704 <_ZNSt6vectorImSaImEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 8003186:	687b      	ldr	r3, [r7, #4]
      }
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	bd90      	pop	{r4, r7, pc}

08003190 <_ZNSt6vectorImSaImEE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4619      	mov	r1, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 faed 	bl	800377e <_ZNKSt6vectorImSaImEE11_M_data_ptrImEEPT_S4_>
 80031a4:	4603      	mov	r3, r0
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <_ZNKSt6vectorImSaImEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	109b      	asrs	r3, r3, #2
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <_ZNSt6vectorImSaImEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
      }
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayEC1Ev>:
#else
template <class PWM, class ADC, class RELAY>
#endif
class Algorithim_DC_Buck {
public:
  Algorithim_DC_Buck(){}
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	761a      	strb	r2, [r3, #24]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE5beginEPS0_ffPS1_PS2_fS5_>:
  void begin(PWM *pwm,float vout,float current,ADC *adc_out = nullptr ,RELAY *relay = nullptr, float vin=0 , ADC *adc_in = nullptr)
 800320a:	b480      	push	{r7}
 800320c:	b089      	sub	sp, #36	@ 0x24
 800320e:	af00      	add	r7, sp, #0
 8003210:	61f8      	str	r0, [r7, #28]
 8003212:	61b9      	str	r1, [r7, #24]
 8003214:	ed87 0a05 	vstr	s0, [r7, #20]
 8003218:	edc7 0a04 	vstr	s1, [r7, #16]
 800321c:	60fa      	str	r2, [r7, #12]
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	ed87 1a01 	vstr	s2, [r7, #4]
  {
    pwm_ = pwm;
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	601a      	str	r2, [r3, #0]
    adc_out_ = adc_out;
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	605a      	str	r2, [r3, #4]
    adc_in_ = adc_in;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003234:	609a      	str	r2, [r3, #8]
    relay_= relay;
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	60da      	str	r2, [r3, #12]
    vin_ = vin;
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	61da      	str	r2, [r3, #28]
    vout_ = vout;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	621a      	str	r2, [r3, #32]
    current_ = current;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
 800324e:	bf00      	nop
 8003250:	3724      	adds	r7, #36	@ 0x24
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE6setVinEf>:
  void setCC_PID(Algorithim_PID *pid)
  {
    cc_pid_ = pid;
  }

  void setVin(float vin)
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	ed87 0a00 	vstr	s0, [r7]
  {
    vin_ = vin;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	61da      	str	r2, [r3, #28]
  }
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE7setVoutEf>:

  void setVout(float vout)
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	ed87 0a00 	vstr	s0, [r7]
  {
    vout_ = vout;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	621a      	str	r2, [r3, #32]
  }
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE6enableEv>:
    output = LIMIT(cc_pid_->cal_increase(current_, adc_out_->readCurrent()),0,1);
    pwm_->setDutyCycle(output);
  }


  void enable() {
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
    isEnable_=true;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	761a      	strb	r2, [r3, #24]
    relay_->on();
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff f96b 	bl	8002584 <_ZN20Hardware_STM32_Relay2onEv>
  }
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE9setCV_PIDEP14Algorithim_PID>:
  void setCV_PID(Algorithim_PID *pid)
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
    cv_pid_ = pid;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	615a      	str	r2, [r3, #20]
  }
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedVoltageLoopControlEv>:
  void closedVoltageLoopControl() {
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	ed2d 8b02 	vpush	{d8}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
    if(!adc_out_||!isEnable_){return ;}
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d061      	beq.n	80033ac <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedVoltageLoopControlEv+0xd8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	7e1b      	ldrb	r3, [r3, #24]
 80032ec:	f083 0301 	eor.w	r3, r3, #1
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d15a      	bne.n	80033ac <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedVoltageLoopControlEv+0xd8>
    output = LIMIT((cv_pid_->cal_increase(vout_, adc_out_->readVoltage())),0,1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695c      	ldr	r4, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	ed93 8a08 	vldr	s16, [r3, #32]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fe ff71 	bl	80021ec <_ZN18Hardware_STM32_ADC11readVoltageEv>
 800330a:	eef0 7a40 	vmov.f32	s15, s0
 800330e:	eef0 0a67 	vmov.f32	s1, s15
 8003312:	eeb0 0a48 	vmov.f32	s0, s16
 8003316:	4620      	mov	r0, r4
 8003318:	f7ff f812 	bl	8002340 <_ZN14Algorithim_PID12cal_increaseEff>
 800331c:	eef0 7a40 	vmov.f32	s15, s0
 8003320:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003328:	d502      	bpl.n	8003330 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedVoltageLoopControlEv+0x5c>
 800332a:	eddf 7a23 	vldr	s15, [pc, #140]	@ 80033b8 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedVoltageLoopControlEv+0xe4>
 800332e:	e033      	b.n	8003398 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedVoltageLoopControlEv+0xc4>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695c      	ldr	r4, [r3, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	ed93 8a08 	vldr	s16, [r3, #32]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe ff54 	bl	80021ec <_ZN18Hardware_STM32_ADC11readVoltageEv>
 8003344:	eef0 7a40 	vmov.f32	s15, s0
 8003348:	eef0 0a67 	vmov.f32	s1, s15
 800334c:	eeb0 0a48 	vmov.f32	s0, s16
 8003350:	4620      	mov	r0, r4
 8003352:	f7fe fff5 	bl	8002340 <_ZN14Algorithim_PID12cal_increaseEff>
 8003356:	eef0 7a40 	vmov.f32	s15, s0
 800335a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800335e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003366:	dd02      	ble.n	800336e <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedVoltageLoopControlEv+0x9a>
 8003368:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800336c:	e014      	b.n	8003398 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedVoltageLoopControlEv+0xc4>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695c      	ldr	r4, [r3, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	ed93 8a08 	vldr	s16, [r3, #32]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe ff35 	bl	80021ec <_ZN18Hardware_STM32_ADC11readVoltageEv>
 8003382:	eef0 7a40 	vmov.f32	s15, s0
 8003386:	eef0 0a67 	vmov.f32	s1, s15
 800338a:	eeb0 0a48 	vmov.f32	s0, s16
 800338e:	4620      	mov	r0, r4
 8003390:	f7fe ffd6 	bl	8002340 <_ZN14Algorithim_PID12cal_increaseEff>
 8003394:	eef0 7a40 	vmov.f32	s15, s0
 8003398:	edc7 7a03 	vstr	s15, [r7, #12]
    pwm_->setDutyCycle(output);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	ed97 0a03 	vldr	s0, [r7, #12]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fe fdbe 	bl	8001f26 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf>
 80033aa:	e000      	b.n	80033ae <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedVoltageLoopControlEv+0xda>
    if(!adc_out_||!isEnable_){return ;}
 80033ac:	bf00      	nop
  }
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	ecbd 8b02 	vpop	{d8}
 80033b6:	bd90      	pop	{r4, r7, pc}
 80033b8:	00000000 	.word	0x00000000

080033bc <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE9setCC_PIDEP14Algorithim_PID>:
  void setCC_PID(Algorithim_PID *pid)
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
    cc_pid_ = pid;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	611a      	str	r2, [r3, #16]
  }
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE7disableEv>:

  void disable() {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
    isEnable_=false;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	761a      	strb	r2, [r3, #24]
    relay_->off();
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff f8ea 	bl	80025c4 <_ZN20Hardware_STM32_Relay3offEv>
  }
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE8isEnableEv>:

  bool isEnable()
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  {
    return isEnable_;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7e1b      	ldrb	r3, [r3, #24]
  }
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedCurrentLoopControlEv>:
  void closedCurrentLoopControl() {
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	ed2d 8b02 	vpush	{d8}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
    if(!adc_out_||!isEnable_){return ;}
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d061      	beq.n	80034e8 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedCurrentLoopControlEv+0xd8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	7e1b      	ldrb	r3, [r3, #24]
 8003428:	f083 0301 	eor.w	r3, r3, #1
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d15a      	bne.n	80034e8 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedCurrentLoopControlEv+0xd8>
    output = LIMIT(cc_pid_->cal_increase(current_, adc_out_->readCurrent()),0,1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691c      	ldr	r4, [r3, #16]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe fefb 	bl	800223c <_ZN18Hardware_STM32_ADC11readCurrentEv>
 8003446:	eef0 7a40 	vmov.f32	s15, s0
 800344a:	eef0 0a67 	vmov.f32	s1, s15
 800344e:	eeb0 0a48 	vmov.f32	s0, s16
 8003452:	4620      	mov	r0, r4
 8003454:	f7fe ff74 	bl	8002340 <_ZN14Algorithim_PID12cal_increaseEff>
 8003458:	eef0 7a40 	vmov.f32	s15, s0
 800345c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003464:	d502      	bpl.n	800346c <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedCurrentLoopControlEv+0x5c>
 8003466:	eddf 7a23 	vldr	s15, [pc, #140]	@ 80034f4 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedCurrentLoopControlEv+0xe4>
 800346a:	e033      	b.n	80034d4 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedCurrentLoopControlEv+0xc4>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691c      	ldr	r4, [r3, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe fede 	bl	800223c <_ZN18Hardware_STM32_ADC11readCurrentEv>
 8003480:	eef0 7a40 	vmov.f32	s15, s0
 8003484:	eef0 0a67 	vmov.f32	s1, s15
 8003488:	eeb0 0a48 	vmov.f32	s0, s16
 800348c:	4620      	mov	r0, r4
 800348e:	f7fe ff57 	bl	8002340 <_ZN14Algorithim_PID12cal_increaseEff>
 8003492:	eef0 7a40 	vmov.f32	s15, s0
 8003496:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800349a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800349e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a2:	dd02      	ble.n	80034aa <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedCurrentLoopControlEv+0x9a>
 80034a4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80034a8:	e014      	b.n	80034d4 <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedCurrentLoopControlEv+0xc4>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691c      	ldr	r4, [r3, #16]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fe febf 	bl	800223c <_ZN18Hardware_STM32_ADC11readCurrentEv>
 80034be:	eef0 7a40 	vmov.f32	s15, s0
 80034c2:	eef0 0a67 	vmov.f32	s1, s15
 80034c6:	eeb0 0a48 	vmov.f32	s0, s16
 80034ca:	4620      	mov	r0, r4
 80034cc:	f7fe ff38 	bl	8002340 <_ZN14Algorithim_PID12cal_increaseEff>
 80034d0:	eef0 7a40 	vmov.f32	s15, s0
 80034d4:	edc7 7a03 	vstr	s15, [r7, #12]
    pwm_->setDutyCycle(output);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	ed97 0a03 	vldr	s0, [r7, #12]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe fd20 	bl	8001f26 <_ZN24Hardware_STM32_HRTIM_PWM12setDutyCycleEf>
 80034e6:	e000      	b.n	80034ea <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayE24closedCurrentLoopControlEv+0xda>
    if(!adc_out_||!isEnable_){return ;}
 80034e8:	bf00      	nop
  }
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	ecbd 8b02 	vpop	{d8}
 80034f2:	bd90      	pop	{r4, r7, pc}
 80034f4:	00000000 	.word	0x00000000

080034f8 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
	{ }
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
	if (__p)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	4618      	mov	r0, r3
 800353a:	f000 f93a 	bl	80037b2 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4618      	mov	r0, r3
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f940 	bl	80037f0 <_ZSt8_DestroyIPmEvT_S1_>
    }
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_ZSt4moveIRP17ADC_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <_ZSt4moveIR24hw_stm32_adc_dma_ready_tEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <_ZSt4moveIR23hw_stm32_adc_it_ready_tEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <_ZNSt6vectorImSaImEE4swapERS1_>:
      swap(vector& __x) _GLIBCXX_NOEXCEPT
 80035ba:	b590      	push	{r4, r7, lr}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	6039      	str	r1, [r7, #0]
	__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
 80035c4:	f7fe fbf8 	bl	8001db8 <_ZSt23__is_constant_evaluatedv>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d015      	beq.n	80035fa <_ZNSt6vectorImSaImEE4swapERS1_+0x40>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ffb8 	bl	8003546 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80035d6:	4604      	mov	r4, r0
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff ffb3 	bl	8003546 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80035e0:	4603      	mov	r3, r0
 80035e2:	4619      	mov	r1, r3
 80035e4:	4620      	mov	r0, r4
 80035e6:	f000 f919 	bl	800381c <_ZSteqRKSaImES1_>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f083 0301 	eor.w	r3, r3, #1
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <_ZNSt6vectorImSaImEE4swapERS1_+0x40>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <_ZNSt6vectorImSaImEE4swapERS1_+0x42>
 80035fa:	2300      	movs	r3, #0
 80035fc:	2b00      	cmp	r3, #0
	this->_M_impl._M_swap_data(__x._M_impl);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f000 f915 	bl	8003834 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_data12_M_swap_dataERS2_>
	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff9a 	bl	8003546 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8003612:	4604      	mov	r4, r0
				  __x._M_get_Tp_allocator());
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff ff95 	bl	8003546 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 800361c:	4603      	mov	r3, r0
	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
 800361e:	4619      	mov	r1, r3
 8003620:	4620      	mov	r0, r4
 8003622:	f000 f926 	bl	8003872 <_ZN9__gnu_cxx14__alloc_traitsISaImEmE10_S_on_swapERS1_S3_>
      }
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	bd90      	pop	{r4, r7, pc}

0800362e <_ZNSt15__new_allocatorImEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <_ZNSt6vectorImSaImEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800364e:	f107 030c 	add.w	r3, r7, #12
 8003652:	6839      	ldr	r1, [r7, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f000 f89e 	bl	8003796 <_ZNSaImEC1ERKS_>
 800365a:	f107 030c 	add.w	r3, r7, #12
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f920 	bl	80038a4 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>
 8003664:	4602      	mov	r2, r0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4293      	cmp	r3, r2
 800366a:	bf8c      	ite	hi
 800366c:	2301      	movhi	r3, #1
 800366e:	2300      	movls	r3, #0
 8003670:	b2dc      	uxtb	r4, r3
 8003672:	f107 030c 	add.w	r3, r7, #12
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fca4 	bl	8002fc4 <_ZNSaImED1Ev>
 800367c:	2c00      	cmp	r4, #0
 800367e:	d002      	beq.n	8003686 <_ZNSt6vectorImSaImEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8003680:	4803      	ldr	r0, [pc, #12]	@ (8003690 <_ZNSt6vectorImSaImEE17_S_check_init_lenEjRKS0_+0x4c>)
 8003682:	f00a fb36 	bl	800dcf2 <_ZSt20__throw_length_errorPKc>
	return __n;
 8003686:	687b      	ldr	r3, [r7, #4]
      }
 8003688:	4618      	mov	r0, r3
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	bd90      	pop	{r4, r7, pc}
 8003690:	08012e70 	.word	0x08012e70

08003694 <_ZNSt12_Vector_baseImSaImEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 f917 	bl	80038d8 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f925 	bl	80038fc <_ZNSt12_Vector_baseImSaImEE17_M_create_storageEj>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <_ZNSt6vectorImSaImEE18_M_fill_initializeEjRKm>:
      _M_fill_initialize(size_type __n, const value_type& __value)
 80036bc:	b590      	push	{r4, r7, lr}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff ff39 	bl	8003546 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80036d4:	4603      	mov	r3, r0
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	4620      	mov	r0, r4
 80036dc:	f000 f929 	bl	8003932 <_ZSt24__uninitialized_fill_n_aIPmjmmET_S1_T0_RKT1_RSaIT2_E>
 80036e0:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	605a      	str	r2, [r3, #4]
      }
 80036e6:	bf00      	nop
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd90      	pop	{r4, r7, pc}

080036ee <_ZSt4moveIRSt6vectorImSaImEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <_ZNSt6vectorImSaImEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
      _M_move_assign(vector&& __x, true_type) noexcept
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b089      	sub	sp, #36	@ 0x24
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	713a      	strb	r2, [r7, #4]
	vector __tmp(get_allocator());
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	f107 031c 	add.w	r3, r7, #28
 8003716:	4611      	mov	r1, r2
 8003718:	4618      	mov	r0, r3
 800371a:	f000 f928 	bl	800396e <_ZNKSt12_Vector_baseImSaImEE13get_allocatorEv>
 800371e:	f107 021c 	add.w	r2, r7, #28
 8003722:	f107 0310 	add.w	r3, r7, #16
 8003726:	4611      	mov	r1, r2
 8003728:	4618      	mov	r0, r3
 800372a:	f000 f931 	bl	8003990 <_ZNSt6vectorImSaImEEC1ERKS0_>
 800372e:	f107 031c 	add.w	r3, r7, #28
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fc46 	bl	8002fc4 <_ZNSaImED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	4611      	mov	r1, r2
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f878 	bl	8003834 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	f107 0310 	add.w	r3, r7, #16
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f871 	bl	8003834 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fef6 	bl	8003546 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 800375a:	4604      	mov	r4, r0
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff fef1 	bl	8003546 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8003764:	4603      	mov	r3, r0
 8003766:	4619      	mov	r1, r3
 8003768:	4620      	mov	r0, r4
 800376a:	f000 f920 	bl	80039ae <_ZSt15__alloc_on_moveISaImEEvRT_S2_>
      }
 800376e:	f107 0310 	add.w	r3, r7, #16
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fc4a 	bl	800300c <_ZNSt6vectorImSaImEED1Ev>
 8003778:	3724      	adds	r7, #36	@ 0x24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd90      	pop	{r4, r7, pc}

0800377e <_ZNKSt6vectorImSaImEE11_M_data_ptrImEEPT_S4_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <_ZNSaImEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80037a0:	6839      	ldr	r1, [r7, #0]
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f90f 	bl	80039c6 <_ZNSt15__new_allocatorImEC1ERKS0_>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b088      	sub	sp, #32
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	607a      	str	r2, [r7, #4]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	617b      	str	r3, [r7, #20]

      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
	if (std::__is_constant_evaluated())
 80037ca:	f7fe faf5 	bl	8001db8 <_ZSt23__is_constant_evaluatedv>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj+0x2a>
	  {
	    ::operator delete(__p);
 80037d4:	69b8      	ldr	r0, [r7, #24]
 80037d6:	f00a fa6f 	bl	800dcb8 <_ZdlPv>
	    return;
 80037da:	e005      	b.n	80037e8 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj+0x36>
	  }
	__allocator_base<_Tp>::deallocate(__p, __n);
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	69b9      	ldr	r1, [r7, #24]
 80037e0:	69f8      	ldr	r0, [r7, #28]
 80037e2:	f000 f9c0 	bl	8003b66 <_ZNSt15__new_allocatorImE10deallocateEPmj>
      { __a.deallocate(__p, __n); }
 80037e6:	bf00      	nop
 80037e8:	bf00      	nop
 80037ea:	3720      	adds	r7, #32
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <_ZSt8_DestroyIPmEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
 80037fa:	f7fe fadd 	bl	8001db8 <_ZSt23__is_constant_evaluatedv>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d004      	beq.n	800380e <_ZSt8_DestroyIPmEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8003804:	6839      	ldr	r1, [r7, #0]
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8e9 	bl	80039de <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_>
 800380c:	e003      	b.n	8003816 <_ZSt8_DestroyIPmEvT_S1_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800380e:	6839      	ldr	r1, [r7, #0]
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f8fd 	bl	8003a10 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <_ZSteqRKSaImES1_>:
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
      { return true; }
 8003826:	2301      	movs	r3, #1
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	2300      	movs	r3, #0
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]
	  __tmp._M_copy_data(*this);
 800384a:	f107 030c 	add.w	r3, r7, #12
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4618      	mov	r0, r3
 8003852:	f000 f8e8 	bl	8003a26 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 8003856:	6839      	ldr	r1, [r7, #0]
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f8e4 	bl	8003a26 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 800385e:	f107 030c 	add.w	r3, r7, #12
 8003862:	4619      	mov	r1, r3
 8003864:	6838      	ldr	r0, [r7, #0]
 8003866:	f000 f8de 	bl	8003a26 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 800386a:	bf00      	nop
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <_ZN9__gnu_cxx14__alloc_traitsISaImEmE10_S_on_swapERS1_S3_>:
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
    { std::__alloc_on_swap(__a, __b); }
 800387c:	6839      	ldr	r1, [r7, #0]
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f8e8 	bl	8003a54 <_ZSt15__alloc_on_swapISaImEEvRT_S2_>
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8003894:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      }
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80038ac:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80038b0:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff ffea 	bl	800388c <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>
 80038b8:	4603      	mov	r3, r0
 80038ba:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80038bc:	f107 0208 	add.w	r2, r7, #8
 80038c0:	f107 030c 	add.w	r3, r7, #12
 80038c4:	4611      	mov	r1, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 f8cf 	bl	8003a6a <_ZSt3minIjERKT_S2_S2_>
 80038cc:	4603      	mov	r3, r0
 80038ce:	681b      	ldr	r3, [r3, #0]
      }
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80038e2:	6839      	ldr	r1, [r7, #0]
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ff56 	bl	8003796 <_ZNSaImEC1ERKS_>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fe03 	bl	80034f8 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <_ZNSt12_Vector_baseImSaImEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8003906:	6839      	ldr	r1, [r7, #0]
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f8c2 	bl	8003a92 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 800390e:	4602      	mov	r2, r0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	441a      	add	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	609a      	str	r2, [r3, #8]
      }
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <_ZSt24__uninitialized_fill_n_aIPmjmmET_S1_T0_RKT1_RSaIT2_E>:

  template<typename _ForwardIterator, typename _Size, typename _Tp,
	   typename _Tp2>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	603b      	str	r3, [r7, #0]
			     const _Tp& __x, allocator<_Tp2>&)
    {
#ifdef __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 8003940:	f7fe fa42 	bl	8001dc8 <_ZSt21is_constant_evaluatedv>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d006      	beq.n	8003958 <_ZSt24__uninitialized_fill_n_aIPmjmmET_S1_T0_RKT1_RSaIT2_E+0x26>
	return std::__do_uninit_fill_n(__first, __n, __x);
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f8b3 	bl	8003aba <_ZSt18__do_uninit_fill_nIPmjmET_S1_T0_RKT1_>
 8003954:	4603      	mov	r3, r0
 8003956:	e006      	b.n	8003966 <_ZSt24__uninitialized_fill_n_aIPmjmmET_S1_T0_RKT1_RSaIT2_E+0x34>
#endif
      return std::uninitialized_fill_n(__first, __n, __x);
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f8cb 	bl	8003af8 <_ZSt20uninitialized_fill_nIPmjmET_S1_T0_RKT1_>
 8003962:	4603      	mov	r3, r0
 8003964:	bf00      	nop
    }
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <_ZNKSt12_Vector_baseImSaImEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8003978:	6838      	ldr	r0, [r7, #0]
 800397a:	f000 f8cf 	bl	8003b1c <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 800397e:	4603      	mov	r3, r0
 8003980:	4619      	mov	r1, r3
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ff07 	bl	8003796 <_ZNSaImEC1ERKS_>
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <_ZNSt6vectorImSaImEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6839      	ldr	r1, [r7, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 f8c7 	bl	8003b32 <_ZNSt12_Vector_baseImSaImEEC1ERKS0_>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <_ZSt15__alloc_on_moveISaImEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]
	__one = std::move(__two);
 80039b8:	6838      	ldr	r0, [r7, #0]
 80039ba:	f000 f8c9 	bl	8003b50 <_ZSt4moveIRSaImEEONSt16remove_referenceIT_E4typeEOS3_>
    }
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <_ZNSt15__new_allocatorImEC1ERKS0_>:

      _GLIBCXX20_CONSTEXPR
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80039e8:	e009      	b.n	80039fe <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f8ca 	bl	8003b84 <_ZSt11__addressofImEPT_RS0_>
 80039f0:	4603      	mov	r3, r0
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f8d1 	bl	8003b9a <_ZSt8_DestroyImEvPT_>
	  for (; __first != __last; ++__first)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3304      	adds	r3, #4
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d1f1      	bne.n	80039ea <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_+0xc>
	}
 8003a06:	bf00      	nop
 8003a08:	bf00      	nop
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	609a      	str	r2, [r3, #8]
	}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <_ZSt15__alloc_on_swapISaImEEvRT_S2_>:
    __alloc_on_swap(_Alloc& __one, _Alloc& __two)
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
    }
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d201      	bcs.n	8003a84 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	e000      	b.n	8003a86 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8003a84:	687b      	ldr	r3, [r7, #4]
    }
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d006      	beq.n	8003ab0 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x1e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6839      	ldr	r1, [r7, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 f882 	bl	8003bb0 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 8003aac:	4603      	mov	r3, r0
 8003aae:	e000      	b.n	8003ab2 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x20>
 8003ab0:	2300      	movs	r3, #0
      }
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <_ZSt18__do_uninit_fill_nIPmjmET_S1_T0_RKT1_>:
    __do_uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __first;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n, (void) ++__cur)
 8003aca:	e00d      	b.n	8003ae8 <_ZSt18__do_uninit_fill_nIPmjmET_S1_T0_RKT1_+0x2e>
	    std::_Construct(std::__addressof(*__cur), __x);
 8003acc:	6978      	ldr	r0, [r7, #20]
 8003ace:	f000 f859 	bl	8003b84 <_ZSt11__addressofImEPT_RS0_>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f89b 	bl	8003c12 <_ZSt10_ConstructImJRKmEEvPT_DpOT0_>
	  for (; __n > 0; --__n, (void) ++__cur)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1ee      	bne.n	8003acc <_ZSt18__do_uninit_fill_nIPmjmET_S1_T0_RKT1_+0x12>
	  return __cur;
 8003aee:	697b      	ldr	r3, [r7, #20]
    }
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <_ZSt20uninitialized_fill_nIPmjmET_S1_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
      const bool __can_fill
 8003b04:	2301      	movs	r3, #1
 8003b06:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f8a2 	bl	8003c56 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPmjmEET_S3_T0_RKT1_>
 8003b12:	4603      	mov	r3, r0
    }
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <_ZNSt12_Vector_baseImSaImEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6839      	ldr	r1, [r7, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff fec9 	bl	80038d8 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <_ZSt4moveIRSaImEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <_ZNSt15__new_allocatorImE10deallocateEPmj>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4619      	mov	r1, r3
 8003b78:	68b8      	ldr	r0, [r7, #8]
 8003b7a:	f00a f89f 	bl	800dcbc <_ZdlPvj>
      }
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <_ZSt8_DestroyImEvPT_>:
    _Destroy(_Tp* __pointer)
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f867 	bl	8003c76 <_ZSt10destroy_atImEvPT_>
    }
 8003ba8:	bf00      	nop
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 8003bc2:	f7fe f8f9 	bl	8001db8 <_ZSt23__is_constant_evaluatedv>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d016      	beq.n	8003bfa <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x4a>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	0099      	lsls	r1, r3, #2
 8003bd2:	0f9b      	lsrs	r3, r3, #30
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d000      	beq.n	8003bda <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x2a>
 8003bd8:	2201      	movs	r2, #1
 8003bda:	460b      	mov	r3, r1
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	4613      	mov	r3, r2
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x3e>
	      std::__throw_bad_array_new_length();
 8003bea:	f00a f87f 	bl	800dcec <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f00a f865 	bl	800dcc0 <_Znwj>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	e007      	b.n	8003c0a <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x5a>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	4619      	mov	r1, r3
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f87e 	bl	8003d02 <_ZNSt15__new_allocatorImE8allocateEjPKv>
 8003c06:	4603      	mov	r3, r0
 8003c08:	bf00      	nop
      { return __a.allocate(__n); }
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <_ZSt10_ConstructImJRKmEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8003c12:	b590      	push	{r4, r7, lr}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
      if (std::__is_constant_evaluated())
 8003c1c:	f7fe f8cc 	bl	8001db8 <_ZSt23__is_constant_evaluatedv>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <_ZSt10_ConstructImJRKmEEvPT_DpOT0_+0x26>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8003c26:	6838      	ldr	r0, [r7, #0]
 8003c28:	f000 f82f 	bl	8003c8a <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f835 	bl	8003ca0 <_ZSt12construct_atImJRKmEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
 8003c36:	e00b      	b.n	8003c50 <_ZSt10_ConstructImJRKmEEvPT_DpOT0_+0x3e>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	2004      	movs	r0, #4
 8003c3e:	f7fe fa03 	bl	8002048 <_ZnwjPv>
 8003c42:	4604      	mov	r4, r0
 8003c44:	6838      	ldr	r0, [r7, #0]
 8003c46:	f000 f820 	bl	8003c8a <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6023      	str	r3, [r4, #0]
    }
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd90      	pop	{r4, r7, pc}

08003c56 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPmjmEET_S3_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
        { return std::fill_n(__first, __n, __x); }
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f830 	bl	8003ccc <_ZSt6fill_nIPmjmET_S1_T0_RKT1_>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_ZSt10destroy_atImEvPT_>:
    destroy_at(_Tp* __location)
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
    }
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <_ZSt12construct_atImJRKmEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4619      	mov	r1, r3
 8003cae:	2004      	movs	r0, #4
 8003cb0:	f7fe f9ca 	bl	8002048 <_ZnwjPv>
 8003cb4:	4604      	mov	r4, r0
 8003cb6:	6838      	ldr	r0, [r7, #0]
 8003cb8:	f7ff ffe7 	bl	8003c8a <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6023      	str	r3, [r4, #0]
 8003cc2:	4623      	mov	r3, r4
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd90      	pop	{r4, r7, pc}

08003ccc <_ZSt6fill_nIPmjmET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8003ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, const _Tp&>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8003cd8:	68fc      	ldr	r4, [r7, #12]
 8003cda:	68b8      	ldr	r0, [r7, #8]
 8003cdc:	f7fe f9c0 	bl	8002060 <_ZSt17__size_to_integerj>
 8003ce0:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8003ce2:	f107 030c 	add.w	r3, r7, #12
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 f835 	bl	8003d56 <_ZSt19__iterator_categoryIPmENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8003cec:	4633      	mov	r3, r6
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f000 f839 	bl	8003d6a <_ZSt10__fill_n_aIPmjmET_S1_T0_RKT1_St26random_access_iterator_tag>
 8003cf8:	4603      	mov	r3, r0
    }
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d02 <_ZNSt15__new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f848 	bl	8003da4 <_ZNKSt15__new_allocatorImE11_M_max_sizeEv>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	bf8c      	ite	hi
 8003d1c:	2301      	movhi	r3, #1
 8003d1e:	2300      	movls	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf14      	ite	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	2300      	moveq	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <_ZNSt15__new_allocatorImE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d36:	d301      	bcc.n	8003d3c <_ZNSt15__new_allocatorImE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003d38:	f009 ffd8 	bl	800dcec <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8003d3c:	f009 ffd3 	bl	800dce6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f009 ffbb 	bl	800dcc0 <_Znwj>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	bf00      	nop
      }
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <_ZSt19__iterator_categoryIPmENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <_ZSt10__fill_n_aIPmjmET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <_ZSt10__fill_n_aIPmjmET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	e00c      	b.n	8003d9c <_ZSt10__fill_n_aIPmjmET_S1_T0_RKT1_St26random_access_iterator_tag+0x32>
      std::__fill_a(__first, __first + __n, __value);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4413      	add	r3, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f814 	bl	8003dbc <_ZSt8__fill_aIPmmEvT_S1_RKT0_>
      return __first + __n;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4413      	add	r3, r2
    }
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <_ZNKSt15__new_allocatorImE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003dac:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003db0:	4618      	mov	r0, r3
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <_ZSt8__fill_aIPmmEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f804 	bl	8003dda <_ZSt9__fill_a1IPmmEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <_ZSt9__fill_a1IPmmEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8003dda:	b480      	push	{r7}
 8003ddc:	b087      	sub	sp, #28
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8003dec:	e005      	b.n	8003dfa <_ZSt9__fill_a1IPmmEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x20>
	*__first = __tmp;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	3304      	adds	r3, #4
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d1f5      	bne.n	8003dee <_ZSt9__fill_a1IPmmEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x14>
    }
 8003e02:	bf00      	nop
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <_Z41__static_initialization_and_destruction_0ii>:
    {
    }
  /* USER CODE END Error_Handler_Debug */
}
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d10d      	bne.n	8003e3c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d108      	bne.n	8003e3c <_Z41__static_initialization_and_destruction_0ii+0x2c>
Hardware_STM32_ADC g_adc1_handler;
 8003e2a:	480c      	ldr	r0, [pc, #48]	@ (8003e5c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003e2c:	f7fe f949 	bl	80020c2 <_ZN18Hardware_STM32_ADCC1Ev>
Hardware_STM32_Message g_message_handler;
 8003e30:	480b      	ldr	r0, [pc, #44]	@ (8003e60 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003e32:	f7fe fcc8 	bl	80027c6 <_ZN22Hardware_STM32_MessageC1Ev>
Algorithim_DC_Buck<Hardware_STM32_HRTIM_PWM, Hardware_STM32_ADC,Hardware_STM32_Relay>g_dc_buck_handler;
 8003e36:	480b      	ldr	r0, [pc, #44]	@ (8003e64 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003e38:	f7ff f9d9 	bl	80031ee <_ZN18Algorithim_DC_BuckI24Hardware_STM32_HRTIM_PWM18Hardware_STM32_ADC20Hardware_STM32_RelayEC1Ev>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d107      	bne.n	8003e52 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d102      	bne.n	8003e52 <_Z41__static_initialization_and_destruction_0ii+0x42>
Hardware_STM32_ADC g_adc1_handler;
 8003e4c:	4803      	ldr	r0, [pc, #12]	@ (8003e5c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003e4e:	f7fe fa1d 	bl	800228c <_ZN18Hardware_STM32_ADCD1Ev>
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000508 	.word	0x20000508
 8003e60:	20000524 	.word	0x20000524
 8003e64:	2000053c 	.word	0x2000053c

08003e68 <_GLOBAL__sub_I__ZN15stm32_hrtim_pwm15getTimerAOutputEv>:
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003e70:	2001      	movs	r0, #1
 8003e72:	f7ff ffcd 	bl	8003e10 <_Z41__static_initialization_and_destruction_0ii>
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <_GLOBAL__sub_D__ZN15stm32_hrtim_pwm15getTimerAOutputEv>:
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003e80:	2000      	movs	r0, #0
 8003e82:	f7ff ffc5 	bl	8003e10 <_Z41__static_initialization_and_destruction_0ii>
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003ecc <HAL_MspInit+0x44>)
 8003e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e92:	4a0e      	ldr	r2, [pc, #56]	@ (8003ecc <HAL_MspInit+0x44>)
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003ecc <HAL_MspInit+0x44>)
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	607b      	str	r3, [r7, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ea6:	4b09      	ldr	r3, [pc, #36]	@ (8003ecc <HAL_MspInit+0x44>)
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eaa:	4a08      	ldr	r2, [pc, #32]	@ (8003ecc <HAL_MspInit+0x44>)
 8003eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eb2:	4b06      	ldr	r3, [pc, #24]	@ (8003ecc <HAL_MspInit+0x44>)
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003ebe:	f005 fbf1 	bl	80096a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40021000 	.word	0x40021000

08003ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ed4:	bf00      	nop
 8003ed6:	e7fd      	b.n	8003ed4 <NMI_Handler+0x4>

08003ed8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003edc:	bf00      	nop
 8003ede:	e7fd      	b.n	8003edc <HardFault_Handler+0x4>

08003ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ee4:	bf00      	nop
 8003ee6:	e7fd      	b.n	8003ee4 <MemManage_Handler+0x4>

08003ee8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eec:	bf00      	nop
 8003eee:	e7fd      	b.n	8003eec <BusFault_Handler+0x4>

08003ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ef4:	bf00      	nop
 8003ef6:	e7fd      	b.n	8003ef4 <UsageFault_Handler+0x4>

08003ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f06:	b480      	push	{r7}
 8003f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f26:	f000 fb39 	bl	800459c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f2a:	bf00      	nop
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003f34:	4802      	ldr	r0, [pc, #8]	@ (8003f40 <DMA1_Channel1_IRQHandler+0x10>)
 8003f36:	f003 fbee 	bl	8007716 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20000698 	.word	0x20000698

08003f44 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */

  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003f48:	4802      	ldr	r0, [pc, #8]	@ (8003f54 <DMA1_Channel2_IRQHandler+0x10>)
 8003f4a:	f003 fbe4 	bl	8007716 <HAL_DMA_IRQHandler>

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	200006f8 	.word	0x200006f8

08003f58 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  SEGGER_SYSVIEW_RecordEnterISR();
 8003f5c:	f009 fce2 	bl	800d924 <SEGGER_SYSVIEW_RecordEnterISR>
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f60:	4803      	ldr	r0, [pc, #12]	@ (8003f70 <DMA1_Channel3_IRQHandler+0x18>)
 8003f62:	f003 fbd8 	bl	8007716 <HAL_DMA_IRQHandler>
  SEGGER_SYSVIEW_RecordExitISR();
 8003f66:	f009 fd1f 	bl	800d9a8 <SEGGER_SYSVIEW_RecordExitISR>
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000334 	.word	0x20000334

08003f74 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003f78:	4803      	ldr	r0, [pc, #12]	@ (8003f88 <ADC1_2_IRQHandler+0x14>)
 8003f7a:	f001 f845 	bl	8005008 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003f7e:	4803      	ldr	r0, [pc, #12]	@ (8003f8c <ADC1_2_IRQHandler+0x18>)
 8003f80:	f001 f842 	bl	8005008 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003f84:	bf00      	nop
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	200001f0 	.word	0x200001f0
 8003f8c:	2000025c 	.word	0x2000025c

08003f90 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f94:	4802      	ldr	r0, [pc, #8]	@ (8003fa0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003f96:	f006 fb68 	bl	800a66a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	200005b8 	.word	0x200005b8

08003fa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003fa8:	4802      	ldr	r0, [pc, #8]	@ (8003fb4 <USART1_IRQHandler+0x10>)
 8003faa:	f007 f8f5 	bl	800b198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000604 	.word	0x20000604

08003fb8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003fbc:	4802      	ldr	r0, [pc, #8]	@ (8003fc8 <ADC3_IRQHandler+0x10>)
 8003fbe:	f001 f823 	bl	8005008 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	200002c8 	.word	0x200002c8

08003fcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return 1;
 8003fd0:	2301      	movs	r3, #1
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <_kill>:

int _kill(int pid, int sig)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fe6:	f00b f8bd 	bl	800f164 <__errno>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2216      	movs	r2, #22
 8003fee:	601a      	str	r2, [r3, #0]
  return -1;
 8003ff0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <_exit>:

void _exit (int status)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004004:	f04f 31ff 	mov.w	r1, #4294967295
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff ffe7 	bl	8003fdc <_kill>
  while (1) {}    /* Make sure we hang here */
 800400e:	bf00      	nop
 8004010:	e7fd      	b.n	800400e <_exit+0x12>

08004012 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b086      	sub	sp, #24
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	e00a      	b.n	800403a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004024:	f3af 8000 	nop.w
 8004028:	4601      	mov	r1, r0
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	60ba      	str	r2, [r7, #8]
 8004030:	b2ca      	uxtb	r2, r1
 8004032:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3301      	adds	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	429a      	cmp	r2, r3
 8004040:	dbf0      	blt.n	8004024 <_read+0x12>
  }

  return len;
 8004042:	687b      	ldr	r3, [r7, #4]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	e009      	b.n	8004072 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	60ba      	str	r2, [r7, #8]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fa0a 	bl	8004480 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	3301      	adds	r3, #1
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	429a      	cmp	r2, r3
 8004078:	dbf1      	blt.n	800405e <_write+0x12>
  }
  return len;
 800407a:	687b      	ldr	r3, [r7, #4]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <_close>:

int _close(int file)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800408c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040ac:	605a      	str	r2, [r3, #4]
  return 0;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <_isatty>:

int _isatty(int file)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80040c4:	2301      	movs	r3, #1
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b085      	sub	sp, #20
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040f4:	4a14      	ldr	r2, [pc, #80]	@ (8004148 <_sbrk+0x5c>)
 80040f6:	4b15      	ldr	r3, [pc, #84]	@ (800414c <_sbrk+0x60>)
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004100:	4b13      	ldr	r3, [pc, #76]	@ (8004150 <_sbrk+0x64>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d102      	bne.n	800410e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004108:	4b11      	ldr	r3, [pc, #68]	@ (8004150 <_sbrk+0x64>)
 800410a:	4a12      	ldr	r2, [pc, #72]	@ (8004154 <_sbrk+0x68>)
 800410c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800410e:	4b10      	ldr	r3, [pc, #64]	@ (8004150 <_sbrk+0x64>)
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4413      	add	r3, r2
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	429a      	cmp	r2, r3
 800411a:	d207      	bcs.n	800412c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800411c:	f00b f822 	bl	800f164 <__errno>
 8004120:	4603      	mov	r3, r0
 8004122:	220c      	movs	r2, #12
 8004124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004126:	f04f 33ff 	mov.w	r3, #4294967295
 800412a:	e009      	b.n	8004140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800412c:	4b08      	ldr	r3, [pc, #32]	@ (8004150 <_sbrk+0x64>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004132:	4b07      	ldr	r3, [pc, #28]	@ (8004150 <_sbrk+0x64>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4413      	add	r3, r2
 800413a:	4a05      	ldr	r2, [pc, #20]	@ (8004150 <_sbrk+0x64>)
 800413c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800413e:	68fb      	ldr	r3, [r7, #12]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20020000 	.word	0x20020000
 800414c:	00000400 	.word	0x00000400
 8004150:	200005b4 	.word	0x200005b4
 8004154:	2001e340 	.word	0x2001e340

08004158 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800415c:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <SystemInit+0x20>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004162:	4a05      	ldr	r2, [pc, #20]	@ (8004178 <SystemInit+0x20>)
 8004164:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800416c:	bf00      	nop
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	e000ed00 	.word	0xe000ed00

0800417c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004182:	f107 0310 	add.w	r3, r7, #16
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	605a      	str	r2, [r3, #4]
 800418c:	609a      	str	r2, [r3, #8]
 800418e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004190:	1d3b      	adds	r3, r7, #4
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	605a      	str	r2, [r3, #4]
 8004198:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800419a:	4b20      	ldr	r3, [pc, #128]	@ (800421c <MX_TIM1_Init+0xa0>)
 800419c:	4a20      	ldr	r2, [pc, #128]	@ (8004220 <MX_TIM1_Init+0xa4>)
 800419e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80041a0:	4b1e      	ldr	r3, [pc, #120]	@ (800421c <MX_TIM1_Init+0xa0>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041a6:	4b1d      	ldr	r3, [pc, #116]	@ (800421c <MX_TIM1_Init+0xa0>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 80041ac:	4b1b      	ldr	r3, [pc, #108]	@ (800421c <MX_TIM1_Init+0xa0>)
 80041ae:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80041b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041b4:	4b19      	ldr	r3, [pc, #100]	@ (800421c <MX_TIM1_Init+0xa0>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80041ba:	4b18      	ldr	r3, [pc, #96]	@ (800421c <MX_TIM1_Init+0xa0>)
 80041bc:	2200      	movs	r2, #0
 80041be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041c0:	4b16      	ldr	r3, [pc, #88]	@ (800421c <MX_TIM1_Init+0xa0>)
 80041c2:	2280      	movs	r2, #128	@ 0x80
 80041c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80041c6:	4815      	ldr	r0, [pc, #84]	@ (800421c <MX_TIM1_Init+0xa0>)
 80041c8:	f006 f9f8 	bl	800a5bc <HAL_TIM_Base_Init>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80041d2:	f7fe fee1 	bl	8002f98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80041dc:	f107 0310 	add.w	r3, r7, #16
 80041e0:	4619      	mov	r1, r3
 80041e2:	480e      	ldr	r0, [pc, #56]	@ (800421c <MX_TIM1_Init+0xa0>)
 80041e4:	f006 fb90 	bl	800a908 <HAL_TIM_ConfigClockSource>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80041ee:	f7fe fed3 	bl	8002f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80041fe:	1d3b      	adds	r3, r7, #4
 8004200:	4619      	mov	r1, r3
 8004202:	4806      	ldr	r0, [pc, #24]	@ (800421c <MX_TIM1_Init+0xa0>)
 8004204:	f006 fe0e 	bl	800ae24 <HAL_TIMEx_MasterConfigSynchronization>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800420e:	f7fe fec3 	bl	8002f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004212:	bf00      	nop
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	200005b8 	.word	0x200005b8
 8004220:	40012c00 	.word	0x40012c00

08004224 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a0d      	ldr	r2, [pc, #52]	@ (8004268 <HAL_TIM_Base_MspInit+0x44>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d113      	bne.n	800425e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004236:	4b0d      	ldr	r3, [pc, #52]	@ (800426c <HAL_TIM_Base_MspInit+0x48>)
 8004238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800423a:	4a0c      	ldr	r2, [pc, #48]	@ (800426c <HAL_TIM_Base_MspInit+0x48>)
 800423c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004240:	6613      	str	r3, [r2, #96]	@ 0x60
 8004242:	4b0a      	ldr	r3, [pc, #40]	@ (800426c <HAL_TIM_Base_MspInit+0x48>)
 8004244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004246:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800424e:	2200      	movs	r2, #0
 8004250:	2100      	movs	r1, #0
 8004252:	2019      	movs	r0, #25
 8004254:	f003 f843 	bl	80072de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004258:	2019      	movs	r0, #25
 800425a:	f003 f85a 	bl	8007312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40012c00 	.word	0x40012c00
 800426c:	40021000 	.word	0x40021000

08004270 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004274:	4b22      	ldr	r3, [pc, #136]	@ (8004300 <MX_USART1_UART_Init+0x90>)
 8004276:	4a23      	ldr	r2, [pc, #140]	@ (8004304 <MX_USART1_UART_Init+0x94>)
 8004278:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800427a:	4b21      	ldr	r3, [pc, #132]	@ (8004300 <MX_USART1_UART_Init+0x90>)
 800427c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004280:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004282:	4b1f      	ldr	r3, [pc, #124]	@ (8004300 <MX_USART1_UART_Init+0x90>)
 8004284:	2200      	movs	r2, #0
 8004286:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004288:	4b1d      	ldr	r3, [pc, #116]	@ (8004300 <MX_USART1_UART_Init+0x90>)
 800428a:	2200      	movs	r2, #0
 800428c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800428e:	4b1c      	ldr	r3, [pc, #112]	@ (8004300 <MX_USART1_UART_Init+0x90>)
 8004290:	2200      	movs	r2, #0
 8004292:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004294:	4b1a      	ldr	r3, [pc, #104]	@ (8004300 <MX_USART1_UART_Init+0x90>)
 8004296:	220c      	movs	r2, #12
 8004298:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800429a:	4b19      	ldr	r3, [pc, #100]	@ (8004300 <MX_USART1_UART_Init+0x90>)
 800429c:	2200      	movs	r2, #0
 800429e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80042a0:	4b17      	ldr	r3, [pc, #92]	@ (8004300 <MX_USART1_UART_Init+0x90>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042a6:	4b16      	ldr	r3, [pc, #88]	@ (8004300 <MX_USART1_UART_Init+0x90>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80042ac:	4b14      	ldr	r3, [pc, #80]	@ (8004300 <MX_USART1_UART_Init+0x90>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042b2:	4b13      	ldr	r3, [pc, #76]	@ (8004300 <MX_USART1_UART_Init+0x90>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80042b8:	4811      	ldr	r0, [pc, #68]	@ (8004300 <MX_USART1_UART_Init+0x90>)
 80042ba:	f006 fe8f 	bl	800afdc <HAL_UART_Init>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80042c4:	f7fe fe68 	bl	8002f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042c8:	2100      	movs	r1, #0
 80042ca:	480d      	ldr	r0, [pc, #52]	@ (8004300 <MX_USART1_UART_Init+0x90>)
 80042cc:	f008 fa5a 	bl	800c784 <HAL_UARTEx_SetTxFifoThreshold>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80042d6:	f7fe fe5f 	bl	8002f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042da:	2100      	movs	r1, #0
 80042dc:	4808      	ldr	r0, [pc, #32]	@ (8004300 <MX_USART1_UART_Init+0x90>)
 80042de:	f008 fa8f 	bl	800c800 <HAL_UARTEx_SetRxFifoThreshold>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80042e8:	f7fe fe56 	bl	8002f98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80042ec:	4804      	ldr	r0, [pc, #16]	@ (8004300 <MX_USART1_UART_Init+0x90>)
 80042ee:	f008 fa10 	bl	800c712 <HAL_UARTEx_DisableFifoMode>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80042f8:	f7fe fe4e 	bl	8002f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042fc:	bf00      	nop
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20000604 	.word	0x20000604
 8004304:	40013800 	.word	0x40013800

08004308 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b09e      	sub	sp, #120	@ 0x78
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004310:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	609a      	str	r2, [r3, #8]
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004320:	f107 0310 	add.w	r3, r7, #16
 8004324:	2254      	movs	r2, #84	@ 0x54
 8004326:	2100      	movs	r1, #0
 8004328:	4618      	mov	r0, r3
 800432a:	f00a fe75 	bl	800f018 <memset>
  if(uartHandle->Instance==USART1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a4c      	ldr	r2, [pc, #304]	@ (8004464 <HAL_UART_MspInit+0x15c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	f040 8091 	bne.w	800445c <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800433a:	2301      	movs	r3, #1
 800433c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004342:	f107 0310 	add.w	r3, r7, #16
 8004346:	4618      	mov	r0, r3
 8004348:	f005 feea 	bl	800a120 <HAL_RCCEx_PeriphCLKConfig>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004352:	f7fe fe21 	bl	8002f98 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004356:	4b44      	ldr	r3, [pc, #272]	@ (8004468 <HAL_UART_MspInit+0x160>)
 8004358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800435a:	4a43      	ldr	r2, [pc, #268]	@ (8004468 <HAL_UART_MspInit+0x160>)
 800435c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004360:	6613      	str	r3, [r2, #96]	@ 0x60
 8004362:	4b41      	ldr	r3, [pc, #260]	@ (8004468 <HAL_UART_MspInit+0x160>)
 8004364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004366:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800436e:	4b3e      	ldr	r3, [pc, #248]	@ (8004468 <HAL_UART_MspInit+0x160>)
 8004370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004372:	4a3d      	ldr	r2, [pc, #244]	@ (8004468 <HAL_UART_MspInit+0x160>)
 8004374:	f043 0302 	orr.w	r3, r3, #2
 8004378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800437a:	4b3b      	ldr	r3, [pc, #236]	@ (8004468 <HAL_UART_MspInit+0x160>)
 800437c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004386:	23c0      	movs	r3, #192	@ 0xc0
 8004388:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438a:	2302      	movs	r3, #2
 800438c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438e:	2300      	movs	r3, #0
 8004390:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004392:	2300      	movs	r3, #0
 8004394:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004396:	2307      	movs	r3, #7
 8004398:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800439a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800439e:	4619      	mov	r1, r3
 80043a0:	4832      	ldr	r0, [pc, #200]	@ (800446c <HAL_UART_MspInit+0x164>)
 80043a2:	f003 fb07 	bl	80079b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80043a6:	4b32      	ldr	r3, [pc, #200]	@ (8004470 <HAL_UART_MspInit+0x168>)
 80043a8:	4a32      	ldr	r2, [pc, #200]	@ (8004474 <HAL_UART_MspInit+0x16c>)
 80043aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80043ac:	4b30      	ldr	r3, [pc, #192]	@ (8004470 <HAL_UART_MspInit+0x168>)
 80043ae:	2218      	movs	r2, #24
 80043b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004470 <HAL_UART_MspInit+0x168>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004470 <HAL_UART_MspInit+0x168>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043be:	4b2c      	ldr	r3, [pc, #176]	@ (8004470 <HAL_UART_MspInit+0x168>)
 80043c0:	2280      	movs	r2, #128	@ 0x80
 80043c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004470 <HAL_UART_MspInit+0x168>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043ca:	4b29      	ldr	r3, [pc, #164]	@ (8004470 <HAL_UART_MspInit+0x168>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80043d0:	4b27      	ldr	r3, [pc, #156]	@ (8004470 <HAL_UART_MspInit+0x168>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043d6:	4b26      	ldr	r3, [pc, #152]	@ (8004470 <HAL_UART_MspInit+0x168>)
 80043d8:	2200      	movs	r2, #0
 80043da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80043dc:	4824      	ldr	r0, [pc, #144]	@ (8004470 <HAL_UART_MspInit+0x168>)
 80043de:	f002 ffb7 	bl	8007350 <HAL_DMA_Init>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80043e8:	f7fe fdd6 	bl	8002f98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a20      	ldr	r2, [pc, #128]	@ (8004470 <HAL_UART_MspInit+0x168>)
 80043f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80043f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004470 <HAL_UART_MspInit+0x168>)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80043fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004478 <HAL_UART_MspInit+0x170>)
 80043fc:	4a1f      	ldr	r2, [pc, #124]	@ (800447c <HAL_UART_MspInit+0x174>)
 80043fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004400:	4b1d      	ldr	r3, [pc, #116]	@ (8004478 <HAL_UART_MspInit+0x170>)
 8004402:	2219      	movs	r2, #25
 8004404:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004406:	4b1c      	ldr	r3, [pc, #112]	@ (8004478 <HAL_UART_MspInit+0x170>)
 8004408:	2210      	movs	r2, #16
 800440a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800440c:	4b1a      	ldr	r3, [pc, #104]	@ (8004478 <HAL_UART_MspInit+0x170>)
 800440e:	2200      	movs	r2, #0
 8004410:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004412:	4b19      	ldr	r3, [pc, #100]	@ (8004478 <HAL_UART_MspInit+0x170>)
 8004414:	2280      	movs	r2, #128	@ 0x80
 8004416:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004418:	4b17      	ldr	r3, [pc, #92]	@ (8004478 <HAL_UART_MspInit+0x170>)
 800441a:	2200      	movs	r2, #0
 800441c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800441e:	4b16      	ldr	r3, [pc, #88]	@ (8004478 <HAL_UART_MspInit+0x170>)
 8004420:	2200      	movs	r2, #0
 8004422:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004424:	4b14      	ldr	r3, [pc, #80]	@ (8004478 <HAL_UART_MspInit+0x170>)
 8004426:	2200      	movs	r2, #0
 8004428:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800442a:	4b13      	ldr	r3, [pc, #76]	@ (8004478 <HAL_UART_MspInit+0x170>)
 800442c:	2200      	movs	r2, #0
 800442e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004430:	4811      	ldr	r0, [pc, #68]	@ (8004478 <HAL_UART_MspInit+0x170>)
 8004432:	f002 ff8d 	bl	8007350 <HAL_DMA_Init>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 800443c:	f7fe fdac 	bl	8002f98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a0d      	ldr	r2, [pc, #52]	@ (8004478 <HAL_UART_MspInit+0x170>)
 8004444:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004446:	4a0c      	ldr	r2, [pc, #48]	@ (8004478 <HAL_UART_MspInit+0x170>)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800444c:	2200      	movs	r2, #0
 800444e:	2100      	movs	r1, #0
 8004450:	2025      	movs	r0, #37	@ 0x25
 8004452:	f002 ff44 	bl	80072de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004456:	2025      	movs	r0, #37	@ 0x25
 8004458:	f002 ff5b 	bl	8007312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800445c:	bf00      	nop
 800445e:	3778      	adds	r7, #120	@ 0x78
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40013800 	.word	0x40013800
 8004468:	40021000 	.word	0x40021000
 800446c:	48000400 	.word	0x48000400
 8004470:	20000698 	.word	0x20000698
 8004474:	40020008 	.word	0x40020008
 8004478:	200006f8 	.word	0x200006f8
 800447c:	4002001c 	.word	0x4002001c

08004480 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8004488:	1d39      	adds	r1, r7, #4
 800448a:	f04f 33ff 	mov.w	r3, #4294967295
 800448e:	2201      	movs	r2, #1
 8004490:	4803      	ldr	r0, [pc, #12]	@ (80044a0 <__io_putchar+0x20>)
 8004492:	f006 fdf3 	bl	800b07c <HAL_UART_Transmit>
	return ch;
 8004496:	687b      	ldr	r3, [r7, #4]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000604 	.word	0x20000604

080044a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80044a4:	480d      	ldr	r0, [pc, #52]	@ (80044dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80044a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80044a8:	f7ff fe56 	bl	8004158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044ac:	480c      	ldr	r0, [pc, #48]	@ (80044e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80044ae:	490d      	ldr	r1, [pc, #52]	@ (80044e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80044b0:	4a0d      	ldr	r2, [pc, #52]	@ (80044e8 <LoopForever+0xe>)
  movs r3, #0
 80044b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80044b4:	e002      	b.n	80044bc <LoopCopyDataInit>

080044b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044ba:	3304      	adds	r3, #4

080044bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044c0:	d3f9      	bcc.n	80044b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044c2:	4a0a      	ldr	r2, [pc, #40]	@ (80044ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80044c4:	4c0a      	ldr	r4, [pc, #40]	@ (80044f0 <LoopForever+0x16>)
  movs r3, #0
 80044c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044c8:	e001      	b.n	80044ce <LoopFillZerobss>

080044ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044cc:	3204      	adds	r2, #4

080044ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044d0:	d3fb      	bcc.n	80044ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044d2:	f00a fe4d 	bl	800f170 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80044d6:	f7fe fc8f 	bl	8002df8 <main>

080044da <LoopForever>:

LoopForever:
    b LoopForever
 80044da:	e7fe      	b.n	80044da <LoopForever>
  ldr   r0, =_estack
 80044dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80044e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044e4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80044e8:	080133b4 	.word	0x080133b4
  ldr r2, =_sbss
 80044ec:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80044f0:	2001e340 	.word	0x2001e340

080044f4 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80044f4:	e7fe      	b.n	80044f4 <ADC4_IRQHandler>

080044f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004500:	2003      	movs	r0, #3
 8004502:	f002 fee1 	bl	80072c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004506:	200f      	movs	r0, #15
 8004508:	f000 f80e 	bl	8004528 <HAL_InitTick>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	71fb      	strb	r3, [r7, #7]
 8004516:	e001      	b.n	800451c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004518:	f7ff fcb6 	bl	8003e88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800451c:	79fb      	ldrb	r3, [r7, #7]

}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004534:	4b16      	ldr	r3, [pc, #88]	@ (8004590 <HAL_InitTick+0x68>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d022      	beq.n	8004582 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800453c:	4b15      	ldr	r3, [pc, #84]	@ (8004594 <HAL_InitTick+0x6c>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4b13      	ldr	r3, [pc, #76]	@ (8004590 <HAL_InitTick+0x68>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004548:	fbb1 f3f3 	udiv	r3, r1, r3
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	4618      	mov	r0, r3
 8004552:	f002 fef0 	bl	8007336 <HAL_SYSTICK_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10f      	bne.n	800457c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b0f      	cmp	r3, #15
 8004560:	d809      	bhi.n	8004576 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004562:	2200      	movs	r2, #0
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	f04f 30ff 	mov.w	r0, #4294967295
 800456a:	f002 feb8 	bl	80072de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800456e:	4a0a      	ldr	r2, [pc, #40]	@ (8004598 <HAL_InitTick+0x70>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	e007      	b.n	8004586 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
 800457a:	e004      	b.n	8004586 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
 8004580:	e001      	b.n	8004586 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20000008 	.word	0x20000008
 8004594:	20000000 	.word	0x20000000
 8004598:	20000004 	.word	0x20000004

0800459c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045a0:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <HAL_IncTick+0x1c>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <HAL_IncTick+0x20>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4413      	add	r3, r2
 80045aa:	4a03      	ldr	r2, [pc, #12]	@ (80045b8 <HAL_IncTick+0x1c>)
 80045ac:	6013      	str	r3, [r2, #0]
}
 80045ae:	bf00      	nop
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	20000758 	.word	0x20000758
 80045bc:	20000008 	.word	0x20000008

080045c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return uwTick;
 80045c4:	4b03      	ldr	r3, [pc, #12]	@ (80045d4 <HAL_GetTick+0x14>)
 80045c6:	681b      	ldr	r3, [r3, #0]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20000758 	.word	0x20000758

080045d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045e0:	f7ff ffee 	bl	80045c0 <HAL_GetTick>
 80045e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f0:	d004      	beq.n	80045fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80045f2:	4b09      	ldr	r3, [pc, #36]	@ (8004618 <HAL_Delay+0x40>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4413      	add	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045fc:	bf00      	nop
 80045fe:	f7ff ffdf 	bl	80045c0 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	429a      	cmp	r2, r3
 800460c:	d8f7      	bhi.n	80045fe <HAL_Delay+0x26>
  {
  }
}
 800460e:	bf00      	nop
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20000008 	.word	0x20000008

0800461c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	609a      	str	r2, [r3, #8]
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	609a      	str	r2, [r3, #8]
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3360      	adds	r3, #96	@ 0x60
 8004696:	461a      	mov	r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b08      	ldr	r3, [pc, #32]	@ (80046c8 <LL_ADC_SetOffset+0x44>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80046bc:	bf00      	nop
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	03fff000 	.word	0x03fff000

080046cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3360      	adds	r3, #96	@ 0x60
 80046da:	461a      	mov	r2, r3
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3360      	adds	r3, #96	@ 0x60
 8004708:	461a      	mov	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	431a      	orrs	r2, r3
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800472e:	b480      	push	{r7}
 8004730:	b087      	sub	sp, #28
 8004732:	af00      	add	r7, sp, #0
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3360      	adds	r3, #96	@ 0x60
 800473e:	461a      	mov	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	431a      	orrs	r2, r3
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004758:	bf00      	nop
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3360      	adds	r3, #96	@ 0x60
 8004774:	461a      	mov	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	431a      	orrs	r2, r3
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	615a      	str	r2, [r3, #20]
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b087      	sub	sp, #28
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3330      	adds	r3, #48	@ 0x30
 80047f6:	461a      	mov	r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	0a1b      	lsrs	r3, r3, #8
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	f003 030c 	and.w	r3, r3, #12
 8004802:	4413      	add	r3, r2
 8004804:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	211f      	movs	r1, #31
 8004812:	fa01 f303 	lsl.w	r3, r1, r3
 8004816:	43db      	mvns	r3, r3
 8004818:	401a      	ands	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	0e9b      	lsrs	r3, r3, #26
 800481e:	f003 011f 	and.w	r1, r3, #31
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	fa01 f303 	lsl.w	r3, r1, r3
 800482c:	431a      	orrs	r2, r3
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800484a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3314      	adds	r3, #20
 8004874:	461a      	mov	r2, r3
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	0e5b      	lsrs	r3, r3, #25
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	4413      	add	r3, r2
 8004882:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	0d1b      	lsrs	r3, r3, #20
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2107      	movs	r1, #7
 8004892:	fa01 f303 	lsl.w	r3, r1, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	401a      	ands	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	0d1b      	lsrs	r3, r3, #20
 800489e:	f003 031f 	and.w	r3, r3, #31
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	fa01 f303 	lsl.w	r3, r1, r3
 80048a8:	431a      	orrs	r2, r3
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d4:	43db      	mvns	r3, r3
 80048d6:	401a      	ands	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f003 0318 	and.w	r3, r3, #24
 80048de:	4908      	ldr	r1, [pc, #32]	@ (8004900 <LL_ADC_SetChannelSingleDiff+0x44>)
 80048e0:	40d9      	lsrs	r1, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	400b      	ands	r3, r1
 80048e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ea:	431a      	orrs	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80048f2:	bf00      	nop
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	0007ffff 	.word	0x0007ffff

08004904 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 031f 	and.w	r3, r3, #31
}
 8004914:	4618      	mov	r0, r3
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800494c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6093      	str	r3, [r2, #8]
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004970:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004974:	d101      	bne.n	800497a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004998:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800499c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049c4:	d101      	bne.n	80049ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80049ec:	f043 0201 	orr.w	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a14:	f043 0202 	orr.w	r2, r3, #2
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <LL_ADC_IsEnabled+0x18>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <LL_ADC_IsEnabled+0x1a>
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d101      	bne.n	8004a66 <LL_ADC_IsDisableOngoing+0x18>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <LL_ADC_IsDisableOngoing+0x1a>
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a88:	f043 0204 	orr.w	r2, r3, #4
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d101      	bne.n	8004ab4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d101      	bne.n	8004ada <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ae8:	b590      	push	{r4, r7, lr}
 8004aea:	b089      	sub	sp, #36	@ 0x24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e1a9      	b.n	8004e56 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d109      	bne.n	8004b24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7fc fcd3 	bl	80014bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff ff19 	bl	8004960 <LL_ADC_IsDeepPowerDownEnabled>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d004      	beq.n	8004b3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff feff 	bl	800493c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff ff34 	bl	80049b0 <LL_ADC_IsInternalRegulatorEnabled>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d115      	bne.n	8004b7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff ff18 	bl	8004988 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b58:	4b9c      	ldr	r3, [pc, #624]	@ (8004dcc <HAL_ADC_Init+0x2e4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	099b      	lsrs	r3, r3, #6
 8004b5e:	4a9c      	ldr	r2, [pc, #624]	@ (8004dd0 <HAL_ADC_Init+0x2e8>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	099b      	lsrs	r3, r3, #6
 8004b66:	3301      	adds	r3, #1
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004b6c:	e002      	b.n	8004b74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f9      	bne.n	8004b6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff ff16 	bl	80049b0 <LL_ADC_IsInternalRegulatorEnabled>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10d      	bne.n	8004ba6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b8e:	f043 0210 	orr.w	r2, r3, #16
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b9a:	f043 0201 	orr.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff ff76 	bl	8004a9c <LL_ADC_REG_IsConversionOngoing>
 8004bb0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f040 8142 	bne.w	8004e44 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f040 813e 	bne.w	8004e44 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bcc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004bd0:	f043 0202 	orr.w	r2, r3, #2
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7ff ff23 	bl	8004a28 <LL_ADC_IsEnabled>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d141      	bne.n	8004c6c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bf0:	d004      	beq.n	8004bfc <HAL_ADC_Init+0x114>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a77      	ldr	r2, [pc, #476]	@ (8004dd4 <HAL_ADC_Init+0x2ec>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d10f      	bne.n	8004c1c <HAL_ADC_Init+0x134>
 8004bfc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c00:	f7ff ff12 	bl	8004a28 <LL_ADC_IsEnabled>
 8004c04:	4604      	mov	r4, r0
 8004c06:	4873      	ldr	r0, [pc, #460]	@ (8004dd4 <HAL_ADC_Init+0x2ec>)
 8004c08:	f7ff ff0e 	bl	8004a28 <LL_ADC_IsEnabled>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	4323      	orrs	r3, r4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	bf0c      	ite	eq
 8004c14:	2301      	moveq	r3, #1
 8004c16:	2300      	movne	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	e012      	b.n	8004c42 <HAL_ADC_Init+0x15a>
 8004c1c:	486e      	ldr	r0, [pc, #440]	@ (8004dd8 <HAL_ADC_Init+0x2f0>)
 8004c1e:	f7ff ff03 	bl	8004a28 <LL_ADC_IsEnabled>
 8004c22:	4604      	mov	r4, r0
 8004c24:	486d      	ldr	r0, [pc, #436]	@ (8004ddc <HAL_ADC_Init+0x2f4>)
 8004c26:	f7ff feff 	bl	8004a28 <LL_ADC_IsEnabled>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	431c      	orrs	r4, r3
 8004c2e:	486c      	ldr	r0, [pc, #432]	@ (8004de0 <HAL_ADC_Init+0x2f8>)
 8004c30:	f7ff fefa 	bl	8004a28 <LL_ADC_IsEnabled>
 8004c34:	4603      	mov	r3, r0
 8004c36:	4323      	orrs	r3, r4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bf0c      	ite	eq
 8004c3c:	2301      	moveq	r3, #1
 8004c3e:	2300      	movne	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d012      	beq.n	8004c6c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c4e:	d004      	beq.n	8004c5a <HAL_ADC_Init+0x172>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a5f      	ldr	r2, [pc, #380]	@ (8004dd4 <HAL_ADC_Init+0x2ec>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d101      	bne.n	8004c5e <HAL_ADC_Init+0x176>
 8004c5a:	4a62      	ldr	r2, [pc, #392]	@ (8004de4 <HAL_ADC_Init+0x2fc>)
 8004c5c:	e000      	b.n	8004c60 <HAL_ADC_Init+0x178>
 8004c5e:	4a62      	ldr	r2, [pc, #392]	@ (8004de8 <HAL_ADC_Init+0x300>)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	4619      	mov	r1, r3
 8004c66:	4610      	mov	r0, r2
 8004c68:	f7ff fcd8 	bl	800461c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	7f5b      	ldrb	r3, [r3, #29]
 8004c70:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c76:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004c7c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004c82:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c8a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d106      	bne.n	8004ca8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	045b      	lsls	r3, r3, #17
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d009      	beq.n	8004cc4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	4b48      	ldr	r3, [pc, #288]	@ (8004dec <HAL_ADC_Init+0x304>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6812      	ldr	r2, [r2, #0]
 8004cd2:	69b9      	ldr	r1, [r7, #24]
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff fee5 	bl	8004ac2 <LL_ADC_INJ_IsConversionOngoing>
 8004cf8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d17f      	bne.n	8004e00 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d17c      	bne.n	8004e00 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d0a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d12:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d14:	4313      	orrs	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d22:	f023 0302 	bic.w	r3, r3, #2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	69b9      	ldr	r1, [r7, #24]
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d017      	beq.n	8004d68 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004d46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004d50:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004d54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6911      	ldr	r1, [r2, #16]
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6812      	ldr	r2, [r2, #0]
 8004d60:	430b      	orrs	r3, r1
 8004d62:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004d66:	e013      	b.n	8004d90 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004d76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004d88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d8c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d12a      	bne.n	8004df0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004da4:	f023 0304 	bic.w	r3, r3, #4
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004db0:	4311      	orrs	r1, r2
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004db6:	4311      	orrs	r1, r2
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0201 	orr.w	r2, r2, #1
 8004dc8:	611a      	str	r2, [r3, #16]
 8004dca:	e019      	b.n	8004e00 <HAL_ADC_Init+0x318>
 8004dcc:	20000000 	.word	0x20000000
 8004dd0:	053e2d63 	.word	0x053e2d63
 8004dd4:	50000100 	.word	0x50000100
 8004dd8:	50000400 	.word	0x50000400
 8004ddc:	50000500 	.word	0x50000500
 8004de0:	50000600 	.word	0x50000600
 8004de4:	50000300 	.word	0x50000300
 8004de8:	50000700 	.word	0x50000700
 8004dec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0201 	bic.w	r2, r2, #1
 8004dfe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d10c      	bne.n	8004e22 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0e:	f023 010f 	bic.w	r1, r3, #15
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	1e5a      	subs	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e20:	e007      	b.n	8004e32 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 020f 	bic.w	r2, r2, #15
 8004e30:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e36:	f023 0303 	bic.w	r3, r3, #3
 8004e3a:	f043 0201 	orr.w	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e42:	e007      	b.n	8004e54 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e48:	f043 0210 	orr.w	r2, r3, #16
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e54:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3724      	adds	r7, #36	@ 0x24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd90      	pop	{r4, r7, pc}
 8004e5e:	bf00      	nop

08004e60 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e74:	d004      	beq.n	8004e80 <HAL_ADC_Start_DMA+0x20>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a5a      	ldr	r2, [pc, #360]	@ (8004fe4 <HAL_ADC_Start_DMA+0x184>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d101      	bne.n	8004e84 <HAL_ADC_Start_DMA+0x24>
 8004e80:	4b59      	ldr	r3, [pc, #356]	@ (8004fe8 <HAL_ADC_Start_DMA+0x188>)
 8004e82:	e000      	b.n	8004e86 <HAL_ADC_Start_DMA+0x26>
 8004e84:	4b59      	ldr	r3, [pc, #356]	@ (8004fec <HAL_ADC_Start_DMA+0x18c>)
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff fd3c 	bl	8004904 <LL_ADC_GetMultimode>
 8004e8c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fe02 	bl	8004a9c <LL_ADC_REG_IsConversionOngoing>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f040 809b 	bne.w	8004fd6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_ADC_Start_DMA+0x4e>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e096      	b.n	8004fdc <HAL_ADC_Start_DMA+0x17c>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a4d      	ldr	r2, [pc, #308]	@ (8004ff0 <HAL_ADC_Start_DMA+0x190>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d008      	beq.n	8004ed2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	2b05      	cmp	r3, #5
 8004eca:	d002      	beq.n	8004ed2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	2b09      	cmp	r3, #9
 8004ed0:	d17a      	bne.n	8004fc8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 ff56 	bl	8005d84 <ADC_Enable>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d16d      	bne.n	8004fbe <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004eea:	f023 0301 	bic.w	r3, r3, #1
 8004eee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a3a      	ldr	r2, [pc, #232]	@ (8004fe4 <HAL_ADC_Start_DMA+0x184>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d009      	beq.n	8004f14 <HAL_ADC_Start_DMA+0xb4>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a3b      	ldr	r2, [pc, #236]	@ (8004ff4 <HAL_ADC_Start_DMA+0x194>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d002      	beq.n	8004f10 <HAL_ADC_Start_DMA+0xb0>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	e003      	b.n	8004f18 <HAL_ADC_Start_DMA+0xb8>
 8004f10:	4b39      	ldr	r3, [pc, #228]	@ (8004ff8 <HAL_ADC_Start_DMA+0x198>)
 8004f12:	e001      	b.n	8004f18 <HAL_ADC_Start_DMA+0xb8>
 8004f14:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d002      	beq.n	8004f26 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d105      	bne.n	8004f32 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d006      	beq.n	8004f4c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f42:	f023 0206 	bic.w	r2, r3, #6
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f4a:	e002      	b.n	8004f52 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f56:	4a29      	ldr	r2, [pc, #164]	@ (8004ffc <HAL_ADC_Start_DMA+0x19c>)
 8004f58:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5e:	4a28      	ldr	r2, [pc, #160]	@ (8005000 <HAL_ADC_Start_DMA+0x1a0>)
 8004f60:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f66:	4a27      	ldr	r2, [pc, #156]	@ (8005004 <HAL_ADC_Start_DMA+0x1a4>)
 8004f68:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	221c      	movs	r2, #28
 8004f70:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0210 	orr.w	r2, r2, #16
 8004f88:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0201 	orr.w	r2, r2, #1
 8004f98:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3340      	adds	r3, #64	@ 0x40
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f002 fa79 	bl	80074a0 <HAL_DMA_Start_IT>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff fd5c 	bl	8004a74 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004fbc:	e00d      	b.n	8004fda <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004fc6:	e008      	b.n	8004fda <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004fd4:	e001      	b.n	8004fda <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	50000100 	.word	0x50000100
 8004fe8:	50000300 	.word	0x50000300
 8004fec:	50000700 	.word	0x50000700
 8004ff0:	50000600 	.word	0x50000600
 8004ff4:	50000500 	.word	0x50000500
 8004ff8:	50000400 	.word	0x50000400
 8004ffc:	08005f6f 	.word	0x08005f6f
 8005000:	08006047 	.word	0x08006047
 8005004:	08006063 	.word	0x08006063

08005008 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08a      	sub	sp, #40	@ 0x28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005010:	2300      	movs	r3, #0
 8005012:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800502c:	d004      	beq.n	8005038 <HAL_ADC_IRQHandler+0x30>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a8e      	ldr	r2, [pc, #568]	@ (800526c <HAL_ADC_IRQHandler+0x264>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d101      	bne.n	800503c <HAL_ADC_IRQHandler+0x34>
 8005038:	4b8d      	ldr	r3, [pc, #564]	@ (8005270 <HAL_ADC_IRQHandler+0x268>)
 800503a:	e000      	b.n	800503e <HAL_ADC_IRQHandler+0x36>
 800503c:	4b8d      	ldr	r3, [pc, #564]	@ (8005274 <HAL_ADC_IRQHandler+0x26c>)
 800503e:	4618      	mov	r0, r3
 8005040:	f7ff fc60 	bl	8004904 <LL_ADC_GetMultimode>
 8005044:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d017      	beq.n	8005080 <HAL_ADC_IRQHandler+0x78>
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d012      	beq.n	8005080 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	2b00      	cmp	r3, #0
 8005064:	d105      	bne.n	8005072 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f001 fa04 	bl	8006480 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2202      	movs	r2, #2
 800507e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d004      	beq.n	8005094 <HAL_ADC_IRQHandler+0x8c>
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 8094 	beq.w	80051c8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 808e 	beq.w	80051c8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d105      	bne.n	80050c4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff fb79 	bl	80047c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d072      	beq.n	80051ba <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a64      	ldr	r2, [pc, #400]	@ (800526c <HAL_ADC_IRQHandler+0x264>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d009      	beq.n	80050f2 <HAL_ADC_IRQHandler+0xea>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a65      	ldr	r2, [pc, #404]	@ (8005278 <HAL_ADC_IRQHandler+0x270>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d002      	beq.n	80050ee <HAL_ADC_IRQHandler+0xe6>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	e003      	b.n	80050f6 <HAL_ADC_IRQHandler+0xee>
 80050ee:	4b63      	ldr	r3, [pc, #396]	@ (800527c <HAL_ADC_IRQHandler+0x274>)
 80050f0:	e001      	b.n	80050f6 <HAL_ADC_IRQHandler+0xee>
 80050f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6812      	ldr	r2, [r2, #0]
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d008      	beq.n	8005110 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2b05      	cmp	r3, #5
 8005108:	d002      	beq.n	8005110 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b09      	cmp	r3, #9
 800510e:	d104      	bne.n	800511a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	623b      	str	r3, [r7, #32]
 8005118:	e014      	b.n	8005144 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a53      	ldr	r2, [pc, #332]	@ (800526c <HAL_ADC_IRQHandler+0x264>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d009      	beq.n	8005138 <HAL_ADC_IRQHandler+0x130>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a53      	ldr	r2, [pc, #332]	@ (8005278 <HAL_ADC_IRQHandler+0x270>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d002      	beq.n	8005134 <HAL_ADC_IRQHandler+0x12c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	e003      	b.n	800513c <HAL_ADC_IRQHandler+0x134>
 8005134:	4b51      	ldr	r3, [pc, #324]	@ (800527c <HAL_ADC_IRQHandler+0x274>)
 8005136:	e001      	b.n	800513c <HAL_ADC_IRQHandler+0x134>
 8005138:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800513c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d135      	bne.n	80051ba <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b08      	cmp	r3, #8
 800515a:	d12e      	bne.n	80051ba <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff fc9b 	bl	8004a9c <LL_ADC_REG_IsConversionOngoing>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d11a      	bne.n	80051a2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 020c 	bic.w	r2, r2, #12
 800517a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005180:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800518c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d112      	bne.n	80051ba <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005198:	f043 0201 	orr.w	r2, r3, #1
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80051a0:	e00b      	b.n	80051ba <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a6:	f043 0210 	orr.w	r2, r3, #16
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b2:	f043 0201 	orr.w	r2, r3, #1
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f007 fc4c 	bl	800ca58 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	220c      	movs	r2, #12
 80051c6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d004      	beq.n	80051dc <HAL_ADC_IRQHandler+0x1d4>
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	f003 0320 	and.w	r3, r3, #32
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10b      	bne.n	80051f4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 80b3 	beq.w	800534e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 80ad 	beq.w	800534e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d105      	bne.n	800520c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005204:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff fb14 	bl	800483e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005216:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff facf 	bl	80047c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005222:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a10      	ldr	r2, [pc, #64]	@ (800526c <HAL_ADC_IRQHandler+0x264>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d009      	beq.n	8005242 <HAL_ADC_IRQHandler+0x23a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a11      	ldr	r2, [pc, #68]	@ (8005278 <HAL_ADC_IRQHandler+0x270>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d002      	beq.n	800523e <HAL_ADC_IRQHandler+0x236>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	e003      	b.n	8005246 <HAL_ADC_IRQHandler+0x23e>
 800523e:	4b0f      	ldr	r3, [pc, #60]	@ (800527c <HAL_ADC_IRQHandler+0x274>)
 8005240:	e001      	b.n	8005246 <HAL_ADC_IRQHandler+0x23e>
 8005242:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6812      	ldr	r2, [r2, #0]
 800524a:	4293      	cmp	r3, r2
 800524c:	d008      	beq.n	8005260 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b06      	cmp	r3, #6
 8005258:	d002      	beq.n	8005260 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b07      	cmp	r3, #7
 800525e:	d10f      	bne.n	8005280 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	623b      	str	r3, [r7, #32]
 8005268:	e01f      	b.n	80052aa <HAL_ADC_IRQHandler+0x2a2>
 800526a:	bf00      	nop
 800526c:	50000100 	.word	0x50000100
 8005270:	50000300 	.word	0x50000300
 8005274:	50000700 	.word	0x50000700
 8005278:	50000500 	.word	0x50000500
 800527c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a8b      	ldr	r2, [pc, #556]	@ (80054b4 <HAL_ADC_IRQHandler+0x4ac>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d009      	beq.n	800529e <HAL_ADC_IRQHandler+0x296>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a8a      	ldr	r2, [pc, #552]	@ (80054b8 <HAL_ADC_IRQHandler+0x4b0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d002      	beq.n	800529a <HAL_ADC_IRQHandler+0x292>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	e003      	b.n	80052a2 <HAL_ADC_IRQHandler+0x29a>
 800529a:	4b88      	ldr	r3, [pc, #544]	@ (80054bc <HAL_ADC_IRQHandler+0x4b4>)
 800529c:	e001      	b.n	80052a2 <HAL_ADC_IRQHandler+0x29a>
 800529e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80052a2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d047      	beq.n	8005340 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d007      	beq.n	80052ca <HAL_ADC_IRQHandler+0x2c2>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d03f      	beq.n	8005340 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d13a      	bne.n	8005340 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d4:	2b40      	cmp	r3, #64	@ 0x40
 80052d6:	d133      	bne.n	8005340 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d12e      	bne.n	8005340 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff fbeb 	bl	8004ac2 <LL_ADC_INJ_IsConversionOngoing>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d11a      	bne.n	8005328 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005300:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005306:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005316:	2b00      	cmp	r3, #0
 8005318:	d112      	bne.n	8005340 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800531e:	f043 0201 	orr.w	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005326:	e00b      	b.n	8005340 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800532c:	f043 0210 	orr.w	r2, r3, #16
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005338:	f043 0201 	orr.w	r2, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f007 fb97 	bl	800ca74 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2260      	movs	r2, #96	@ 0x60
 800534c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005354:	2b00      	cmp	r3, #0
 8005356:	d011      	beq.n	800537c <HAL_ADC_IRQHandler+0x374>
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00c      	beq.n	800537c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005366:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f8b4 	bl	80054dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2280      	movs	r2, #128	@ 0x80
 800537a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005382:	2b00      	cmp	r3, #0
 8005384:	d012      	beq.n	80053ac <HAL_ADC_IRQHandler+0x3a4>
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00d      	beq.n	80053ac <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005394:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f001 f85b 	bl	8006458 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d012      	beq.n	80053dc <HAL_ADC_IRQHandler+0x3d4>
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00d      	beq.n	80053dc <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f001 f84d 	bl	800646c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f003 0310 	and.w	r3, r3, #16
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d043      	beq.n	800546e <HAL_ADC_IRQHandler+0x466>
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d03e      	beq.n	800546e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80053f8:	2301      	movs	r3, #1
 80053fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80053fc:	e021      	b.n	8005442 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d015      	beq.n	8005430 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800540c:	d004      	beq.n	8005418 <HAL_ADC_IRQHandler+0x410>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a28      	ldr	r2, [pc, #160]	@ (80054b4 <HAL_ADC_IRQHandler+0x4ac>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d101      	bne.n	800541c <HAL_ADC_IRQHandler+0x414>
 8005418:	4b29      	ldr	r3, [pc, #164]	@ (80054c0 <HAL_ADC_IRQHandler+0x4b8>)
 800541a:	e000      	b.n	800541e <HAL_ADC_IRQHandler+0x416>
 800541c:	4b29      	ldr	r3, [pc, #164]	@ (80054c4 <HAL_ADC_IRQHandler+0x4bc>)
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff fa7e 	bl	8004920 <LL_ADC_GetMultiDMATransfer>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00b      	beq.n	8005442 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800542a:	2301      	movs	r3, #1
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24
 800542e:	e008      	b.n	8005442 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800543e:	2301      	movs	r3, #1
 8005440:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005444:	2b01      	cmp	r3, #1
 8005446:	d10e      	bne.n	8005466 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800544c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005458:	f043 0202 	orr.w	r2, r3, #2
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f845 	bl	80054f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2210      	movs	r2, #16
 800546c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005474:	2b00      	cmp	r3, #0
 8005476:	d018      	beq.n	80054aa <HAL_ADC_IRQHandler+0x4a2>
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800547e:	2b00      	cmp	r3, #0
 8005480:	d013      	beq.n	80054aa <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005486:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005492:	f043 0208 	orr.w	r2, r3, #8
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054a2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 ffcd 	bl	8006444 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80054aa:	bf00      	nop
 80054ac:	3728      	adds	r7, #40	@ 0x28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	50000100 	.word	0x50000100
 80054b8:	50000500 	.word	0x50000500
 80054bc:	50000400 	.word	0x50000400
 80054c0:	50000300 	.word	0x50000300
 80054c4:	50000700 	.word	0x50000700

080054c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b0b6      	sub	sp, #216	@ 0xd8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800551e:	2b01      	cmp	r3, #1
 8005520:	d102      	bne.n	8005528 <HAL_ADC_ConfigChannel+0x24>
 8005522:	2302      	movs	r3, #2
 8005524:	f000 bc13 	b.w	8005d4e <HAL_ADC_ConfigChannel+0x84a>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff fab1 	bl	8004a9c <LL_ADC_REG_IsConversionOngoing>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	f040 83f3 	bne.w	8005d28 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6859      	ldr	r1, [r3, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	f7ff f949 	bl	80047e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff fa9f 	bl	8004a9c <LL_ADC_REG_IsConversionOngoing>
 800555e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff faab 	bl	8004ac2 <LL_ADC_INJ_IsConversionOngoing>
 800556c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005570:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005574:	2b00      	cmp	r3, #0
 8005576:	f040 81d9 	bne.w	800592c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800557a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800557e:	2b00      	cmp	r3, #0
 8005580:	f040 81d4 	bne.w	800592c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800558c:	d10f      	bne.n	80055ae <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2200      	movs	r2, #0
 8005598:	4619      	mov	r1, r3
 800559a:	f7ff f963 	bl	8004864 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff f8f7 	bl	800479a <LL_ADC_SetSamplingTimeCommonConfig>
 80055ac:	e00e      	b.n	80055cc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6819      	ldr	r1, [r3, #0]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f7ff f952 	bl	8004864 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2100      	movs	r1, #0
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff f8e7 	bl	800479a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	695a      	ldr	r2, [r3, #20]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	08db      	lsrs	r3, r3, #3
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d022      	beq.n	8005634 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6919      	ldr	r1, [r3, #16]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80055fe:	f7ff f841 	bl	8004684 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6919      	ldr	r1, [r3, #16]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	461a      	mov	r2, r3
 8005610:	f7ff f88d 	bl	800472e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005620:	2b01      	cmp	r3, #1
 8005622:	d102      	bne.n	800562a <HAL_ADC_ConfigChannel+0x126>
 8005624:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005628:	e000      	b.n	800562c <HAL_ADC_ConfigChannel+0x128>
 800562a:	2300      	movs	r3, #0
 800562c:	461a      	mov	r2, r3
 800562e:	f7ff f899 	bl	8004764 <LL_ADC_SetOffsetSaturation>
 8005632:	e17b      	b.n	800592c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2100      	movs	r1, #0
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff f846 	bl	80046cc <LL_ADC_GetOffsetChannel>
 8005640:	4603      	mov	r3, r0
 8005642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10a      	bne.n	8005660 <HAL_ADC_ConfigChannel+0x15c>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2100      	movs	r1, #0
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff f83b 	bl	80046cc <LL_ADC_GetOffsetChannel>
 8005656:	4603      	mov	r3, r0
 8005658:	0e9b      	lsrs	r3, r3, #26
 800565a:	f003 021f 	and.w	r2, r3, #31
 800565e:	e01e      	b.n	800569e <HAL_ADC_ConfigChannel+0x19a>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2100      	movs	r1, #0
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff f830 	bl	80046cc <LL_ADC_GetOffsetChannel>
 800566c:	4603      	mov	r3, r0
 800566e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005672:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005676:	fa93 f3a3 	rbit	r3, r3
 800567a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800567e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005682:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005686:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800568e:	2320      	movs	r3, #32
 8005690:	e004      	b.n	800569c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005692:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005696:	fab3 f383 	clz	r3, r3
 800569a:	b2db      	uxtb	r3, r3
 800569c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d105      	bne.n	80056b6 <HAL_ADC_ConfigChannel+0x1b2>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	0e9b      	lsrs	r3, r3, #26
 80056b0:	f003 031f 	and.w	r3, r3, #31
 80056b4:	e018      	b.n	80056e8 <HAL_ADC_ConfigChannel+0x1e4>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80056c2:	fa93 f3a3 	rbit	r3, r3
 80056c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80056ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80056d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80056da:	2320      	movs	r3, #32
 80056dc:	e004      	b.n	80056e8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80056de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80056e2:	fab3 f383 	clz	r3, r3
 80056e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d106      	bne.n	80056fa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2200      	movs	r2, #0
 80056f2:	2100      	movs	r1, #0
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fe ffff 	bl	80046f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2101      	movs	r1, #1
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe ffe3 	bl	80046cc <LL_ADC_GetOffsetChannel>
 8005706:	4603      	mov	r3, r0
 8005708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <HAL_ADC_ConfigChannel+0x222>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2101      	movs	r1, #1
 8005716:	4618      	mov	r0, r3
 8005718:	f7fe ffd8 	bl	80046cc <LL_ADC_GetOffsetChannel>
 800571c:	4603      	mov	r3, r0
 800571e:	0e9b      	lsrs	r3, r3, #26
 8005720:	f003 021f 	and.w	r2, r3, #31
 8005724:	e01e      	b.n	8005764 <HAL_ADC_ConfigChannel+0x260>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2101      	movs	r1, #1
 800572c:	4618      	mov	r0, r3
 800572e:	f7fe ffcd 	bl	80046cc <LL_ADC_GetOffsetChannel>
 8005732:	4603      	mov	r3, r0
 8005734:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005738:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800573c:	fa93 f3a3 	rbit	r3, r3
 8005740:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005744:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005748:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800574c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005754:	2320      	movs	r3, #32
 8005756:	e004      	b.n	8005762 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005758:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800575c:	fab3 f383 	clz	r3, r3
 8005760:	b2db      	uxtb	r3, r3
 8005762:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800576c:	2b00      	cmp	r3, #0
 800576e:	d105      	bne.n	800577c <HAL_ADC_ConfigChannel+0x278>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	0e9b      	lsrs	r3, r3, #26
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	e018      	b.n	80057ae <HAL_ADC_ConfigChannel+0x2aa>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005784:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005788:	fa93 f3a3 	rbit	r3, r3
 800578c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005790:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005794:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005798:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80057a0:	2320      	movs	r3, #32
 80057a2:	e004      	b.n	80057ae <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80057a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057a8:	fab3 f383 	clz	r3, r3
 80057ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d106      	bne.n	80057c0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2200      	movs	r2, #0
 80057b8:	2101      	movs	r1, #1
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fe ff9c 	bl	80046f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2102      	movs	r1, #2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe ff80 	bl	80046cc <LL_ADC_GetOffsetChannel>
 80057cc:	4603      	mov	r3, r0
 80057ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <HAL_ADC_ConfigChannel+0x2e8>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2102      	movs	r1, #2
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fe ff75 	bl	80046cc <LL_ADC_GetOffsetChannel>
 80057e2:	4603      	mov	r3, r0
 80057e4:	0e9b      	lsrs	r3, r3, #26
 80057e6:	f003 021f 	and.w	r2, r3, #31
 80057ea:	e01e      	b.n	800582a <HAL_ADC_ConfigChannel+0x326>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2102      	movs	r1, #2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fe ff6a 	bl	80046cc <LL_ADC_GetOffsetChannel>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005802:	fa93 f3a3 	rbit	r3, r3
 8005806:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800580a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800580e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005812:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800581a:	2320      	movs	r3, #32
 800581c:	e004      	b.n	8005828 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800581e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005822:	fab3 f383 	clz	r3, r3
 8005826:	b2db      	uxtb	r3, r3
 8005828:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005832:	2b00      	cmp	r3, #0
 8005834:	d105      	bne.n	8005842 <HAL_ADC_ConfigChannel+0x33e>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	0e9b      	lsrs	r3, r3, #26
 800583c:	f003 031f 	and.w	r3, r3, #31
 8005840:	e016      	b.n	8005870 <HAL_ADC_ConfigChannel+0x36c>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800584a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800584e:	fa93 f3a3 	rbit	r3, r3
 8005852:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005854:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005856:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800585a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005862:	2320      	movs	r3, #32
 8005864:	e004      	b.n	8005870 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005866:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800586a:	fab3 f383 	clz	r3, r3
 800586e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005870:	429a      	cmp	r2, r3
 8005872:	d106      	bne.n	8005882 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2200      	movs	r2, #0
 800587a:	2102      	movs	r1, #2
 800587c:	4618      	mov	r0, r3
 800587e:	f7fe ff3b 	bl	80046f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2103      	movs	r1, #3
 8005888:	4618      	mov	r0, r3
 800588a:	f7fe ff1f 	bl	80046cc <LL_ADC_GetOffsetChannel>
 800588e:	4603      	mov	r3, r0
 8005890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10a      	bne.n	80058ae <HAL_ADC_ConfigChannel+0x3aa>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2103      	movs	r1, #3
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fe ff14 	bl	80046cc <LL_ADC_GetOffsetChannel>
 80058a4:	4603      	mov	r3, r0
 80058a6:	0e9b      	lsrs	r3, r3, #26
 80058a8:	f003 021f 	and.w	r2, r3, #31
 80058ac:	e017      	b.n	80058de <HAL_ADC_ConfigChannel+0x3da>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2103      	movs	r1, #3
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fe ff09 	bl	80046cc <LL_ADC_GetOffsetChannel>
 80058ba:	4603      	mov	r3, r0
 80058bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058c0:	fa93 f3a3 	rbit	r3, r3
 80058c4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80058c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80058ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80058d0:	2320      	movs	r3, #32
 80058d2:	e003      	b.n	80058dc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80058d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058d6:	fab3 f383 	clz	r3, r3
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d105      	bne.n	80058f6 <HAL_ADC_ConfigChannel+0x3f2>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	0e9b      	lsrs	r3, r3, #26
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	e011      	b.n	800591a <HAL_ADC_ConfigChannel+0x416>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058fe:	fa93 f3a3 	rbit	r3, r3
 8005902:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005906:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005908:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800590e:	2320      	movs	r3, #32
 8005910:	e003      	b.n	800591a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005912:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005914:	fab3 f383 	clz	r3, r3
 8005918:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800591a:	429a      	cmp	r2, r3
 800591c:	d106      	bne.n	800592c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2200      	movs	r2, #0
 8005924:	2103      	movs	r1, #3
 8005926:	4618      	mov	r0, r3
 8005928:	f7fe fee6 	bl	80046f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f7ff f879 	bl	8004a28 <LL_ADC_IsEnabled>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	f040 813d 	bne.w	8005bb8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6819      	ldr	r1, [r3, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	461a      	mov	r2, r3
 800594c:	f7fe ffb6 	bl	80048bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	4aa2      	ldr	r2, [pc, #648]	@ (8005be0 <HAL_ADC_ConfigChannel+0x6dc>)
 8005956:	4293      	cmp	r3, r2
 8005958:	f040 812e 	bne.w	8005bb8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10b      	bne.n	8005984 <HAL_ADC_ConfigChannel+0x480>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	0e9b      	lsrs	r3, r3, #26
 8005972:	3301      	adds	r3, #1
 8005974:	f003 031f 	and.w	r3, r3, #31
 8005978:	2b09      	cmp	r3, #9
 800597a:	bf94      	ite	ls
 800597c:	2301      	movls	r3, #1
 800597e:	2300      	movhi	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	e019      	b.n	80059b8 <HAL_ADC_ConfigChannel+0x4b4>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800598c:	fa93 f3a3 	rbit	r3, r3
 8005990:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005992:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005994:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005996:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800599c:	2320      	movs	r3, #32
 800599e:	e003      	b.n	80059a8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80059a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059a2:	fab3 f383 	clz	r3, r3
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	3301      	adds	r3, #1
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	2b09      	cmp	r3, #9
 80059b0:	bf94      	ite	ls
 80059b2:	2301      	movls	r3, #1
 80059b4:	2300      	movhi	r3, #0
 80059b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d079      	beq.n	8005ab0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d107      	bne.n	80059d8 <HAL_ADC_ConfigChannel+0x4d4>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	0e9b      	lsrs	r3, r3, #26
 80059ce:	3301      	adds	r3, #1
 80059d0:	069b      	lsls	r3, r3, #26
 80059d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80059d6:	e015      	b.n	8005a04 <HAL_ADC_ConfigChannel+0x500>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059e0:	fa93 f3a3 	rbit	r3, r3
 80059e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80059e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80059ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80059f0:	2320      	movs	r3, #32
 80059f2:	e003      	b.n	80059fc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80059f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059f6:	fab3 f383 	clz	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	3301      	adds	r3, #1
 80059fe:	069b      	lsls	r3, r3, #26
 8005a00:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d109      	bne.n	8005a24 <HAL_ADC_ConfigChannel+0x520>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	0e9b      	lsrs	r3, r3, #26
 8005a16:	3301      	adds	r3, #1
 8005a18:	f003 031f 	and.w	r3, r3, #31
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a22:	e017      	b.n	8005a54 <HAL_ADC_ConfigChannel+0x550>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a2c:	fa93 f3a3 	rbit	r3, r3
 8005a30:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a34:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005a36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005a3c:	2320      	movs	r3, #32
 8005a3e:	e003      	b.n	8005a48 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005a40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a42:	fab3 f383 	clz	r3, r3
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	3301      	adds	r3, #1
 8005a4a:	f003 031f 	and.w	r3, r3, #31
 8005a4e:	2101      	movs	r1, #1
 8005a50:	fa01 f303 	lsl.w	r3, r1, r3
 8005a54:	ea42 0103 	orr.w	r1, r2, r3
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10a      	bne.n	8005a7a <HAL_ADC_ConfigChannel+0x576>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	0e9b      	lsrs	r3, r3, #26
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	f003 021f 	and.w	r2, r3, #31
 8005a70:	4613      	mov	r3, r2
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	4413      	add	r3, r2
 8005a76:	051b      	lsls	r3, r3, #20
 8005a78:	e018      	b.n	8005aac <HAL_ADC_ConfigChannel+0x5a8>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a82:	fa93 f3a3 	rbit	r3, r3
 8005a86:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005a92:	2320      	movs	r3, #32
 8005a94:	e003      	b.n	8005a9e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a98:	fab3 f383 	clz	r3, r3
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	f003 021f 	and.w	r2, r3, #31
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	4413      	add	r3, r2
 8005aaa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005aac:	430b      	orrs	r3, r1
 8005aae:	e07e      	b.n	8005bae <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d107      	bne.n	8005acc <HAL_ADC_ConfigChannel+0x5c8>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	0e9b      	lsrs	r3, r3, #26
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	069b      	lsls	r3, r3, #26
 8005ac6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005aca:	e015      	b.n	8005af8 <HAL_ADC_ConfigChannel+0x5f4>
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad4:	fa93 f3a3 	rbit	r3, r3
 8005ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005adc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005ae4:	2320      	movs	r3, #32
 8005ae6:	e003      	b.n	8005af0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aea:	fab3 f383 	clz	r3, r3
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	3301      	adds	r3, #1
 8005af2:	069b      	lsls	r3, r3, #26
 8005af4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d109      	bne.n	8005b18 <HAL_ADC_ConfigChannel+0x614>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	0e9b      	lsrs	r3, r3, #26
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	f003 031f 	and.w	r3, r3, #31
 8005b10:	2101      	movs	r1, #1
 8005b12:	fa01 f303 	lsl.w	r3, r1, r3
 8005b16:	e017      	b.n	8005b48 <HAL_ADC_ConfigChannel+0x644>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	fa93 f3a3 	rbit	r3, r3
 8005b24:	61fb      	str	r3, [r7, #28]
  return result;
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005b30:	2320      	movs	r3, #32
 8005b32:	e003      	b.n	8005b3c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	fab3 f383 	clz	r3, r3
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	2101      	movs	r1, #1
 8005b44:	fa01 f303 	lsl.w	r3, r1, r3
 8005b48:	ea42 0103 	orr.w	r1, r2, r3
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10d      	bne.n	8005b74 <HAL_ADC_ConfigChannel+0x670>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	0e9b      	lsrs	r3, r3, #26
 8005b5e:	3301      	adds	r3, #1
 8005b60:	f003 021f 	and.w	r2, r3, #31
 8005b64:	4613      	mov	r3, r2
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	4413      	add	r3, r2
 8005b6a:	3b1e      	subs	r3, #30
 8005b6c:	051b      	lsls	r3, r3, #20
 8005b6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005b72:	e01b      	b.n	8005bac <HAL_ADC_ConfigChannel+0x6a8>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	fa93 f3a3 	rbit	r3, r3
 8005b80:	613b      	str	r3, [r7, #16]
  return result;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005b8c:	2320      	movs	r3, #32
 8005b8e:	e003      	b.n	8005b98 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	fab3 f383 	clz	r3, r3
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	3301      	adds	r3, #1
 8005b9a:	f003 021f 	and.w	r2, r3, #31
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3b1e      	subs	r3, #30
 8005ba6:	051b      	lsls	r3, r3, #20
 8005ba8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	f7fe fe56 	bl	8004864 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	4b09      	ldr	r3, [pc, #36]	@ (8005be4 <HAL_ADC_ConfigChannel+0x6e0>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 80be 	beq.w	8005d42 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bce:	d004      	beq.n	8005bda <HAL_ADC_ConfigChannel+0x6d6>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a04      	ldr	r2, [pc, #16]	@ (8005be8 <HAL_ADC_ConfigChannel+0x6e4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d10a      	bne.n	8005bf0 <HAL_ADC_ConfigChannel+0x6ec>
 8005bda:	4b04      	ldr	r3, [pc, #16]	@ (8005bec <HAL_ADC_ConfigChannel+0x6e8>)
 8005bdc:	e009      	b.n	8005bf2 <HAL_ADC_ConfigChannel+0x6ee>
 8005bde:	bf00      	nop
 8005be0:	407f0000 	.word	0x407f0000
 8005be4:	80080000 	.word	0x80080000
 8005be8:	50000100 	.word	0x50000100
 8005bec:	50000300 	.word	0x50000300
 8005bf0:	4b59      	ldr	r3, [pc, #356]	@ (8005d58 <HAL_ADC_ConfigChannel+0x854>)
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fd38 	bl	8004668 <LL_ADC_GetCommonPathInternalCh>
 8005bf8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a56      	ldr	r2, [pc, #344]	@ (8005d5c <HAL_ADC_ConfigChannel+0x858>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d004      	beq.n	8005c10 <HAL_ADC_ConfigChannel+0x70c>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a55      	ldr	r2, [pc, #340]	@ (8005d60 <HAL_ADC_ConfigChannel+0x85c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d13a      	bne.n	8005c86 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d134      	bne.n	8005c86 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c24:	d005      	beq.n	8005c32 <HAL_ADC_ConfigChannel+0x72e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a4e      	ldr	r2, [pc, #312]	@ (8005d64 <HAL_ADC_ConfigChannel+0x860>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	f040 8085 	bne.w	8005d3c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c3a:	d004      	beq.n	8005c46 <HAL_ADC_ConfigChannel+0x742>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a49      	ldr	r2, [pc, #292]	@ (8005d68 <HAL_ADC_ConfigChannel+0x864>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d101      	bne.n	8005c4a <HAL_ADC_ConfigChannel+0x746>
 8005c46:	4a49      	ldr	r2, [pc, #292]	@ (8005d6c <HAL_ADC_ConfigChannel+0x868>)
 8005c48:	e000      	b.n	8005c4c <HAL_ADC_ConfigChannel+0x748>
 8005c4a:	4a43      	ldr	r2, [pc, #268]	@ (8005d58 <HAL_ADC_ConfigChannel+0x854>)
 8005c4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005c54:	4619      	mov	r1, r3
 8005c56:	4610      	mov	r0, r2
 8005c58:	f7fe fcf3 	bl	8004642 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c5c:	4b44      	ldr	r3, [pc, #272]	@ (8005d70 <HAL_ADC_ConfigChannel+0x86c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	099b      	lsrs	r3, r3, #6
 8005c62:	4a44      	ldr	r2, [pc, #272]	@ (8005d74 <HAL_ADC_ConfigChannel+0x870>)
 8005c64:	fba2 2303 	umull	r2, r3, r2, r3
 8005c68:	099b      	lsrs	r3, r3, #6
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c76:	e002      	b.n	8005c7e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1f9      	bne.n	8005c78 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c84:	e05a      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a3b      	ldr	r2, [pc, #236]	@ (8005d78 <HAL_ADC_ConfigChannel+0x874>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d125      	bne.n	8005cdc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005c90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d11f      	bne.n	8005cdc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a31      	ldr	r2, [pc, #196]	@ (8005d68 <HAL_ADC_ConfigChannel+0x864>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d104      	bne.n	8005cb0 <HAL_ADC_ConfigChannel+0x7ac>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a34      	ldr	r2, [pc, #208]	@ (8005d7c <HAL_ADC_ConfigChannel+0x878>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d047      	beq.n	8005d40 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cb8:	d004      	beq.n	8005cc4 <HAL_ADC_ConfigChannel+0x7c0>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8005d68 <HAL_ADC_ConfigChannel+0x864>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d101      	bne.n	8005cc8 <HAL_ADC_ConfigChannel+0x7c4>
 8005cc4:	4a29      	ldr	r2, [pc, #164]	@ (8005d6c <HAL_ADC_ConfigChannel+0x868>)
 8005cc6:	e000      	b.n	8005cca <HAL_ADC_ConfigChannel+0x7c6>
 8005cc8:	4a23      	ldr	r2, [pc, #140]	@ (8005d58 <HAL_ADC_ConfigChannel+0x854>)
 8005cca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	f7fe fcb4 	bl	8004642 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005cda:	e031      	b.n	8005d40 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a27      	ldr	r2, [pc, #156]	@ (8005d80 <HAL_ADC_ConfigChannel+0x87c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d12d      	bne.n	8005d42 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005ce6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d127      	bne.n	8005d42 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8005d68 <HAL_ADC_ConfigChannel+0x864>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d022      	beq.n	8005d42 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d04:	d004      	beq.n	8005d10 <HAL_ADC_ConfigChannel+0x80c>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a17      	ldr	r2, [pc, #92]	@ (8005d68 <HAL_ADC_ConfigChannel+0x864>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d101      	bne.n	8005d14 <HAL_ADC_ConfigChannel+0x810>
 8005d10:	4a16      	ldr	r2, [pc, #88]	@ (8005d6c <HAL_ADC_ConfigChannel+0x868>)
 8005d12:	e000      	b.n	8005d16 <HAL_ADC_ConfigChannel+0x812>
 8005d14:	4a10      	ldr	r2, [pc, #64]	@ (8005d58 <HAL_ADC_ConfigChannel+0x854>)
 8005d16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4610      	mov	r0, r2
 8005d22:	f7fe fc8e 	bl	8004642 <LL_ADC_SetCommonPathInternalCh>
 8005d26:	e00c      	b.n	8005d42 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d2c:	f043 0220 	orr.w	r2, r3, #32
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005d3a:	e002      	b.n	8005d42 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d3c:	bf00      	nop
 8005d3e:	e000      	b.n	8005d42 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005d4a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	37d8      	adds	r7, #216	@ 0xd8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	50000700 	.word	0x50000700
 8005d5c:	c3210000 	.word	0xc3210000
 8005d60:	90c00010 	.word	0x90c00010
 8005d64:	50000600 	.word	0x50000600
 8005d68:	50000100 	.word	0x50000100
 8005d6c:	50000300 	.word	0x50000300
 8005d70:	20000000 	.word	0x20000000
 8005d74:	053e2d63 	.word	0x053e2d63
 8005d78:	c7520000 	.word	0xc7520000
 8005d7c:	50000500 	.word	0x50000500
 8005d80:	cb840000 	.word	0xcb840000

08005d84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fe fe47 	bl	8004a28 <LL_ADC_IsEnabled>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d176      	bne.n	8005e8e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689a      	ldr	r2, [r3, #8]
 8005da6:	4b3c      	ldr	r3, [pc, #240]	@ (8005e98 <ADC_Enable+0x114>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00d      	beq.n	8005dca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db2:	f043 0210 	orr.w	r2, r3, #16
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dbe:	f043 0201 	orr.w	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e062      	b.n	8005e90 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fe fe02 	bl	80049d8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ddc:	d004      	beq.n	8005de8 <ADC_Enable+0x64>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a2e      	ldr	r2, [pc, #184]	@ (8005e9c <ADC_Enable+0x118>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d101      	bne.n	8005dec <ADC_Enable+0x68>
 8005de8:	4b2d      	ldr	r3, [pc, #180]	@ (8005ea0 <ADC_Enable+0x11c>)
 8005dea:	e000      	b.n	8005dee <ADC_Enable+0x6a>
 8005dec:	4b2d      	ldr	r3, [pc, #180]	@ (8005ea4 <ADC_Enable+0x120>)
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fe fc3a 	bl	8004668 <LL_ADC_GetCommonPathInternalCh>
 8005df4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005df6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d013      	beq.n	8005e26 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8005ea8 <ADC_Enable+0x124>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	099b      	lsrs	r3, r3, #6
 8005e04:	4a29      	ldr	r2, [pc, #164]	@ (8005eac <ADC_Enable+0x128>)
 8005e06:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0a:	099b      	lsrs	r3, r3, #6
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	4613      	mov	r3, r2
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005e18:	e002      	b.n	8005e20 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f9      	bne.n	8005e1a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005e26:	f7fe fbcb 	bl	80045c0 <HAL_GetTick>
 8005e2a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e2c:	e028      	b.n	8005e80 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fe fdf8 	bl	8004a28 <LL_ADC_IsEnabled>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d104      	bne.n	8005e48 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe fdc8 	bl	80049d8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005e48:	f7fe fbba 	bl	80045c0 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d914      	bls.n	8005e80 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d00d      	beq.n	8005e80 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e68:	f043 0210 	orr.w	r2, r3, #16
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e74:	f043 0201 	orr.w	r2, r3, #1
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e007      	b.n	8005e90 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d1cf      	bne.n	8005e2e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	8000003f 	.word	0x8000003f
 8005e9c:	50000100 	.word	0x50000100
 8005ea0:	50000300 	.word	0x50000300
 8005ea4:	50000700 	.word	0x50000700
 8005ea8:	20000000 	.word	0x20000000
 8005eac:	053e2d63 	.word	0x053e2d63

08005eb0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7fe fdc6 	bl	8004a4e <LL_ADC_IsDisableOngoing>
 8005ec2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe fdad 	bl	8004a28 <LL_ADC_IsEnabled>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d047      	beq.n	8005f64 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d144      	bne.n	8005f64 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 030d 	and.w	r3, r3, #13
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d10c      	bne.n	8005f02 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fe fd87 	bl	8004a00 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2203      	movs	r2, #3
 8005ef8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005efa:	f7fe fb61 	bl	80045c0 <HAL_GetTick>
 8005efe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f00:	e029      	b.n	8005f56 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f06:	f043 0210 	orr.w	r2, r3, #16
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f12:	f043 0201 	orr.w	r2, r3, #1
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e023      	b.n	8005f66 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005f1e:	f7fe fb4f 	bl	80045c0 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d914      	bls.n	8005f56 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00d      	beq.n	8005f56 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3e:	f043 0210 	orr.w	r2, r3, #16
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f4a:	f043 0201 	orr.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e007      	b.n	8005f66 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1dc      	bne.n	8005f1e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f80:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d14b      	bne.n	8006020 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0308 	and.w	r3, r3, #8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d021      	beq.n	8005fe6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe fc0a 	bl	80047c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d032      	beq.n	8006018 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d12b      	bne.n	8006018 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d11f      	bne.n	8006018 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fdc:	f043 0201 	orr.w	r2, r3, #1
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005fe4:	e018      	b.n	8006018 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d111      	bne.n	8006018 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006004:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d105      	bne.n	8006018 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006010:	f043 0201 	orr.w	r2, r3, #1
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f006 fd1d 	bl	800ca58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800601e:	e00e      	b.n	800603e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f7ff fa5f 	bl	80054f0 <HAL_ADC_ErrorCallback>
}
 8006032:	e004      	b.n	800603e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	4798      	blx	r3
}
 800603e:	bf00      	nop
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006052:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f7ff fa37 	bl	80054c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006074:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006080:	f043 0204 	orr.w	r2, r3, #4
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f7ff fa31 	bl	80054f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800608e:	bf00      	nop
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <LL_ADC_SetCommonPathInternalCh>:
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	609a      	str	r2, [r3, #8]
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <LL_ADC_GetCommonPathInternalCh>:
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <LL_ADC_SetOffset>:
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3360      	adds	r3, #96	@ 0x60
 80060ea:	461a      	mov	r2, r3
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	4b08      	ldr	r3, [pc, #32]	@ (800611c <LL_ADC_SetOffset+0x44>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	4313      	orrs	r3, r2
 8006108:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	601a      	str	r2, [r3, #0]
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	03fff000 	.word	0x03fff000

08006120 <LL_ADC_GetOffsetChannel>:
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	3360      	adds	r3, #96	@ 0x60
 800612e:	461a      	mov	r2, r3
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <LL_ADC_SetOffsetState>:
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3360      	adds	r3, #96	@ 0x60
 800615c:	461a      	mov	r2, r3
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	431a      	orrs	r2, r3
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	601a      	str	r2, [r3, #0]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <LL_ADC_SetOffsetSign>:
{
 8006182:	b480      	push	{r7}
 8006184:	b087      	sub	sp, #28
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3360      	adds	r3, #96	@ 0x60
 8006192:	461a      	mov	r2, r3
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	431a      	orrs	r2, r3
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	601a      	str	r2, [r3, #0]
}
 80061ac:	bf00      	nop
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <LL_ADC_SetOffsetSaturation>:
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3360      	adds	r3, #96	@ 0x60
 80061c8:	461a      	mov	r2, r3
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	431a      	orrs	r2, r3
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	601a      	str	r2, [r3, #0]
}
 80061e2:	bf00      	nop
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	615a      	str	r2, [r3, #20]
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <LL_ADC_SetChannelSamplingTime>:
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	3314      	adds	r3, #20
 8006224:	461a      	mov	r2, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	0e5b      	lsrs	r3, r3, #25
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	4413      	add	r3, r2
 8006232:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	0d1b      	lsrs	r3, r3, #20
 800623c:	f003 031f 	and.w	r3, r3, #31
 8006240:	2107      	movs	r1, #7
 8006242:	fa01 f303 	lsl.w	r3, r1, r3
 8006246:	43db      	mvns	r3, r3
 8006248:	401a      	ands	r2, r3
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	0d1b      	lsrs	r3, r3, #20
 800624e:	f003 031f 	and.w	r3, r3, #31
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	fa01 f303 	lsl.w	r3, r1, r3
 8006258:	431a      	orrs	r2, r3
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	601a      	str	r2, [r3, #0]
}
 800625e:	bf00      	nop
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <LL_ADC_SetChannelSingleDiff>:
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006284:	43db      	mvns	r3, r3
 8006286:	401a      	ands	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f003 0318 	and.w	r3, r3, #24
 800628e:	4908      	ldr	r1, [pc, #32]	@ (80062b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006290:	40d9      	lsrs	r1, r3
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	400b      	ands	r3, r1
 8006296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800629a:	431a      	orrs	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80062a2:	bf00      	nop
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	0007ffff 	.word	0x0007ffff

080062b4 <LL_ADC_IsEnabled>:
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <LL_ADC_IsEnabled+0x18>
 80062c8:	2301      	movs	r3, #1
 80062ca:	e000      	b.n	80062ce <LL_ADC_IsEnabled+0x1a>
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <LL_ADC_StartCalibration>:
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
 80062e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80062ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	609a      	str	r2, [r3, #8]
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <LL_ADC_IsCalibrationOnGoing>:
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800631c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006320:	d101      	bne.n	8006326 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <LL_ADC_REG_IsConversionOngoing>:
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b04      	cmp	r3, #4
 8006346:	d101      	bne.n	800634c <LL_ADC_REG_IsConversionOngoing+0x18>
 8006348:	2301      	movs	r3, #1
 800634a:	e000      	b.n	800634e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <LL_ADC_INJ_IsConversionOngoing>:
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 0308 	and.w	r3, r3, #8
 800636a:	2b08      	cmp	r3, #8
 800636c:	d101      	bne.n	8006372 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800636e:	2301      	movs	r3, #1
 8006370:	e000      	b.n	8006374 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800638a:	2300      	movs	r3, #0
 800638c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_ADCEx_Calibration_Start+0x1c>
 8006398:	2302      	movs	r3, #2
 800639a:	e04d      	b.n	8006438 <HAL_ADCEx_Calibration_Start+0xb8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7ff fd83 	bl	8005eb0 <ADC_Disable>
 80063aa:	4603      	mov	r3, r0
 80063ac:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d136      	bne.n	8006422 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063b8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80063bc:	f023 0302 	bic.w	r3, r3, #2
 80063c0:	f043 0202 	orr.w	r2, r3, #2
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff ff83 	bl	80062da <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80063d4:	e014      	b.n	8006400 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	3301      	adds	r3, #1
 80063da:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4a18      	ldr	r2, [pc, #96]	@ (8006440 <HAL_ADCEx_Calibration_Start+0xc0>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d90d      	bls.n	8006400 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063e8:	f023 0312 	bic.w	r3, r3, #18
 80063ec:	f043 0210 	orr.w	r2, r3, #16
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e01b      	b.n	8006438 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff ff81 	bl	800630c <LL_ADC_IsCalibrationOnGoing>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e2      	bne.n	80063d6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006414:	f023 0303 	bic.w	r3, r3, #3
 8006418:	f043 0201 	orr.w	r2, r3, #1
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006420:	e005      	b.n	800642e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006426:	f043 0210 	orr.w	r2, r3, #16
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	0004de01 	.word	0x0004de01

08006444 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b0b6      	sub	sp, #216	@ 0xd8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d102      	bne.n	80064be <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80064b8:	2302      	movs	r3, #2
 80064ba:	f000 bcfd 	b.w	8006eb8 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d130      	bne.n	8006538 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2b09      	cmp	r3, #9
 80064dc:	d179      	bne.n	80065d2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d010      	beq.n	8006508 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	0e9b      	lsrs	r3, r3, #26
 80064ec:	025b      	lsls	r3, r3, #9
 80064ee:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f6:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80064fa:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006506:	e007      	b.n	8006518 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	0e9b      	lsrs	r3, r3, #26
 800650e:	025b      	lsls	r3, r3, #9
 8006510:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8006514:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800651e:	4b84      	ldr	r3, [pc, #528]	@ (8006730 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8006520:	4013      	ands	r3, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6812      	ldr	r2, [r2, #0]
 8006526:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800652a:	430b      	orrs	r3, r1
 800652c:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006534:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8006536:	e04c      	b.n	80065d2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800653c:	2b00      	cmp	r3, #0
 800653e:	d11d      	bne.n	800657c <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	6a1a      	ldr	r2, [r3, #32]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00d      	beq.n	8006572 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006560:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8006564:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800656a:	4313      	orrs	r3, r2
 800656c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006570:	e004      	b.n	800657c <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	3b01      	subs	r3, #1
 8006578:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	0e9b      	lsrs	r3, r3, #26
 8006582:	f003 021f 	and.w	r2, r3, #31
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	fa02 f303 	lsl.w	r3, r2, r3
 8006592:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006596:	4313      	orrs	r3, r2
 8006598:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065a0:	1e5a      	subs	r2, r3, #1
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80065aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10a      	bne.n	80065d2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065c2:	4b5b      	ldr	r3, [pc, #364]	@ (8006730 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6812      	ldr	r2, [r2, #0]
 80065ce:	430b      	orrs	r3, r1
 80065d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff febf 	bl	800635a <LL_ADC_INJ_IsConversionOngoing>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d124      	bne.n	800662c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d112      	bne.n	8006612 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80065fc:	055a      	lsls	r2, r3, #21
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006604:	051b      	lsls	r3, r3, #20
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	60da      	str	r2, [r3, #12]
 8006610:	e00c      	b.n	800662c <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006622:	055a      	lsls	r2, r3, #21
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4618      	mov	r0, r3
 8006632:	f7ff fe7f 	bl	8006334 <LL_ADC_REG_IsConversionOngoing>
 8006636:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff fe8b 	bl	800635a <LL_ADC_INJ_IsConversionOngoing>
 8006644:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006648:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800664c:	2b00      	cmp	r3, #0
 800664e:	f040 822e 	bne.w	8006aae <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006652:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006656:	2b00      	cmp	r3, #0
 8006658:	f040 8229 	bne.w	8006aae <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d116      	bne.n	800669a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006672:	2b01      	cmp	r3, #1
 8006674:	d108      	bne.n	8006688 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8006684:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8006686:	e01f      	b.n	80066c8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8006696:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8006698:	e016      	b.n	80066c8 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d109      	bne.n	80066b8 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066a8:	f043 0220 	orr.w	r2, r3, #32
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80066b6:	e007      	b.n	80066c8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80066c6:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d110      	bne.n	80066f4 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e4:	430b      	orrs	r3, r1
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f042 0202 	orr.w	r2, r2, #2
 80066f0:	611a      	str	r2, [r3, #16]
 80066f2:	e007      	b.n	8006704 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	691a      	ldr	r2, [r3, #16]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0202 	bic.w	r2, r2, #2
 8006702:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800670c:	d112      	bne.n	8006734 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2200      	movs	r2, #0
 8006718:	4619      	mov	r1, r3
 800671a:	f7ff fd7b 	bl	8006214 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006726:	4618      	mov	r0, r3
 8006728:	f7ff fd61 	bl	80061ee <LL_ADC_SetSamplingTimeCommonConfig>
 800672c:	e011      	b.n	8006752 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 800672e:	bf00      	nop
 8006730:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6818      	ldr	r0, [r3, #0]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8006740:	461a      	mov	r2, r3
 8006742:	f7ff fd67 	bl	8006214 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2100      	movs	r1, #0
 800674c:	4618      	mov	r0, r3
 800674e:	f7ff fd4e 	bl	80061ee <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	695a      	ldr	r2, [r3, #20]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	08db      	lsrs	r3, r3, #3
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	fa02 f303 	lsl.w	r3, r2, r3
 8006768:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	2b04      	cmp	r3, #4
 8006772:	d022      	beq.n	80067ba <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6818      	ldr	r0, [r3, #0]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	6919      	ldr	r1, [r3, #16]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006784:	f7ff fca8 	bl	80060d8 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6818      	ldr	r0, [r3, #0]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	6919      	ldr	r1, [r3, #16]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	461a      	mov	r2, r3
 8006796:	f7ff fcf4 	bl	8006182 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d102      	bne.n	80067b0 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80067aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067ae:	e000      	b.n	80067b2 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80067b0:	2300      	movs	r3, #0
 80067b2:	461a      	mov	r2, r3
 80067b4:	f7ff fd00 	bl	80061b8 <LL_ADC_SetOffsetSaturation>
 80067b8:	e179      	b.n	8006aae <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2100      	movs	r1, #0
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff fcad 	bl	8006120 <LL_ADC_GetOffsetChannel>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10a      	bne.n	80067e6 <HAL_ADCEx_InjectedConfigChannel+0x352>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2100      	movs	r1, #0
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff fca2 	bl	8006120 <LL_ADC_GetOffsetChannel>
 80067dc:	4603      	mov	r3, r0
 80067de:	0e9b      	lsrs	r3, r3, #26
 80067e0:	f003 021f 	and.w	r2, r3, #31
 80067e4:	e01e      	b.n	8006824 <HAL_ADCEx_InjectedConfigChannel+0x390>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2100      	movs	r1, #0
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff fc97 	bl	8006120 <LL_ADC_GetOffsetChannel>
 80067f2:	4603      	mov	r3, r0
 80067f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067fc:	fa93 f3a3 	rbit	r3, r3
 8006800:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8006804:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006808:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800680c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8006814:	2320      	movs	r3, #32
 8006816:	e004      	b.n	8006822 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8006818:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800681c:	fab3 f383 	clz	r3, r3
 8006820:	b2db      	uxtb	r3, r3
 8006822:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800682c:	2b00      	cmp	r3, #0
 800682e:	d105      	bne.n	800683c <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	0e9b      	lsrs	r3, r3, #26
 8006836:	f003 031f 	and.w	r3, r3, #31
 800683a:	e018      	b.n	800686e <HAL_ADCEx_InjectedConfigChannel+0x3da>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006848:	fa93 f3a3 	rbit	r3, r3
 800684c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8006850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006854:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8006858:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8006860:	2320      	movs	r3, #32
 8006862:	e004      	b.n	800686e <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8006864:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006868:	fab3 f383 	clz	r3, r3
 800686c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800686e:	429a      	cmp	r2, r3
 8006870:	d106      	bne.n	8006880 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2200      	movs	r2, #0
 8006878:	2100      	movs	r1, #0
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fc66 	bl	800614c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2101      	movs	r1, #1
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff fc4a 	bl	8006120 <LL_ADC_GetOffsetChannel>
 800688c:	4603      	mov	r3, r0
 800688e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10a      	bne.n	80068ac <HAL_ADCEx_InjectedConfigChannel+0x418>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2101      	movs	r1, #1
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff fc3f 	bl	8006120 <LL_ADC_GetOffsetChannel>
 80068a2:	4603      	mov	r3, r0
 80068a4:	0e9b      	lsrs	r3, r3, #26
 80068a6:	f003 021f 	and.w	r2, r3, #31
 80068aa:	e01e      	b.n	80068ea <HAL_ADCEx_InjectedConfigChannel+0x456>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2101      	movs	r1, #1
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff fc34 	bl	8006120 <LL_ADC_GetOffsetChannel>
 80068b8:	4603      	mov	r3, r0
 80068ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068c2:	fa93 f3a3 	rbit	r3, r3
 80068c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80068ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80068d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 80068da:	2320      	movs	r3, #32
 80068dc:	e004      	b.n	80068e8 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 80068de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80068e2:	fab3 f383 	clz	r3, r3
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d105      	bne.n	8006902 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	0e9b      	lsrs	r3, r3, #26
 80068fc:	f003 031f 	and.w	r3, r3, #31
 8006900:	e018      	b.n	8006934 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800690a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800690e:	fa93 f3a3 	rbit	r3, r3
 8006912:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8006916:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800691a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800691e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8006926:	2320      	movs	r3, #32
 8006928:	e004      	b.n	8006934 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 800692a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800692e:	fab3 f383 	clz	r3, r3
 8006932:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006934:	429a      	cmp	r2, r3
 8006936:	d106      	bne.n	8006946 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2200      	movs	r2, #0
 800693e:	2101      	movs	r1, #1
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff fc03 	bl	800614c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2102      	movs	r1, #2
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff fbe7 	bl	8006120 <LL_ADC_GetOffsetChannel>
 8006952:	4603      	mov	r3, r0
 8006954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2102      	movs	r1, #2
 8006962:	4618      	mov	r0, r3
 8006964:	f7ff fbdc 	bl	8006120 <LL_ADC_GetOffsetChannel>
 8006968:	4603      	mov	r3, r0
 800696a:	0e9b      	lsrs	r3, r3, #26
 800696c:	f003 021f 	and.w	r2, r3, #31
 8006970:	e01e      	b.n	80069b0 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2102      	movs	r1, #2
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff fbd1 	bl	8006120 <LL_ADC_GetOffsetChannel>
 800697e:	4603      	mov	r3, r0
 8006980:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006984:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006988:	fa93 f3a3 	rbit	r3, r3
 800698c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8006990:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006994:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8006998:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80069a0:	2320      	movs	r3, #32
 80069a2:	e004      	b.n	80069ae <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80069a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069a8:	fab3 f383 	clz	r3, r3
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d105      	bne.n	80069c8 <HAL_ADCEx_InjectedConfigChannel+0x534>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	0e9b      	lsrs	r3, r3, #26
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	e014      	b.n	80069f2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069d0:	fa93 f3a3 	rbit	r3, r3
 80069d4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80069d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80069dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 80069e4:	2320      	movs	r3, #32
 80069e6:	e004      	b.n	80069f2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 80069e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80069ec:	fab3 f383 	clz	r3, r3
 80069f0:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d106      	bne.n	8006a04 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2200      	movs	r2, #0
 80069fc:	2102      	movs	r1, #2
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff fba4 	bl	800614c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2103      	movs	r1, #3
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff fb88 	bl	8006120 <LL_ADC_GetOffsetChannel>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10a      	bne.n	8006a30 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2103      	movs	r1, #3
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff fb7d 	bl	8006120 <LL_ADC_GetOffsetChannel>
 8006a26:	4603      	mov	r3, r0
 8006a28:	0e9b      	lsrs	r3, r3, #26
 8006a2a:	f003 021f 	and.w	r2, r3, #31
 8006a2e:	e017      	b.n	8006a60 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2103      	movs	r1, #3
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7ff fb72 	bl	8006120 <LL_ADC_GetOffsetChannel>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a42:	fa93 f3a3 	rbit	r3, r3
 8006a46:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006a48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a4a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8006a4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8006a52:	2320      	movs	r3, #32
 8006a54:	e003      	b.n	8006a5e <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8006a56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a58:	fab3 f383 	clz	r3, r3
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d105      	bne.n	8006a78 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	0e9b      	lsrs	r3, r3, #26
 8006a72:	f003 031f 	and.w	r3, r3, #31
 8006a76:	e011      	b.n	8006a9c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a80:	fa93 f3a3 	rbit	r3, r3
 8006a84:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8006a86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a88:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8006a8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d101      	bne.n	8006a94 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8006a90:	2320      	movs	r3, #32
 8006a92:	e003      	b.n	8006a9c <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8006a94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a96:	fab3 f383 	clz	r3, r3
 8006a9a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d106      	bne.n	8006aae <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2103      	movs	r1, #3
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7ff fb4f 	bl	800614c <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7ff fbfe 	bl	80062b4 <LL_ADC_IsEnabled>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f040 813d 	bne.w	8006d3a <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	6819      	ldr	r1, [r3, #0]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	461a      	mov	r2, r3
 8006ace:	f7ff fbcd 	bl	800626c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	4aa2      	ldr	r2, [pc, #648]	@ (8006d60 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	f040 812e 	bne.w	8006d3a <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10b      	bne.n	8006b06 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	0e9b      	lsrs	r3, r3, #26
 8006af4:	3301      	adds	r3, #1
 8006af6:	f003 031f 	and.w	r3, r3, #31
 8006afa:	2b09      	cmp	r3, #9
 8006afc:	bf94      	ite	ls
 8006afe:	2301      	movls	r3, #1
 8006b00:	2300      	movhi	r3, #0
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	e019      	b.n	8006b3a <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b0e:	fa93 f3a3 	rbit	r3, r3
 8006b12:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8006b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8006b18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8006b1e:	2320      	movs	r3, #32
 8006b20:	e003      	b.n	8006b2a <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8006b22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b24:	fab3 f383 	clz	r3, r3
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	f003 031f 	and.w	r3, r3, #31
 8006b30:	2b09      	cmp	r3, #9
 8006b32:	bf94      	ite	ls
 8006b34:	2301      	movls	r3, #1
 8006b36:	2300      	movhi	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d079      	beq.n	8006c32 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d107      	bne.n	8006b5a <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	0e9b      	lsrs	r3, r3, #26
 8006b50:	3301      	adds	r3, #1
 8006b52:	069b      	lsls	r3, r3, #26
 8006b54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006b58:	e015      	b.n	8006b86 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b62:	fa93 f3a3 	rbit	r3, r3
 8006b66:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8006b68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b6a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8006b6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8006b72:	2320      	movs	r3, #32
 8006b74:	e003      	b.n	8006b7e <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8006b76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b78:	fab3 f383 	clz	r3, r3
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	3301      	adds	r3, #1
 8006b80:	069b      	lsls	r3, r3, #26
 8006b82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d109      	bne.n	8006ba6 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	0e9b      	lsrs	r3, r3, #26
 8006b98:	3301      	adds	r3, #1
 8006b9a:	f003 031f 	and.w	r3, r3, #31
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba4:	e017      	b.n	8006bd6 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bae:	fa93 f3a3 	rbit	r3, r3
 8006bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8006bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8006bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8006bbe:	2320      	movs	r3, #32
 8006bc0:	e003      	b.n	8006bca <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8006bc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bc4:	fab3 f383 	clz	r3, r3
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	3301      	adds	r3, #1
 8006bcc:	f003 031f 	and.w	r3, r3, #31
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd6:	ea42 0103 	orr.w	r1, r2, r3
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10a      	bne.n	8006bfc <HAL_ADCEx_InjectedConfigChannel+0x768>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	0e9b      	lsrs	r3, r3, #26
 8006bec:	3301      	adds	r3, #1
 8006bee:	f003 021f 	and.w	r2, r3, #31
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	4413      	add	r3, r2
 8006bf8:	051b      	lsls	r3, r3, #20
 8006bfa:	e018      	b.n	8006c2e <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c04:	fa93 f3a3 	rbit	r3, r3
 8006c08:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8006c14:	2320      	movs	r3, #32
 8006c16:	e003      	b.n	8006c20 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8006c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1a:	fab3 f383 	clz	r3, r3
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	3301      	adds	r3, #1
 8006c22:	f003 021f 	and.w	r2, r3, #31
 8006c26:	4613      	mov	r3, r2
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	4413      	add	r3, r2
 8006c2c:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c2e:	430b      	orrs	r3, r1
 8006c30:	e07e      	b.n	8006d30 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d107      	bne.n	8006c4e <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	0e9b      	lsrs	r3, r3, #26
 8006c44:	3301      	adds	r3, #1
 8006c46:	069b      	lsls	r3, r3, #26
 8006c48:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006c4c:	e015      	b.n	8006c7a <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c56:	fa93 f3a3 	rbit	r3, r3
 8006c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8006c66:	2320      	movs	r3, #32
 8006c68:	e003      	b.n	8006c72 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8006c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c6c:	fab3 f383 	clz	r3, r3
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	3301      	adds	r3, #1
 8006c74:	069b      	lsls	r3, r3, #26
 8006c76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d109      	bne.n	8006c9a <HAL_ADCEx_InjectedConfigChannel+0x806>
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	0e9b      	lsrs	r3, r3, #26
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	f003 031f 	and.w	r3, r3, #31
 8006c92:	2101      	movs	r1, #1
 8006c94:	fa01 f303 	lsl.w	r3, r1, r3
 8006c98:	e017      	b.n	8006cca <HAL_ADCEx_InjectedConfigChannel+0x836>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	fa93 f3a3 	rbit	r3, r3
 8006ca6:	61bb      	str	r3, [r7, #24]
  return result;
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8006cb2:	2320      	movs	r3, #32
 8006cb4:	e003      	b.n	8006cbe <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	fab3 f383 	clz	r3, r3
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	f003 031f 	and.w	r3, r3, #31
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cca:	ea42 0103 	orr.w	r1, r2, r3
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10d      	bne.n	8006cf6 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	0e9b      	lsrs	r3, r3, #26
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	f003 021f 	and.w	r2, r3, #31
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	4413      	add	r3, r2
 8006cec:	3b1e      	subs	r3, #30
 8006cee:	051b      	lsls	r3, r3, #20
 8006cf0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006cf4:	e01b      	b.n	8006d2e <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	fa93 f3a3 	rbit	r3, r3
 8006d02:	60fb      	str	r3, [r7, #12]
  return result;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8006d0e:	2320      	movs	r3, #32
 8006d10:	e003      	b.n	8006d1a <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	fab3 f383 	clz	r3, r3
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	f003 021f 	and.w	r2, r3, #31
 8006d20:	4613      	mov	r3, r2
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	4413      	add	r3, r2
 8006d26:	3b1e      	subs	r3, #30
 8006d28:	051b      	lsls	r3, r3, #20
 8006d2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d2e:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d34:	4619      	mov	r1, r3
 8006d36:	f7ff fa6d 	bl	8006214 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	4b09      	ldr	r3, [pc, #36]	@ (8006d64 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 80b2 	beq.w	8006eac <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d50:	d004      	beq.n	8006d5c <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a04      	ldr	r2, [pc, #16]	@ (8006d68 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d109      	bne.n	8006d70 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8006d5c:	4b03      	ldr	r3, [pc, #12]	@ (8006d6c <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8006d5e:	e008      	b.n	8006d72 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8006d60:	407f0000 	.word	0x407f0000
 8006d64:	80080000 	.word	0x80080000
 8006d68:	50000100 	.word	0x50000100
 8006d6c:	50000300 	.word	0x50000300
 8006d70:	4b53      	ldr	r3, [pc, #332]	@ (8006ec0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff f9a2 	bl	80060bc <LL_ADC_GetCommonPathInternalCh>
 8006d78:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a50      	ldr	r2, [pc, #320]	@ (8006ec4 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d004      	beq.n	8006d90 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a4f      	ldr	r2, [pc, #316]	@ (8006ec8 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d139      	bne.n	8006e04 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006d90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006d94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d133      	bne.n	8006e04 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006da4:	d004      	beq.n	8006db0 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a48      	ldr	r2, [pc, #288]	@ (8006ecc <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d17a      	bne.n	8006ea6 <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006db8:	d004      	beq.n	8006dc4 <HAL_ADCEx_InjectedConfigChannel+0x930>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a44      	ldr	r2, [pc, #272]	@ (8006ed0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d101      	bne.n	8006dc8 <HAL_ADCEx_InjectedConfigChannel+0x934>
 8006dc4:	4a43      	ldr	r2, [pc, #268]	@ (8006ed4 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8006dc6:	e000      	b.n	8006dca <HAL_ADCEx_InjectedConfigChannel+0x936>
 8006dc8:	4a3d      	ldr	r2, [pc, #244]	@ (8006ec0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8006dca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006dce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	f7ff f95e 	bl	8006096 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8006dda:	4b3f      	ldr	r3, [pc, #252]	@ (8006ed8 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	099b      	lsrs	r3, r3, #6
 8006de0:	4a3e      	ldr	r2, [pc, #248]	@ (8006edc <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 8006de2:	fba2 2303 	umull	r2, r3, r2, r3
 8006de6:	099a      	lsrs	r2, r3, #6
 8006de8:	4613      	mov	r3, r2
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8006df2:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8006df4:	e002      	b.n	8006dfc <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1f9      	bne.n	8006df6 <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006e02:	e050      	b.n	8006ea6 <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a35      	ldr	r2, [pc, #212]	@ (8006ee0 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d125      	bne.n	8006e5a <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006e0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d11f      	bne.n	8006e5a <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8006ed0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d104      	bne.n	8006e2e <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a2e      	ldr	r2, [pc, #184]	@ (8006ee4 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d03d      	beq.n	8006eaa <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e36:	d004      	beq.n	8006e42 <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a24      	ldr	r2, [pc, #144]	@ (8006ed0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d101      	bne.n	8006e46 <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8006e42:	4a24      	ldr	r2, [pc, #144]	@ (8006ed4 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8006e44:	e000      	b.n	8006e48 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 8006e46:	4a1e      	ldr	r2, [pc, #120]	@ (8006ec0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8006e48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e50:	4619      	mov	r1, r3
 8006e52:	4610      	mov	r0, r2
 8006e54:	f7ff f91f 	bl	8006096 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006e58:	e027      	b.n	8006eaa <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a22      	ldr	r2, [pc, #136]	@ (8006ee8 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d123      	bne.n	8006eac <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006e64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d11d      	bne.n	8006eac <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a16      	ldr	r2, [pc, #88]	@ (8006ed0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d018      	beq.n	8006eac <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e82:	d004      	beq.n	8006e8e <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a11      	ldr	r2, [pc, #68]	@ (8006ed0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d101      	bne.n	8006e92 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8006e8e:	4a11      	ldr	r2, [pc, #68]	@ (8006ed4 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8006e90:	e000      	b.n	8006e94 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8006e92:	4a0b      	ldr	r2, [pc, #44]	@ (8006ec0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8006e94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4610      	mov	r0, r2
 8006ea0:	f7ff f8f9 	bl	8006096 <LL_ADC_SetCommonPathInternalCh>
 8006ea4:	e002      	b.n	8006eac <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006ea6:	bf00      	nop
 8006ea8:	e000      	b.n	8006eac <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006eaa:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006eb4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	37d8      	adds	r7, #216	@ 0xd8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	50000700 	.word	0x50000700
 8006ec4:	c3210000 	.word	0xc3210000
 8006ec8:	90c00010 	.word	0x90c00010
 8006ecc:	50000600 	.word	0x50000600
 8006ed0:	50000100 	.word	0x50000100
 8006ed4:	50000300 	.word	0x50000300
 8006ed8:	20000000 	.word	0x20000000
 8006edc:	053e2d63 	.word	0x053e2d63
 8006ee0:	c7520000 	.word	0xc7520000
 8006ee4:	50000500 	.word	0x50000500
 8006ee8:	cb840000 	.word	0xcb840000

08006eec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006eec:	b590      	push	{r4, r7, lr}
 8006eee:	b0a1      	sub	sp, #132	@ 0x84
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d101      	bne.n	8006f0a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006f06:	2302      	movs	r3, #2
 8006f08:	e0e7      	b.n	80070da <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006f12:	2300      	movs	r3, #0
 8006f14:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006f16:	2300      	movs	r3, #0
 8006f18:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f22:	d102      	bne.n	8006f2a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006f24:	4b6f      	ldr	r3, [pc, #444]	@ (80070e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006f26:	60bb      	str	r3, [r7, #8]
 8006f28:	e009      	b.n	8006f3e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a6e      	ldr	r2, [pc, #440]	@ (80070e8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d102      	bne.n	8006f3a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006f34:	4b6d      	ldr	r3, [pc, #436]	@ (80070ec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006f36:	60bb      	str	r3, [r7, #8]
 8006f38:	e001      	b.n	8006f3e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10b      	bne.n	8006f5c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f48:	f043 0220 	orr.w	r2, r3, #32
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e0be      	b.n	80070da <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7ff f9e8 	bl	8006334 <LL_ADC_REG_IsConversionOngoing>
 8006f64:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff f9e2 	bl	8006334 <LL_ADC_REG_IsConversionOngoing>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f040 80a0 	bne.w	80070b8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006f78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f040 809c 	bne.w	80070b8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f88:	d004      	beq.n	8006f94 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a55      	ldr	r2, [pc, #340]	@ (80070e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d101      	bne.n	8006f98 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006f94:	4b56      	ldr	r3, [pc, #344]	@ (80070f0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006f96:	e000      	b.n	8006f9a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006f98:	4b56      	ldr	r3, [pc, #344]	@ (80070f4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006f9a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d04b      	beq.n	800703c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006fa4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	6859      	ldr	r1, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006fb6:	035b      	lsls	r3, r3, #13
 8006fb8:	430b      	orrs	r3, r1
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fbe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fc8:	d004      	beq.n	8006fd4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a45      	ldr	r2, [pc, #276]	@ (80070e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d10f      	bne.n	8006ff4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006fd4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006fd8:	f7ff f96c 	bl	80062b4 <LL_ADC_IsEnabled>
 8006fdc:	4604      	mov	r4, r0
 8006fde:	4841      	ldr	r0, [pc, #260]	@ (80070e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006fe0:	f7ff f968 	bl	80062b4 <LL_ADC_IsEnabled>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	4323      	orrs	r3, r4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	bf0c      	ite	eq
 8006fec:	2301      	moveq	r3, #1
 8006fee:	2300      	movne	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	e012      	b.n	800701a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006ff4:	483c      	ldr	r0, [pc, #240]	@ (80070e8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006ff6:	f7ff f95d 	bl	80062b4 <LL_ADC_IsEnabled>
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	483b      	ldr	r0, [pc, #236]	@ (80070ec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006ffe:	f7ff f959 	bl	80062b4 <LL_ADC_IsEnabled>
 8007002:	4603      	mov	r3, r0
 8007004:	431c      	orrs	r4, r3
 8007006:	483c      	ldr	r0, [pc, #240]	@ (80070f8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007008:	f7ff f954 	bl	80062b4 <LL_ADC_IsEnabled>
 800700c:	4603      	mov	r3, r0
 800700e:	4323      	orrs	r3, r4
 8007010:	2b00      	cmp	r3, #0
 8007012:	bf0c      	ite	eq
 8007014:	2301      	moveq	r3, #1
 8007016:	2300      	movne	r3, #0
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d056      	beq.n	80070cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800701e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007026:	f023 030f 	bic.w	r3, r3, #15
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	6811      	ldr	r1, [r2, #0]
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	6892      	ldr	r2, [r2, #8]
 8007032:	430a      	orrs	r2, r1
 8007034:	431a      	orrs	r2, r3
 8007036:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007038:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800703a:	e047      	b.n	80070cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800703c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007044:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007046:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007050:	d004      	beq.n	800705c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a23      	ldr	r2, [pc, #140]	@ (80070e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d10f      	bne.n	800707c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800705c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007060:	f7ff f928 	bl	80062b4 <LL_ADC_IsEnabled>
 8007064:	4604      	mov	r4, r0
 8007066:	481f      	ldr	r0, [pc, #124]	@ (80070e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007068:	f7ff f924 	bl	80062b4 <LL_ADC_IsEnabled>
 800706c:	4603      	mov	r3, r0
 800706e:	4323      	orrs	r3, r4
 8007070:	2b00      	cmp	r3, #0
 8007072:	bf0c      	ite	eq
 8007074:	2301      	moveq	r3, #1
 8007076:	2300      	movne	r3, #0
 8007078:	b2db      	uxtb	r3, r3
 800707a:	e012      	b.n	80070a2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800707c:	481a      	ldr	r0, [pc, #104]	@ (80070e8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800707e:	f7ff f919 	bl	80062b4 <LL_ADC_IsEnabled>
 8007082:	4604      	mov	r4, r0
 8007084:	4819      	ldr	r0, [pc, #100]	@ (80070ec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007086:	f7ff f915 	bl	80062b4 <LL_ADC_IsEnabled>
 800708a:	4603      	mov	r3, r0
 800708c:	431c      	orrs	r4, r3
 800708e:	481a      	ldr	r0, [pc, #104]	@ (80070f8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007090:	f7ff f910 	bl	80062b4 <LL_ADC_IsEnabled>
 8007094:	4603      	mov	r3, r0
 8007096:	4323      	orrs	r3, r4
 8007098:	2b00      	cmp	r3, #0
 800709a:	bf0c      	ite	eq
 800709c:	2301      	moveq	r3, #1
 800709e:	2300      	movne	r3, #0
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d012      	beq.n	80070cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80070a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80070ae:	f023 030f 	bic.w	r3, r3, #15
 80070b2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80070b4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80070b6:	e009      	b.n	80070cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070bc:	f043 0220 	orr.w	r2, r3, #32
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80070ca:	e000      	b.n	80070ce <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80070cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80070d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3784      	adds	r7, #132	@ 0x84
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd90      	pop	{r4, r7, pc}
 80070e2:	bf00      	nop
 80070e4:	50000100 	.word	0x50000100
 80070e8:	50000400 	.word	0x50000400
 80070ec:	50000500 	.word	0x50000500
 80070f0:	50000300 	.word	0x50000300
 80070f4:	50000700 	.word	0x50000700
 80070f8:	50000600 	.word	0x50000600

080070fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f003 0307 	and.w	r3, r3, #7
 800710a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800710c:	4b0c      	ldr	r3, [pc, #48]	@ (8007140 <__NVIC_SetPriorityGrouping+0x44>)
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007118:	4013      	ands	r3, r2
 800711a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007124:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800712c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800712e:	4a04      	ldr	r2, [pc, #16]	@ (8007140 <__NVIC_SetPriorityGrouping+0x44>)
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	60d3      	str	r3, [r2, #12]
}
 8007134:	bf00      	nop
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	e000ed00 	.word	0xe000ed00

08007144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007148:	4b04      	ldr	r3, [pc, #16]	@ (800715c <__NVIC_GetPriorityGrouping+0x18>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	0a1b      	lsrs	r3, r3, #8
 800714e:	f003 0307 	and.w	r3, r3, #7
}
 8007152:	4618      	mov	r0, r3
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	e000ed00 	.word	0xe000ed00

08007160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800716a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800716e:	2b00      	cmp	r3, #0
 8007170:	db0b      	blt.n	800718a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	f003 021f 	and.w	r2, r3, #31
 8007178:	4907      	ldr	r1, [pc, #28]	@ (8007198 <__NVIC_EnableIRQ+0x38>)
 800717a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800717e:	095b      	lsrs	r3, r3, #5
 8007180:	2001      	movs	r0, #1
 8007182:	fa00 f202 	lsl.w	r2, r0, r2
 8007186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	e000e100 	.word	0xe000e100

0800719c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4603      	mov	r3, r0
 80071a4:	6039      	str	r1, [r7, #0]
 80071a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	db0a      	blt.n	80071c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	490c      	ldr	r1, [pc, #48]	@ (80071e8 <__NVIC_SetPriority+0x4c>)
 80071b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ba:	0112      	lsls	r2, r2, #4
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	440b      	add	r3, r1
 80071c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80071c4:	e00a      	b.n	80071dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	4908      	ldr	r1, [pc, #32]	@ (80071ec <__NVIC_SetPriority+0x50>)
 80071cc:	79fb      	ldrb	r3, [r7, #7]
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	3b04      	subs	r3, #4
 80071d4:	0112      	lsls	r2, r2, #4
 80071d6:	b2d2      	uxtb	r2, r2
 80071d8:	440b      	add	r3, r1
 80071da:	761a      	strb	r2, [r3, #24]
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	e000e100 	.word	0xe000e100
 80071ec:	e000ed00 	.word	0xe000ed00

080071f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b089      	sub	sp, #36	@ 0x24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f003 0307 	and.w	r3, r3, #7
 8007202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	f1c3 0307 	rsb	r3, r3, #7
 800720a:	2b04      	cmp	r3, #4
 800720c:	bf28      	it	cs
 800720e:	2304      	movcs	r3, #4
 8007210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	3304      	adds	r3, #4
 8007216:	2b06      	cmp	r3, #6
 8007218:	d902      	bls.n	8007220 <NVIC_EncodePriority+0x30>
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	3b03      	subs	r3, #3
 800721e:	e000      	b.n	8007222 <NVIC_EncodePriority+0x32>
 8007220:	2300      	movs	r3, #0
 8007222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007224:	f04f 32ff 	mov.w	r2, #4294967295
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	fa02 f303 	lsl.w	r3, r2, r3
 800722e:	43da      	mvns	r2, r3
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	401a      	ands	r2, r3
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007238:	f04f 31ff 	mov.w	r1, #4294967295
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	fa01 f303 	lsl.w	r3, r1, r3
 8007242:	43d9      	mvns	r1, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007248:	4313      	orrs	r3, r2
         );
}
 800724a:	4618      	mov	r0, r3
 800724c:	3724      	adds	r7, #36	@ 0x24
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
	...

08007258 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007258:	b480      	push	{r7}
 800725a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800725c:	f3bf 8f4f 	dsb	sy
}
 8007260:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007262:	4b06      	ldr	r3, [pc, #24]	@ (800727c <__NVIC_SystemReset+0x24>)
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800726a:	4904      	ldr	r1, [pc, #16]	@ (800727c <__NVIC_SystemReset+0x24>)
 800726c:	4b04      	ldr	r3, [pc, #16]	@ (8007280 <__NVIC_SystemReset+0x28>)
 800726e:	4313      	orrs	r3, r2
 8007270:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007272:	f3bf 8f4f 	dsb	sy
}
 8007276:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007278:	bf00      	nop
 800727a:	e7fd      	b.n	8007278 <__NVIC_SystemReset+0x20>
 800727c:	e000ed00 	.word	0xe000ed00
 8007280:	05fa0004 	.word	0x05fa0004

08007284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3b01      	subs	r3, #1
 8007290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007294:	d301      	bcc.n	800729a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007296:	2301      	movs	r3, #1
 8007298:	e00f      	b.n	80072ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800729a:	4a0a      	ldr	r2, [pc, #40]	@ (80072c4 <SysTick_Config+0x40>)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	3b01      	subs	r3, #1
 80072a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072a2:	210f      	movs	r1, #15
 80072a4:	f04f 30ff 	mov.w	r0, #4294967295
 80072a8:	f7ff ff78 	bl	800719c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072ac:	4b05      	ldr	r3, [pc, #20]	@ (80072c4 <SysTick_Config+0x40>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072b2:	4b04      	ldr	r3, [pc, #16]	@ (80072c4 <SysTick_Config+0x40>)
 80072b4:	2207      	movs	r2, #7
 80072b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	e000e010 	.word	0xe000e010

080072c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff ff13 	bl	80070fc <__NVIC_SetPriorityGrouping>
}
 80072d6:	bf00      	nop
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b086      	sub	sp, #24
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	4603      	mov	r3, r0
 80072e6:	60b9      	str	r1, [r7, #8]
 80072e8:	607a      	str	r2, [r7, #4]
 80072ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80072ec:	f7ff ff2a 	bl	8007144 <__NVIC_GetPriorityGrouping>
 80072f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	68b9      	ldr	r1, [r7, #8]
 80072f6:	6978      	ldr	r0, [r7, #20]
 80072f8:	f7ff ff7a 	bl	80071f0 <NVIC_EncodePriority>
 80072fc:	4602      	mov	r2, r0
 80072fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007302:	4611      	mov	r1, r2
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff ff49 	bl	800719c <__NVIC_SetPriority>
}
 800730a:	bf00      	nop
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b082      	sub	sp, #8
 8007316:	af00      	add	r7, sp, #0
 8007318:	4603      	mov	r3, r0
 800731a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800731c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff ff1d 	bl	8007160 <__NVIC_EnableIRQ>
}
 8007326:	bf00      	nop
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007332:	f7ff ff91 	bl	8007258 <__NVIC_SystemReset>

08007336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7ff ffa0 	bl	8007284 <SysTick_Config>
 8007344:	4603      	mov	r3, r0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
	...

08007350 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e08d      	b.n	800747e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	461a      	mov	r2, r3
 8007368:	4b47      	ldr	r3, [pc, #284]	@ (8007488 <HAL_DMA_Init+0x138>)
 800736a:	429a      	cmp	r2, r3
 800736c:	d80f      	bhi.n	800738e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	461a      	mov	r2, r3
 8007374:	4b45      	ldr	r3, [pc, #276]	@ (800748c <HAL_DMA_Init+0x13c>)
 8007376:	4413      	add	r3, r2
 8007378:	4a45      	ldr	r2, [pc, #276]	@ (8007490 <HAL_DMA_Init+0x140>)
 800737a:	fba2 2303 	umull	r2, r3, r2, r3
 800737e:	091b      	lsrs	r3, r3, #4
 8007380:	009a      	lsls	r2, r3, #2
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a42      	ldr	r2, [pc, #264]	@ (8007494 <HAL_DMA_Init+0x144>)
 800738a:	641a      	str	r2, [r3, #64]	@ 0x40
 800738c:	e00e      	b.n	80073ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	4b40      	ldr	r3, [pc, #256]	@ (8007498 <HAL_DMA_Init+0x148>)
 8007396:	4413      	add	r3, r2
 8007398:	4a3d      	ldr	r2, [pc, #244]	@ (8007490 <HAL_DMA_Init+0x140>)
 800739a:	fba2 2303 	umull	r2, r3, r2, r3
 800739e:	091b      	lsrs	r3, r3, #4
 80073a0:	009a      	lsls	r2, r3, #2
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a3c      	ldr	r2, [pc, #240]	@ (800749c <HAL_DMA_Init+0x14c>)
 80073aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80073c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80073d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fa76 	bl	80078f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800740c:	d102      	bne.n	8007414 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800741c:	b2d2      	uxtb	r2, r2
 800741e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007428:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d010      	beq.n	8007454 <HAL_DMA_Init+0x104>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	2b04      	cmp	r3, #4
 8007438:	d80c      	bhi.n	8007454 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fa96 	bl	800796c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007450:	605a      	str	r2, [r3, #4]
 8007452:	e008      	b.n	8007466 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	40020407 	.word	0x40020407
 800748c:	bffdfff8 	.word	0xbffdfff8
 8007490:	cccccccd 	.word	0xcccccccd
 8007494:	40020000 	.word	0x40020000
 8007498:	bffdfbf8 	.word	0xbffdfbf8
 800749c:	40020400 	.word	0x40020400

080074a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d101      	bne.n	80074c0 <HAL_DMA_Start_IT+0x20>
 80074bc:	2302      	movs	r3, #2
 80074be:	e066      	b.n	800758e <HAL_DMA_Start_IT+0xee>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d155      	bne.n	8007580 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2202      	movs	r2, #2
 80074d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 0201 	bic.w	r2, r2, #1
 80074f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 f9bb 	bl	8007874 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007502:	2b00      	cmp	r3, #0
 8007504:	d008      	beq.n	8007518 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f042 020e 	orr.w	r2, r2, #14
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	e00f      	b.n	8007538 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 0204 	bic.w	r2, r2, #4
 8007526:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f042 020a 	orr.w	r2, r2, #10
 8007536:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d007      	beq.n	8007556 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007550:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007554:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800755a:	2b00      	cmp	r3, #0
 800755c:	d007      	beq.n	800756e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007568:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800756c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f042 0201 	orr.w	r2, r2, #1
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	e005      	b.n	800758c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007588:	2302      	movs	r3, #2
 800758a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800758c:	7dfb      	ldrb	r3, [r7, #23]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007596:	b480      	push	{r7}
 8007598:	b085      	sub	sp, #20
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d005      	beq.n	80075ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2204      	movs	r2, #4
 80075b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	73fb      	strb	r3, [r7, #15]
 80075b8:	e037      	b.n	800762a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 020e 	bic.w	r2, r2, #14
 80075c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80075d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0201 	bic.w	r2, r2, #1
 80075e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ee:	f003 021f 	and.w	r2, r3, #31
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f6:	2101      	movs	r1, #1
 80075f8:	fa01 f202 	lsl.w	r2, r1, r2
 80075fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007606:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00c      	beq.n	800762a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800761a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800761e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007628:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800763a:	7bfb      	ldrb	r3, [r7, #15]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d00d      	beq.n	800767c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2204      	movs	r2, #4
 8007664:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	73fb      	strb	r3, [r7, #15]
 800767a:	e047      	b.n	800770c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 020e 	bic.w	r2, r2, #14
 800768a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0201 	bic.w	r2, r2, #1
 800769a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80076aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076b0:	f003 021f 	and.w	r2, r3, #31
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b8:	2101      	movs	r1, #1
 80076ba:	fa01 f202 	lsl.w	r2, r1, r2
 80076be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80076c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00c      	beq.n	80076ec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80076e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80076ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007700:	2b00      	cmp	r3, #0
 8007702:	d003      	beq.n	800770c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	4798      	blx	r3
    }
  }
  return status;
 800770c:	7bfb      	ldrb	r3, [r7, #15]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007732:	f003 031f 	and.w	r3, r3, #31
 8007736:	2204      	movs	r2, #4
 8007738:	409a      	lsls	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4013      	ands	r3, r2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d026      	beq.n	8007790 <HAL_DMA_IRQHandler+0x7a>
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b00      	cmp	r3, #0
 800774a:	d021      	beq.n	8007790 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0320 	and.w	r3, r3, #32
 8007756:	2b00      	cmp	r3, #0
 8007758:	d107      	bne.n	800776a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0204 	bic.w	r2, r2, #4
 8007768:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800776e:	f003 021f 	and.w	r2, r3, #31
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007776:	2104      	movs	r1, #4
 8007778:	fa01 f202 	lsl.w	r2, r1, r2
 800777c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007782:	2b00      	cmp	r3, #0
 8007784:	d071      	beq.n	800786a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800778e:	e06c      	b.n	800786a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007794:	f003 031f 	and.w	r3, r3, #31
 8007798:	2202      	movs	r2, #2
 800779a:	409a      	lsls	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4013      	ands	r3, r2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d02e      	beq.n	8007802 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d029      	beq.n	8007802 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0320 	and.w	r3, r3, #32
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10b      	bne.n	80077d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 020a 	bic.w	r2, r2, #10
 80077ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077d8:	f003 021f 	and.w	r2, r3, #31
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e0:	2102      	movs	r1, #2
 80077e2:	fa01 f202 	lsl.w	r2, r1, r2
 80077e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d038      	beq.n	800786a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007800:	e033      	b.n	800786a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007806:	f003 031f 	and.w	r3, r3, #31
 800780a:	2208      	movs	r2, #8
 800780c:	409a      	lsls	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4013      	ands	r3, r2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d02a      	beq.n	800786c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f003 0308 	and.w	r3, r3, #8
 800781c:	2b00      	cmp	r3, #0
 800781e:	d025      	beq.n	800786c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f022 020e 	bic.w	r2, r2, #14
 800782e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007834:	f003 021f 	and.w	r2, r3, #31
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783c:	2101      	movs	r1, #1
 800783e:	fa01 f202 	lsl.w	r2, r1, r2
 8007842:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800785e:	2b00      	cmp	r3, #0
 8007860:	d004      	beq.n	800786c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800786a:	bf00      	nop
 800786c:	bf00      	nop
}
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800788a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007890:	2b00      	cmp	r3, #0
 8007892:	d004      	beq.n	800789e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800789c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078a2:	f003 021f 	and.w	r2, r3, #31
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078aa:	2101      	movs	r1, #1
 80078ac:	fa01 f202 	lsl.w	r2, r1, r2
 80078b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	2b10      	cmp	r3, #16
 80078c0:	d108      	bne.n	80078d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80078d2:	e007      	b.n	80078e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	60da      	str	r2, [r3, #12]
}
 80078e4:	bf00      	nop
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	461a      	mov	r2, r3
 80078fe:	4b16      	ldr	r3, [pc, #88]	@ (8007958 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007900:	429a      	cmp	r2, r3
 8007902:	d802      	bhi.n	800790a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007904:	4b15      	ldr	r3, [pc, #84]	@ (800795c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007906:	617b      	str	r3, [r7, #20]
 8007908:	e001      	b.n	800790e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800790a:	4b15      	ldr	r3, [pc, #84]	@ (8007960 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800790c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	b2db      	uxtb	r3, r3
 8007918:	3b08      	subs	r3, #8
 800791a:	4a12      	ldr	r2, [pc, #72]	@ (8007964 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800791c:	fba2 2303 	umull	r2, r3, r2, r3
 8007920:	091b      	lsrs	r3, r3, #4
 8007922:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007928:	089b      	lsrs	r3, r3, #2
 800792a:	009a      	lsls	r2, r3, #2
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	4413      	add	r3, r2
 8007930:	461a      	mov	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a0b      	ldr	r2, [pc, #44]	@ (8007968 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800793a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f003 031f 	and.w	r3, r3, #31
 8007942:	2201      	movs	r2, #1
 8007944:	409a      	lsls	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800794a:	bf00      	nop
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	40020407 	.word	0x40020407
 800795c:	40020800 	.word	0x40020800
 8007960:	40020820 	.word	0x40020820
 8007964:	cccccccd 	.word	0xcccccccd
 8007968:	40020880 	.word	0x40020880

0800796c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	b2db      	uxtb	r3, r3
 800797a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	4b0b      	ldr	r3, [pc, #44]	@ (80079ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007980:	4413      	add	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	461a      	mov	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a08      	ldr	r2, [pc, #32]	@ (80079b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800798e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	3b01      	subs	r3, #1
 8007994:	f003 031f 	and.w	r3, r3, #31
 8007998:	2201      	movs	r2, #1
 800799a:	409a      	lsls	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80079a0:	bf00      	nop
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	1000823f 	.word	0x1000823f
 80079b0:	40020940 	.word	0x40020940

080079b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80079c2:	e15a      	b.n	8007c7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	2101      	movs	r1, #1
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	fa01 f303 	lsl.w	r3, r1, r3
 80079d0:	4013      	ands	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 814c 	beq.w	8007c74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f003 0303 	and.w	r3, r3, #3
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d005      	beq.n	80079f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d130      	bne.n	8007a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	2203      	movs	r2, #3
 8007a00:	fa02 f303 	lsl.w	r3, r2, r3
 8007a04:	43db      	mvns	r3, r3
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	fa02 f303 	lsl.w	r3, r2, r3
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	43db      	mvns	r3, r3
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	4013      	ands	r3, r2
 8007a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	091b      	lsrs	r3, r3, #4
 8007a40:	f003 0201 	and.w	r2, r3, #1
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f003 0303 	and.w	r3, r3, #3
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	d017      	beq.n	8007a92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	2203      	movs	r2, #3
 8007a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a72:	43db      	mvns	r3, r3
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	4013      	ands	r3, r2
 8007a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	689a      	ldr	r2, [r3, #8]
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	005b      	lsls	r3, r3, #1
 8007a82:	fa02 f303 	lsl.w	r3, r2, r3
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f003 0303 	and.w	r3, r3, #3
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d123      	bne.n	8007ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	08da      	lsrs	r2, r3, #3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3208      	adds	r2, #8
 8007aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f003 0307 	and.w	r3, r3, #7
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	220f      	movs	r2, #15
 8007ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aba:	43db      	mvns	r3, r3
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	4013      	ands	r3, r2
 8007ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	691a      	ldr	r2, [r3, #16]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f003 0307 	and.w	r3, r3, #7
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	08da      	lsrs	r2, r3, #3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	3208      	adds	r2, #8
 8007ae0:	6939      	ldr	r1, [r7, #16]
 8007ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	2203      	movs	r2, #3
 8007af2:	fa02 f303 	lsl.w	r3, r2, r3
 8007af6:	43db      	mvns	r3, r3
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	4013      	ands	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f003 0203 	and.w	r2, r3, #3
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 80a6 	beq.w	8007c74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b28:	4b5b      	ldr	r3, [pc, #364]	@ (8007c98 <HAL_GPIO_Init+0x2e4>)
 8007b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b2c:	4a5a      	ldr	r2, [pc, #360]	@ (8007c98 <HAL_GPIO_Init+0x2e4>)
 8007b2e:	f043 0301 	orr.w	r3, r3, #1
 8007b32:	6613      	str	r3, [r2, #96]	@ 0x60
 8007b34:	4b58      	ldr	r3, [pc, #352]	@ (8007c98 <HAL_GPIO_Init+0x2e4>)
 8007b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	60bb      	str	r3, [r7, #8]
 8007b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b40:	4a56      	ldr	r2, [pc, #344]	@ (8007c9c <HAL_GPIO_Init+0x2e8>)
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	089b      	lsrs	r3, r3, #2
 8007b46:	3302      	adds	r3, #2
 8007b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f003 0303 	and.w	r3, r3, #3
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	220f      	movs	r2, #15
 8007b58:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5c:	43db      	mvns	r3, r3
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	4013      	ands	r3, r2
 8007b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007b6a:	d01f      	beq.n	8007bac <HAL_GPIO_Init+0x1f8>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a4c      	ldr	r2, [pc, #304]	@ (8007ca0 <HAL_GPIO_Init+0x2ec>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d019      	beq.n	8007ba8 <HAL_GPIO_Init+0x1f4>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a4b      	ldr	r2, [pc, #300]	@ (8007ca4 <HAL_GPIO_Init+0x2f0>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d013      	beq.n	8007ba4 <HAL_GPIO_Init+0x1f0>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a4a      	ldr	r2, [pc, #296]	@ (8007ca8 <HAL_GPIO_Init+0x2f4>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00d      	beq.n	8007ba0 <HAL_GPIO_Init+0x1ec>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a49      	ldr	r2, [pc, #292]	@ (8007cac <HAL_GPIO_Init+0x2f8>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d007      	beq.n	8007b9c <HAL_GPIO_Init+0x1e8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a48      	ldr	r2, [pc, #288]	@ (8007cb0 <HAL_GPIO_Init+0x2fc>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d101      	bne.n	8007b98 <HAL_GPIO_Init+0x1e4>
 8007b94:	2305      	movs	r3, #5
 8007b96:	e00a      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007b98:	2306      	movs	r3, #6
 8007b9a:	e008      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007b9c:	2304      	movs	r3, #4
 8007b9e:	e006      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e004      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e002      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e000      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007bac:	2300      	movs	r3, #0
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	f002 0203 	and.w	r2, r2, #3
 8007bb4:	0092      	lsls	r2, r2, #2
 8007bb6:	4093      	lsls	r3, r2
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007bbe:	4937      	ldr	r1, [pc, #220]	@ (8007c9c <HAL_GPIO_Init+0x2e8>)
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	089b      	lsrs	r3, r3, #2
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007bcc:	4b39      	ldr	r3, [pc, #228]	@ (8007cb4 <HAL_GPIO_Init+0x300>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	43db      	mvns	r3, r3
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	4013      	ands	r3, r2
 8007bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007bf0:	4a30      	ldr	r2, [pc, #192]	@ (8007cb4 <HAL_GPIO_Init+0x300>)
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8007cb4 <HAL_GPIO_Init+0x300>)
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	43db      	mvns	r3, r3
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	4013      	ands	r3, r2
 8007c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007c1a:	4a26      	ldr	r2, [pc, #152]	@ (8007cb4 <HAL_GPIO_Init+0x300>)
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007c20:	4b24      	ldr	r3, [pc, #144]	@ (8007cb4 <HAL_GPIO_Init+0x300>)
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	43db      	mvns	r3, r3
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007c44:	4a1b      	ldr	r2, [pc, #108]	@ (8007cb4 <HAL_GPIO_Init+0x300>)
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8007cb4 <HAL_GPIO_Init+0x300>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	43db      	mvns	r3, r3
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4013      	ands	r3, r2
 8007c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007c6e:	4a11      	ldr	r2, [pc, #68]	@ (8007cb4 <HAL_GPIO_Init+0x300>)
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	3301      	adds	r3, #1
 8007c78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	fa22 f303 	lsr.w	r3, r2, r3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f47f ae9d 	bne.w	80079c4 <HAL_GPIO_Init+0x10>
  }
}
 8007c8a:	bf00      	nop
 8007c8c:	bf00      	nop
 8007c8e:	371c      	adds	r7, #28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	40021000 	.word	0x40021000
 8007c9c:	40010000 	.word	0x40010000
 8007ca0:	48000400 	.word	0x48000400
 8007ca4:	48000800 	.word	0x48000800
 8007ca8:	48000c00 	.word	0x48000c00
 8007cac:	48001000 	.word	0x48001000
 8007cb0:	48001400 	.word	0x48001400
 8007cb4:	40010400 	.word	0x40010400

08007cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	807b      	strh	r3, [r7, #2]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007cc8:	787b      	ldrb	r3, [r7, #1]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007cce:	887a      	ldrh	r2, [r7, #2]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007cd4:	e002      	b.n	8007cdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007cd6:	887a      	ldrh	r2, [r7, #2]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e0be      	b.n	8007e78 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d02e      	beq.n	8007da4 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a4d      	ldr	r2, [pc, #308]	@ (8007e80 <HAL_HRTIM_Init+0x198>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d10b      	bne.n	8007d68 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8007d50:	4b4c      	ldr	r3, [pc, #304]	@ (8007e84 <HAL_HRTIM_Init+0x19c>)
 8007d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d54:	4a4b      	ldr	r2, [pc, #300]	@ (8007e84 <HAL_HRTIM_Init+0x19c>)
 8007d56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8007d5c:	4b49      	ldr	r3, [pc, #292]	@ (8007e84 <HAL_HRTIM_Init+0x19c>)
 8007d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8007d76:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007d8c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7f9 ff91 	bl	8001ccc <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d012      	beq.n	8007ddc <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dc4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007dec:	2300      	movs	r3, #0
 8007dee:	75fb      	strb	r3, [r7, #23]
 8007df0:	e03e      	b.n	8007e70 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8007df2:	7dfa      	ldrb	r2, [r7, #23]
 8007df4:	6879      	ldr	r1, [r7, #4]
 8007df6:	4613      	mov	r3, r2
 8007df8:	00db      	lsls	r3, r3, #3
 8007dfa:	1a9b      	subs	r3, r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	440b      	add	r3, r1
 8007e00:	3318      	adds	r3, #24
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8007e06:	7dfa      	ldrb	r2, [r7, #23]
 8007e08:	6879      	ldr	r1, [r7, #4]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	1a9b      	subs	r3, r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	440b      	add	r3, r1
 8007e14:	331c      	adds	r3, #28
 8007e16:	2200      	movs	r2, #0
 8007e18:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8007e1a:	7dfa      	ldrb	r2, [r7, #23]
 8007e1c:	6879      	ldr	r1, [r7, #4]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	00db      	lsls	r3, r3, #3
 8007e22:	1a9b      	subs	r3, r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	440b      	add	r3, r1
 8007e28:	3320      	adds	r3, #32
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8007e2e:	7dfa      	ldrb	r2, [r7, #23]
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	4613      	mov	r3, r2
 8007e34:	00db      	lsls	r3, r3, #3
 8007e36:	1a9b      	subs	r3, r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	440b      	add	r3, r1
 8007e3c:	3324      	adds	r3, #36	@ 0x24
 8007e3e:	2200      	movs	r2, #0
 8007e40:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8007e42:	7dfa      	ldrb	r2, [r7, #23]
 8007e44:	6879      	ldr	r1, [r7, #4]
 8007e46:	4613      	mov	r3, r2
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	1a9b      	subs	r3, r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	440b      	add	r3, r1
 8007e50:	3328      	adds	r3, #40	@ 0x28
 8007e52:	2200      	movs	r2, #0
 8007e54:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8007e56:	7dfa      	ldrb	r2, [r7, #23]
 8007e58:	6879      	ldr	r1, [r7, #4]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	00db      	lsls	r3, r3, #3
 8007e5e:	1a9b      	subs	r3, r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	440b      	add	r3, r1
 8007e64:	3330      	adds	r3, #48	@ 0x30
 8007e66:	2200      	movs	r2, #0
 8007e68:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007e6a:	7dfb      	ldrb	r3, [r7, #23]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8007e70:	7dfb      	ldrb	r3, [r7, #23]
 8007e72:	2b06      	cmp	r3, #6
 8007e74:	d9bd      	bls.n	8007df2 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	40016800 	.word	0x40016800
 8007e84:	40021000 	.word	0x40021000

08007e88 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t CalibrationRate)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d101      	bne.n	8007ea0 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	e045      	b.n	8007f2c <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb6:	d114      	bne.n	8007ee2 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f022 0202 	bic.w	r2, r2, #2
 8007ec8:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f042 0201 	orr.w	r2, r2, #1
 8007edc:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8007ee0:	e01f      	b.n	8007f22 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0202 	orr.w	r2, r2, #2
 8007ef2:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8007efe:	f023 010c 	bic.w	r1, r3, #12
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f042 0201 	orr.w	r2, r2, #1
 8007f1e:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t Timeout)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8007f42:	f7fc fb3d 	bl	80045c0 <HAL_GetTick>
 8007f46:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8007f48:	e014      	b.n	8007f74 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f50:	d010      	beq.n	8007f74 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f52:	f7fc fb35 	bl	80045c0 <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	683a      	ldr	r2, [r7, #0]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d302      	bcc.n	8007f68 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d105      	bne.n	8007f74 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2207      	movs	r2, #7
 8007f6c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e011      	b.n	8007f98 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8007f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f84:	d1e1      	bne.n	8007f4a <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d101      	bne.n	8007fbc <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 8007fb8:	2302      	movs	r3, #2
 8007fba:	e015      	b.n	8007fe8 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b06      	cmp	r3, #6
 8007fc8:	d104      	bne.n	8007fd4 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8007fca:	6879      	ldr	r1, [r7, #4]
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 fe7c 	bl	8008cca <HRTIM_MasterBase_Config>
 8007fd2:	e004      	b.n	8007fde <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	68b9      	ldr	r1, [r7, #8]
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 fea5 	bl	8008d28 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t ADCTrigger,
                                             const HRTIM_ADCTriggerCfgTypeDef *pADCTriggerCfg)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b02      	cmp	r3, #2
 8008006:	d101      	bne.n	800800c <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
    return HAL_BUSY;
 8008008:	2302      	movs	r3, #2
 800800a:	e1d7      	b.n	80083bc <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8008012:	2b01      	cmp	r3, #1
 8008014:	d101      	bne.n	800801a <HAL_HRTIM_ADCTriggerConfig+0x2a>
 8008016:	2302      	movs	r3, #2
 8008018:	e1d0      	b.n	80083bc <HAL_HRTIM_ADCTriggerConfig+0x3cc>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2202      	movs	r2, #2
 8008026:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008032:	617b      	str	r3, [r7, #20]
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 800803c:	613b      	str	r3, [r7, #16]

  switch (ADCTrigger)
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008044:	f000 816d 	beq.w	8008322 <HAL_HRTIM_ADCTriggerConfig+0x332>
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800804e:	f200 818d 	bhi.w	800836c <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008058:	f000 813f 	beq.w	80082da <HAL_HRTIM_ADCTriggerConfig+0x2ea>
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008062:	f200 8183 	bhi.w	800836c <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	2b80      	cmp	r3, #128	@ 0x80
 800806a:	f000 8111 	beq.w	8008290 <HAL_HRTIM_ADCTriggerConfig+0x2a0>
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2b80      	cmp	r3, #128	@ 0x80
 8008072:	f200 817b 	bhi.w	800836c <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2b20      	cmp	r3, #32
 800807a:	d84b      	bhi.n	8008114 <HAL_HRTIM_ADCTriggerConfig+0x124>
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 8174 	beq.w	800836c <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	3b01      	subs	r3, #1
 8008088:	2b1f      	cmp	r3, #31
 800808a:	f200 816f 	bhi.w	800836c <HAL_HRTIM_ADCTriggerConfig+0x37c>
 800808e:	a201      	add	r2, pc, #4	@ (adr r2, 8008094 <HAL_HRTIM_ADCTriggerConfig+0xa4>)
 8008090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008094:	0800811f 	.word	0x0800811f
 8008098:	08008143 	.word	0x08008143
 800809c:	0800836d 	.word	0x0800836d
 80080a0:	08008169 	.word	0x08008169
 80080a4:	0800836d 	.word	0x0800836d
 80080a8:	0800836d 	.word	0x0800836d
 80080ac:	0800836d 	.word	0x0800836d
 80080b0:	0800818f 	.word	0x0800818f
 80080b4:	0800836d 	.word	0x0800836d
 80080b8:	0800836d 	.word	0x0800836d
 80080bc:	0800836d 	.word	0x0800836d
 80080c0:	0800836d 	.word	0x0800836d
 80080c4:	0800836d 	.word	0x0800836d
 80080c8:	0800836d 	.word	0x0800836d
 80080cc:	0800836d 	.word	0x0800836d
 80080d0:	080081b5 	.word	0x080081b5
 80080d4:	0800836d 	.word	0x0800836d
 80080d8:	0800836d 	.word	0x0800836d
 80080dc:	0800836d 	.word	0x0800836d
 80080e0:	0800836d 	.word	0x0800836d
 80080e4:	0800836d 	.word	0x0800836d
 80080e8:	0800836d 	.word	0x0800836d
 80080ec:	0800836d 	.word	0x0800836d
 80080f0:	0800836d 	.word	0x0800836d
 80080f4:	0800836d 	.word	0x0800836d
 80080f8:	0800836d 	.word	0x0800836d
 80080fc:	0800836d 	.word	0x0800836d
 8008100:	0800836d 	.word	0x0800836d
 8008104:	0800836d 	.word	0x0800836d
 8008108:	0800836d 	.word	0x0800836d
 800810c:	0800836d 	.word	0x0800836d
 8008110:	080081fd 	.word	0x080081fd
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	2b40      	cmp	r3, #64	@ 0x40
 8008118:	f000 8095 	beq.w	8008246 <HAL_HRTIM_ADCTriggerConfig+0x256>
 800811c:	e126      	b.n	800836c <HAL_HRTIM_ADCTriggerConfig+0x37c>
  {
    case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8008124:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	4313      	orrs	r3, r2
 8008132:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	6852      	ldr	r2, [r2, #4]
 800813c:	f8c3 23bc 	str.w	r2, [r3, #956]	@ 0x3bc
      break;
 8008140:	e11d      	b.n	800837e <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f423 1360 	bic.w	r3, r3, #3670016	@ 0x380000
 8008148:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	6852      	ldr	r2, [r2, #4]
 8008162:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0
      break;
 8008166:	e10a      	b.n	800837e <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800816e:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	019b      	lsls	r3, r3, #6
 8008176:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	4313      	orrs	r3, r2
 800817e:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	6852      	ldr	r2, [r2, #4]
 8008188:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
      break;
 800818c:	e0f7      	b.n	800837e <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8008194:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	025b      	lsls	r3, r3, #9
 800819c:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6852      	ldr	r2, [r2, #4]
 80081ae:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
      break;
 80081b2:	e0e4      	b.n	800837e <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_5:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD5USRC);
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	f023 0307 	bic.w	r3, r3, #7
 80081ba:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	0c1b      	lsrs	r3, r3, #16
 80081c2:	f003 0307 	and.w	r3, r3, #7
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 5 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f022 021f 	bic.w	r2, r2, #31
 80081dc:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f003 021f 	and.w	r2, r3, #31
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	430a      	orrs	r2, r1
 80081f6:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 80081fa:	e0c0      	b.n	800837e <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_6:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008202:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	0b1b      	lsrs	r3, r3, #12
 800820a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 6 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8008224:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	015b      	lsls	r3, r3, #5
 8008236:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	430a      	orrs	r2, r1
 8008240:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8008244:	e09b      	b.n	800837e <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_7:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800824c:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	0a1b      	lsrs	r3, r3, #8
 8008254:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 7 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 800826e:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	029b      	lsls	r3, r3, #10
 8008280:	f403 42f8 	and.w	r2, r3, #31744	@ 0x7c00
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	430a      	orrs	r2, r1
 800828a:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 800828e:	e076      	b.n	800837e <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_8:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008296:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	091b      	lsrs	r3, r3, #4
 800829e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 8 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 80082b8:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	041b      	lsls	r3, r3, #16
 80082ca:	f403 12f8 	and.w	r2, r3, #2031616	@ 0x1f0000
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 80082d8:	e051      	b.n	800837e <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_9:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80082e0:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 9 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f022 7278 	bic.w	r2, r2, #65011712	@ 0x3e00000
 8008300:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	055b      	lsls	r3, r3, #21
 8008312:	f003 7278 	and.w	r2, r3, #65011712	@ 0x3e00000
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8008320:	e02d      	b.n	800837e <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_10:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008328:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	011b      	lsls	r3, r3, #4
 8008330:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	4313      	orrs	r3, r2
 8008338:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 10 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800834a:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	069b      	lsls	r3, r3, #26
 800835c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	430a      	orrs	r2, r1
 8008366:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 800836a:	e008      	b.n	800837e <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2207      	movs	r2, #7
 8008370:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 800837c:	bf00      	nop
    }
  }

  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b07      	cmp	r3, #7
 8008388:	d101      	bne.n	800838e <HAL_HRTIM_ADCTriggerConfig+0x39e>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e016      	b.n	80083bc <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Update the HRTIM registers */
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	2b0f      	cmp	r3, #15
 8008392:	d805      	bhi.n	80083a0 <HAL_HRTIM_ADCTriggerConfig+0x3b0>
  {
    hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
 800839e:	e004      	b.n	80083aa <HAL_HRTIM_ADCTriggerConfig+0x3ba>
  }
  else
  {
    hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	371c      	adds	r7, #28
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <HAL_HRTIM_ADCPostScalerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCPostScalerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t ADCTrigger,
                                                uint32_t Postscaler)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d101      	bne.n	80083e4 <HAL_HRTIM_ADCPostScalerConfig+0x1c>
  {
    return HAL_BUSY;
 80083e0:	2302      	movs	r3, #2
 80083e2:	e135      	b.n	8008650 <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d101      	bne.n	80083f2 <HAL_HRTIM_ADCPostScalerConfig+0x2a>
 80083ee:	2302      	movs	r3, #2
 80083f0:	e12e      	b.n	8008650 <HAL_HRTIM_ADCPostScalerConfig+0x288>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2202      	movs	r2, #2
 80083fe:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  switch (ADCTrigger)
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008408:	f000 80f8 	beq.w	80085fc <HAL_HRTIM_ADCPostScalerConfig+0x234>
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008412:	f200 8103 	bhi.w	800861c <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800841c:	f000 80de 	beq.w	80085dc <HAL_HRTIM_ADCPostScalerConfig+0x214>
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008426:	f200 80f9 	bhi.w	800861c <HAL_HRTIM_ADCPostScalerConfig+0x254>
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b80      	cmp	r3, #128	@ 0x80
 800842e:	f000 80c5 	beq.w	80085bc <HAL_HRTIM_ADCPostScalerConfig+0x1f4>
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	2b80      	cmp	r3, #128	@ 0x80
 8008436:	f200 80f1 	bhi.w	800861c <HAL_HRTIM_ADCPostScalerConfig+0x254>
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b20      	cmp	r3, #32
 800843e:	d84b      	bhi.n	80084d8 <HAL_HRTIM_ADCPostScalerConfig+0x110>
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	f000 80ea 	beq.w	800861c <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	3b01      	subs	r3, #1
 800844c:	2b1f      	cmp	r3, #31
 800844e:	f200 80e5 	bhi.w	800861c <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8008452:	a201      	add	r2, pc, #4	@ (adr r2, 8008458 <HAL_HRTIM_ADCPostScalerConfig+0x90>)
 8008454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008458:	080084e1 	.word	0x080084e1
 800845c:	080084ff 	.word	0x080084ff
 8008460:	0800861d 	.word	0x0800861d
 8008464:	0800851f 	.word	0x0800851f
 8008468:	0800861d 	.word	0x0800861d
 800846c:	0800861d 	.word	0x0800861d
 8008470:	0800861d 	.word	0x0800861d
 8008474:	0800853f 	.word	0x0800853f
 8008478:	0800861d 	.word	0x0800861d
 800847c:	0800861d 	.word	0x0800861d
 8008480:	0800861d 	.word	0x0800861d
 8008484:	0800861d 	.word	0x0800861d
 8008488:	0800861d 	.word	0x0800861d
 800848c:	0800861d 	.word	0x0800861d
 8008490:	0800861d 	.word	0x0800861d
 8008494:	0800855f 	.word	0x0800855f
 8008498:	0800861d 	.word	0x0800861d
 800849c:	0800861d 	.word	0x0800861d
 80084a0:	0800861d 	.word	0x0800861d
 80084a4:	0800861d 	.word	0x0800861d
 80084a8:	0800861d 	.word	0x0800861d
 80084ac:	0800861d 	.word	0x0800861d
 80084b0:	0800861d 	.word	0x0800861d
 80084b4:	0800861d 	.word	0x0800861d
 80084b8:	0800861d 	.word	0x0800861d
 80084bc:	0800861d 	.word	0x0800861d
 80084c0:	0800861d 	.word	0x0800861d
 80084c4:	0800861d 	.word	0x0800861d
 80084c8:	0800861d 	.word	0x0800861d
 80084cc:	0800861d 	.word	0x0800861d
 80084d0:	0800861d 	.word	0x0800861d
 80084d4:	0800857f 	.word	0x0800857f
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2b40      	cmp	r3, #64	@ 0x40
 80084dc:	d05e      	beq.n	800859c <HAL_HRTIM_ADCPostScalerConfig+0x1d4>
 80084de:	e09d      	b.n	800861c <HAL_HRTIM_ADCPostScalerConfig+0x254>
  {
    case HRTIM_ADCTRIGGER_1:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80084e8:	f023 011f 	bic.w	r1, r3, #31
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f003 021f 	and.w	r2, r3, #31
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	430a      	orrs	r2, r1
 80084f8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 80084fc:	e097      	b.n	800862e <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_2:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008506:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	019b      	lsls	r3, r3, #6
 800850e:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 800851c:	e087      	b.n	800862e <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_3:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008526:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	031b      	lsls	r3, r3, #12
 800852e:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 800853c:	e077      	b.n	800862e <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_4:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008546:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	049b      	lsls	r3, r3, #18
 800854e:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	430a      	orrs	r2, r1
 8008558:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 800855c:	e067      	b.n	800862e <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008566:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	061b      	lsls	r3, r3, #24
 800856e:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	430a      	orrs	r2, r1
 8008578:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 800857c:	e057      	b.n	800862e <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008586:	f023 011f 	bic.w	r1, r3, #31
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f003 021f 	and.w	r2, r3, #31
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	430a      	orrs	r2, r1
 8008596:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 800859a:	e048      	b.n	800862e <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_7:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80085a4:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	019b      	lsls	r3, r3, #6
 80085ac:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 80085ba:	e038      	b.n	800862e <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_8:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80085c4:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	031b      	lsls	r3, r3, #12
 80085cc:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	430a      	orrs	r2, r1
 80085d6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 80085da:	e028      	b.n	800862e <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_9:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80085e4:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	049b      	lsls	r3, r3, #18
 80085ec:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	430a      	orrs	r2, r1
 80085f6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 80085fa:	e018      	b.n	800862e <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_10:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008604:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	061b      	lsls	r3, r3, #24
 800860c:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	430a      	orrs	r2, r1
 8008616:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 800861a:	e008      	b.n	800862e <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2207      	movs	r2, #7
 8008620:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 800862c:	bf00      	nop
    }
  }

  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b07      	cmp	r3, #7
 8008638:	d101      	bne.n	800863e <HAL_HRTIM_ADCPostScalerConfig+0x276>
  {
    return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e008      	b.n	8008650 <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b02      	cmp	r3, #2
 8008672:	d101      	bne.n	8008678 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 8008674:	2302      	movs	r3, #2
 8008676:	e07a      	b.n	800876e <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800867e:	2b01      	cmp	r3, #1
 8008680:	d101      	bne.n	8008686 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8008682:	2302      	movs	r3, #2
 8008684:	e073      	b.n	800876e <HAL_HRTIM_WaveformTimerConfig+0x112>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2202      	movs	r2, #2
 8008692:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	2b06      	cmp	r3, #6
 800869a:	d104      	bne.n	80086a6 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 800869c:	6879      	ldr	r1, [r7, #4]
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f000 fb82 	bl	8008da8 <HRTIM_MasterWaveform_Config>
 80086a4:	e004      	b.n	80086b0 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	68b9      	ldr	r1, [r7, #8]
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f000 fc1a 	bl	8008ee4 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6819      	ldr	r1, [r3, #0]
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	4613      	mov	r3, r2
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	1a9b      	subs	r3, r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4403      	add	r3, r0
 80086c2:	3320      	adds	r3, #32
 80086c4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6859      	ldr	r1, [r3, #4]
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	4613      	mov	r3, r2
 80086d0:	00db      	lsls	r3, r3, #3
 80086d2:	1a9b      	subs	r3, r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4403      	add	r3, r0
 80086d8:	3324      	adds	r3, #36	@ 0x24
 80086da:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6899      	ldr	r1, [r3, #8]
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	4613      	mov	r3, r2
 80086e6:	00db      	lsls	r3, r3, #3
 80086e8:	1a9b      	subs	r3, r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4403      	add	r3, r0
 80086ee:	3328      	adds	r3, #40	@ 0x28
 80086f0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68d9      	ldr	r1, [r3, #12]
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	68ba      	ldr	r2, [r7, #8]
 80086fa:	4613      	mov	r3, r2
 80086fc:	00db      	lsls	r3, r3, #3
 80086fe:	1a9b      	subs	r3, r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4403      	add	r3, r0
 8008704:	332c      	adds	r3, #44	@ 0x2c
 8008706:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6919      	ldr	r1, [r3, #16]
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	4613      	mov	r3, r2
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	1a9b      	subs	r3, r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4403      	add	r3, r0
 800871a:	3330      	adds	r3, #48	@ 0x30
 800871c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800871e:	68b9      	ldr	r1, [r7, #8]
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f000 fead 	bl	8009480 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	2b06      	cmp	r3, #6
 800872a:	d017      	beq.n	800875c <HAL_HRTIM_WaveformTimerConfig+0x100>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008730:	2b00      	cmp	r3, #0
 8008732:	d113      	bne.n	800875c <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	3301      	adds	r3, #1
 800873c:	01db      	lsls	r3, r3, #7
 800873e:	4413      	add	r3, r2
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800874a:	025b      	lsls	r3, r3, #9
 800874c:	68f9      	ldr	r1, [r7, #12]
 800874e:	6809      	ldr	r1, [r1, #0]
 8008750:	431a      	orrs	r2, r3
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	3301      	adds	r3, #1
 8008756:	01db      	lsls	r3, r3, #7
 8008758:	440b      	add	r3, r1
 800875a:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
  assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
  assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
  assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8008788:	b2db      	uxtb	r3, r3
 800878a:	2b02      	cmp	r3, #2
 800878c:	d101      	bne.n	8008792 <HAL_HRTIM_WaveformTimerControl+0x1c>
  {
    return HAL_BUSY;
 800878e:	2302      	movs	r3, #2
 8008790:	e020      	b.n	80087d4 <HAL_HRTIM_WaveformTimerControl+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8008798:	2b01      	cmp	r3, #1
 800879a:	d101      	bne.n	80087a0 <HAL_HRTIM_WaveformTimerControl+0x2a>
 800879c:	2302      	movs	r3, #2
 800879e:	e019      	b.n	80087d4 <HAL_HRTIM_WaveformTimerControl+0x5e>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2202      	movs	r2, #2
 80087ac:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure timing unit */
  HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	68b9      	ldr	r1, [r7, #8]
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 fd1b 	bl	80091f0 <HRTIM_TimingUnitWaveform_Control>

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80087ba:	68b9      	ldr	r1, [r7, #8]
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f000 fe5f 	bl	8009480 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_DeadTimeCfgTypeDef *pDeadTimeCfg)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d101      	bne.n	80087f8 <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
    return HAL_BUSY;
 80087f4:	2302      	movs	r3, #2
 80087f6:	e067      	b.n	80088c8 <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d101      	bne.n	8008806 <HAL_HRTIM_DeadTimeConfig+0x2a>
 8008802:	2302      	movs	r3, #2
 8008804:	e060      	b.n	80088c8 <HAL_HRTIM_DeadTimeConfig+0xec>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2202      	movs	r2, #2
 8008812:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800881e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	4313      	orrs	r3, r2
 800882c:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	4313      	orrs	r3, r2
 800883a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	4313      	orrs	r3, r2
 8008848:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	4313      	orrs	r3, r2
 8008856:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	041a      	lsls	r2, r3, #16
 800885e:	4b1d      	ldr	r3, [pc, #116]	@ (80088d4 <HAL_HRTIM_DeadTimeConfig+0xf8>)
 8008860:	4013      	ands	r3, r2
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	4313      	orrs	r3, r2
 8008866:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	4313      	orrs	r3, r2
 8008874:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	4313      	orrs	r3, r2
 8008882:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	69db      	ldr	r3, [r3, #28]
 8008888:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800888c:	697a      	ldr	r2, [r7, #20]
 800888e:	4313      	orrs	r3, r2
 8008890:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	01db      	lsls	r3, r3, #7
 800889a:	4413      	add	r3, r2
 800889c:	33b8      	adds	r3, #184	@ 0xb8
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	4b0d      	ldr	r3, [pc, #52]	@ (80088d8 <HAL_HRTIM_DeadTimeConfig+0xfc>)
 80088a2:	4013      	ands	r3, r2
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	6811      	ldr	r1, [r2, #0]
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	431a      	orrs	r2, r3
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	01db      	lsls	r3, r3, #7
 80088b0:	440b      	add	r3, r1
 80088b2:	33b8      	adds	r3, #184	@ 0xb8
 80088b4:	601a      	str	r2, [r3, #0]
               HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
               HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
               HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	371c      	adds	r7, #28
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	01ff0000 	.word	0x01ff0000
 80088d8:	3c002000 	.word	0x3c002000

080088dc <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef *pCompareCfg)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d101      	bne.n	80088fa <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
    return HAL_BUSY;
 80088f6:	2302      	movs	r3, #2
 80088f8:	e157      	b.n	8008baa <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8008900:	2b01      	cmp	r3, #1
 8008902:	d101      	bne.n	8008908 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8008904:	2302      	movs	r3, #2
 8008906:	e150      	b.n	8008baa <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2b06      	cmp	r3, #6
 800891c:	d140      	bne.n	80089a0 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	3b01      	subs	r3, #1
 8008922:	2b07      	cmp	r3, #7
 8008924:	d82a      	bhi.n	800897c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8008926:	a201      	add	r2, pc, #4	@ (adr r2, 800892c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8008928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892c:	0800894d 	.word	0x0800894d
 8008930:	08008959 	.word	0x08008959
 8008934:	0800897d 	.word	0x0800897d
 8008938:	08008965 	.word	0x08008965
 800893c:	0800897d 	.word	0x0800897d
 8008940:	0800897d 	.word	0x0800897d
 8008944:	0800897d 	.word	0x0800897d
 8008948:	08008971 	.word	0x08008971
    {
      case HRTIM_COMPAREUNIT_1:
      {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	6812      	ldr	r2, [r2, #0]
 8008954:	61da      	str	r2, [r3, #28]
        break;
 8008956:	e01a      	b.n	800898e <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_2:
      {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	683a      	ldr	r2, [r7, #0]
 800895e:	6812      	ldr	r2, [r2, #0]
 8008960:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8008962:	e014      	b.n	800898e <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	6812      	ldr	r2, [r2, #0]
 800896c:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 800896e:	e00e      	b.n	800898e <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_4:
      {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	6812      	ldr	r2, [r2, #0]
 8008978:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800897a:	e008      	b.n	800898e <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2207      	movs	r2, #7
 8008980:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 800898c:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b07      	cmp	r3, #7
 8008998:	f040 80fe 	bne.w	8008b98 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e104      	b.n	8008baa <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3b01      	subs	r3, #1
 80089a4:	2b07      	cmp	r3, #7
 80089a6:	f200 80e3 	bhi.w	8008b70 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80089aa:	a201      	add	r2, pc, #4	@ (adr r2, 80089b0 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80089ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b0:	080089d1 	.word	0x080089d1
 80089b4:	080089e5 	.word	0x080089e5
 80089b8:	08008b71 	.word	0x08008b71
 80089bc:	08008aa1 	.word	0x08008aa1
 80089c0:	08008b71 	.word	0x08008b71
 80089c4:	08008b71 	.word	0x08008b71
 80089c8:	08008b71 	.word	0x08008b71
 80089cc:	08008ab5 	.word	0x08008ab5
    {
      case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6819      	ldr	r1, [r3, #0]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	01db      	lsls	r3, r3, #7
 80089dc:	440b      	add	r3, r1
 80089de:	339c      	adds	r3, #156	@ 0x9c
 80089e0:	601a      	str	r2, [r3, #0]
        break;
 80089e2:	e0d1      	b.n	8008b88 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6819      	ldr	r1, [r3, #0]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	01db      	lsls	r3, r3, #7
 80089f0:	440b      	add	r3, r1
 80089f2:	33a4      	adds	r3, #164	@ 0xa4
 80089f4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d03f      	beq.n	8008a7e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	3301      	adds	r3, #1
 8008a06:	01db      	lsls	r3, r3, #7
 8008a08:	4413      	add	r3, r2
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	6811      	ldr	r1, [r2, #0]
 8008a10:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	3301      	adds	r3, #1
 8008a18:	01db      	lsls	r3, r3, #7
 8008a1a:	440b      	add	r3, r1
 8008a1c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	3301      	adds	r3, #1
 8008a26:	01db      	lsls	r3, r3, #7
 8008a28:	4413      	add	r3, r2
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	68f9      	ldr	r1, [r7, #12]
 8008a32:	6809      	ldr	r1, [r1, #0]
 8008a34:	431a      	orrs	r2, r3
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	01db      	lsls	r3, r3, #7
 8008a3c:	440b      	add	r3, r1
 8008a3e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a48:	d109      	bne.n	8008a5e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6819      	ldr	r1, [r3, #0]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	689a      	ldr	r2, [r3, #8]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	01db      	lsls	r3, r3, #7
 8008a56:	440b      	add	r3, r1
 8008a58:	339c      	adds	r3, #156	@ 0x9c
 8008a5a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
        break;
 8008a5c:	e091      	b.n	8008b82 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a66:	f040 808c 	bne.w	8008b82 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6819      	ldr	r1, [r3, #0]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	689a      	ldr	r2, [r3, #8]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	01db      	lsls	r3, r3, #7
 8008a76:	440b      	add	r3, r1
 8008a78:	33a8      	adds	r3, #168	@ 0xa8
 8008a7a:	601a      	str	r2, [r3, #0]
        break;
 8008a7c:	e081      	b.n	8008b82 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	3301      	adds	r3, #1
 8008a86:	01db      	lsls	r3, r3, #7
 8008a88:	4413      	add	r3, r2
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	6811      	ldr	r1, [r2, #0]
 8008a90:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	3301      	adds	r3, #1
 8008a98:	01db      	lsls	r3, r3, #7
 8008a9a:	440b      	add	r3, r1
 8008a9c:	601a      	str	r2, [r3, #0]
        break;
 8008a9e:	e070      	b.n	8008b82 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6819      	ldr	r1, [r3, #0]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	01db      	lsls	r3, r3, #7
 8008aac:	440b      	add	r3, r1
 8008aae:	33a8      	adds	r3, #168	@ 0xa8
 8008ab0:	601a      	str	r2, [r3, #0]
        break;
 8008ab2:	e069      	b.n	8008b88 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6819      	ldr	r1, [r3, #0]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	01db      	lsls	r3, r3, #7
 8008ac0:	440b      	add	r3, r1
 8008ac2:	33ac      	adds	r3, #172	@ 0xac
 8008ac4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d03f      	beq.n	8008b4e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	01db      	lsls	r3, r3, #7
 8008ad8:	4413      	add	r3, r2
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	6811      	ldr	r1, [r2, #0]
 8008ae0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	01db      	lsls	r3, r3, #7
 8008aea:	440b      	add	r3, r1
 8008aec:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	3301      	adds	r3, #1
 8008af6:	01db      	lsls	r3, r3, #7
 8008af8:	4413      	add	r3, r2
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	6809      	ldr	r1, [r1, #0]
 8008b06:	431a      	orrs	r2, r3
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	01db      	lsls	r3, r3, #7
 8008b0e:	440b      	add	r3, r1
 8008b10:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b1a:	d109      	bne.n	8008b30 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6819      	ldr	r1, [r3, #0]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	01db      	lsls	r3, r3, #7
 8008b28:	440b      	add	r3, r1
 8008b2a:	339c      	adds	r3, #156	@ 0x9c
 8008b2c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
        break;
 8008b2e:	e02a      	b.n	8008b86 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b38:	d125      	bne.n	8008b86 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6819      	ldr	r1, [r3, #0]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	689a      	ldr	r2, [r3, #8]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	01db      	lsls	r3, r3, #7
 8008b46:	440b      	add	r3, r1
 8008b48:	33a8      	adds	r3, #168	@ 0xa8
 8008b4a:	601a      	str	r2, [r3, #0]
        break;
 8008b4c:	e01b      	b.n	8008b86 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	3301      	adds	r3, #1
 8008b56:	01db      	lsls	r3, r3, #7
 8008b58:	4413      	add	r3, r2
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	6811      	ldr	r1, [r2, #0]
 8008b60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	3301      	adds	r3, #1
 8008b68:	01db      	lsls	r3, r3, #7
 8008b6a:	440b      	add	r3, r1
 8008b6c:	601a      	str	r2, [r3, #0]
        break;
 8008b6e:	e00a      	b.n	8008b86 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2207      	movs	r2, #7
 8008b74:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 8008b80:	e002      	b.n	8008b88 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 8008b82:	bf00      	nop
 8008b84:	e000      	b.n	8008b88 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 8008b86:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b07      	cmp	r3, #7
 8008b92:	d101      	bne.n	8008b98 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e008      	b.n	8008baa <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop

08008bb8 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
 8008bc4:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d101      	bne.n	8008bd6 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	e01d      	b.n	8008c12 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d101      	bne.n	8008be4 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8008be0:	2302      	movs	r3, #2
 8008be2:	e016      	b.n	8008c12 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	68b9      	ldr	r1, [r7, #8]
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 fb58 	bl	80092b0 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t OutputsToStart)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b083      	sub	sp, #12
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d101      	bne.n	8008c32 <HAL_HRTIM_WaveformOutputStart+0x18>
 8008c2e:	2302      	movs	r3, #2
 8008c30:	e01a      	b.n	8008c68 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	430a      	orrs	r2, r1
 8008c52:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef *hhrtim,
                                               uint32_t Timers)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d101      	bne.n	8008c8c <HAL_HRTIM_WaveformCountStart+0x18>
 8008c88:	2302      	movs	r3, #2
 8008c8a:	e018      	b.n	8008cbe <HAL_HRTIM_WaveformCountStart+0x4a>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2202      	movs	r2, #2
 8008c98:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6819      	ldr	r1, [r3, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	430a      	orrs	r2, r1
 8008caa:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	370c      	adds	r7, #12
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b085      	sub	sp, #20
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f023 0307 	bic.w	r3, r3, #7
 8008ce2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f023 0318 	bic.w	r3, r3, #24
 8008cf4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	683a      	ldr	r2, [r7, #0]
 8008d0e:	6812      	ldr	r2, [r2, #0]
 8008d10:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	6852      	ldr	r2, [r2, #4]
 8008d1a:	619a      	str	r2, [r3, #24]
}
 8008d1c:	bf00      	nop
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	01db      	lsls	r3, r3, #7
 8008d3e:	4413      	add	r3, r2
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f023 0307 	bic.w	r3, r3, #7
 8008d4a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f023 0318 	bic.w	r3, r3, #24
 8008d5c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	01db      	lsls	r3, r3, #7
 8008d72:	4413      	add	r3, r2
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6819      	ldr	r1, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	01db      	lsls	r3, r3, #7
 8008d84:	440b      	add	r3, r1
 8008d86:	3394      	adds	r3, #148	@ 0x94
 8008d88:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6819      	ldr	r1, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	01db      	lsls	r3, r3, #7
 8008d96:	440b      	add	r3, r1
 8008d98:	3398      	adds	r3, #152	@ 0x98
 8008d9a:	601a      	str	r2, [r3, #0]
}
 8008d9c:	bf00      	nop
 8008d9e:	371c      	adds	r7, #28
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8008dc2:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f023 0320 	bic.w	r3, r3, #32
 8008dca:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	695b      	ldr	r3, [r3, #20]
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008ddc:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	d003      	beq.n	8008dee <HRTIM_MasterWaveform_Config+0x46>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d108      	bne.n	8008e00 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008df4:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f043 0320 	orr.w	r3, r3, #32
 8008dfc:	60fb      	str	r3, [r7, #12]
 8008dfe:	e021      	b.n	8008e44 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	2b03      	cmp	r3, #3
 8008e06:	d108      	bne.n	8008e1a <HRTIM_MasterWaveform_Config+0x72>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e0e:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e16:	60fb      	str	r3, [r7, #12]
 8008e18:	e014      	b.n	8008e44 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	2b04      	cmp	r3, #4
 8008e20:	d108      	bne.n	8008e34 <HRTIM_MasterWaveform_Config+0x8c>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e28:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e30:	60fb      	str	r3, [r7, #12]
 8008e32:	e007      	b.n	8008e44 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f023 0320 	bic.w	r3, r3, #32
 8008e3a:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008e42:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e4a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	69db      	ldr	r3, [r3, #28]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e5c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008e6e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8008e80:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8008e92:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008ea6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008eb8:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68ba      	ldr	r2, [r7, #8]
 8008ed2:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8008ed6:	bf00      	nop
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
	...

08008ee4 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b08b      	sub	sp, #44	@ 0x2c
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	01db      	lsls	r3, r3, #7
 8008efa:	4413      	add	r3, r2
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	6811      	ldr	r1, [r2, #0]
 8008f02:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	01db      	lsls	r3, r3, #7
 8008f0c:	440b      	add	r3, r1
 8008f0e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	3301      	adds	r3, #1
 8008f18:	01db      	lsls	r3, r3, #7
 8008f1a:	4413      	add	r3, r2
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	01db      	lsls	r3, r3, #7
 8008f28:	4413      	add	r3, r2
 8008f2a:	33e8      	adds	r3, #232	@ 0xe8
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	01db      	lsls	r3, r3, #7
 8008f38:	4413      	add	r3, r2
 8008f3a:	33e4      	adds	r3, #228	@ 0xe4
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8008f48:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f4c:	f023 0320 	bic.w	r3, r3, #32
 8008f50:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	695b      	ldr	r3, [r3, #20]
 8008f60:	2b20      	cmp	r3, #32
 8008f62:	d003      	beq.n	8008f6c <HRTIM_TimingUnitWaveform_Config+0x88>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d108      	bne.n	8008f7e <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f6e:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8008f72:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8008f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f76:	f043 0320 	orr.w	r3, r3, #32
 8008f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f7c:	e021      	b.n	8008fc2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	2b03      	cmp	r3, #3
 8008f84:	d108      	bne.n	8008f98 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8008f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f96:	e014      	b.n	8008fc2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d108      	bne.n	8008fb2 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008faa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fb0:	e007      	b.n	8008fc2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
    hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb4:	f023 0320 	bic.w	r3, r3, #32
 8008fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8008fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbc:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8008fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008fda:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a1b      	ldr	r3, [r3, #32]
 8008fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008fec:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffa:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8008ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009006:	4313      	orrs	r3, r2
 8009008:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 800900a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009010:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009018:	4313      	orrs	r3, r2
 800901a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 800901c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009022:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800902c:	d103      	bne.n	8009036 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 800902e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009034:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8009036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009038:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800903c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009044:	4313      	orrs	r3, r2
 8009046:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8009048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800904e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009056:	4313      	orrs	r3, r2
 8009058:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 800905a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905c:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8009060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009064:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800906a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800906c:	4313      	orrs	r3, r2
 800906e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009076:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800907c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009080:	69ba      	ldr	r2, [r7, #24]
 8009082:	4313      	orrs	r3, r2
 8009084:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800908c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009092:	69ba      	ldr	r2, [r7, #24]
 8009094:	4313      	orrs	r3, r2
 8009096:	61bb      	str	r3, [r7, #24]

  /* Enable/Disable dead time insertion at timer level */
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800909e:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090a4:	6a3a      	ldr	r2, [r7, #32]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090ae:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80090b2:	d004      	beq.n	80090be <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090b8:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 80090bc:	d103      	bne.n	80090c6 <HRTIM_TimingUnitWaveform_Config+0x1e2>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c2:	2b40      	cmp	r3, #64	@ 0x40
 80090c4:	d108      	bne.n	80090d8 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 80090cc:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090d2:	6a3a      	ldr	r2, [r7, #32]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090de:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090e4:	6a3a      	ldr	r2, [r7, #32]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ee:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	2b05      	cmp	r3, #5
 80090f4:	d850      	bhi.n	8009198 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 80090f6:	a201      	add	r2, pc, #4	@ (adr r2, 80090fc <HRTIM_TimingUnitWaveform_Config+0x218>)
 80090f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fc:	08009115 	.word	0x08009115
 8009100:	0800912b 	.word	0x0800912b
 8009104:	08009141 	.word	0x08009141
 8009108:	08009157 	.word	0x08009157
 800910c:	0800916d 	.word	0x0800916d
 8009110:	08009183 	.word	0x08009183
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800911a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009120:	005b      	lsls	r3, r3, #1
 8009122:	69fa      	ldr	r2, [r7, #28]
 8009124:	4313      	orrs	r3, r2
 8009126:	61fb      	str	r3, [r7, #28]
      break;
 8009128:	e037      	b.n	800919a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009130:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	69fa      	ldr	r2, [r7, #28]
 800913a:	4313      	orrs	r3, r2
 800913c:	61fb      	str	r3, [r7, #28]
      break;
 800913e:	e02c      	b.n	800919a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8009146:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914c:	00db      	lsls	r3, r3, #3
 800914e:	69fa      	ldr	r2, [r7, #28]
 8009150:	4313      	orrs	r3, r2
 8009152:	61fb      	str	r3, [r7, #28]
      break;
 8009154:	e021      	b.n	800919a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800915c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009162:	011b      	lsls	r3, r3, #4
 8009164:	69fa      	ldr	r2, [r7, #28]
 8009166:	4313      	orrs	r3, r2
 8009168:	61fb      	str	r3, [r7, #28]
      break;
 800916a:	e016      	b.n	800919a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009172:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009178:	015b      	lsls	r3, r3, #5
 800917a:	69fa      	ldr	r2, [r7, #28]
 800917c:	4313      	orrs	r3, r2
 800917e:	61fb      	str	r3, [r7, #28]
      break;
 8009180:	e00b      	b.n	800919a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8009188:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800918e:	019b      	lsls	r3, r3, #6
 8009190:	69fa      	ldr	r2, [r7, #28]
 8009192:	4313      	orrs	r3, r2
 8009194:	61fb      	str	r3, [r7, #28]
      break;
 8009196:	e000      	b.n	800919a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    default:
      break;
 8009198:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	3301      	adds	r3, #1
 80091a2:	01db      	lsls	r3, r3, #7
 80091a4:	4413      	add	r3, r2
 80091a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091a8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	01db      	lsls	r3, r3, #7
 80091b2:	4413      	add	r3, r2
 80091b4:	33e8      	adds	r3, #232	@ 0xe8
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	01db      	lsls	r3, r3, #7
 80091c2:	4413      	add	r3, r2
 80091c4:	33e4      	adds	r3, #228	@ 0xe4
 80091c6:	6a3a      	ldr	r2, [r7, #32]
 80091c8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	01db      	lsls	r3, r3, #7
 80091d2:	4413      	add	r3, r2
 80091d4:	33d4      	adds	r3, #212	@ 0xd4
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	69fa      	ldr	r2, [r7, #28]
 80091e0:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80091e4:	bf00      	nop
 80091e6:	372c      	adds	r7, #44	@ 0x2c
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b087      	sub	sp, #28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr2;

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	01db      	lsls	r3, r3, #7
 8009204:	4413      	add	r3, r2
 8009206:	33ec      	adds	r3, #236	@ 0xec
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	617b      	str	r3, [r7, #20]

  /* Set the UpDown counting Mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f023 0310 	bic.w	r3, r3, #16
 8009212:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	011b      	lsls	r3, r3, #4
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	4313      	orrs	r3, r2
 800921e:	617b      	str	r3, [r7, #20]

  /* Set the TrigHalf Mode : requires the counter to be disabled */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009226:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	4313      	orrs	r3, r2
 8009230:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009238:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	4313      	orrs	r3, r2
 8009242:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800924a:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	4313      	orrs	r3, r2
 8009254:	617b      	str	r3, [r7, #20]

  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d11a      	bne.n	8009294 <HRTIM_TimingUnitWaveform_Control+0xa4>
  {
    /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f023 0304 	bic.w	r3, r3, #4
 8009264:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	4313      	orrs	r3, r2
 800926e:	617b      	str	r3, [r7, #20]

    /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	f023 0302 	bic.w	r3, r3, #2
 8009276:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	695b      	ldr	r3, [r3, #20]
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	4313      	orrs	r3, r2
 8009280:	617b      	str	r3, [r7, #20]

    /* Enable the DualChannel DAC trigger */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f023 0301 	bic.w	r3, r3, #1
 8009288:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	4313      	orrs	r3, r2
 8009292:	617b      	str	r3, [r7, #20]
  }
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	01db      	lsls	r3, r3, #7
 800929c:	4413      	add	r3, r2
 800929e:	33ec      	adds	r3, #236	@ 0xec
 80092a0:	697a      	ldr	r2, [r7, #20]
 80092a2:	601a      	str	r2, [r3, #0]

}
 80092a4:	bf00      	nop
 80092a6:	371c      	adds	r7, #28
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b089      	sub	sp, #36	@ 0x24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
 80092bc:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 80092be:	2300      	movs	r3, #0
 80092c0:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	01db      	lsls	r3, r3, #7
 80092ca:	4413      	add	r3, r2
 80092cc:	33e4      	adds	r3, #228	@ 0xe4
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	01db      	lsls	r3, r3, #7
 80092da:	4413      	add	r3, r2
 80092dc:	33b8      	adds	r3, #184	@ 0xb8
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	617b      	str	r3, [r7, #20]

  switch (Output)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092e8:	d05d      	beq.n	80093a6 <HRTIM_OutputConfig+0xf6>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092f0:	d86e      	bhi.n	80093d0 <HRTIM_OutputConfig+0x120>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092f8:	d042      	beq.n	8009380 <HRTIM_OutputConfig+0xd0>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009300:	d866      	bhi.n	80093d0 <HRTIM_OutputConfig+0x120>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009308:	d04d      	beq.n	80093a6 <HRTIM_OutputConfig+0xf6>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009310:	d85e      	bhi.n	80093d0 <HRTIM_OutputConfig+0x120>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009318:	d032      	beq.n	8009380 <HRTIM_OutputConfig+0xd0>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009320:	d856      	bhi.n	80093d0 <HRTIM_OutputConfig+0x120>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b80      	cmp	r3, #128	@ 0x80
 8009326:	d03e      	beq.n	80093a6 <HRTIM_OutputConfig+0xf6>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2b80      	cmp	r3, #128	@ 0x80
 800932c:	d850      	bhi.n	80093d0 <HRTIM_OutputConfig+0x120>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2b40      	cmp	r3, #64	@ 0x40
 8009332:	d025      	beq.n	8009380 <HRTIM_OutputConfig+0xd0>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b40      	cmp	r3, #64	@ 0x40
 8009338:	d84a      	bhi.n	80093d0 <HRTIM_OutputConfig+0x120>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d01f      	beq.n	8009380 <HRTIM_OutputConfig+0xd0>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d044      	beq.n	80093d0 <HRTIM_OutputConfig+0x120>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b20      	cmp	r3, #32
 800934a:	d841      	bhi.n	80093d0 <HRTIM_OutputConfig+0x120>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b02      	cmp	r3, #2
 8009350:	d33e      	bcc.n	80093d0 <HRTIM_OutputConfig+0x120>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	3b02      	subs	r3, #2
 8009356:	2201      	movs	r2, #1
 8009358:	409a      	lsls	r2, r3
 800935a:	4b48      	ldr	r3, [pc, #288]	@ (800947c <HRTIM_OutputConfig+0x1cc>)
 800935c:	4013      	ands	r3, r2
 800935e:	2b00      	cmp	r3, #0
 8009360:	bf14      	ite	ne
 8009362:	2301      	movne	r3, #1
 8009364:	2300      	moveq	r3, #0
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	d11c      	bne.n	80093a6 <HRTIM_OutputConfig+0xf6>
 800936c:	f244 0304 	movw	r3, #16388	@ 0x4004
 8009370:	4013      	ands	r3, r2
 8009372:	2b00      	cmp	r3, #0
 8009374:	bf14      	ite	ne
 8009376:	2301      	movne	r3, #1
 8009378:	2300      	moveq	r3, #0
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b00      	cmp	r3, #0
 800937e:	d027      	beq.n	80093d0 <HRTIM_OutputConfig+0x120>
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6819      	ldr	r1, [r3, #0]
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	685a      	ldr	r2, [r3, #4]
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	01db      	lsls	r3, r3, #7
 800938c:	440b      	add	r3, r1
 800938e:	33bc      	adds	r3, #188	@ 0xbc
 8009390:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6819      	ldr	r1, [r3, #0]
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	689a      	ldr	r2, [r3, #8]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	01db      	lsls	r3, r3, #7
 800939e:	440b      	add	r3, r1
 80093a0:	33c0      	adds	r3, #192	@ 0xc0
 80093a2:	601a      	str	r2, [r3, #0]
      break;
 80093a4:	e015      	b.n	80093d2 <HRTIM_OutputConfig+0x122>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6819      	ldr	r1, [r3, #0]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	01db      	lsls	r3, r3, #7
 80093b2:	440b      	add	r3, r1
 80093b4:	33c4      	adds	r3, #196	@ 0xc4
 80093b6:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6819      	ldr	r1, [r3, #0]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	689a      	ldr	r2, [r3, #8]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	01db      	lsls	r3, r3, #7
 80093c4:	440b      	add	r3, r1
 80093c6:	33c8      	adds	r3, #200	@ 0xc8
 80093c8:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80093ca:	2310      	movs	r3, #16
 80093cc:	61bb      	str	r3, [r7, #24]
      break;
 80093ce:	e000      	b.n	80093d2 <HRTIM_OutputConfig+0x122>
    }

    default:
      break;
 80093d0:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80093d2:	22fe      	movs	r2, #254	@ 0xfe
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80093da:	43db      	mvns	r3, r3
 80093dc:	69fa      	ldr	r2, [r7, #28]
 80093de:	4013      	ands	r3, r2
 80093e0:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ec:	69fa      	ldr	r2, [r7, #28]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	68da      	ldr	r2, [r3, #12]
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	fa02 f303 	lsl.w	r3, r2, r3
 80093fc:	69fa      	ldr	r2, [r7, #28]
 80093fe:	4313      	orrs	r3, r2
 8009400:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	691a      	ldr	r2, [r3, #16]
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	fa02 f303 	lsl.w	r3, r2, r3
 800940c:	69fa      	ldr	r2, [r7, #28]
 800940e:	4313      	orrs	r3, r2
 8009410:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	695a      	ldr	r2, [r3, #20]
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	fa02 f303 	lsl.w	r3, r2, r3
 800941c:	69fa      	ldr	r2, [r7, #28]
 800941e:	4313      	orrs	r3, r2
 8009420:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	699a      	ldr	r2, [r3, #24]
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	fa02 f303 	lsl.w	r3, r2, r3
 800942c:	69fa      	ldr	r2, [r7, #28]
 800942e:	4313      	orrs	r3, r2
 8009430:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	2b08      	cmp	r3, #8
 8009438:	d111      	bne.n	800945e <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10c      	bne.n	800945e <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800944a:	2b00      	cmp	r3, #0
 800944c:	d107      	bne.n	800945e <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	69da      	ldr	r2, [r3, #28]
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	fa02 f303 	lsl.w	r3, r2, r3
 8009458:	69fa      	ldr	r2, [r7, #28]
 800945a:	4313      	orrs	r3, r2
 800945c:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	01db      	lsls	r3, r3, #7
 8009466:	4413      	add	r3, r2
 8009468:	33e4      	adds	r3, #228	@ 0xe4
 800946a:	69fa      	ldr	r2, [r7, #28]
 800946c:	601a      	str	r2, [r3, #0]
}
 800946e:	bf00      	nop
 8009470:	3724      	adds	r7, #36	@ 0x24
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	40000041 	.word	0x40000041

08009480 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	2b06      	cmp	r3, #6
 800948e:	d85e      	bhi.n	800954e <HRTIM_ForceRegistersUpdate+0xce>
 8009490:	a201      	add	r2, pc, #4	@ (adr r2, 8009498 <HRTIM_ForceRegistersUpdate+0x18>)
 8009492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009496:	bf00      	nop
 8009498:	080094cb 	.word	0x080094cb
 800949c:	080094e1 	.word	0x080094e1
 80094a0:	080094f7 	.word	0x080094f7
 80094a4:	0800950d 	.word	0x0800950d
 80094a8:	08009523 	.word	0x08009523
 80094ac:	08009539 	.word	0x08009539
 80094b0:	080094b5 	.word	0x080094b5
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f042 0201 	orr.w	r2, r2, #1
 80094c4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80094c8:	e042      	b.n	8009550 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f042 0202 	orr.w	r2, r2, #2
 80094da:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80094de:	e037      	b.n	8009550 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f042 0204 	orr.w	r2, r2, #4
 80094f0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80094f4:	e02c      	b.n	8009550 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f042 0208 	orr.w	r2, r2, #8
 8009506:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800950a:	e021      	b.n	8009550 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f042 0210 	orr.w	r2, r2, #16
 800951c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8009520:	e016      	b.n	8009550 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f042 0220 	orr.w	r2, r2, #32
 8009532:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8009536:	e00b      	b.n	8009550 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009548:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800954c:	e000      	b.n	8009550 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    default:
      break;
 800954e:	bf00      	nop
  }
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d141      	bne.n	80095ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800956a:	4b4b      	ldr	r3, [pc, #300]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009576:	d131      	bne.n	80095dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009578:	4b47      	ldr	r3, [pc, #284]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800957a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800957e:	4a46      	ldr	r2, [pc, #280]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009580:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009584:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009588:	4b43      	ldr	r3, [pc, #268]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009590:	4a41      	ldr	r2, [pc, #260]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009596:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009598:	4b40      	ldr	r3, [pc, #256]	@ (800969c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2232      	movs	r2, #50	@ 0x32
 800959e:	fb02 f303 	mul.w	r3, r2, r3
 80095a2:	4a3f      	ldr	r2, [pc, #252]	@ (80096a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80095a4:	fba2 2303 	umull	r2, r3, r2, r3
 80095a8:	0c9b      	lsrs	r3, r3, #18
 80095aa:	3301      	adds	r3, #1
 80095ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80095ae:	e002      	b.n	80095b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80095b6:	4b38      	ldr	r3, [pc, #224]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095c2:	d102      	bne.n	80095ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1f2      	bne.n	80095b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80095ca:	4b33      	ldr	r3, [pc, #204]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095d6:	d158      	bne.n	800968a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80095d8:	2303      	movs	r3, #3
 80095da:	e057      	b.n	800968c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80095dc:	4b2e      	ldr	r3, [pc, #184]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095e2:	4a2d      	ldr	r2, [pc, #180]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80095ec:	e04d      	b.n	800968a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095f4:	d141      	bne.n	800967a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80095f6:	4b28      	ldr	r3, [pc, #160]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80095fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009602:	d131      	bne.n	8009668 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009604:	4b24      	ldr	r3, [pc, #144]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800960a:	4a23      	ldr	r2, [pc, #140]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800960c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009610:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009614:	4b20      	ldr	r3, [pc, #128]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800961c:	4a1e      	ldr	r2, [pc, #120]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800961e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009622:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009624:	4b1d      	ldr	r3, [pc, #116]	@ (800969c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2232      	movs	r2, #50	@ 0x32
 800962a:	fb02 f303 	mul.w	r3, r2, r3
 800962e:	4a1c      	ldr	r2, [pc, #112]	@ (80096a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009630:	fba2 2303 	umull	r2, r3, r2, r3
 8009634:	0c9b      	lsrs	r3, r3, #18
 8009636:	3301      	adds	r3, #1
 8009638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800963a:	e002      	b.n	8009642 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	3b01      	subs	r3, #1
 8009640:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009642:	4b15      	ldr	r3, [pc, #84]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009644:	695b      	ldr	r3, [r3, #20]
 8009646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800964a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800964e:	d102      	bne.n	8009656 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1f2      	bne.n	800963c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009656:	4b10      	ldr	r3, [pc, #64]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009658:	695b      	ldr	r3, [r3, #20]
 800965a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800965e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009662:	d112      	bne.n	800968a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	e011      	b.n	800968c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009668:	4b0b      	ldr	r3, [pc, #44]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800966a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800966e:	4a0a      	ldr	r2, [pc, #40]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009674:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009678:	e007      	b.n	800968a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800967a:	4b07      	ldr	r3, [pc, #28]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009682:	4a05      	ldr	r2, [pc, #20]	@ (8009698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009684:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009688:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3714      	adds	r7, #20
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	40007000 	.word	0x40007000
 800969c:	20000000 	.word	0x20000000
 80096a0:	431bde83 	.word	0x431bde83

080096a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80096a4:	b480      	push	{r7}
 80096a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80096a8:	4b05      	ldr	r3, [pc, #20]	@ (80096c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	4a04      	ldr	r2, [pc, #16]	@ (80096c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80096ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80096b2:	6093      	str	r3, [r2, #8]
}
 80096b4:	bf00      	nop
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	40007000 	.word	0x40007000

080096c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b088      	sub	sp, #32
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e2fe      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 0301 	and.w	r3, r3, #1
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d075      	beq.n	80097ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096e2:	4b97      	ldr	r3, [pc, #604]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f003 030c 	and.w	r3, r3, #12
 80096ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80096ec:	4b94      	ldr	r3, [pc, #592]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	f003 0303 	and.w	r3, r3, #3
 80096f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	2b0c      	cmp	r3, #12
 80096fa:	d102      	bne.n	8009702 <HAL_RCC_OscConfig+0x3e>
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	2b03      	cmp	r3, #3
 8009700:	d002      	beq.n	8009708 <HAL_RCC_OscConfig+0x44>
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	2b08      	cmp	r3, #8
 8009706:	d10b      	bne.n	8009720 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009708:	4b8d      	ldr	r3, [pc, #564]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d05b      	beq.n	80097cc <HAL_RCC_OscConfig+0x108>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d157      	bne.n	80097cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e2d9      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009728:	d106      	bne.n	8009738 <HAL_RCC_OscConfig+0x74>
 800972a:	4b85      	ldr	r3, [pc, #532]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a84      	ldr	r2, [pc, #528]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 8009730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	e01d      	b.n	8009774 <HAL_RCC_OscConfig+0xb0>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009740:	d10c      	bne.n	800975c <HAL_RCC_OscConfig+0x98>
 8009742:	4b7f      	ldr	r3, [pc, #508]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a7e      	ldr	r2, [pc, #504]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 8009748:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800974c:	6013      	str	r3, [r2, #0]
 800974e:	4b7c      	ldr	r3, [pc, #496]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a7b      	ldr	r2, [pc, #492]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 8009754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009758:	6013      	str	r3, [r2, #0]
 800975a:	e00b      	b.n	8009774 <HAL_RCC_OscConfig+0xb0>
 800975c:	4b78      	ldr	r3, [pc, #480]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a77      	ldr	r2, [pc, #476]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 8009762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009766:	6013      	str	r3, [r2, #0]
 8009768:	4b75      	ldr	r3, [pc, #468]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a74      	ldr	r2, [pc, #464]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 800976e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d013      	beq.n	80097a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800977c:	f7fa ff20 	bl	80045c0 <HAL_GetTick>
 8009780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009782:	e008      	b.n	8009796 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009784:	f7fa ff1c 	bl	80045c0 <HAL_GetTick>
 8009788:	4602      	mov	r2, r0
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	2b64      	cmp	r3, #100	@ 0x64
 8009790:	d901      	bls.n	8009796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009792:	2303      	movs	r3, #3
 8009794:	e29e      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009796:	4b6a      	ldr	r3, [pc, #424]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d0f0      	beq.n	8009784 <HAL_RCC_OscConfig+0xc0>
 80097a2:	e014      	b.n	80097ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097a4:	f7fa ff0c 	bl	80045c0 <HAL_GetTick>
 80097a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80097aa:	e008      	b.n	80097be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097ac:	f7fa ff08 	bl	80045c0 <HAL_GetTick>
 80097b0:	4602      	mov	r2, r0
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	2b64      	cmp	r3, #100	@ 0x64
 80097b8:	d901      	bls.n	80097be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e28a      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80097be:	4b60      	ldr	r3, [pc, #384]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1f0      	bne.n	80097ac <HAL_RCC_OscConfig+0xe8>
 80097ca:	e000      	b.n	80097ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 0302 	and.w	r3, r3, #2
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d075      	beq.n	80098c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097da:	4b59      	ldr	r3, [pc, #356]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	f003 030c 	and.w	r3, r3, #12
 80097e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80097e4:	4b56      	ldr	r3, [pc, #344]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	f003 0303 	and.w	r3, r3, #3
 80097ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	2b0c      	cmp	r3, #12
 80097f2:	d102      	bne.n	80097fa <HAL_RCC_OscConfig+0x136>
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d002      	beq.n	8009800 <HAL_RCC_OscConfig+0x13c>
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	2b04      	cmp	r3, #4
 80097fe:	d11f      	bne.n	8009840 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009800:	4b4f      	ldr	r3, [pc, #316]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009808:	2b00      	cmp	r3, #0
 800980a:	d005      	beq.n	8009818 <HAL_RCC_OscConfig+0x154>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d101      	bne.n	8009818 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e25d      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009818:	4b49      	ldr	r3, [pc, #292]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	061b      	lsls	r3, r3, #24
 8009826:	4946      	ldr	r1, [pc, #280]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 8009828:	4313      	orrs	r3, r2
 800982a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800982c:	4b45      	ldr	r3, [pc, #276]	@ (8009944 <HAL_RCC_OscConfig+0x280>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4618      	mov	r0, r3
 8009832:	f7fa fe79 	bl	8004528 <HAL_InitTick>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d043      	beq.n	80098c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	e249      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d023      	beq.n	8009890 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009848:	4b3d      	ldr	r3, [pc, #244]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a3c      	ldr	r2, [pc, #240]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 800984e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009854:	f7fa feb4 	bl	80045c0 <HAL_GetTick>
 8009858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800985a:	e008      	b.n	800986e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800985c:	f7fa feb0 	bl	80045c0 <HAL_GetTick>
 8009860:	4602      	mov	r2, r0
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	2b02      	cmp	r3, #2
 8009868:	d901      	bls.n	800986e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800986a:	2303      	movs	r3, #3
 800986c:	e232      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800986e:	4b34      	ldr	r3, [pc, #208]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009876:	2b00      	cmp	r3, #0
 8009878:	d0f0      	beq.n	800985c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800987a:	4b31      	ldr	r3, [pc, #196]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	061b      	lsls	r3, r3, #24
 8009888:	492d      	ldr	r1, [pc, #180]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 800988a:	4313      	orrs	r3, r2
 800988c:	604b      	str	r3, [r1, #4]
 800988e:	e01a      	b.n	80098c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009890:	4b2b      	ldr	r3, [pc, #172]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a2a      	ldr	r2, [pc, #168]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 8009896:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800989a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800989c:	f7fa fe90 	bl	80045c0 <HAL_GetTick>
 80098a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80098a2:	e008      	b.n	80098b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098a4:	f7fa fe8c 	bl	80045c0 <HAL_GetTick>
 80098a8:	4602      	mov	r2, r0
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d901      	bls.n	80098b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80098b2:	2303      	movs	r3, #3
 80098b4:	e20e      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80098b6:	4b22      	ldr	r3, [pc, #136]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1f0      	bne.n	80098a4 <HAL_RCC_OscConfig+0x1e0>
 80098c2:	e000      	b.n	80098c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 0308 	and.w	r3, r3, #8
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d041      	beq.n	8009956 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d01c      	beq.n	8009914 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80098da:	4b19      	ldr	r3, [pc, #100]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 80098dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098e0:	4a17      	ldr	r2, [pc, #92]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 80098e2:	f043 0301 	orr.w	r3, r3, #1
 80098e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098ea:	f7fa fe69 	bl	80045c0 <HAL_GetTick>
 80098ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80098f0:	e008      	b.n	8009904 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098f2:	f7fa fe65 	bl	80045c0 <HAL_GetTick>
 80098f6:	4602      	mov	r2, r0
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d901      	bls.n	8009904 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009900:	2303      	movs	r3, #3
 8009902:	e1e7      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009904:	4b0e      	ldr	r3, [pc, #56]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 8009906:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800990a:	f003 0302 	and.w	r3, r3, #2
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0ef      	beq.n	80098f2 <HAL_RCC_OscConfig+0x22e>
 8009912:	e020      	b.n	8009956 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009914:	4b0a      	ldr	r3, [pc, #40]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 8009916:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800991a:	4a09      	ldr	r2, [pc, #36]	@ (8009940 <HAL_RCC_OscConfig+0x27c>)
 800991c:	f023 0301 	bic.w	r3, r3, #1
 8009920:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009924:	f7fa fe4c 	bl	80045c0 <HAL_GetTick>
 8009928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800992a:	e00d      	b.n	8009948 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800992c:	f7fa fe48 	bl	80045c0 <HAL_GetTick>
 8009930:	4602      	mov	r2, r0
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	2b02      	cmp	r3, #2
 8009938:	d906      	bls.n	8009948 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800993a:	2303      	movs	r3, #3
 800993c:	e1ca      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
 800993e:	bf00      	nop
 8009940:	40021000 	.word	0x40021000
 8009944:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009948:	4b8c      	ldr	r3, [pc, #560]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 800994a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800994e:	f003 0302 	and.w	r3, r3, #2
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1ea      	bne.n	800992c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f003 0304 	and.w	r3, r3, #4
 800995e:	2b00      	cmp	r3, #0
 8009960:	f000 80a6 	beq.w	8009ab0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009964:	2300      	movs	r3, #0
 8009966:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009968:	4b84      	ldr	r3, [pc, #528]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 800996a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800996c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009970:	2b00      	cmp	r3, #0
 8009972:	d101      	bne.n	8009978 <HAL_RCC_OscConfig+0x2b4>
 8009974:	2301      	movs	r3, #1
 8009976:	e000      	b.n	800997a <HAL_RCC_OscConfig+0x2b6>
 8009978:	2300      	movs	r3, #0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00d      	beq.n	800999a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800997e:	4b7f      	ldr	r3, [pc, #508]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009982:	4a7e      	ldr	r2, [pc, #504]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009988:	6593      	str	r3, [r2, #88]	@ 0x58
 800998a:	4b7c      	ldr	r3, [pc, #496]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 800998c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800998e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009992:	60fb      	str	r3, [r7, #12]
 8009994:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009996:	2301      	movs	r3, #1
 8009998:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800999a:	4b79      	ldr	r3, [pc, #484]	@ (8009b80 <HAL_RCC_OscConfig+0x4bc>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d118      	bne.n	80099d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80099a6:	4b76      	ldr	r3, [pc, #472]	@ (8009b80 <HAL_RCC_OscConfig+0x4bc>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a75      	ldr	r2, [pc, #468]	@ (8009b80 <HAL_RCC_OscConfig+0x4bc>)
 80099ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80099b2:	f7fa fe05 	bl	80045c0 <HAL_GetTick>
 80099b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80099b8:	e008      	b.n	80099cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099ba:	f7fa fe01 	bl	80045c0 <HAL_GetTick>
 80099be:	4602      	mov	r2, r0
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d901      	bls.n	80099cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80099c8:	2303      	movs	r3, #3
 80099ca:	e183      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80099cc:	4b6c      	ldr	r3, [pc, #432]	@ (8009b80 <HAL_RCC_OscConfig+0x4bc>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d0f0      	beq.n	80099ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d108      	bne.n	80099f2 <HAL_RCC_OscConfig+0x32e>
 80099e0:	4b66      	ldr	r3, [pc, #408]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 80099e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099e6:	4a65      	ldr	r2, [pc, #404]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 80099e8:	f043 0301 	orr.w	r3, r3, #1
 80099ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80099f0:	e024      	b.n	8009a3c <HAL_RCC_OscConfig+0x378>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	2b05      	cmp	r3, #5
 80099f8:	d110      	bne.n	8009a1c <HAL_RCC_OscConfig+0x358>
 80099fa:	4b60      	ldr	r3, [pc, #384]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 80099fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a00:	4a5e      	ldr	r2, [pc, #376]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009a02:	f043 0304 	orr.w	r3, r3, #4
 8009a06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a10:	4a5a      	ldr	r2, [pc, #360]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009a12:	f043 0301 	orr.w	r3, r3, #1
 8009a16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009a1a:	e00f      	b.n	8009a3c <HAL_RCC_OscConfig+0x378>
 8009a1c:	4b57      	ldr	r3, [pc, #348]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a22:	4a56      	ldr	r2, [pc, #344]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009a24:	f023 0301 	bic.w	r3, r3, #1
 8009a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009a2c:	4b53      	ldr	r3, [pc, #332]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a32:	4a52      	ldr	r2, [pc, #328]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009a34:	f023 0304 	bic.w	r3, r3, #4
 8009a38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d016      	beq.n	8009a72 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a44:	f7fa fdbc 	bl	80045c0 <HAL_GetTick>
 8009a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a4a:	e00a      	b.n	8009a62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a4c:	f7fa fdb8 	bl	80045c0 <HAL_GetTick>
 8009a50:	4602      	mov	r2, r0
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d901      	bls.n	8009a62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	e138      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a62:	4b46      	ldr	r3, [pc, #280]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a68:	f003 0302 	and.w	r3, r3, #2
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d0ed      	beq.n	8009a4c <HAL_RCC_OscConfig+0x388>
 8009a70:	e015      	b.n	8009a9e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a72:	f7fa fda5 	bl	80045c0 <HAL_GetTick>
 8009a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009a78:	e00a      	b.n	8009a90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a7a:	f7fa fda1 	bl	80045c0 <HAL_GetTick>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d901      	bls.n	8009a90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e121      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009a90:	4b3a      	ldr	r3, [pc, #232]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a96:	f003 0302 	and.w	r3, r3, #2
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1ed      	bne.n	8009a7a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009a9e:	7ffb      	ldrb	r3, [r7, #31]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d105      	bne.n	8009ab0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009aa4:	4b35      	ldr	r3, [pc, #212]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aa8:	4a34      	ldr	r2, [pc, #208]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009aae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 0320 	and.w	r3, r3, #32
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d03c      	beq.n	8009b36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	699b      	ldr	r3, [r3, #24]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d01c      	beq.n	8009afe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009aca:	4a2c      	ldr	r2, [pc, #176]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009acc:	f043 0301 	orr.w	r3, r3, #1
 8009ad0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ad4:	f7fa fd74 	bl	80045c0 <HAL_GetTick>
 8009ad8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009ada:	e008      	b.n	8009aee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009adc:	f7fa fd70 	bl	80045c0 <HAL_GetTick>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d901      	bls.n	8009aee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009aea:	2303      	movs	r3, #3
 8009aec:	e0f2      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009aee:	4b23      	ldr	r3, [pc, #140]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009af4:	f003 0302 	and.w	r3, r3, #2
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d0ef      	beq.n	8009adc <HAL_RCC_OscConfig+0x418>
 8009afc:	e01b      	b.n	8009b36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009afe:	4b1f      	ldr	r3, [pc, #124]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009b00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b04:	4a1d      	ldr	r2, [pc, #116]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009b06:	f023 0301 	bic.w	r3, r3, #1
 8009b0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b0e:	f7fa fd57 	bl	80045c0 <HAL_GetTick>
 8009b12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009b14:	e008      	b.n	8009b28 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b16:	f7fa fd53 	bl	80045c0 <HAL_GetTick>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d901      	bls.n	8009b28 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e0d5      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009b28:	4b14      	ldr	r3, [pc, #80]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b2e:	f003 0302 	and.w	r3, r3, #2
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1ef      	bne.n	8009b16 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	69db      	ldr	r3, [r3, #28]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	f000 80c9 	beq.w	8009cd2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009b40:	4b0e      	ldr	r3, [pc, #56]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	f003 030c 	and.w	r3, r3, #12
 8009b48:	2b0c      	cmp	r3, #12
 8009b4a:	f000 8083 	beq.w	8009c54 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	69db      	ldr	r3, [r3, #28]
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d15e      	bne.n	8009c14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b56:	4b09      	ldr	r3, [pc, #36]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a08      	ldr	r2, [pc, #32]	@ (8009b7c <HAL_RCC_OscConfig+0x4b8>)
 8009b5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b62:	f7fa fd2d 	bl	80045c0 <HAL_GetTick>
 8009b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b68:	e00c      	b.n	8009b84 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b6a:	f7fa fd29 	bl	80045c0 <HAL_GetTick>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d905      	bls.n	8009b84 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e0ab      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
 8009b7c:	40021000 	.word	0x40021000
 8009b80:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b84:	4b55      	ldr	r3, [pc, #340]	@ (8009cdc <HAL_RCC_OscConfig+0x618>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1ec      	bne.n	8009b6a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b90:	4b52      	ldr	r3, [pc, #328]	@ (8009cdc <HAL_RCC_OscConfig+0x618>)
 8009b92:	68da      	ldr	r2, [r3, #12]
 8009b94:	4b52      	ldr	r3, [pc, #328]	@ (8009ce0 <HAL_RCC_OscConfig+0x61c>)
 8009b96:	4013      	ands	r3, r2
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	6a11      	ldr	r1, [r2, #32]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009ba0:	3a01      	subs	r2, #1
 8009ba2:	0112      	lsls	r2, r2, #4
 8009ba4:	4311      	orrs	r1, r2
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009baa:	0212      	lsls	r2, r2, #8
 8009bac:	4311      	orrs	r1, r2
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009bb2:	0852      	lsrs	r2, r2, #1
 8009bb4:	3a01      	subs	r2, #1
 8009bb6:	0552      	lsls	r2, r2, #21
 8009bb8:	4311      	orrs	r1, r2
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009bbe:	0852      	lsrs	r2, r2, #1
 8009bc0:	3a01      	subs	r2, #1
 8009bc2:	0652      	lsls	r2, r2, #25
 8009bc4:	4311      	orrs	r1, r2
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009bca:	06d2      	lsls	r2, r2, #27
 8009bcc:	430a      	orrs	r2, r1
 8009bce:	4943      	ldr	r1, [pc, #268]	@ (8009cdc <HAL_RCC_OscConfig+0x618>)
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009bd4:	4b41      	ldr	r3, [pc, #260]	@ (8009cdc <HAL_RCC_OscConfig+0x618>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a40      	ldr	r2, [pc, #256]	@ (8009cdc <HAL_RCC_OscConfig+0x618>)
 8009bda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009bde:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009be0:	4b3e      	ldr	r3, [pc, #248]	@ (8009cdc <HAL_RCC_OscConfig+0x618>)
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	4a3d      	ldr	r2, [pc, #244]	@ (8009cdc <HAL_RCC_OscConfig+0x618>)
 8009be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009bea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bec:	f7fa fce8 	bl	80045c0 <HAL_GetTick>
 8009bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009bf2:	e008      	b.n	8009c06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bf4:	f7fa fce4 	bl	80045c0 <HAL_GetTick>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d901      	bls.n	8009c06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009c02:	2303      	movs	r3, #3
 8009c04:	e066      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c06:	4b35      	ldr	r3, [pc, #212]	@ (8009cdc <HAL_RCC_OscConfig+0x618>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d0f0      	beq.n	8009bf4 <HAL_RCC_OscConfig+0x530>
 8009c12:	e05e      	b.n	8009cd2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c14:	4b31      	ldr	r3, [pc, #196]	@ (8009cdc <HAL_RCC_OscConfig+0x618>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a30      	ldr	r2, [pc, #192]	@ (8009cdc <HAL_RCC_OscConfig+0x618>)
 8009c1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c20:	f7fa fcce 	bl	80045c0 <HAL_GetTick>
 8009c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c26:	e008      	b.n	8009c3a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c28:	f7fa fcca 	bl	80045c0 <HAL_GetTick>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d901      	bls.n	8009c3a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009c36:	2303      	movs	r3, #3
 8009c38:	e04c      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c3a:	4b28      	ldr	r3, [pc, #160]	@ (8009cdc <HAL_RCC_OscConfig+0x618>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1f0      	bne.n	8009c28 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009c46:	4b25      	ldr	r3, [pc, #148]	@ (8009cdc <HAL_RCC_OscConfig+0x618>)
 8009c48:	68da      	ldr	r2, [r3, #12]
 8009c4a:	4924      	ldr	r1, [pc, #144]	@ (8009cdc <HAL_RCC_OscConfig+0x618>)
 8009c4c:	4b25      	ldr	r3, [pc, #148]	@ (8009ce4 <HAL_RCC_OscConfig+0x620>)
 8009c4e:	4013      	ands	r3, r2
 8009c50:	60cb      	str	r3, [r1, #12]
 8009c52:	e03e      	b.n	8009cd2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	69db      	ldr	r3, [r3, #28]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d101      	bne.n	8009c60 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e039      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009c60:	4b1e      	ldr	r3, [pc, #120]	@ (8009cdc <HAL_RCC_OscConfig+0x618>)
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f003 0203 	and.w	r2, r3, #3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a1b      	ldr	r3, [r3, #32]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d12c      	bne.n	8009cce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d123      	bne.n	8009cce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d11b      	bne.n	8009cce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d113      	bne.n	8009cce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cb0:	085b      	lsrs	r3, r3, #1
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d109      	bne.n	8009cce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cc4:	085b      	lsrs	r3, r3, #1
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d001      	beq.n	8009cd2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e000      	b.n	8009cd4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3720      	adds	r7, #32
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	40021000 	.word	0x40021000
 8009ce0:	019f800c 	.word	0x019f800c
 8009ce4:	feeefffc 	.word	0xfeeefffc

08009ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d101      	bne.n	8009d00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e11e      	b.n	8009f3e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d00:	4b91      	ldr	r3, [pc, #580]	@ (8009f48 <HAL_RCC_ClockConfig+0x260>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f003 030f 	and.w	r3, r3, #15
 8009d08:	683a      	ldr	r2, [r7, #0]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d910      	bls.n	8009d30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d0e:	4b8e      	ldr	r3, [pc, #568]	@ (8009f48 <HAL_RCC_ClockConfig+0x260>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f023 020f 	bic.w	r2, r3, #15
 8009d16:	498c      	ldr	r1, [pc, #560]	@ (8009f48 <HAL_RCC_ClockConfig+0x260>)
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d1e:	4b8a      	ldr	r3, [pc, #552]	@ (8009f48 <HAL_RCC_ClockConfig+0x260>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 030f 	and.w	r3, r3, #15
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d001      	beq.n	8009d30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e106      	b.n	8009f3e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d073      	beq.n	8009e24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	2b03      	cmp	r3, #3
 8009d42:	d129      	bne.n	8009d98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d44:	4b81      	ldr	r3, [pc, #516]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e0f4      	b.n	8009f3e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009d54:	f000 f99e 	bl	800a094 <RCC_GetSysClockFreqFromPLLSource>
 8009d58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	4a7c      	ldr	r2, [pc, #496]	@ (8009f50 <HAL_RCC_ClockConfig+0x268>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d93f      	bls.n	8009de2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009d62:	4b7a      	ldr	r3, [pc, #488]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d009      	beq.n	8009d82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d033      	beq.n	8009de2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d12f      	bne.n	8009de2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009d82:	4b72      	ldr	r3, [pc, #456]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d8a:	4a70      	ldr	r2, [pc, #448]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009d92:	2380      	movs	r3, #128	@ 0x80
 8009d94:	617b      	str	r3, [r7, #20]
 8009d96:	e024      	b.n	8009de2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d107      	bne.n	8009db0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009da0:	4b6a      	ldr	r3, [pc, #424]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d109      	bne.n	8009dc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e0c6      	b.n	8009f3e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009db0:	4b66      	ldr	r3, [pc, #408]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d101      	bne.n	8009dc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e0be      	b.n	8009f3e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009dc0:	f000 f8ce 	bl	8009f60 <HAL_RCC_GetSysClockFreq>
 8009dc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	4a61      	ldr	r2, [pc, #388]	@ (8009f50 <HAL_RCC_ClockConfig+0x268>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d909      	bls.n	8009de2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009dce:	4b5f      	ldr	r3, [pc, #380]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009dd6:	4a5d      	ldr	r2, [pc, #372]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ddc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009dde:	2380      	movs	r3, #128	@ 0x80
 8009de0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009de2:	4b5a      	ldr	r3, [pc, #360]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	f023 0203 	bic.w	r2, r3, #3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	4957      	ldr	r1, [pc, #348]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009df0:	4313      	orrs	r3, r2
 8009df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009df4:	f7fa fbe4 	bl	80045c0 <HAL_GetTick>
 8009df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dfa:	e00a      	b.n	8009e12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009dfc:	f7fa fbe0 	bl	80045c0 <HAL_GetTick>
 8009e00:	4602      	mov	r2, r0
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d901      	bls.n	8009e12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	e095      	b.n	8009f3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e12:	4b4e      	ldr	r3, [pc, #312]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	f003 020c 	and.w	r2, r3, #12
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d1eb      	bne.n	8009dfc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 0302 	and.w	r3, r3, #2
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d023      	beq.n	8009e78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0304 	and.w	r3, r3, #4
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d005      	beq.n	8009e48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009e3c:	4b43      	ldr	r3, [pc, #268]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	4a42      	ldr	r2, [pc, #264]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009e42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009e46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 0308 	and.w	r3, r3, #8
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d007      	beq.n	8009e64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009e54:	4b3d      	ldr	r3, [pc, #244]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009e5c:	4a3b      	ldr	r2, [pc, #236]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009e5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009e62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e64:	4b39      	ldr	r3, [pc, #228]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	4936      	ldr	r1, [pc, #216]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	608b      	str	r3, [r1, #8]
 8009e76:	e008      	b.n	8009e8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	2b80      	cmp	r3, #128	@ 0x80
 8009e7c:	d105      	bne.n	8009e8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009e7e:	4b33      	ldr	r3, [pc, #204]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	4a32      	ldr	r2, [pc, #200]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009e84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8009f48 <HAL_RCC_ClockConfig+0x260>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f003 030f 	and.w	r3, r3, #15
 8009e92:	683a      	ldr	r2, [r7, #0]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d21d      	bcs.n	8009ed4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e98:	4b2b      	ldr	r3, [pc, #172]	@ (8009f48 <HAL_RCC_ClockConfig+0x260>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f023 020f 	bic.w	r2, r3, #15
 8009ea0:	4929      	ldr	r1, [pc, #164]	@ (8009f48 <HAL_RCC_ClockConfig+0x260>)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009ea8:	f7fa fb8a 	bl	80045c0 <HAL_GetTick>
 8009eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009eae:	e00a      	b.n	8009ec6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009eb0:	f7fa fb86 	bl	80045c0 <HAL_GetTick>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d901      	bls.n	8009ec6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e03b      	b.n	8009f3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ec6:	4b20      	ldr	r3, [pc, #128]	@ (8009f48 <HAL_RCC_ClockConfig+0x260>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 030f 	and.w	r3, r3, #15
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d1ed      	bne.n	8009eb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f003 0304 	and.w	r3, r3, #4
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d008      	beq.n	8009ef2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	4917      	ldr	r1, [pc, #92]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f003 0308 	and.w	r3, r3, #8
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d009      	beq.n	8009f12 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009efe:	4b13      	ldr	r3, [pc, #76]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	00db      	lsls	r3, r3, #3
 8009f0c:	490f      	ldr	r1, [pc, #60]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009f12:	f000 f825 	bl	8009f60 <HAL_RCC_GetSysClockFreq>
 8009f16:	4602      	mov	r2, r0
 8009f18:	4b0c      	ldr	r3, [pc, #48]	@ (8009f4c <HAL_RCC_ClockConfig+0x264>)
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	091b      	lsrs	r3, r3, #4
 8009f1e:	f003 030f 	and.w	r3, r3, #15
 8009f22:	490c      	ldr	r1, [pc, #48]	@ (8009f54 <HAL_RCC_ClockConfig+0x26c>)
 8009f24:	5ccb      	ldrb	r3, [r1, r3]
 8009f26:	f003 031f 	and.w	r3, r3, #31
 8009f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8009f58 <HAL_RCC_ClockConfig+0x270>)
 8009f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009f32:	4b0a      	ldr	r3, [pc, #40]	@ (8009f5c <HAL_RCC_ClockConfig+0x274>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fa faf6 	bl	8004528 <HAL_InitTick>
 8009f3c:	4603      	mov	r3, r0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	40022000 	.word	0x40022000
 8009f4c:	40021000 	.word	0x40021000
 8009f50:	04c4b400 	.word	0x04c4b400
 8009f54:	08012f08 	.word	0x08012f08
 8009f58:	20000000 	.word	0x20000000
 8009f5c:	20000004 	.word	0x20000004

08009f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b087      	sub	sp, #28
 8009f64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009f66:	4b2c      	ldr	r3, [pc, #176]	@ (800a018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	f003 030c 	and.w	r3, r3, #12
 8009f6e:	2b04      	cmp	r3, #4
 8009f70:	d102      	bne.n	8009f78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009f72:	4b2a      	ldr	r3, [pc, #168]	@ (800a01c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009f74:	613b      	str	r3, [r7, #16]
 8009f76:	e047      	b.n	800a008 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009f78:	4b27      	ldr	r3, [pc, #156]	@ (800a018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	f003 030c 	and.w	r3, r3, #12
 8009f80:	2b08      	cmp	r3, #8
 8009f82:	d102      	bne.n	8009f8a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009f84:	4b26      	ldr	r3, [pc, #152]	@ (800a020 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009f86:	613b      	str	r3, [r7, #16]
 8009f88:	e03e      	b.n	800a008 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009f8a:	4b23      	ldr	r3, [pc, #140]	@ (800a018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	f003 030c 	and.w	r3, r3, #12
 8009f92:	2b0c      	cmp	r3, #12
 8009f94:	d136      	bne.n	800a004 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009f96:	4b20      	ldr	r3, [pc, #128]	@ (800a018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	f003 0303 	and.w	r3, r3, #3
 8009f9e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009fa0:	4b1d      	ldr	r3, [pc, #116]	@ (800a018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	091b      	lsrs	r3, r3, #4
 8009fa6:	f003 030f 	and.w	r3, r3, #15
 8009faa:	3301      	adds	r3, #1
 8009fac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2b03      	cmp	r3, #3
 8009fb2:	d10c      	bne.n	8009fce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009fb4:	4a1a      	ldr	r2, [pc, #104]	@ (800a020 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fbc:	4a16      	ldr	r2, [pc, #88]	@ (800a018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009fbe:	68d2      	ldr	r2, [r2, #12]
 8009fc0:	0a12      	lsrs	r2, r2, #8
 8009fc2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009fc6:	fb02 f303 	mul.w	r3, r2, r3
 8009fca:	617b      	str	r3, [r7, #20]
      break;
 8009fcc:	e00c      	b.n	8009fe8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009fce:	4a13      	ldr	r2, [pc, #76]	@ (800a01c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fd6:	4a10      	ldr	r2, [pc, #64]	@ (800a018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009fd8:	68d2      	ldr	r2, [r2, #12]
 8009fda:	0a12      	lsrs	r2, r2, #8
 8009fdc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009fe0:	fb02 f303 	mul.w	r3, r2, r3
 8009fe4:	617b      	str	r3, [r7, #20]
      break;
 8009fe6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009fe8:	4b0b      	ldr	r3, [pc, #44]	@ (800a018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	0e5b      	lsrs	r3, r3, #25
 8009fee:	f003 0303 	and.w	r3, r3, #3
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a000:	613b      	str	r3, [r7, #16]
 800a002:	e001      	b.n	800a008 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a004:	2300      	movs	r3, #0
 800a006:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a008:	693b      	ldr	r3, [r7, #16]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	371c      	adds	r7, #28
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	40021000 	.word	0x40021000
 800a01c:	00f42400 	.word	0x00f42400
 800a020:	007a1200 	.word	0x007a1200

0800a024 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a024:	b480      	push	{r7}
 800a026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a028:	4b03      	ldr	r3, [pc, #12]	@ (800a038 <HAL_RCC_GetHCLKFreq+0x14>)
 800a02a:	681b      	ldr	r3, [r3, #0]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	20000000 	.word	0x20000000

0800a03c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a040:	f7ff fff0 	bl	800a024 <HAL_RCC_GetHCLKFreq>
 800a044:	4602      	mov	r2, r0
 800a046:	4b06      	ldr	r3, [pc, #24]	@ (800a060 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	0a1b      	lsrs	r3, r3, #8
 800a04c:	f003 0307 	and.w	r3, r3, #7
 800a050:	4904      	ldr	r1, [pc, #16]	@ (800a064 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a052:	5ccb      	ldrb	r3, [r1, r3]
 800a054:	f003 031f 	and.w	r3, r3, #31
 800a058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	40021000 	.word	0x40021000
 800a064:	08012f18 	.word	0x08012f18

0800a068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a06c:	f7ff ffda 	bl	800a024 <HAL_RCC_GetHCLKFreq>
 800a070:	4602      	mov	r2, r0
 800a072:	4b06      	ldr	r3, [pc, #24]	@ (800a08c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	0adb      	lsrs	r3, r3, #11
 800a078:	f003 0307 	and.w	r3, r3, #7
 800a07c:	4904      	ldr	r1, [pc, #16]	@ (800a090 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a07e:	5ccb      	ldrb	r3, [r1, r3]
 800a080:	f003 031f 	and.w	r3, r3, #31
 800a084:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a088:	4618      	mov	r0, r3
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	40021000 	.word	0x40021000
 800a090:	08012f18 	.word	0x08012f18

0800a094 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a094:	b480      	push	{r7}
 800a096:	b087      	sub	sp, #28
 800a098:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a09a:	4b1e      	ldr	r3, [pc, #120]	@ (800a114 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	f003 0303 	and.w	r3, r3, #3
 800a0a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a0a4:	4b1b      	ldr	r3, [pc, #108]	@ (800a114 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	091b      	lsrs	r3, r3, #4
 800a0aa:	f003 030f 	and.w	r3, r3, #15
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	d10c      	bne.n	800a0d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a0b8:	4a17      	ldr	r2, [pc, #92]	@ (800a118 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0c0:	4a14      	ldr	r2, [pc, #80]	@ (800a114 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a0c2:	68d2      	ldr	r2, [r2, #12]
 800a0c4:	0a12      	lsrs	r2, r2, #8
 800a0c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a0ca:	fb02 f303 	mul.w	r3, r2, r3
 800a0ce:	617b      	str	r3, [r7, #20]
    break;
 800a0d0:	e00c      	b.n	800a0ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a0d2:	4a12      	ldr	r2, [pc, #72]	@ (800a11c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0da:	4a0e      	ldr	r2, [pc, #56]	@ (800a114 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a0dc:	68d2      	ldr	r2, [r2, #12]
 800a0de:	0a12      	lsrs	r2, r2, #8
 800a0e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a0e4:	fb02 f303 	mul.w	r3, r2, r3
 800a0e8:	617b      	str	r3, [r7, #20]
    break;
 800a0ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a0ec:	4b09      	ldr	r3, [pc, #36]	@ (800a114 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	0e5b      	lsrs	r3, r3, #25
 800a0f2:	f003 0303 	and.w	r3, r3, #3
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	005b      	lsls	r3, r3, #1
 800a0fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a0fc:	697a      	ldr	r2, [r7, #20]
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	fbb2 f3f3 	udiv	r3, r2, r3
 800a104:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a106:	687b      	ldr	r3, [r7, #4]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	371c      	adds	r7, #28
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	40021000 	.word	0x40021000
 800a118:	007a1200 	.word	0x007a1200
 800a11c:	00f42400 	.word	0x00f42400

0800a120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a128:	2300      	movs	r3, #0
 800a12a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a12c:	2300      	movs	r3, #0
 800a12e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 8098 	beq.w	800a26e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a13e:	2300      	movs	r3, #0
 800a140:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a142:	4b43      	ldr	r3, [pc, #268]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d10d      	bne.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a14e:	4b40      	ldr	r3, [pc, #256]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a152:	4a3f      	ldr	r2, [pc, #252]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a158:	6593      	str	r3, [r2, #88]	@ 0x58
 800a15a:	4b3d      	ldr	r3, [pc, #244]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a15c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a15e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a162:	60bb      	str	r3, [r7, #8]
 800a164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a166:	2301      	movs	r3, #1
 800a168:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a16a:	4b3a      	ldr	r3, [pc, #232]	@ (800a254 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a39      	ldr	r2, [pc, #228]	@ (800a254 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a174:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a176:	f7fa fa23 	bl	80045c0 <HAL_GetTick>
 800a17a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a17c:	e009      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a17e:	f7fa fa1f 	bl	80045c0 <HAL_GetTick>
 800a182:	4602      	mov	r2, r0
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	2b02      	cmp	r3, #2
 800a18a:	d902      	bls.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a18c:	2303      	movs	r3, #3
 800a18e:	74fb      	strb	r3, [r7, #19]
        break;
 800a190:	e005      	b.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a192:	4b30      	ldr	r3, [pc, #192]	@ (800a254 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d0ef      	beq.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a19e:	7cfb      	ldrb	r3, [r7, #19]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d159      	bne.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a1a4:	4b2a      	ldr	r3, [pc, #168]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d01e      	beq.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1ba:	697a      	ldr	r2, [r7, #20]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d019      	beq.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a1c0:	4b23      	ldr	r3, [pc, #140]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a1cc:	4b20      	ldr	r3, [pc, #128]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1d2:	4a1f      	ldr	r2, [pc, #124]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a1dc:	4b1c      	ldr	r3, [pc, #112]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1e2:	4a1b      	ldr	r2, [pc, #108]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a1e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a1ec:	4a18      	ldr	r2, [pc, #96]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	f003 0301 	and.w	r3, r3, #1
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d016      	beq.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1fe:	f7fa f9df 	bl	80045c0 <HAL_GetTick>
 800a202:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a204:	e00b      	b.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a206:	f7fa f9db 	bl	80045c0 <HAL_GetTick>
 800a20a:	4602      	mov	r2, r0
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a214:	4293      	cmp	r3, r2
 800a216:	d902      	bls.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	74fb      	strb	r3, [r7, #19]
            break;
 800a21c:	e006      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a21e:	4b0c      	ldr	r3, [pc, #48]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a224:	f003 0302 	and.w	r3, r3, #2
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d0ec      	beq.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a22c:	7cfb      	ldrb	r3, [r7, #19]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10b      	bne.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a232:	4b07      	ldr	r3, [pc, #28]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a238:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a240:	4903      	ldr	r1, [pc, #12]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a242:	4313      	orrs	r3, r2
 800a244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a248:	e008      	b.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a24a:	7cfb      	ldrb	r3, [r7, #19]
 800a24c:	74bb      	strb	r3, [r7, #18]
 800a24e:	e005      	b.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a250:	40021000 	.word	0x40021000
 800a254:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a258:	7cfb      	ldrb	r3, [r7, #19]
 800a25a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a25c:	7c7b      	ldrb	r3, [r7, #17]
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d105      	bne.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a262:	4ba7      	ldr	r3, [pc, #668]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a266:	4aa6      	ldr	r2, [pc, #664]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a268:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a26c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 0301 	and.w	r3, r3, #1
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00a      	beq.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a27a:	4ba1      	ldr	r3, [pc, #644]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a27c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a280:	f023 0203 	bic.w	r2, r3, #3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	499d      	ldr	r1, [pc, #628]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a28a:	4313      	orrs	r3, r2
 800a28c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 0302 	and.w	r3, r3, #2
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00a      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a29c:	4b98      	ldr	r3, [pc, #608]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a29e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2a2:	f023 020c 	bic.w	r2, r3, #12
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	4995      	ldr	r1, [pc, #596]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 0304 	and.w	r3, r3, #4
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00a      	beq.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a2be:	4b90      	ldr	r3, [pc, #576]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	498c      	ldr	r1, [pc, #560]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 0308 	and.w	r3, r3, #8
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00a      	beq.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a2e0:	4b87      	ldr	r3, [pc, #540]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	4984      	ldr	r1, [pc, #528]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 0310 	and.w	r3, r3, #16
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00a      	beq.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a302:	4b7f      	ldr	r3, [pc, #508]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a308:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	695b      	ldr	r3, [r3, #20]
 800a310:	497b      	ldr	r1, [pc, #492]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a312:	4313      	orrs	r3, r2
 800a314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 0320 	and.w	r3, r3, #32
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00a      	beq.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a324:	4b76      	ldr	r3, [pc, #472]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a32a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	4973      	ldr	r1, [pc, #460]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a334:	4313      	orrs	r3, r2
 800a336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a342:	2b00      	cmp	r3, #0
 800a344:	d00a      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a346:	4b6e      	ldr	r3, [pc, #440]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a34c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	69db      	ldr	r3, [r3, #28]
 800a354:	496a      	ldr	r1, [pc, #424]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a356:	4313      	orrs	r3, r2
 800a358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00a      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a368:	4b65      	ldr	r3, [pc, #404]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a36a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a36e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	4962      	ldr	r1, [pc, #392]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a378:	4313      	orrs	r3, r2
 800a37a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00a      	beq.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a38a:	4b5d      	ldr	r3, [pc, #372]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a390:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a398:	4959      	ldr	r1, [pc, #356]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a39a:	4313      	orrs	r3, r2
 800a39c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00a      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a3ac:	4b54      	ldr	r3, [pc, #336]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a3b2:	f023 0203 	bic.w	r2, r3, #3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ba:	4951      	ldr	r1, [pc, #324]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00a      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a3ce:	4b4c      	ldr	r3, [pc, #304]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3dc:	4948      	ldr	r1, [pc, #288]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d015      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a3f0:	4b43      	ldr	r3, [pc, #268]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3fe:	4940      	ldr	r1, [pc, #256]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a400:	4313      	orrs	r3, r2
 800a402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a40a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a40e:	d105      	bne.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a410:	4b3b      	ldr	r3, [pc, #236]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	4a3a      	ldr	r2, [pc, #232]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a416:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a41a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a424:	2b00      	cmp	r3, #0
 800a426:	d015      	beq.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a428:	4b35      	ldr	r3, [pc, #212]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a42a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a42e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a436:	4932      	ldr	r1, [pc, #200]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a438:	4313      	orrs	r3, r2
 800a43a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a442:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a446:	d105      	bne.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a448:	4b2d      	ldr	r3, [pc, #180]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	4a2c      	ldr	r2, [pc, #176]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a44e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a452:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d015      	beq.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a460:	4b27      	ldr	r3, [pc, #156]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a466:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a46e:	4924      	ldr	r1, [pc, #144]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a470:	4313      	orrs	r3, r2
 800a472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a47a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a47e:	d105      	bne.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a480:	4b1f      	ldr	r3, [pc, #124]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	4a1e      	ldr	r2, [pc, #120]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a48a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a494:	2b00      	cmp	r3, #0
 800a496:	d015      	beq.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a498:	4b19      	ldr	r3, [pc, #100]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a49e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4a6:	4916      	ldr	r1, [pc, #88]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4b6:	d105      	bne.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a4b8:	4b11      	ldr	r3, [pc, #68]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	4a10      	ldr	r2, [pc, #64]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d019      	beq.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a4d0:	4b0b      	ldr	r3, [pc, #44]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4de:	4908      	ldr	r1, [pc, #32]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4ee:	d109      	bne.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a4f0:	4b03      	ldr	r3, [pc, #12]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	4a02      	ldr	r2, [pc, #8]	@ (800a500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4fa:	60d3      	str	r3, [r2, #12]
 800a4fc:	e002      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a4fe:	bf00      	nop
 800a500:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d015      	beq.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a510:	4b29      	ldr	r3, [pc, #164]	@ (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a516:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a51e:	4926      	ldr	r1, [pc, #152]	@ (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a520:	4313      	orrs	r3, r2
 800a522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a52a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a52e:	d105      	bne.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a530:	4b21      	ldr	r3, [pc, #132]	@ (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	4a20      	ldr	r2, [pc, #128]	@ (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a536:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a53a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a544:	2b00      	cmp	r3, #0
 800a546:	d015      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a548:	4b1b      	ldr	r3, [pc, #108]	@ (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a54a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a54e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a556:	4918      	ldr	r1, [pc, #96]	@ (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a558:	4313      	orrs	r3, r2
 800a55a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a566:	d105      	bne.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a568:	4b13      	ldr	r3, [pc, #76]	@ (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	4a12      	ldr	r2, [pc, #72]	@ (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a56e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a572:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d015      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a580:	4b0d      	ldr	r3, [pc, #52]	@ (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a582:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a586:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a58e:	490a      	ldr	r1, [pc, #40]	@ (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a590:	4313      	orrs	r3, r2
 800a592:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a59a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a59e:	d105      	bne.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a5a0:	4b05      	ldr	r3, [pc, #20]	@ (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	4a04      	ldr	r2, [pc, #16]	@ (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a5a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a5ac:	7cbb      	ldrb	r3, [r7, #18]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3718      	adds	r7, #24
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	40021000 	.word	0x40021000

0800a5bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d101      	bne.n	800a5ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e049      	b.n	800a662 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d106      	bne.n	800a5e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7f9 fe1e 	bl	8004224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	4610      	mov	r0, r2
 800a5fc:	f000 fac2 	bl	800ab84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	f003 0302 	and.w	r3, r3, #2
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d020      	beq.n	800a6ce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f003 0302 	and.w	r3, r3, #2
 800a692:	2b00      	cmp	r3, #0
 800a694:	d01b      	beq.n	800a6ce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f06f 0202 	mvn.w	r2, #2
 800a69e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	f003 0303 	and.w	r3, r3, #3
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d003      	beq.n	800a6bc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 fa47 	bl	800ab48 <HAL_TIM_IC_CaptureCallback>
 800a6ba:	e005      	b.n	800a6c8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fa39 	bl	800ab34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fa4a 	bl	800ab5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	f003 0304 	and.w	r3, r3, #4
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d020      	beq.n	800a71a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f003 0304 	and.w	r3, r3, #4
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d01b      	beq.n	800a71a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f06f 0204 	mvn.w	r2, #4
 800a6ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2202      	movs	r2, #2
 800a6f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d003      	beq.n	800a708 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 fa21 	bl	800ab48 <HAL_TIM_IC_CaptureCallback>
 800a706:	e005      	b.n	800a714 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 fa13 	bl	800ab34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fa24 	bl	800ab5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	f003 0308 	and.w	r3, r3, #8
 800a720:	2b00      	cmp	r3, #0
 800a722:	d020      	beq.n	800a766 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f003 0308 	and.w	r3, r3, #8
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d01b      	beq.n	800a766 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f06f 0208 	mvn.w	r2, #8
 800a736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2204      	movs	r2, #4
 800a73c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	69db      	ldr	r3, [r3, #28]
 800a744:	f003 0303 	and.w	r3, r3, #3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d003      	beq.n	800a754 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f9fb 	bl	800ab48 <HAL_TIM_IC_CaptureCallback>
 800a752:	e005      	b.n	800a760 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f9ed 	bl	800ab34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 f9fe 	bl	800ab5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	f003 0310 	and.w	r3, r3, #16
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d020      	beq.n	800a7b2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f003 0310 	and.w	r3, r3, #16
 800a776:	2b00      	cmp	r3, #0
 800a778:	d01b      	beq.n	800a7b2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f06f 0210 	mvn.w	r2, #16
 800a782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2208      	movs	r2, #8
 800a788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	69db      	ldr	r3, [r3, #28]
 800a790:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a794:	2b00      	cmp	r3, #0
 800a796:	d003      	beq.n	800a7a0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 f9d5 	bl	800ab48 <HAL_TIM_IC_CaptureCallback>
 800a79e:	e005      	b.n	800a7ac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 f9c7 	bl	800ab34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f9d8 	bl	800ab5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	f003 0301 	and.w	r3, r3, #1
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00c      	beq.n	800a7d6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f003 0301 	and.w	r3, r3, #1
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d007      	beq.n	800a7d6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f06f 0201 	mvn.w	r2, #1
 800a7ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f002 f96f 	bl	800cab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d104      	bne.n	800a7ea <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00c      	beq.n	800a804 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d007      	beq.n	800a804 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a7fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fbb0 	bl	800af64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00c      	beq.n	800a828 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a814:	2b00      	cmp	r3, #0
 800a816:	d007      	beq.n	800a828 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fba8 	bl	800af78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d00c      	beq.n	800a84c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d007      	beq.n	800a84c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f992 	bl	800ab70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	f003 0320 	and.w	r3, r3, #32
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00c      	beq.n	800a870 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f003 0320 	and.w	r3, r3, #32
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d007      	beq.n	800a870 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f06f 0220 	mvn.w	r2, #32
 800a868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fb70 	bl	800af50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00c      	beq.n	800a894 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d007      	beq.n	800a894 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a88c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fb7c 	bl	800af8c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00c      	beq.n	800a8b8 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d007      	beq.n	800a8b8 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a8b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fb74 	bl	800afa0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00c      	beq.n	800a8dc <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d007      	beq.n	800a8dc <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a8d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fb6c 	bl	800afb4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d00c      	beq.n	800a900 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d007      	beq.n	800a900 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a8f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 fb64 	bl	800afc8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a900:	bf00      	nop
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d101      	bne.n	800a924 <HAL_TIM_ConfigClockSource+0x1c>
 800a920:	2302      	movs	r3, #2
 800a922:	e0f6      	b.n	800ab12 <HAL_TIM_ConfigClockSource+0x20a>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2202      	movs	r2, #2
 800a930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a942:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a94e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a6f      	ldr	r2, [pc, #444]	@ (800ab1c <HAL_TIM_ConfigClockSource+0x214>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	f000 80c1 	beq.w	800aae6 <HAL_TIM_ConfigClockSource+0x1de>
 800a964:	4a6d      	ldr	r2, [pc, #436]	@ (800ab1c <HAL_TIM_ConfigClockSource+0x214>)
 800a966:	4293      	cmp	r3, r2
 800a968:	f200 80c6 	bhi.w	800aaf8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a96c:	4a6c      	ldr	r2, [pc, #432]	@ (800ab20 <HAL_TIM_ConfigClockSource+0x218>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	f000 80b9 	beq.w	800aae6 <HAL_TIM_ConfigClockSource+0x1de>
 800a974:	4a6a      	ldr	r2, [pc, #424]	@ (800ab20 <HAL_TIM_ConfigClockSource+0x218>)
 800a976:	4293      	cmp	r3, r2
 800a978:	f200 80be 	bhi.w	800aaf8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a97c:	4a69      	ldr	r2, [pc, #420]	@ (800ab24 <HAL_TIM_ConfigClockSource+0x21c>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	f000 80b1 	beq.w	800aae6 <HAL_TIM_ConfigClockSource+0x1de>
 800a984:	4a67      	ldr	r2, [pc, #412]	@ (800ab24 <HAL_TIM_ConfigClockSource+0x21c>)
 800a986:	4293      	cmp	r3, r2
 800a988:	f200 80b6 	bhi.w	800aaf8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a98c:	4a66      	ldr	r2, [pc, #408]	@ (800ab28 <HAL_TIM_ConfigClockSource+0x220>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	f000 80a9 	beq.w	800aae6 <HAL_TIM_ConfigClockSource+0x1de>
 800a994:	4a64      	ldr	r2, [pc, #400]	@ (800ab28 <HAL_TIM_ConfigClockSource+0x220>)
 800a996:	4293      	cmp	r3, r2
 800a998:	f200 80ae 	bhi.w	800aaf8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a99c:	4a63      	ldr	r2, [pc, #396]	@ (800ab2c <HAL_TIM_ConfigClockSource+0x224>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	f000 80a1 	beq.w	800aae6 <HAL_TIM_ConfigClockSource+0x1de>
 800a9a4:	4a61      	ldr	r2, [pc, #388]	@ (800ab2c <HAL_TIM_ConfigClockSource+0x224>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	f200 80a6 	bhi.w	800aaf8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9ac:	4a60      	ldr	r2, [pc, #384]	@ (800ab30 <HAL_TIM_ConfigClockSource+0x228>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	f000 8099 	beq.w	800aae6 <HAL_TIM_ConfigClockSource+0x1de>
 800a9b4:	4a5e      	ldr	r2, [pc, #376]	@ (800ab30 <HAL_TIM_ConfigClockSource+0x228>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	f200 809e 	bhi.w	800aaf8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a9c0:	f000 8091 	beq.w	800aae6 <HAL_TIM_ConfigClockSource+0x1de>
 800a9c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a9c8:	f200 8096 	bhi.w	800aaf8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9d0:	f000 8089 	beq.w	800aae6 <HAL_TIM_ConfigClockSource+0x1de>
 800a9d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9d8:	f200 808e 	bhi.w	800aaf8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9e0:	d03e      	beq.n	800aa60 <HAL_TIM_ConfigClockSource+0x158>
 800a9e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9e6:	f200 8087 	bhi.w	800aaf8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9ee:	f000 8086 	beq.w	800aafe <HAL_TIM_ConfigClockSource+0x1f6>
 800a9f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9f6:	d87f      	bhi.n	800aaf8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9f8:	2b70      	cmp	r3, #112	@ 0x70
 800a9fa:	d01a      	beq.n	800aa32 <HAL_TIM_ConfigClockSource+0x12a>
 800a9fc:	2b70      	cmp	r3, #112	@ 0x70
 800a9fe:	d87b      	bhi.n	800aaf8 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa00:	2b60      	cmp	r3, #96	@ 0x60
 800aa02:	d050      	beq.n	800aaa6 <HAL_TIM_ConfigClockSource+0x19e>
 800aa04:	2b60      	cmp	r3, #96	@ 0x60
 800aa06:	d877      	bhi.n	800aaf8 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa08:	2b50      	cmp	r3, #80	@ 0x50
 800aa0a:	d03c      	beq.n	800aa86 <HAL_TIM_ConfigClockSource+0x17e>
 800aa0c:	2b50      	cmp	r3, #80	@ 0x50
 800aa0e:	d873      	bhi.n	800aaf8 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa10:	2b40      	cmp	r3, #64	@ 0x40
 800aa12:	d058      	beq.n	800aac6 <HAL_TIM_ConfigClockSource+0x1be>
 800aa14:	2b40      	cmp	r3, #64	@ 0x40
 800aa16:	d86f      	bhi.n	800aaf8 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa18:	2b30      	cmp	r3, #48	@ 0x30
 800aa1a:	d064      	beq.n	800aae6 <HAL_TIM_ConfigClockSource+0x1de>
 800aa1c:	2b30      	cmp	r3, #48	@ 0x30
 800aa1e:	d86b      	bhi.n	800aaf8 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa20:	2b20      	cmp	r3, #32
 800aa22:	d060      	beq.n	800aae6 <HAL_TIM_ConfigClockSource+0x1de>
 800aa24:	2b20      	cmp	r3, #32
 800aa26:	d867      	bhi.n	800aaf8 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d05c      	beq.n	800aae6 <HAL_TIM_ConfigClockSource+0x1de>
 800aa2c:	2b10      	cmp	r3, #16
 800aa2e:	d05a      	beq.n	800aae6 <HAL_TIM_ConfigClockSource+0x1de>
 800aa30:	e062      	b.n	800aaf8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa42:	f000 f9cf 	bl	800ade4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	609a      	str	r2, [r3, #8]
      break;
 800aa5e:	e04f      	b.n	800ab00 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa70:	f000 f9b8 	bl	800ade4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	689a      	ldr	r2, [r3, #8]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa82:	609a      	str	r2, [r3, #8]
      break;
 800aa84:	e03c      	b.n	800ab00 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa92:	461a      	mov	r2, r3
 800aa94:	f000 f92a 	bl	800acec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2150      	movs	r1, #80	@ 0x50
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f000 f983 	bl	800adaa <TIM_ITRx_SetConfig>
      break;
 800aaa4:	e02c      	b.n	800ab00 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aab2:	461a      	mov	r2, r3
 800aab4:	f000 f949 	bl	800ad4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2160      	movs	r1, #96	@ 0x60
 800aabe:	4618      	mov	r0, r3
 800aac0:	f000 f973 	bl	800adaa <TIM_ITRx_SetConfig>
      break;
 800aac4:	e01c      	b.n	800ab00 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aad2:	461a      	mov	r2, r3
 800aad4:	f000 f90a 	bl	800acec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2140      	movs	r1, #64	@ 0x40
 800aade:	4618      	mov	r0, r3
 800aae0:	f000 f963 	bl	800adaa <TIM_ITRx_SetConfig>
      break;
 800aae4:	e00c      	b.n	800ab00 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	4610      	mov	r0, r2
 800aaf2:	f000 f95a 	bl	800adaa <TIM_ITRx_SetConfig>
      break;
 800aaf6:	e003      	b.n	800ab00 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	73fb      	strb	r3, [r7, #15]
      break;
 800aafc:	e000      	b.n	800ab00 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800aafe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ab10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	00100070 	.word	0x00100070
 800ab20:	00100060 	.word	0x00100060
 800ab24:	00100050 	.word	0x00100050
 800ab28:	00100040 	.word	0x00100040
 800ab2c:	00100030 	.word	0x00100030
 800ab30:	00100020 	.word	0x00100020

0800ab34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab64:	bf00      	nop
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab78:	bf00      	nop
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4a4c      	ldr	r2, [pc, #304]	@ (800acc8 <TIM_Base_SetConfig+0x144>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d017      	beq.n	800abcc <TIM_Base_SetConfig+0x48>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aba2:	d013      	beq.n	800abcc <TIM_Base_SetConfig+0x48>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a49      	ldr	r2, [pc, #292]	@ (800accc <TIM_Base_SetConfig+0x148>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d00f      	beq.n	800abcc <TIM_Base_SetConfig+0x48>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a48      	ldr	r2, [pc, #288]	@ (800acd0 <TIM_Base_SetConfig+0x14c>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d00b      	beq.n	800abcc <TIM_Base_SetConfig+0x48>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a47      	ldr	r2, [pc, #284]	@ (800acd4 <TIM_Base_SetConfig+0x150>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d007      	beq.n	800abcc <TIM_Base_SetConfig+0x48>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a46      	ldr	r2, [pc, #280]	@ (800acd8 <TIM_Base_SetConfig+0x154>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d003      	beq.n	800abcc <TIM_Base_SetConfig+0x48>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a45      	ldr	r2, [pc, #276]	@ (800acdc <TIM_Base_SetConfig+0x158>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d108      	bne.n	800abde <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	4313      	orrs	r3, r2
 800abdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a39      	ldr	r2, [pc, #228]	@ (800acc8 <TIM_Base_SetConfig+0x144>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d023      	beq.n	800ac2e <TIM_Base_SetConfig+0xaa>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abec:	d01f      	beq.n	800ac2e <TIM_Base_SetConfig+0xaa>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a36      	ldr	r2, [pc, #216]	@ (800accc <TIM_Base_SetConfig+0x148>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d01b      	beq.n	800ac2e <TIM_Base_SetConfig+0xaa>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a35      	ldr	r2, [pc, #212]	@ (800acd0 <TIM_Base_SetConfig+0x14c>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d017      	beq.n	800ac2e <TIM_Base_SetConfig+0xaa>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a34      	ldr	r2, [pc, #208]	@ (800acd4 <TIM_Base_SetConfig+0x150>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d013      	beq.n	800ac2e <TIM_Base_SetConfig+0xaa>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a33      	ldr	r2, [pc, #204]	@ (800acd8 <TIM_Base_SetConfig+0x154>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d00f      	beq.n	800ac2e <TIM_Base_SetConfig+0xaa>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a33      	ldr	r2, [pc, #204]	@ (800ace0 <TIM_Base_SetConfig+0x15c>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d00b      	beq.n	800ac2e <TIM_Base_SetConfig+0xaa>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a32      	ldr	r2, [pc, #200]	@ (800ace4 <TIM_Base_SetConfig+0x160>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d007      	beq.n	800ac2e <TIM_Base_SetConfig+0xaa>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a31      	ldr	r2, [pc, #196]	@ (800ace8 <TIM_Base_SetConfig+0x164>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d003      	beq.n	800ac2e <TIM_Base_SetConfig+0xaa>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a2c      	ldr	r2, [pc, #176]	@ (800acdc <TIM_Base_SetConfig+0x158>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d108      	bne.n	800ac40 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	695b      	ldr	r3, [r3, #20]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	689a      	ldr	r2, [r3, #8]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a18      	ldr	r2, [pc, #96]	@ (800acc8 <TIM_Base_SetConfig+0x144>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d013      	beq.n	800ac94 <TIM_Base_SetConfig+0x110>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a1a      	ldr	r2, [pc, #104]	@ (800acd8 <TIM_Base_SetConfig+0x154>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d00f      	beq.n	800ac94 <TIM_Base_SetConfig+0x110>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a1a      	ldr	r2, [pc, #104]	@ (800ace0 <TIM_Base_SetConfig+0x15c>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d00b      	beq.n	800ac94 <TIM_Base_SetConfig+0x110>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a19      	ldr	r2, [pc, #100]	@ (800ace4 <TIM_Base_SetConfig+0x160>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d007      	beq.n	800ac94 <TIM_Base_SetConfig+0x110>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4a18      	ldr	r2, [pc, #96]	@ (800ace8 <TIM_Base_SetConfig+0x164>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d003      	beq.n	800ac94 <TIM_Base_SetConfig+0x110>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a13      	ldr	r2, [pc, #76]	@ (800acdc <TIM_Base_SetConfig+0x158>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d103      	bne.n	800ac9c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	691a      	ldr	r2, [r3, #16]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	f003 0301 	and.w	r3, r3, #1
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d105      	bne.n	800acba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	691b      	ldr	r3, [r3, #16]
 800acb2:	f023 0201 	bic.w	r2, r3, #1
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	611a      	str	r2, [r3, #16]
  }
}
 800acba:	bf00      	nop
 800acbc:	3714      	adds	r7, #20
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	40012c00 	.word	0x40012c00
 800accc:	40000400 	.word	0x40000400
 800acd0:	40000800 	.word	0x40000800
 800acd4:	40000c00 	.word	0x40000c00
 800acd8:	40013400 	.word	0x40013400
 800acdc:	40015000 	.word	0x40015000
 800ace0:	40014000 	.word	0x40014000
 800ace4:	40014400 	.word	0x40014400
 800ace8:	40014800 	.word	0x40014800

0800acec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acec:	b480      	push	{r7}
 800acee:	b087      	sub	sp, #28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	6a1b      	ldr	r3, [r3, #32]
 800acfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	6a1b      	ldr	r3, [r3, #32]
 800ad02:	f023 0201 	bic.w	r2, r3, #1
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	699b      	ldr	r3, [r3, #24]
 800ad0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	011b      	lsls	r3, r3, #4
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	f023 030a 	bic.w	r3, r3, #10
 800ad28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad2a:	697a      	ldr	r2, [r7, #20]
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	693a      	ldr	r2, [r7, #16]
 800ad36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	697a      	ldr	r2, [r7, #20]
 800ad3c:	621a      	str	r2, [r3, #32]
}
 800ad3e:	bf00      	nop
 800ad40:	371c      	adds	r7, #28
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	b087      	sub	sp, #28
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	60f8      	str	r0, [r7, #12]
 800ad52:	60b9      	str	r1, [r7, #8]
 800ad54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6a1b      	ldr	r3, [r3, #32]
 800ad60:	f023 0210 	bic.w	r2, r3, #16
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	699b      	ldr	r3, [r3, #24]
 800ad6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	031b      	lsls	r3, r3, #12
 800ad7a:	693a      	ldr	r2, [r7, #16]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ad86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	011b      	lsls	r3, r3, #4
 800ad8c:	697a      	ldr	r2, [r7, #20]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	621a      	str	r2, [r3, #32]
}
 800ad9e:	bf00      	nop
 800ada0:	371c      	adds	r7, #28
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr

0800adaa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800adaa:	b480      	push	{r7}
 800adac:	b085      	sub	sp, #20
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800adc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	4313      	orrs	r3, r2
 800adcc:	f043 0307 	orr.w	r3, r3, #7
 800add0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	609a      	str	r2, [r3, #8]
}
 800add8:	bf00      	nop
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b087      	sub	sp, #28
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
 800adf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800adfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	021a      	lsls	r2, r3, #8
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	431a      	orrs	r2, r3
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	697a      	ldr	r2, [r7, #20]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	697a      	ldr	r2, [r7, #20]
 800ae16:	609a      	str	r2, [r3, #8]
}
 800ae18:	bf00      	nop
 800ae1a:	371c      	adds	r7, #28
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d101      	bne.n	800ae3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae38:	2302      	movs	r3, #2
 800ae3a:	e074      	b.n	800af26 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2202      	movs	r2, #2
 800ae48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a34      	ldr	r2, [pc, #208]	@ (800af34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d009      	beq.n	800ae7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a33      	ldr	r2, [pc, #204]	@ (800af38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d004      	beq.n	800ae7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a31      	ldr	r2, [pc, #196]	@ (800af3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d108      	bne.n	800ae8c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ae80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ae92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a21      	ldr	r2, [pc, #132]	@ (800af34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d022      	beq.n	800aefa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aebc:	d01d      	beq.n	800aefa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a1f      	ldr	r2, [pc, #124]	@ (800af40 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d018      	beq.n	800aefa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a1d      	ldr	r2, [pc, #116]	@ (800af44 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d013      	beq.n	800aefa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a1c      	ldr	r2, [pc, #112]	@ (800af48 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d00e      	beq.n	800aefa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a15      	ldr	r2, [pc, #84]	@ (800af38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d009      	beq.n	800aefa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a18      	ldr	r2, [pc, #96]	@ (800af4c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d004      	beq.n	800aefa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a11      	ldr	r2, [pc, #68]	@ (800af3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d10c      	bne.n	800af14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	4313      	orrs	r3, r2
 800af0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68ba      	ldr	r2, [r7, #8]
 800af12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	40012c00 	.word	0x40012c00
 800af38:	40013400 	.word	0x40013400
 800af3c:	40015000 	.word	0x40015000
 800af40:	40000400 	.word	0x40000400
 800af44:	40000800 	.word	0x40000800
 800af48:	40000c00 	.word	0x40000c00
 800af4c:	40014000 	.word	0x40014000

0800af50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af58:	bf00      	nop
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af6c:	bf00      	nop
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af80:	bf00      	nop
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800afd0:	bf00      	nop
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d101      	bne.n	800afee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	e042      	b.n	800b074 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d106      	bne.n	800b006 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f7f9 f981 	bl	8004308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2224      	movs	r2, #36	@ 0x24
 800b00a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f022 0201 	bic.w	r2, r2, #1
 800b01c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b022:	2b00      	cmp	r3, #0
 800b024:	d002      	beq.n	800b02c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 ff1c 	bl	800be64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fc1d 	bl	800b86c <UART_SetConfig>
 800b032:	4603      	mov	r3, r0
 800b034:	2b01      	cmp	r3, #1
 800b036:	d101      	bne.n	800b03c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e01b      	b.n	800b074 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b04a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	689a      	ldr	r2, [r3, #8]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b05a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f042 0201 	orr.w	r2, r2, #1
 800b06a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 ff9b 	bl	800bfa8 <UART_CheckIdleState>
 800b072:	4603      	mov	r3, r0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b08a      	sub	sp, #40	@ 0x28
 800b080:	af02      	add	r7, sp, #8
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	603b      	str	r3, [r7, #0]
 800b088:	4613      	mov	r3, r2
 800b08a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b092:	2b20      	cmp	r3, #32
 800b094:	d17b      	bne.n	800b18e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <HAL_UART_Transmit+0x26>
 800b09c:	88fb      	ldrh	r3, [r7, #6]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e074      	b.n	800b190 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2221      	movs	r2, #33	@ 0x21
 800b0b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b0b6:	f7f9 fa83 	bl	80045c0 <HAL_GetTick>
 800b0ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	88fa      	ldrh	r2, [r7, #6]
 800b0c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	88fa      	ldrh	r2, [r7, #6]
 800b0c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0d4:	d108      	bne.n	800b0e8 <HAL_UART_Transmit+0x6c>
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d104      	bne.n	800b0e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	61bb      	str	r3, [r7, #24]
 800b0e6:	e003      	b.n	800b0f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b0f0:	e030      	b.n	800b154 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	9300      	str	r3, [sp, #0]
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	2180      	movs	r1, #128	@ 0x80
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f000 fffd 	bl	800c0fc <UART_WaitOnFlagUntilTimeout>
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d005      	beq.n	800b114 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2220      	movs	r2, #32
 800b10c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b110:	2303      	movs	r3, #3
 800b112:	e03d      	b.n	800b190 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d10b      	bne.n	800b132 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	881b      	ldrh	r3, [r3, #0]
 800b11e:	461a      	mov	r2, r3
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b128:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	3302      	adds	r3, #2
 800b12e:	61bb      	str	r3, [r7, #24]
 800b130:	e007      	b.n	800b142 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	781a      	ldrb	r2, [r3, #0]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	3301      	adds	r3, #1
 800b140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b148:	b29b      	uxth	r3, r3
 800b14a:	3b01      	subs	r3, #1
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d1c8      	bne.n	800b0f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	2200      	movs	r2, #0
 800b168:	2140      	movs	r1, #64	@ 0x40
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	f000 ffc6 	bl	800c0fc <UART_WaitOnFlagUntilTimeout>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d005      	beq.n	800b182 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2220      	movs	r2, #32
 800b17a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b17e:	2303      	movs	r3, #3
 800b180:	e006      	b.n	800b190 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2220      	movs	r2, #32
 800b186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b18a:	2300      	movs	r3, #0
 800b18c:	e000      	b.n	800b190 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b18e:	2302      	movs	r3, #2
  }
}
 800b190:	4618      	mov	r0, r3
 800b192:	3720      	adds	r7, #32
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b0ba      	sub	sp, #232	@ 0xe8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	69db      	ldr	r3, [r3, #28]
 800b1a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b1be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b1c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b1cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d11b      	bne.n	800b20c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b1d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1d8:	f003 0320 	and.w	r3, r3, #32
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d015      	beq.n	800b20c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b1e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1e4:	f003 0320 	and.w	r3, r3, #32
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d105      	bne.n	800b1f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b1ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d009      	beq.n	800b20c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 8300 	beq.w	800b802 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	4798      	blx	r3
      }
      return;
 800b20a:	e2fa      	b.n	800b802 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b20c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b210:	2b00      	cmp	r3, #0
 800b212:	f000 8123 	beq.w	800b45c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b216:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b21a:	4b8d      	ldr	r3, [pc, #564]	@ (800b450 <HAL_UART_IRQHandler+0x2b8>)
 800b21c:	4013      	ands	r3, r2
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d106      	bne.n	800b230 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b222:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b226:	4b8b      	ldr	r3, [pc, #556]	@ (800b454 <HAL_UART_IRQHandler+0x2bc>)
 800b228:	4013      	ands	r3, r2
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f000 8116 	beq.w	800b45c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b234:	f003 0301 	and.w	r3, r3, #1
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d011      	beq.n	800b260 <HAL_UART_IRQHandler+0xc8>
 800b23c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b244:	2b00      	cmp	r3, #0
 800b246:	d00b      	beq.n	800b260 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2201      	movs	r2, #1
 800b24e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b256:	f043 0201 	orr.w	r2, r3, #1
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b264:	f003 0302 	and.w	r3, r3, #2
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d011      	beq.n	800b290 <HAL_UART_IRQHandler+0xf8>
 800b26c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b270:	f003 0301 	and.w	r3, r3, #1
 800b274:	2b00      	cmp	r3, #0
 800b276:	d00b      	beq.n	800b290 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2202      	movs	r2, #2
 800b27e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b286:	f043 0204 	orr.w	r2, r3, #4
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b294:	f003 0304 	and.w	r3, r3, #4
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d011      	beq.n	800b2c0 <HAL_UART_IRQHandler+0x128>
 800b29c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00b      	beq.n	800b2c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2204      	movs	r2, #4
 800b2ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2b6:	f043 0202 	orr.w	r2, r3, #2
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b2c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2c4:	f003 0308 	and.w	r3, r3, #8
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d017      	beq.n	800b2fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b2cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2d0:	f003 0320 	and.w	r3, r3, #32
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d105      	bne.n	800b2e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b2d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b2dc:	4b5c      	ldr	r3, [pc, #368]	@ (800b450 <HAL_UART_IRQHandler+0x2b8>)
 800b2de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00b      	beq.n	800b2fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	2208      	movs	r2, #8
 800b2ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2f2:	f043 0208 	orr.w	r2, r3, #8
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b304:	2b00      	cmp	r3, #0
 800b306:	d012      	beq.n	800b32e <HAL_UART_IRQHandler+0x196>
 800b308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b30c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00c      	beq.n	800b32e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b31c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b324:	f043 0220 	orr.w	r2, r3, #32
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b334:	2b00      	cmp	r3, #0
 800b336:	f000 8266 	beq.w	800b806 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b33a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b33e:	f003 0320 	and.w	r3, r3, #32
 800b342:	2b00      	cmp	r3, #0
 800b344:	d013      	beq.n	800b36e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b34a:	f003 0320 	and.w	r3, r3, #32
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d105      	bne.n	800b35e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d007      	beq.n	800b36e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b362:	2b00      	cmp	r3, #0
 800b364:	d003      	beq.n	800b36e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b374:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b382:	2b40      	cmp	r3, #64	@ 0x40
 800b384:	d005      	beq.n	800b392 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b38a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d054      	beq.n	800b43c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f001 f807 	bl	800c3a6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3a2:	2b40      	cmp	r3, #64	@ 0x40
 800b3a4:	d146      	bne.n	800b434 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	3308      	adds	r3, #8
 800b3ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b3b4:	e853 3f00 	ldrex	r3, [r3]
 800b3b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b3bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b3c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	3308      	adds	r3, #8
 800b3ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b3d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b3d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b3de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b3e2:	e841 2300 	strex	r3, r2, [r1]
 800b3e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b3ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1d9      	bne.n	800b3a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d017      	beq.n	800b42c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b402:	4a15      	ldr	r2, [pc, #84]	@ (800b458 <HAL_UART_IRQHandler+0x2c0>)
 800b404:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7fc f91b 	bl	8007648 <HAL_DMA_Abort_IT>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d019      	beq.n	800b44c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b41e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b426:	4610      	mov	r0, r2
 800b428:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b42a:	e00f      	b.n	800b44c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 fa13 	bl	800b858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b432:	e00b      	b.n	800b44c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 fa0f 	bl	800b858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b43a:	e007      	b.n	800b44c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 fa0b 	bl	800b858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b44a:	e1dc      	b.n	800b806 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b44c:	bf00      	nop
    return;
 800b44e:	e1da      	b.n	800b806 <HAL_UART_IRQHandler+0x66e>
 800b450:	10000001 	.word	0x10000001
 800b454:	04000120 	.word	0x04000120
 800b458:	0800c65d 	.word	0x0800c65d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b460:	2b01      	cmp	r3, #1
 800b462:	f040 8170 	bne.w	800b746 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b46a:	f003 0310 	and.w	r3, r3, #16
 800b46e:	2b00      	cmp	r3, #0
 800b470:	f000 8169 	beq.w	800b746 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b478:	f003 0310 	and.w	r3, r3, #16
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f000 8162 	beq.w	800b746 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2210      	movs	r2, #16
 800b488:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b494:	2b40      	cmp	r3, #64	@ 0x40
 800b496:	f040 80d8 	bne.w	800b64a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b4a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f000 80af 	beq.w	800b610 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b4b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	f080 80a7 	bcs.w	800b610 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f003 0320 	and.w	r3, r3, #32
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f040 8087 	bne.w	800b5ee <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b4ec:	e853 3f00 	ldrex	r3, [r3]
 800b4f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b4f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b4f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	461a      	mov	r2, r3
 800b506:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b50a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b50e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b512:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b516:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b51a:	e841 2300 	strex	r3, r2, [r1]
 800b51e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b522:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1da      	bne.n	800b4e0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	3308      	adds	r3, #8
 800b530:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b532:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b534:	e853 3f00 	ldrex	r3, [r3]
 800b538:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b53a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b53c:	f023 0301 	bic.w	r3, r3, #1
 800b540:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3308      	adds	r3, #8
 800b54a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b54e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b552:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b554:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b556:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b55a:	e841 2300 	strex	r3, r2, [r1]
 800b55e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b560:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1e1      	bne.n	800b52a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	3308      	adds	r3, #8
 800b56c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b570:	e853 3f00 	ldrex	r3, [r3]
 800b574:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b578:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b57c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	3308      	adds	r3, #8
 800b586:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b58a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b58c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b590:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b592:	e841 2300 	strex	r3, r2, [r1]
 800b596:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b598:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1e3      	bne.n	800b566 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2220      	movs	r2, #32
 800b5a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5b4:	e853 3f00 	ldrex	r3, [r3]
 800b5b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b5ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5bc:	f023 0310 	bic.w	r3, r3, #16
 800b5c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b5ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b5d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b5d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b5d6:	e841 2300 	strex	r3, r2, [r1]
 800b5da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b5dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1e4      	bne.n	800b5ac <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7fb ffd4 	bl	8007596 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b600:	b29b      	uxth	r3, r3
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	b29b      	uxth	r3, r3
 800b606:	4619      	mov	r1, r3
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f001 fa41 	bl	800ca90 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b60e:	e0fc      	b.n	800b80a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b61a:	429a      	cmp	r2, r3
 800b61c:	f040 80f5 	bne.w	800b80a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f003 0320 	and.w	r3, r3, #32
 800b62e:	2b20      	cmp	r3, #32
 800b630:	f040 80eb 	bne.w	800b80a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2202      	movs	r2, #2
 800b638:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f001 fa24 	bl	800ca90 <HAL_UARTEx_RxEventCallback>
      return;
 800b648:	e0df      	b.n	800b80a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b656:	b29b      	uxth	r3, r3
 800b658:	1ad3      	subs	r3, r2, r3
 800b65a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b664:	b29b      	uxth	r3, r3
 800b666:	2b00      	cmp	r3, #0
 800b668:	f000 80d1 	beq.w	800b80e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800b66c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b670:	2b00      	cmp	r3, #0
 800b672:	f000 80cc 	beq.w	800b80e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b67e:	e853 3f00 	ldrex	r3, [r3]
 800b682:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b686:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b68a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b698:	647b      	str	r3, [r7, #68]	@ 0x44
 800b69a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b69e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6a0:	e841 2300 	strex	r3, r2, [r1]
 800b6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b6a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1e4      	bne.n	800b676 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	3308      	adds	r3, #8
 800b6b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b6:	e853 3f00 	ldrex	r3, [r3]
 800b6ba:	623b      	str	r3, [r7, #32]
   return(result);
 800b6bc:	6a3b      	ldr	r3, [r7, #32]
 800b6be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6c2:	f023 0301 	bic.w	r3, r3, #1
 800b6c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	3308      	adds	r3, #8
 800b6d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b6d4:	633a      	str	r2, [r7, #48]	@ 0x30
 800b6d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6dc:	e841 2300 	strex	r3, r2, [r1]
 800b6e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1e1      	bne.n	800b6ac <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2220      	movs	r2, #32
 800b6ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	e853 3f00 	ldrex	r3, [r3]
 800b708:	60fb      	str	r3, [r7, #12]
   return(result);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f023 0310 	bic.w	r3, r3, #16
 800b710:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	461a      	mov	r2, r3
 800b71a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b71e:	61fb      	str	r3, [r7, #28]
 800b720:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b722:	69b9      	ldr	r1, [r7, #24]
 800b724:	69fa      	ldr	r2, [r7, #28]
 800b726:	e841 2300 	strex	r3, r2, [r1]
 800b72a:	617b      	str	r3, [r7, #20]
   return(result);
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d1e4      	bne.n	800b6fc <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2202      	movs	r2, #2
 800b736:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b738:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b73c:	4619      	mov	r1, r3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f001 f9a6 	bl	800ca90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b744:	e063      	b.n	800b80e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b74a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00e      	beq.n	800b770 <HAL_UART_IRQHandler+0x5d8>
 800b752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d008      	beq.n	800b770 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b766:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 ffb4 	bl	800c6d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b76e:	e051      	b.n	800b814 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d014      	beq.n	800b7a6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b77c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b784:	2b00      	cmp	r3, #0
 800b786:	d105      	bne.n	800b794 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b78c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b790:	2b00      	cmp	r3, #0
 800b792:	d008      	beq.n	800b7a6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d03a      	beq.n	800b812 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	4798      	blx	r3
    }
    return;
 800b7a4:	e035      	b.n	800b812 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b7a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d009      	beq.n	800b7c6 <HAL_UART_IRQHandler+0x62e>
 800b7b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d003      	beq.n	800b7c6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 ff5e 	bl	800c680 <UART_EndTransmit_IT>
    return;
 800b7c4:	e026      	b.n	800b814 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b7c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d009      	beq.n	800b7e6 <HAL_UART_IRQHandler+0x64e>
 800b7d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7d6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 ff8d 	bl	800c6fe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7e4:	e016      	b.n	800b814 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b7e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d010      	beq.n	800b814 <HAL_UART_IRQHandler+0x67c>
 800b7f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	da0c      	bge.n	800b814 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 ff75 	bl	800c6ea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b800:	e008      	b.n	800b814 <HAL_UART_IRQHandler+0x67c>
      return;
 800b802:	bf00      	nop
 800b804:	e006      	b.n	800b814 <HAL_UART_IRQHandler+0x67c>
    return;
 800b806:	bf00      	nop
 800b808:	e004      	b.n	800b814 <HAL_UART_IRQHandler+0x67c>
      return;
 800b80a:	bf00      	nop
 800b80c:	e002      	b.n	800b814 <HAL_UART_IRQHandler+0x67c>
      return;
 800b80e:	bf00      	nop
 800b810:	e000      	b.n	800b814 <HAL_UART_IRQHandler+0x67c>
    return;
 800b812:	bf00      	nop
  }
}
 800b814:	37e8      	adds	r7, #232	@ 0xe8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop

0800b81c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b838:	bf00      	nop
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b86c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b870:	b08c      	sub	sp, #48	@ 0x30
 800b872:	af00      	add	r7, sp, #0
 800b874:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b876:	2300      	movs	r3, #0
 800b878:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	689a      	ldr	r2, [r3, #8]
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	431a      	orrs	r2, r3
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	695b      	ldr	r3, [r3, #20]
 800b88a:	431a      	orrs	r2, r3
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	69db      	ldr	r3, [r3, #28]
 800b890:	4313      	orrs	r3, r2
 800b892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	4baa      	ldr	r3, [pc, #680]	@ (800bb44 <UART_SetConfig+0x2d8>)
 800b89c:	4013      	ands	r3, r2
 800b89e:	697a      	ldr	r2, [r7, #20]
 800b8a0:	6812      	ldr	r2, [r2, #0]
 800b8a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8a4:	430b      	orrs	r3, r1
 800b8a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	68da      	ldr	r2, [r3, #12]
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	430a      	orrs	r2, r1
 800b8bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	699b      	ldr	r3, [r3, #24]
 800b8c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a9f      	ldr	r2, [pc, #636]	@ (800bb48 <UART_SetConfig+0x2dc>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d004      	beq.n	800b8d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	6a1b      	ldr	r3, [r3, #32]
 800b8d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	689b      	ldr	r3, [r3, #8]
 800b8de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b8e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b8e6:	697a      	ldr	r2, [r7, #20]
 800b8e8:	6812      	ldr	r2, [r2, #0]
 800b8ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8ec:	430b      	orrs	r3, r1
 800b8ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8f6:	f023 010f 	bic.w	r1, r3, #15
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	430a      	orrs	r2, r1
 800b904:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a90      	ldr	r2, [pc, #576]	@ (800bb4c <UART_SetConfig+0x2e0>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d125      	bne.n	800b95c <UART_SetConfig+0xf0>
 800b910:	4b8f      	ldr	r3, [pc, #572]	@ (800bb50 <UART_SetConfig+0x2e4>)
 800b912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b916:	f003 0303 	and.w	r3, r3, #3
 800b91a:	2b03      	cmp	r3, #3
 800b91c:	d81a      	bhi.n	800b954 <UART_SetConfig+0xe8>
 800b91e:	a201      	add	r2, pc, #4	@ (adr r2, 800b924 <UART_SetConfig+0xb8>)
 800b920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b924:	0800b935 	.word	0x0800b935
 800b928:	0800b945 	.word	0x0800b945
 800b92c:	0800b93d 	.word	0x0800b93d
 800b930:	0800b94d 	.word	0x0800b94d
 800b934:	2301      	movs	r3, #1
 800b936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b93a:	e116      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800b93c:	2302      	movs	r3, #2
 800b93e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b942:	e112      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800b944:	2304      	movs	r3, #4
 800b946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b94a:	e10e      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800b94c:	2308      	movs	r3, #8
 800b94e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b952:	e10a      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800b954:	2310      	movs	r3, #16
 800b956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b95a:	e106      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a7c      	ldr	r2, [pc, #496]	@ (800bb54 <UART_SetConfig+0x2e8>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d138      	bne.n	800b9d8 <UART_SetConfig+0x16c>
 800b966:	4b7a      	ldr	r3, [pc, #488]	@ (800bb50 <UART_SetConfig+0x2e4>)
 800b968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b96c:	f003 030c 	and.w	r3, r3, #12
 800b970:	2b0c      	cmp	r3, #12
 800b972:	d82d      	bhi.n	800b9d0 <UART_SetConfig+0x164>
 800b974:	a201      	add	r2, pc, #4	@ (adr r2, 800b97c <UART_SetConfig+0x110>)
 800b976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b97a:	bf00      	nop
 800b97c:	0800b9b1 	.word	0x0800b9b1
 800b980:	0800b9d1 	.word	0x0800b9d1
 800b984:	0800b9d1 	.word	0x0800b9d1
 800b988:	0800b9d1 	.word	0x0800b9d1
 800b98c:	0800b9c1 	.word	0x0800b9c1
 800b990:	0800b9d1 	.word	0x0800b9d1
 800b994:	0800b9d1 	.word	0x0800b9d1
 800b998:	0800b9d1 	.word	0x0800b9d1
 800b99c:	0800b9b9 	.word	0x0800b9b9
 800b9a0:	0800b9d1 	.word	0x0800b9d1
 800b9a4:	0800b9d1 	.word	0x0800b9d1
 800b9a8:	0800b9d1 	.word	0x0800b9d1
 800b9ac:	0800b9c9 	.word	0x0800b9c9
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9b6:	e0d8      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9be:	e0d4      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800b9c0:	2304      	movs	r3, #4
 800b9c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9c6:	e0d0      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800b9c8:	2308      	movs	r3, #8
 800b9ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9ce:	e0cc      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800b9d0:	2310      	movs	r3, #16
 800b9d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9d6:	e0c8      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a5e      	ldr	r2, [pc, #376]	@ (800bb58 <UART_SetConfig+0x2ec>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d125      	bne.n	800ba2e <UART_SetConfig+0x1c2>
 800b9e2:	4b5b      	ldr	r3, [pc, #364]	@ (800bb50 <UART_SetConfig+0x2e4>)
 800b9e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b9ec:	2b30      	cmp	r3, #48	@ 0x30
 800b9ee:	d016      	beq.n	800ba1e <UART_SetConfig+0x1b2>
 800b9f0:	2b30      	cmp	r3, #48	@ 0x30
 800b9f2:	d818      	bhi.n	800ba26 <UART_SetConfig+0x1ba>
 800b9f4:	2b20      	cmp	r3, #32
 800b9f6:	d00a      	beq.n	800ba0e <UART_SetConfig+0x1a2>
 800b9f8:	2b20      	cmp	r3, #32
 800b9fa:	d814      	bhi.n	800ba26 <UART_SetConfig+0x1ba>
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d002      	beq.n	800ba06 <UART_SetConfig+0x19a>
 800ba00:	2b10      	cmp	r3, #16
 800ba02:	d008      	beq.n	800ba16 <UART_SetConfig+0x1aa>
 800ba04:	e00f      	b.n	800ba26 <UART_SetConfig+0x1ba>
 800ba06:	2300      	movs	r3, #0
 800ba08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba0c:	e0ad      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800ba0e:	2302      	movs	r3, #2
 800ba10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba14:	e0a9      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800ba16:	2304      	movs	r3, #4
 800ba18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba1c:	e0a5      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800ba1e:	2308      	movs	r3, #8
 800ba20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba24:	e0a1      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800ba26:	2310      	movs	r3, #16
 800ba28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba2c:	e09d      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a4a      	ldr	r2, [pc, #296]	@ (800bb5c <UART_SetConfig+0x2f0>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d125      	bne.n	800ba84 <UART_SetConfig+0x218>
 800ba38:	4b45      	ldr	r3, [pc, #276]	@ (800bb50 <UART_SetConfig+0x2e4>)
 800ba3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ba42:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba44:	d016      	beq.n	800ba74 <UART_SetConfig+0x208>
 800ba46:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba48:	d818      	bhi.n	800ba7c <UART_SetConfig+0x210>
 800ba4a:	2b80      	cmp	r3, #128	@ 0x80
 800ba4c:	d00a      	beq.n	800ba64 <UART_SetConfig+0x1f8>
 800ba4e:	2b80      	cmp	r3, #128	@ 0x80
 800ba50:	d814      	bhi.n	800ba7c <UART_SetConfig+0x210>
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d002      	beq.n	800ba5c <UART_SetConfig+0x1f0>
 800ba56:	2b40      	cmp	r3, #64	@ 0x40
 800ba58:	d008      	beq.n	800ba6c <UART_SetConfig+0x200>
 800ba5a:	e00f      	b.n	800ba7c <UART_SetConfig+0x210>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba62:	e082      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800ba64:	2302      	movs	r3, #2
 800ba66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba6a:	e07e      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800ba6c:	2304      	movs	r3, #4
 800ba6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba72:	e07a      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800ba74:	2308      	movs	r3, #8
 800ba76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba7a:	e076      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800ba7c:	2310      	movs	r3, #16
 800ba7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba82:	e072      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a35      	ldr	r2, [pc, #212]	@ (800bb60 <UART_SetConfig+0x2f4>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d12a      	bne.n	800bae4 <UART_SetConfig+0x278>
 800ba8e:	4b30      	ldr	r3, [pc, #192]	@ (800bb50 <UART_SetConfig+0x2e4>)
 800ba90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba9c:	d01a      	beq.n	800bad4 <UART_SetConfig+0x268>
 800ba9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800baa2:	d81b      	bhi.n	800badc <UART_SetConfig+0x270>
 800baa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800baa8:	d00c      	beq.n	800bac4 <UART_SetConfig+0x258>
 800baaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800baae:	d815      	bhi.n	800badc <UART_SetConfig+0x270>
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d003      	beq.n	800babc <UART_SetConfig+0x250>
 800bab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bab8:	d008      	beq.n	800bacc <UART_SetConfig+0x260>
 800baba:	e00f      	b.n	800badc <UART_SetConfig+0x270>
 800babc:	2300      	movs	r3, #0
 800babe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bac2:	e052      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800bac4:	2302      	movs	r3, #2
 800bac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baca:	e04e      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800bacc:	2304      	movs	r3, #4
 800bace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bad2:	e04a      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800bad4:	2308      	movs	r3, #8
 800bad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bada:	e046      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800badc:	2310      	movs	r3, #16
 800bade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bae2:	e042      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a17      	ldr	r2, [pc, #92]	@ (800bb48 <UART_SetConfig+0x2dc>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d13a      	bne.n	800bb64 <UART_SetConfig+0x2f8>
 800baee:	4b18      	ldr	r3, [pc, #96]	@ (800bb50 <UART_SetConfig+0x2e4>)
 800baf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800baf4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800baf8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bafc:	d01a      	beq.n	800bb34 <UART_SetConfig+0x2c8>
 800bafe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bb02:	d81b      	bhi.n	800bb3c <UART_SetConfig+0x2d0>
 800bb04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb08:	d00c      	beq.n	800bb24 <UART_SetConfig+0x2b8>
 800bb0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb0e:	d815      	bhi.n	800bb3c <UART_SetConfig+0x2d0>
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d003      	beq.n	800bb1c <UART_SetConfig+0x2b0>
 800bb14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb18:	d008      	beq.n	800bb2c <UART_SetConfig+0x2c0>
 800bb1a:	e00f      	b.n	800bb3c <UART_SetConfig+0x2d0>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb22:	e022      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800bb24:	2302      	movs	r3, #2
 800bb26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb2a:	e01e      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800bb2c:	2304      	movs	r3, #4
 800bb2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb32:	e01a      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800bb34:	2308      	movs	r3, #8
 800bb36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb3a:	e016      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800bb3c:	2310      	movs	r3, #16
 800bb3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb42:	e012      	b.n	800bb6a <UART_SetConfig+0x2fe>
 800bb44:	cfff69f3 	.word	0xcfff69f3
 800bb48:	40008000 	.word	0x40008000
 800bb4c:	40013800 	.word	0x40013800
 800bb50:	40021000 	.word	0x40021000
 800bb54:	40004400 	.word	0x40004400
 800bb58:	40004800 	.word	0x40004800
 800bb5c:	40004c00 	.word	0x40004c00
 800bb60:	40005000 	.word	0x40005000
 800bb64:	2310      	movs	r3, #16
 800bb66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4aae      	ldr	r2, [pc, #696]	@ (800be28 <UART_SetConfig+0x5bc>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	f040 8097 	bne.w	800bca4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bb76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb7a:	2b08      	cmp	r3, #8
 800bb7c:	d823      	bhi.n	800bbc6 <UART_SetConfig+0x35a>
 800bb7e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb84 <UART_SetConfig+0x318>)
 800bb80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb84:	0800bba9 	.word	0x0800bba9
 800bb88:	0800bbc7 	.word	0x0800bbc7
 800bb8c:	0800bbb1 	.word	0x0800bbb1
 800bb90:	0800bbc7 	.word	0x0800bbc7
 800bb94:	0800bbb7 	.word	0x0800bbb7
 800bb98:	0800bbc7 	.word	0x0800bbc7
 800bb9c:	0800bbc7 	.word	0x0800bbc7
 800bba0:	0800bbc7 	.word	0x0800bbc7
 800bba4:	0800bbbf 	.word	0x0800bbbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bba8:	f7fe fa48 	bl	800a03c <HAL_RCC_GetPCLK1Freq>
 800bbac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bbae:	e010      	b.n	800bbd2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbb0:	4b9e      	ldr	r3, [pc, #632]	@ (800be2c <UART_SetConfig+0x5c0>)
 800bbb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bbb4:	e00d      	b.n	800bbd2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bbb6:	f7fe f9d3 	bl	8009f60 <HAL_RCC_GetSysClockFreq>
 800bbba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bbbc:	e009      	b.n	800bbd2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bbc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bbc4:	e005      	b.n	800bbd2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bbd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 8130 	beq.w	800be3a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbde:	4a94      	ldr	r2, [pc, #592]	@ (800be30 <UART_SetConfig+0x5c4>)
 800bbe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	685a      	ldr	r2, [r3, #4]
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	005b      	lsls	r3, r3, #1
 800bbf6:	4413      	add	r3, r2
 800bbf8:	69ba      	ldr	r2, [r7, #24]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d305      	bcc.n	800bc0a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc04:	69ba      	ldr	r2, [r7, #24]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d903      	bls.n	800bc12 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bc10:	e113      	b.n	800be3a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc14:	2200      	movs	r2, #0
 800bc16:	60bb      	str	r3, [r7, #8]
 800bc18:	60fa      	str	r2, [r7, #12]
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc1e:	4a84      	ldr	r2, [pc, #528]	@ (800be30 <UART_SetConfig+0x5c4>)
 800bc20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	2200      	movs	r2, #0
 800bc28:	603b      	str	r3, [r7, #0]
 800bc2a:	607a      	str	r2, [r7, #4]
 800bc2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bc34:	f7f5 f860 	bl	8000cf8 <__aeabi_uldivmod>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4610      	mov	r0, r2
 800bc3e:	4619      	mov	r1, r3
 800bc40:	f04f 0200 	mov.w	r2, #0
 800bc44:	f04f 0300 	mov.w	r3, #0
 800bc48:	020b      	lsls	r3, r1, #8
 800bc4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc4e:	0202      	lsls	r2, r0, #8
 800bc50:	6979      	ldr	r1, [r7, #20]
 800bc52:	6849      	ldr	r1, [r1, #4]
 800bc54:	0849      	lsrs	r1, r1, #1
 800bc56:	2000      	movs	r0, #0
 800bc58:	460c      	mov	r4, r1
 800bc5a:	4605      	mov	r5, r0
 800bc5c:	eb12 0804 	adds.w	r8, r2, r4
 800bc60:	eb43 0905 	adc.w	r9, r3, r5
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	469a      	mov	sl, r3
 800bc6c:	4693      	mov	fp, r2
 800bc6e:	4652      	mov	r2, sl
 800bc70:	465b      	mov	r3, fp
 800bc72:	4640      	mov	r0, r8
 800bc74:	4649      	mov	r1, r9
 800bc76:	f7f5 f83f 	bl	8000cf8 <__aeabi_uldivmod>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	4613      	mov	r3, r2
 800bc80:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc82:	6a3b      	ldr	r3, [r7, #32]
 800bc84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc88:	d308      	bcc.n	800bc9c <UART_SetConfig+0x430>
 800bc8a:	6a3b      	ldr	r3, [r7, #32]
 800bc8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc90:	d204      	bcs.n	800bc9c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	6a3a      	ldr	r2, [r7, #32]
 800bc98:	60da      	str	r2, [r3, #12]
 800bc9a:	e0ce      	b.n	800be3a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bca2:	e0ca      	b.n	800be3a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	69db      	ldr	r3, [r3, #28]
 800bca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bcac:	d166      	bne.n	800bd7c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bcae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bcb2:	2b08      	cmp	r3, #8
 800bcb4:	d827      	bhi.n	800bd06 <UART_SetConfig+0x49a>
 800bcb6:	a201      	add	r2, pc, #4	@ (adr r2, 800bcbc <UART_SetConfig+0x450>)
 800bcb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcbc:	0800bce1 	.word	0x0800bce1
 800bcc0:	0800bce9 	.word	0x0800bce9
 800bcc4:	0800bcf1 	.word	0x0800bcf1
 800bcc8:	0800bd07 	.word	0x0800bd07
 800bccc:	0800bcf7 	.word	0x0800bcf7
 800bcd0:	0800bd07 	.word	0x0800bd07
 800bcd4:	0800bd07 	.word	0x0800bd07
 800bcd8:	0800bd07 	.word	0x0800bd07
 800bcdc:	0800bcff 	.word	0x0800bcff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bce0:	f7fe f9ac 	bl	800a03c <HAL_RCC_GetPCLK1Freq>
 800bce4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bce6:	e014      	b.n	800bd12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bce8:	f7fe f9be 	bl	800a068 <HAL_RCC_GetPCLK2Freq>
 800bcec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bcee:	e010      	b.n	800bd12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bcf0:	4b4e      	ldr	r3, [pc, #312]	@ (800be2c <UART_SetConfig+0x5c0>)
 800bcf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bcf4:	e00d      	b.n	800bd12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bcf6:	f7fe f933 	bl	8009f60 <HAL_RCC_GetSysClockFreq>
 800bcfa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bcfc:	e009      	b.n	800bd12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd04:	e005      	b.n	800bd12 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bd06:	2300      	movs	r3, #0
 800bd08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bd10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f000 8090 	beq.w	800be3a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd1e:	4a44      	ldr	r2, [pc, #272]	@ (800be30 <UART_SetConfig+0x5c4>)
 800bd20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd24:	461a      	mov	r2, r3
 800bd26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd28:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd2c:	005a      	lsls	r2, r3, #1
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	085b      	lsrs	r3, r3, #1
 800bd34:	441a      	add	r2, r3
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd40:	6a3b      	ldr	r3, [r7, #32]
 800bd42:	2b0f      	cmp	r3, #15
 800bd44:	d916      	bls.n	800bd74 <UART_SetConfig+0x508>
 800bd46:	6a3b      	ldr	r3, [r7, #32]
 800bd48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd4c:	d212      	bcs.n	800bd74 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd4e:	6a3b      	ldr	r3, [r7, #32]
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	f023 030f 	bic.w	r3, r3, #15
 800bd56:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd58:	6a3b      	ldr	r3, [r7, #32]
 800bd5a:	085b      	lsrs	r3, r3, #1
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	f003 0307 	and.w	r3, r3, #7
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	8bfb      	ldrh	r3, [r7, #30]
 800bd66:	4313      	orrs	r3, r2
 800bd68:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	8bfa      	ldrh	r2, [r7, #30]
 800bd70:	60da      	str	r2, [r3, #12]
 800bd72:	e062      	b.n	800be3a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bd74:	2301      	movs	r3, #1
 800bd76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bd7a:	e05e      	b.n	800be3a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd80:	2b08      	cmp	r3, #8
 800bd82:	d828      	bhi.n	800bdd6 <UART_SetConfig+0x56a>
 800bd84:	a201      	add	r2, pc, #4	@ (adr r2, 800bd8c <UART_SetConfig+0x520>)
 800bd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd8a:	bf00      	nop
 800bd8c:	0800bdb1 	.word	0x0800bdb1
 800bd90:	0800bdb9 	.word	0x0800bdb9
 800bd94:	0800bdc1 	.word	0x0800bdc1
 800bd98:	0800bdd7 	.word	0x0800bdd7
 800bd9c:	0800bdc7 	.word	0x0800bdc7
 800bda0:	0800bdd7 	.word	0x0800bdd7
 800bda4:	0800bdd7 	.word	0x0800bdd7
 800bda8:	0800bdd7 	.word	0x0800bdd7
 800bdac:	0800bdcf 	.word	0x0800bdcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bdb0:	f7fe f944 	bl	800a03c <HAL_RCC_GetPCLK1Freq>
 800bdb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bdb6:	e014      	b.n	800bde2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bdb8:	f7fe f956 	bl	800a068 <HAL_RCC_GetPCLK2Freq>
 800bdbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bdbe:	e010      	b.n	800bde2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bdc0:	4b1a      	ldr	r3, [pc, #104]	@ (800be2c <UART_SetConfig+0x5c0>)
 800bdc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bdc4:	e00d      	b.n	800bde2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bdc6:	f7fe f8cb 	bl	8009f60 <HAL_RCC_GetSysClockFreq>
 800bdca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bdcc:	e009      	b.n	800bde2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bdd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bdd4:	e005      	b.n	800bde2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bdda:	2301      	movs	r3, #1
 800bddc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bde0:	bf00      	nop
    }

    if (pclk != 0U)
 800bde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d028      	beq.n	800be3a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdec:	4a10      	ldr	r2, [pc, #64]	@ (800be30 <UART_SetConfig+0x5c4>)
 800bdee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf6:	fbb3 f2f2 	udiv	r2, r3, r2
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	085b      	lsrs	r3, r3, #1
 800be00:	441a      	add	r2, r3
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	fbb2 f3f3 	udiv	r3, r2, r3
 800be0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be0c:	6a3b      	ldr	r3, [r7, #32]
 800be0e:	2b0f      	cmp	r3, #15
 800be10:	d910      	bls.n	800be34 <UART_SetConfig+0x5c8>
 800be12:	6a3b      	ldr	r3, [r7, #32]
 800be14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be18:	d20c      	bcs.n	800be34 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be1a:	6a3b      	ldr	r3, [r7, #32]
 800be1c:	b29a      	uxth	r2, r3
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	60da      	str	r2, [r3, #12]
 800be24:	e009      	b.n	800be3a <UART_SetConfig+0x5ce>
 800be26:	bf00      	nop
 800be28:	40008000 	.word	0x40008000
 800be2c:	00f42400 	.word	0x00f42400
 800be30:	08012f20 	.word	0x08012f20
      }
      else
      {
        ret = HAL_ERROR;
 800be34:	2301      	movs	r3, #1
 800be36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	2201      	movs	r2, #1
 800be3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	2201      	movs	r2, #1
 800be46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	2200      	movs	r2, #0
 800be4e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	2200      	movs	r2, #0
 800be54:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800be56:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3730      	adds	r7, #48	@ 0x30
 800be5e:	46bd      	mov	sp, r7
 800be60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800be64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be70:	f003 0308 	and.w	r3, r3, #8
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00a      	beq.n	800be8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	430a      	orrs	r2, r1
 800be8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be92:	f003 0301 	and.w	r3, r3, #1
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00a      	beq.n	800beb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	430a      	orrs	r2, r1
 800beae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beb4:	f003 0302 	and.w	r3, r3, #2
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00a      	beq.n	800bed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	430a      	orrs	r2, r1
 800bed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bed6:	f003 0304 	and.w	r3, r3, #4
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00a      	beq.n	800bef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	430a      	orrs	r2, r1
 800bef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bef8:	f003 0310 	and.w	r3, r3, #16
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00a      	beq.n	800bf16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	430a      	orrs	r2, r1
 800bf14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf1a:	f003 0320 	and.w	r3, r3, #32
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00a      	beq.n	800bf38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	430a      	orrs	r2, r1
 800bf36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d01a      	beq.n	800bf7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	430a      	orrs	r2, r1
 800bf58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf62:	d10a      	bne.n	800bf7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	430a      	orrs	r2, r1
 800bf78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00a      	beq.n	800bf9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	430a      	orrs	r2, r1
 800bf9a:	605a      	str	r2, [r3, #4]
  }
}
 800bf9c:	bf00      	nop
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b098      	sub	sp, #96	@ 0x60
 800bfac:	af02      	add	r7, sp, #8
 800bfae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bfb8:	f7f8 fb02 	bl	80045c0 <HAL_GetTick>
 800bfbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f003 0308 	and.w	r3, r3, #8
 800bfc8:	2b08      	cmp	r3, #8
 800bfca:	d12f      	bne.n	800c02c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f88e 	bl	800c0fc <UART_WaitOnFlagUntilTimeout>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d022      	beq.n	800c02c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfee:	e853 3f00 	ldrex	r3, [r3]
 800bff2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bff6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bffa:	653b      	str	r3, [r7, #80]	@ 0x50
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	461a      	mov	r2, r3
 800c002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c004:	647b      	str	r3, [r7, #68]	@ 0x44
 800c006:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c008:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c00a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c00c:	e841 2300 	strex	r3, r2, [r1]
 800c010:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1e6      	bne.n	800bfe6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2220      	movs	r2, #32
 800c01c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c028:	2303      	movs	r3, #3
 800c02a:	e063      	b.n	800c0f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f003 0304 	and.w	r3, r3, #4
 800c036:	2b04      	cmp	r3, #4
 800c038:	d149      	bne.n	800c0ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c03a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c042:	2200      	movs	r2, #0
 800c044:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f857 	bl	800c0fc <UART_WaitOnFlagUntilTimeout>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d03c      	beq.n	800c0ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c05c:	e853 3f00 	ldrex	r3, [r3]
 800c060:	623b      	str	r3, [r7, #32]
   return(result);
 800c062:	6a3b      	ldr	r3, [r7, #32]
 800c064:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c068:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	461a      	mov	r2, r3
 800c070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c072:	633b      	str	r3, [r7, #48]	@ 0x30
 800c074:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c076:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c07a:	e841 2300 	strex	r3, r2, [r1]
 800c07e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c082:	2b00      	cmp	r3, #0
 800c084:	d1e6      	bne.n	800c054 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	3308      	adds	r3, #8
 800c08c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	e853 3f00 	ldrex	r3, [r3]
 800c094:	60fb      	str	r3, [r7, #12]
   return(result);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f023 0301 	bic.w	r3, r3, #1
 800c09c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	3308      	adds	r3, #8
 800c0a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0a6:	61fa      	str	r2, [r7, #28]
 800c0a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0aa:	69b9      	ldr	r1, [r7, #24]
 800c0ac:	69fa      	ldr	r2, [r7, #28]
 800c0ae:	e841 2300 	strex	r3, r2, [r1]
 800c0b2:	617b      	str	r3, [r7, #20]
   return(result);
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1e5      	bne.n	800c086 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2220      	movs	r2, #32
 800c0be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0ca:	2303      	movs	r3, #3
 800c0cc:	e012      	b.n	800c0f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2220      	movs	r2, #32
 800c0d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2220      	movs	r2, #32
 800c0da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c0f2:	2300      	movs	r3, #0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3758      	adds	r7, #88	@ 0x58
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	603b      	str	r3, [r7, #0]
 800c108:	4613      	mov	r3, r2
 800c10a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c10c:	e04f      	b.n	800c1ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c114:	d04b      	beq.n	800c1ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c116:	f7f8 fa53 	bl	80045c0 <HAL_GetTick>
 800c11a:	4602      	mov	r2, r0
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	69ba      	ldr	r2, [r7, #24]
 800c122:	429a      	cmp	r2, r3
 800c124:	d302      	bcc.n	800c12c <UART_WaitOnFlagUntilTimeout+0x30>
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d101      	bne.n	800c130 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c12c:	2303      	movs	r3, #3
 800c12e:	e04e      	b.n	800c1ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f003 0304 	and.w	r3, r3, #4
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d037      	beq.n	800c1ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	2b80      	cmp	r3, #128	@ 0x80
 800c142:	d034      	beq.n	800c1ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	2b40      	cmp	r3, #64	@ 0x40
 800c148:	d031      	beq.n	800c1ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	69db      	ldr	r3, [r3, #28]
 800c150:	f003 0308 	and.w	r3, r3, #8
 800c154:	2b08      	cmp	r3, #8
 800c156:	d110      	bne.n	800c17a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2208      	movs	r2, #8
 800c15e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f000 f920 	bl	800c3a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2208      	movs	r2, #8
 800c16a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2200      	movs	r2, #0
 800c172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c176:	2301      	movs	r3, #1
 800c178:	e029      	b.n	800c1ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	69db      	ldr	r3, [r3, #28]
 800c180:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c184:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c188:	d111      	bne.n	800c1ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c192:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f000 f906 	bl	800c3a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2220      	movs	r2, #32
 800c19e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c1aa:	2303      	movs	r3, #3
 800c1ac:	e00f      	b.n	800c1ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	69da      	ldr	r2, [r3, #28]
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	4013      	ands	r3, r2
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	bf0c      	ite	eq
 800c1be:	2301      	moveq	r3, #1
 800c1c0:	2300      	movne	r3, #0
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	79fb      	ldrb	r3, [r7, #7]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d0a0      	beq.n	800c10e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1cc:	2300      	movs	r3, #0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
	...

0800c1d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b096      	sub	sp, #88	@ 0x58
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	88fa      	ldrh	r2, [r7, #6]
 800c1f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2222      	movs	r2, #34	@ 0x22
 800c200:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d02d      	beq.n	800c26a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c214:	4a40      	ldr	r2, [pc, #256]	@ (800c318 <UART_Start_Receive_DMA+0x140>)
 800c216:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c21e:	4a3f      	ldr	r2, [pc, #252]	@ (800c31c <UART_Start_Receive_DMA+0x144>)
 800c220:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c228:	4a3d      	ldr	r2, [pc, #244]	@ (800c320 <UART_Start_Receive_DMA+0x148>)
 800c22a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c232:	2200      	movs	r2, #0
 800c234:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	3324      	adds	r3, #36	@ 0x24
 800c242:	4619      	mov	r1, r3
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c248:	461a      	mov	r2, r3
 800c24a:	88fb      	ldrh	r3, [r7, #6]
 800c24c:	f7fb f928 	bl	80074a0 <HAL_DMA_Start_IT>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d009      	beq.n	800c26a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2210      	movs	r2, #16
 800c25a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2220      	movs	r2, #32
 800c262:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c266:	2301      	movs	r3, #1
 800c268:	e051      	b.n	800c30e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	691b      	ldr	r3, [r3, #16]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d018      	beq.n	800c2a4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c27a:	e853 3f00 	ldrex	r3, [r3]
 800c27e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c286:	657b      	str	r3, [r7, #84]	@ 0x54
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	461a      	mov	r2, r3
 800c28e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c290:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c292:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c294:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c296:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c298:	e841 2300 	strex	r3, r2, [r1]
 800c29c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c29e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1e6      	bne.n	800c272 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	3308      	adds	r3, #8
 800c2aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ae:	e853 3f00 	ldrex	r3, [r3]
 800c2b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b6:	f043 0301 	orr.w	r3, r3, #1
 800c2ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	3308      	adds	r3, #8
 800c2c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c2c4:	637a      	str	r2, [r7, #52]	@ 0x34
 800c2c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c2ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2cc:	e841 2300 	strex	r3, r2, [r1]
 800c2d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d1e5      	bne.n	800c2a4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	3308      	adds	r3, #8
 800c2de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	e853 3f00 	ldrex	r3, [r3]
 800c2e6:	613b      	str	r3, [r7, #16]
   return(result);
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	3308      	adds	r3, #8
 800c2f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c2f8:	623a      	str	r2, [r7, #32]
 800c2fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2fc:	69f9      	ldr	r1, [r7, #28]
 800c2fe:	6a3a      	ldr	r2, [r7, #32]
 800c300:	e841 2300 	strex	r3, r2, [r1]
 800c304:	61bb      	str	r3, [r7, #24]
   return(result);
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d1e5      	bne.n	800c2d8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c30c:	2300      	movs	r3, #0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3758      	adds	r7, #88	@ 0x58
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	0800c473 	.word	0x0800c473
 800c31c:	0800c59f 	.word	0x0800c59f
 800c320:	0800c5dd 	.word	0x0800c5dd

0800c324 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c324:	b480      	push	{r7}
 800c326:	b08f      	sub	sp, #60	@ 0x3c
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c332:	6a3b      	ldr	r3, [r7, #32]
 800c334:	e853 3f00 	ldrex	r3, [r3]
 800c338:	61fb      	str	r3, [r7, #28]
   return(result);
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c340:	637b      	str	r3, [r7, #52]	@ 0x34
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	461a      	mov	r2, r3
 800c348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c34a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c34c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c350:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c352:	e841 2300 	strex	r3, r2, [r1]
 800c356:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d1e6      	bne.n	800c32c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	3308      	adds	r3, #8
 800c364:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	e853 3f00 	ldrex	r3, [r3]
 800c36c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c374:	633b      	str	r3, [r7, #48]	@ 0x30
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3308      	adds	r3, #8
 800c37c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c37e:	61ba      	str	r2, [r7, #24]
 800c380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c382:	6979      	ldr	r1, [r7, #20]
 800c384:	69ba      	ldr	r2, [r7, #24]
 800c386:	e841 2300 	strex	r3, r2, [r1]
 800c38a:	613b      	str	r3, [r7, #16]
   return(result);
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d1e5      	bne.n	800c35e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2220      	movs	r2, #32
 800c396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c39a:	bf00      	nop
 800c39c:	373c      	adds	r7, #60	@ 0x3c
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr

0800c3a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3a6:	b480      	push	{r7}
 800c3a8:	b095      	sub	sp, #84	@ 0x54
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3b6:	e853 3f00 	ldrex	r3, [r3]
 800c3ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c3c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c3ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c3d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c3d4:	e841 2300 	strex	r3, r2, [r1]
 800c3d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1e6      	bne.n	800c3ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3308      	adds	r3, #8
 800c3e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e8:	6a3b      	ldr	r3, [r7, #32]
 800c3ea:	e853 3f00 	ldrex	r3, [r3]
 800c3ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c3f6:	f023 0301 	bic.w	r3, r3, #1
 800c3fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	3308      	adds	r3, #8
 800c402:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c404:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c406:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c408:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c40a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c40c:	e841 2300 	strex	r3, r2, [r1]
 800c410:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c414:	2b00      	cmp	r3, #0
 800c416:	d1e3      	bne.n	800c3e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d118      	bne.n	800c452 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	e853 3f00 	ldrex	r3, [r3]
 800c42c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	f023 0310 	bic.w	r3, r3, #16
 800c434:	647b      	str	r3, [r7, #68]	@ 0x44
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	461a      	mov	r2, r3
 800c43c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c43e:	61bb      	str	r3, [r7, #24]
 800c440:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c442:	6979      	ldr	r1, [r7, #20]
 800c444:	69ba      	ldr	r2, [r7, #24]
 800c446:	e841 2300 	strex	r3, r2, [r1]
 800c44a:	613b      	str	r3, [r7, #16]
   return(result);
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1e6      	bne.n	800c420 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2220      	movs	r2, #32
 800c456:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2200      	movs	r2, #0
 800c45e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2200      	movs	r2, #0
 800c464:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c466:	bf00      	nop
 800c468:	3754      	adds	r7, #84	@ 0x54
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr

0800c472 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b09c      	sub	sp, #112	@ 0x70
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c47e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f003 0320 	and.w	r3, r3, #32
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d171      	bne.n	800c572 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c48e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c490:	2200      	movs	r2, #0
 800c492:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c49e:	e853 3f00 	ldrex	r3, [r3]
 800c4a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c4a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c4ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c4b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c4b6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c4ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c4bc:	e841 2300 	strex	r3, r2, [r1]
 800c4c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c4c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1e6      	bne.n	800c496 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	3308      	adds	r3, #8
 800c4ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d2:	e853 3f00 	ldrex	r3, [r3]
 800c4d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c4d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4da:	f023 0301 	bic.w	r3, r3, #1
 800c4de:	667b      	str	r3, [r7, #100]	@ 0x64
 800c4e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	3308      	adds	r3, #8
 800c4e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c4e8:	647a      	str	r2, [r7, #68]	@ 0x44
 800c4ea:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c4ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c4f0:	e841 2300 	strex	r3, r2, [r1]
 800c4f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c4f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1e5      	bne.n	800c4c8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	3308      	adds	r3, #8
 800c502:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c506:	e853 3f00 	ldrex	r3, [r3]
 800c50a:	623b      	str	r3, [r7, #32]
   return(result);
 800c50c:	6a3b      	ldr	r3, [r7, #32]
 800c50e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c512:	663b      	str	r3, [r7, #96]	@ 0x60
 800c514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	3308      	adds	r3, #8
 800c51a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c51c:	633a      	str	r2, [r7, #48]	@ 0x30
 800c51e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c520:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c524:	e841 2300 	strex	r3, r2, [r1]
 800c528:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d1e5      	bne.n	800c4fc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c532:	2220      	movs	r2, #32
 800c534:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c53a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d118      	bne.n	800c572 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	e853 3f00 	ldrex	r3, [r3]
 800c54c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f023 0310 	bic.w	r3, r3, #16
 800c554:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c556:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	461a      	mov	r2, r3
 800c55c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c55e:	61fb      	str	r3, [r7, #28]
 800c560:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c562:	69b9      	ldr	r1, [r7, #24]
 800c564:	69fa      	ldr	r2, [r7, #28]
 800c566:	e841 2300 	strex	r3, r2, [r1]
 800c56a:	617b      	str	r3, [r7, #20]
   return(result);
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1e6      	bne.n	800c540 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c574:	2200      	movs	r2, #0
 800c576:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c57a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d107      	bne.n	800c590 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c580:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c582:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c586:	4619      	mov	r1, r3
 800c588:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c58a:	f000 fa81 	bl	800ca90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c58e:	e002      	b.n	800c596 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800c590:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c592:	f7ff f94d 	bl	800b830 <HAL_UART_RxCpltCallback>
}
 800c596:	bf00      	nop
 800c598:	3770      	adds	r7, #112	@ 0x70
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b084      	sub	sp, #16
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5aa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d109      	bne.n	800c5ce <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c5c0:	085b      	lsrs	r3, r3, #1
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	f000 fa62 	bl	800ca90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c5cc:	e002      	b.n	800c5d4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c5ce:	68f8      	ldr	r0, [r7, #12]
 800c5d0:	f7ff f938 	bl	800b844 <HAL_UART_RxHalfCpltCallback>
}
 800c5d4:	bf00      	nop
 800c5d6:	3710      	adds	r7, #16
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b086      	sub	sp, #24
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5e8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5f0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c5f8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c604:	2b80      	cmp	r3, #128	@ 0x80
 800c606:	d109      	bne.n	800c61c <UART_DMAError+0x40>
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	2b21      	cmp	r3, #33	@ 0x21
 800c60c:	d106      	bne.n	800c61c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	2200      	movs	r2, #0
 800c612:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c616:	6978      	ldr	r0, [r7, #20]
 800c618:	f7ff fe84 	bl	800c324 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	689b      	ldr	r3, [r3, #8]
 800c622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c626:	2b40      	cmp	r3, #64	@ 0x40
 800c628:	d109      	bne.n	800c63e <UART_DMAError+0x62>
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	2b22      	cmp	r3, #34	@ 0x22
 800c62e:	d106      	bne.n	800c63e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	2200      	movs	r2, #0
 800c634:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c638:	6978      	ldr	r0, [r7, #20]
 800c63a:	f7ff feb4 	bl	800c3a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c644:	f043 0210 	orr.w	r2, r3, #16
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c64e:	6978      	ldr	r0, [r7, #20]
 800c650:	f7ff f902 	bl	800b858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c654:	bf00      	nop
 800c656:	3718      	adds	r7, #24
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c668:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c672:	68f8      	ldr	r0, [r7, #12]
 800c674:	f7ff f8f0 	bl	800b858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c678:	bf00      	nop
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b088      	sub	sp, #32
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	e853 3f00 	ldrex	r3, [r3]
 800c694:	60bb      	str	r3, [r7, #8]
   return(result);
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c69c:	61fb      	str	r3, [r7, #28]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	61bb      	str	r3, [r7, #24]
 800c6a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6aa:	6979      	ldr	r1, [r7, #20]
 800c6ac:	69ba      	ldr	r2, [r7, #24]
 800c6ae:	e841 2300 	strex	r3, r2, [r1]
 800c6b2:	613b      	str	r3, [r7, #16]
   return(result);
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1e6      	bne.n	800c688 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2220      	movs	r2, #32
 800c6be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f7ff f8a7 	bl	800b81c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6ce:	bf00      	nop
 800c6d0:	3720      	adds	r7, #32
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c6d6:	b480      	push	{r7}
 800c6d8:	b083      	sub	sp, #12
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c6de:	bf00      	nop
 800c6e0:	370c      	adds	r7, #12
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr

0800c6ea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c6ea:	b480      	push	{r7}
 800c6ec:	b083      	sub	sp, #12
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c6f2:	bf00      	nop
 800c6f4:	370c      	adds	r7, #12
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr

0800c6fe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c6fe:	b480      	push	{r7}
 800c700:	b083      	sub	sp, #12
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c706:	bf00      	nop
 800c708:	370c      	adds	r7, #12
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr

0800c712 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c712:	b480      	push	{r7}
 800c714:	b085      	sub	sp, #20
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c720:	2b01      	cmp	r3, #1
 800c722:	d101      	bne.n	800c728 <HAL_UARTEx_DisableFifoMode+0x16>
 800c724:	2302      	movs	r3, #2
 800c726:	e027      	b.n	800c778 <HAL_UARTEx_DisableFifoMode+0x66>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2201      	movs	r2, #1
 800c72c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2224      	movs	r2, #36	@ 0x24
 800c734:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f022 0201 	bic.w	r2, r2, #1
 800c74e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c756:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2200      	movs	r2, #0
 800c75c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	68fa      	ldr	r2, [r7, #12]
 800c764:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2220      	movs	r2, #32
 800c76a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c776:	2300      	movs	r3, #0
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3714      	adds	r7, #20
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c794:	2b01      	cmp	r3, #1
 800c796:	d101      	bne.n	800c79c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c798:	2302      	movs	r3, #2
 800c79a:	e02d      	b.n	800c7f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2224      	movs	r2, #36	@ 0x24
 800c7a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	681a      	ldr	r2, [r3, #0]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f022 0201 	bic.w	r2, r2, #1
 800c7c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	689b      	ldr	r3, [r3, #8]
 800c7ca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	683a      	ldr	r2, [r7, #0]
 800c7d4:	430a      	orrs	r2, r1
 800c7d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 f8a3 	bl	800c924 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	68fa      	ldr	r2, [r7, #12]
 800c7e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2220      	movs	r2, #32
 800c7ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7f6:	2300      	movs	r3, #0
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3710      	adds	r7, #16
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c810:	2b01      	cmp	r3, #1
 800c812:	d101      	bne.n	800c818 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c814:	2302      	movs	r3, #2
 800c816:	e02d      	b.n	800c874 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2224      	movs	r2, #36	@ 0x24
 800c824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f022 0201 	bic.w	r2, r2, #1
 800c83e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	689b      	ldr	r3, [r3, #8]
 800c846:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	683a      	ldr	r2, [r7, #0]
 800c850:	430a      	orrs	r2, r1
 800c852:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f865 	bl	800c924 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2220      	movs	r2, #32
 800c866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2200      	movs	r2, #0
 800c86e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c872:	2300      	movs	r3, #0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b08c      	sub	sp, #48	@ 0x30
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	4613      	mov	r3, r2
 800c888:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c890:	2b20      	cmp	r3, #32
 800c892:	d142      	bne.n	800c91a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d002      	beq.n	800c8a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800c89a:	88fb      	ldrh	r3, [r7, #6]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d101      	bne.n	800c8a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e03b      	b.n	800c91c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c8b0:	88fb      	ldrh	r3, [r7, #6]
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	68b9      	ldr	r1, [r7, #8]
 800c8b6:	68f8      	ldr	r0, [r7, #12]
 800c8b8:	f7ff fc8e 	bl	800c1d8 <UART_Start_Receive_DMA>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c8c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d124      	bne.n	800c914 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	d11d      	bne.n	800c90e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2210      	movs	r2, #16
 800c8d8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	e853 3f00 	ldrex	r3, [r3]
 800c8e6:	617b      	str	r3, [r7, #20]
   return(result);
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	f043 0310 	orr.w	r3, r3, #16
 800c8ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8fa:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8fc:	6a39      	ldr	r1, [r7, #32]
 800c8fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c900:	e841 2300 	strex	r3, r2, [r1]
 800c904:	61fb      	str	r3, [r7, #28]
   return(result);
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d1e6      	bne.n	800c8da <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800c90c:	e002      	b.n	800c914 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c90e:	2301      	movs	r3, #1
 800c910:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800c914:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c918:	e000      	b.n	800c91c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c91a:	2302      	movs	r3, #2
  }
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3730      	adds	r7, #48	@ 0x30
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c924:	b480      	push	{r7}
 800c926:	b085      	sub	sp, #20
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c930:	2b00      	cmp	r3, #0
 800c932:	d108      	bne.n	800c946 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2201      	movs	r2, #1
 800c940:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c944:	e031      	b.n	800c9aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c946:	2308      	movs	r3, #8
 800c948:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c94a:	2308      	movs	r3, #8
 800c94c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	689b      	ldr	r3, [r3, #8]
 800c954:	0e5b      	lsrs	r3, r3, #25
 800c956:	b2db      	uxtb	r3, r3
 800c958:	f003 0307 	and.w	r3, r3, #7
 800c95c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	0f5b      	lsrs	r3, r3, #29
 800c966:	b2db      	uxtb	r3, r3
 800c968:	f003 0307 	and.w	r3, r3, #7
 800c96c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c96e:	7bbb      	ldrb	r3, [r7, #14]
 800c970:	7b3a      	ldrb	r2, [r7, #12]
 800c972:	4911      	ldr	r1, [pc, #68]	@ (800c9b8 <UARTEx_SetNbDataToProcess+0x94>)
 800c974:	5c8a      	ldrb	r2, [r1, r2]
 800c976:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c97a:	7b3a      	ldrb	r2, [r7, #12]
 800c97c:	490f      	ldr	r1, [pc, #60]	@ (800c9bc <UARTEx_SetNbDataToProcess+0x98>)
 800c97e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c980:	fb93 f3f2 	sdiv	r3, r3, r2
 800c984:	b29a      	uxth	r2, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	7b7a      	ldrb	r2, [r7, #13]
 800c990:	4909      	ldr	r1, [pc, #36]	@ (800c9b8 <UARTEx_SetNbDataToProcess+0x94>)
 800c992:	5c8a      	ldrb	r2, [r1, r2]
 800c994:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c998:	7b7a      	ldrb	r2, [r7, #13]
 800c99a:	4908      	ldr	r1, [pc, #32]	@ (800c9bc <UARTEx_SetNbDataToProcess+0x98>)
 800c99c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c99e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9a2:	b29a      	uxth	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c9aa:	bf00      	nop
 800c9ac:	3714      	adds	r7, #20
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	08012f38 	.word	0x08012f38
 800c9bc:	08012f40 	.word	0x08012f40

0800c9c0 <_ZN18Hardware_STM32_ADC18dmaCallbackHandlerEP17ADC_HandleTypeDef>:
    isDataReady_IT_=STM32_ADC_IT_NOT_READY;
    //    HAL_ADCEx_InjectedStart_IT(hadc_);
    return hadc_->Instance->JDR2 / 4096.0f * 3.3f;
  }

  void dmaCallbackHandler(ADC_HandleTypeDef *hadc) {
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
    if (hadc == hadc_)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	68db      	ldr	r3, [r3, #12]
 800c9ce:	683a      	ldr	r2, [r7, #0]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d102      	bne.n	800c9da <_ZN18Hardware_STM32_ADC18dmaCallbackHandlerEP17ADC_HandleTypeDef+0x1a>
      {
	//			if (hadc_->DMA_Handle->Instance->CNDTR == 0) {
	isDataReady_ = STM32_ADC_DMA_READY;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	741a      	strb	r2, [r3, #16]
	//			}
      }
  }
 800c9da:	bf00      	nop
 800c9dc:	370c      	adds	r7, #12
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr

0800c9e6 <_ZN18Hardware_STM32_ADC17iTCallbackHandlerEP17ADC_HandleTypeDef>:
  void iTCallbackHandler (ADC_HandleTypeDef *hadc)
 800c9e6:	b480      	push	{r7}
 800c9e8:	b083      	sub	sp, #12
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
 800c9ee:	6039      	str	r1, [r7, #0]
  {
    if (hadc == hadc_)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	68db      	ldr	r3, [r3, #12]
 800c9f4:	683a      	ldr	r2, [r7, #0]
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d102      	bne.n	800ca00 <_ZN18Hardware_STM32_ADC17iTCallbackHandlerEP17ADC_HandleTypeDef+0x1a>
      {
	isDataReady_IT_ = STM32_ADC_IT_READY;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	745a      	strb	r2, [r3, #17]
      }
  }
 800ca00:	bf00      	nop
 800ca02:	370c      	adds	r7, #12
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <_ZN22Hardware_STM32_Message15callbackHandlerEP20__UART_HandleTypeDeft>:
  void callbackHandler(UART_HandleTypeDef *huart, uint16_t Size) {
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	4613      	mov	r3, r2
 800ca18:	80fb      	strh	r3, [r7, #6]
    if (huart == _huart) {
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	68ba      	ldr	r2, [r7, #8]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d115      	bne.n	800ca50 <_ZN22Hardware_STM32_Message15callbackHandlerEP20__UART_HandleTypeDeft+0x44>
	_data_len = Size;
 800ca24:	88fa      	ldrh	r2, [r7, #6]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	60da      	str	r2, [r3, #12]
	_new_data_available = true;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	741a      	strb	r2, [r3, #16]
	_receiveBufferIndex = (_receiveBufferIndex + 1) % _buffer_num;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	7c5b      	ldrb	r3, [r3, #17]
 800ca34:	3301      	adds	r3, #1
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	7a12      	ldrb	r2, [r2, #8]
 800ca3a:	fb93 f1f2 	sdiv	r1, r3, r2
 800ca3e:	fb01 f202 	mul.w	r2, r1, r2
 800ca42:	1a9b      	subs	r3, r3, r2
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	745a      	strb	r2, [r3, #17]
	_startDMA();
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f7f5 fea3 	bl	8002796 <_ZN22Hardware_STM32_Message9_startDMAEv>
  }
 800ca50:	bf00      	nop
 800ca52:	3710      	adds	r7, #16
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <HAL_ADC_ConvCpltCallback>:
extern Hardware_STM32_Message g_message_handler;
extern Hardware_STM32_ADC g_adc1_handler;
extern Hardware_STM32_Message g_message_handler;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  g_adc1_handler.dmaCallbackHandler(hadc);
 800ca60:	6879      	ldr	r1, [r7, #4]
 800ca62:	4803      	ldr	r0, [pc, #12]	@ (800ca70 <HAL_ADC_ConvCpltCallback+0x18>)
 800ca64:	f7ff ffac 	bl	800c9c0 <_ZN18Hardware_STM32_ADC18dmaCallbackHandlerEP17ADC_HandleTypeDef>
}
 800ca68:	bf00      	nop
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	20000508 	.word	0x20000508

0800ca74 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  g_adc1_handler.iTCallbackHandler(hadc);
 800ca7c:	6879      	ldr	r1, [r7, #4]
 800ca7e:	4803      	ldr	r0, [pc, #12]	@ (800ca8c <HAL_ADCEx_InjectedConvCpltCallback+0x18>)
 800ca80:	f7ff ffb1 	bl	800c9e6 <_ZN18Hardware_STM32_ADC17iTCallbackHandlerEP17ADC_HandleTypeDef>
}
 800ca84:	bf00      	nop
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	20000508 	.word	0x20000508

0800ca90 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	460b      	mov	r3, r1
 800ca9a:	807b      	strh	r3, [r7, #2]
  g_message_handler.callbackHandler(huart, Size);
 800ca9c:	887b      	ldrh	r3, [r7, #2]
 800ca9e:	461a      	mov	r2, r3
 800caa0:	6879      	ldr	r1, [r7, #4]
 800caa2:	4803      	ldr	r0, [pc, #12]	@ (800cab0 <HAL_UARTEx_RxEventCallback+0x20>)
 800caa4:	f7ff ffb2 	bl	800ca0c <_ZN22Hardware_STM32_Message15callbackHandlerEP20__UART_HandleTypeDeft>
}
 800caa8:	bf00      	nop
 800caaa:	3708      	adds	r7, #8
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	20000524 	.word	0x20000524

0800cab4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  if(htim == &htim1)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4a07      	ldr	r2, [pc, #28]	@ (800cadc <HAL_TIM_PeriodElapsedCallback+0x28>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d106      	bne.n	800cad2 <HAL_TIM_PeriodElapsedCallback+0x1e>
    {
      SEGGER_SYSVIEW_RecordEnterISR();
 800cac4:	f000 ff2e 	bl	800d924 <SEGGER_SYSVIEW_RecordEnterISR>
      g_message_handler.processHandler();
 800cac8:	4805      	ldr	r0, [pc, #20]	@ (800cae0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800caca:	f7f5 fe34 	bl	8002736 <_ZN22Hardware_STM32_Message14processHandlerEv>
      SEGGER_SYSVIEW_RecordExitISR();
 800cace:	f000 ff6b 	bl	800d9a8 <SEGGER_SYSVIEW_RecordExitISR>
    }

}
 800cad2:	bf00      	nop
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	200005b8 	.word	0x200005b8
 800cae0:	20000524 	.word	0x20000524

0800cae4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800cae4:	b480      	push	{r7}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800caea:	4b21      	ldr	r3, [pc, #132]	@ (800cb70 <_DoInit+0x8c>)
 800caec:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2203      	movs	r2, #3
 800caf2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2203      	movs	r2, #3
 800caf8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4a1d      	ldr	r2, [pc, #116]	@ (800cb74 <_DoInit+0x90>)
 800cafe:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4a1d      	ldr	r2, [pc, #116]	@ (800cb78 <_DoInit+0x94>)
 800cb04:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cb0c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	4a14      	ldr	r2, [pc, #80]	@ (800cb74 <_DoInit+0x90>)
 800cb24:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	4a14      	ldr	r2, [pc, #80]	@ (800cb7c <_DoInit+0x98>)
 800cb2a:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2210      	movs	r2, #16
 800cb30:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2200      	movs	r2, #0
 800cb36:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	3307      	adds	r3, #7
 800cb48:	4a0d      	ldr	r2, [pc, #52]	@ (800cb80 <_DoInit+0x9c>)
 800cb4a:	6810      	ldr	r0, [r2, #0]
 800cb4c:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	4a0c      	ldr	r2, [pc, #48]	@ (800cb84 <_DoInit+0xa0>)
 800cb52:	6810      	ldr	r0, [r2, #0]
 800cb54:	6018      	str	r0, [r3, #0]
 800cb56:	8891      	ldrh	r1, [r2, #4]
 800cb58:	7992      	ldrb	r2, [r2, #6]
 800cb5a:	8099      	strh	r1, [r3, #4]
 800cb5c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2220      	movs	r2, #32
 800cb62:	719a      	strb	r2, [r3, #6]
}
 800cb64:	bf00      	nop
 800cb66:	370c      	adds	r7, #12
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr
 800cb70:	2000075c 	.word	0x2000075c
 800cb74:	08012ea4 	.word	0x08012ea4
 800cb78:	20000804 	.word	0x20000804
 800cb7c:	20000c04 	.word	0x20000c04
 800cb80:	08012eb0 	.word	0x08012eb0
 800cb84:	08012eb4 	.word	0x08012eb4

0800cb88 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b08a      	sub	sp, #40	@ 0x28
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800cb94:	4b3c      	ldr	r3, [pc, #240]	@ (800cc88 <SEGGER_RTT_ReadNoLock+0x100>)
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d101      	bne.n	800cba0 <SEGGER_RTT_ReadNoLock+0x18>
 800cb9c:	f7ff ffa2 	bl	800cae4 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	4613      	mov	r3, r2
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	4413      	add	r3, r2
 800cba8:	00db      	lsls	r3, r3, #3
 800cbaa:	3360      	adds	r3, #96	@ 0x60
 800cbac:	4a36      	ldr	r2, [pc, #216]	@ (800cc88 <SEGGER_RTT_ReadNoLock+0x100>)
 800cbae:	4413      	add	r3, r2
 800cbb0:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800cbb6:	69bb      	ldr	r3, [r7, #24]
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800cbbc:	69bb      	ldr	r3, [r7, #24]
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800cbc6:	6a3a      	ldr	r2, [r7, #32]
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d92a      	bls.n	800cc24 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800cbce:	69bb      	ldr	r3, [r7, #24]
 800cbd0:	689a      	ldr	r2, [r3, #8]
 800cbd2:	6a3b      	ldr	r3, [r7, #32]
 800cbd4:	1ad3      	subs	r3, r2, r3
 800cbd6:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800cbd8:	693a      	ldr	r2, [r7, #16]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	bf28      	it	cs
 800cbe0:	4613      	movcs	r3, r2
 800cbe2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800cbe4:	69bb      	ldr	r3, [r7, #24]
 800cbe6:	685a      	ldr	r2, [r3, #4]
 800cbe8:	6a3b      	ldr	r3, [r7, #32]
 800cbea:	4413      	add	r3, r2
 800cbec:	693a      	ldr	r2, [r7, #16]
 800cbee:	4619      	mov	r1, r3
 800cbf0:	69f8      	ldr	r0, [r7, #28]
 800cbf2:	f002 fae4 	bl	800f1be <memcpy>
    NumBytesRead += NumBytesRem;
 800cbf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	4413      	add	r3, r2
 800cbfc:	627b      	str	r3, [r7, #36]	@ 0x24
    pBuffer      += NumBytesRem;
 800cbfe:	69fa      	ldr	r2, [r7, #28]
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	4413      	add	r3, r2
 800cc04:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	1ad3      	subs	r3, r2, r3
 800cc0c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800cc0e:	6a3a      	ldr	r2, [r7, #32]
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	4413      	add	r3, r2
 800cc14:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800cc16:	69bb      	ldr	r3, [r7, #24]
 800cc18:	689b      	ldr	r3, [r3, #8]
 800cc1a:	6a3a      	ldr	r2, [r7, #32]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d101      	bne.n	800cc24 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 800cc20:	2300      	movs	r3, #0
 800cc22:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800cc24:	697a      	ldr	r2, [r7, #20]
 800cc26:	6a3b      	ldr	r3, [r7, #32]
 800cc28:	1ad3      	subs	r3, r2, r3
 800cc2a:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800cc2c:	693a      	ldr	r2, [r7, #16]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4293      	cmp	r3, r2
 800cc32:	bf28      	it	cs
 800cc34:	4613      	movcs	r3, r2
 800cc36:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d018      	beq.n	800cc70 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	685a      	ldr	r2, [r3, #4]
 800cc42:	6a3b      	ldr	r3, [r7, #32]
 800cc44:	4413      	add	r3, r2
 800cc46:	693a      	ldr	r2, [r7, #16]
 800cc48:	4619      	mov	r1, r3
 800cc4a:	69f8      	ldr	r0, [r7, #28]
 800cc4c:	f002 fab7 	bl	800f1be <memcpy>
    NumBytesRead += NumBytesRem;
 800cc50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	4413      	add	r3, r2
 800cc56:	627b      	str	r3, [r7, #36]	@ 0x24
    pBuffer      += NumBytesRem;
 800cc58:	69fa      	ldr	r2, [r7, #28]
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	1ad3      	subs	r3, r2, r3
 800cc66:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800cc68:	6a3a      	ldr	r2, [r7, #32]
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 800cc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d002      	beq.n	800cc7c <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	6a3a      	ldr	r2, [r7, #32]
 800cc7a:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800cc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3728      	adds	r7, #40	@ 0x28
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	2000075c 	.word	0x2000075c

0800cc8c <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b08a      	sub	sp, #40	@ 0x28
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	1c5a      	adds	r2, r3, #1
 800cca0:	4613      	mov	r3, r2
 800cca2:	005b      	lsls	r3, r3, #1
 800cca4:	4413      	add	r3, r2
 800cca6:	00db      	lsls	r3, r3, #3
 800cca8:	4a3f      	ldr	r2, [pc, #252]	@ (800cda8 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 800ccaa:	4413      	add	r3, r2
 800ccac:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 800ccae:	6a3b      	ldr	r3, [r7, #32]
 800ccb0:	691b      	ldr	r3, [r3, #16]
 800ccb2:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 800ccb4:	6a3b      	ldr	r3, [r7, #32]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 800ccba:	69fa      	ldr	r2, [r7, #28]
 800ccbc:	69bb      	ldr	r3, [r7, #24]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d854      	bhi.n	800cd6c <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 800ccc2:	6a3b      	ldr	r3, [r7, #32]
 800ccc4:	689a      	ldr	r2, [r3, #8]
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	3b01      	subs	r3, #1
 800cccc:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800ccce:	697a      	ldr	r2, [r7, #20]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d30f      	bcc.n	800ccf6 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800ccd6:	6a3b      	ldr	r3, [r7, #32]
 800ccd8:	685a      	ldr	r2, [r3, #4]
 800ccda:	69bb      	ldr	r3, [r7, #24]
 800ccdc:	4413      	add	r3, r2
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cce2:	4618      	mov	r0, r3
 800cce4:	f002 fa6b 	bl	800f1be <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 800cce8:	69ba      	ldr	r2, [r7, #24]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	441a      	add	r2, r3
 800ccee:	6a3b      	ldr	r3, [r7, #32]
 800ccf0:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	e054      	b.n	800cda0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 800ccf6:	697a      	ldr	r2, [r7, #20]
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	4413      	add	r3, r2
 800ccfc:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 800ccfe:	697a      	ldr	r2, [r7, #20]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d34b      	bcc.n	800cd9e <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 800cd06:	6a3b      	ldr	r3, [r7, #32]
 800cd08:	689a      	ldr	r2, [r3, #8]
 800cd0a:	69bb      	ldr	r3, [r7, #24]
 800cd0c:	1ad3      	subs	r3, r2, r3
 800cd0e:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 800cd10:	693a      	ldr	r2, [r7, #16]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d90e      	bls.n	800cd36 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800cd18:	6a3b      	ldr	r3, [r7, #32]
 800cd1a:	685a      	ldr	r2, [r3, #4]
 800cd1c:	69bb      	ldr	r3, [r7, #24]
 800cd1e:	4413      	add	r3, r2
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd24:	4618      	mov	r0, r3
 800cd26:	f002 fa4a 	bl	800f1be <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 800cd2a:	69ba      	ldr	r2, [r7, #24]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	441a      	add	r2, r3
 800cd30:	6a3b      	ldr	r3, [r7, #32]
 800cd32:	60da      	str	r2, [r3, #12]
 800cd34:	e018      	b.n	800cd68 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        do {
          *pDst++ = *pData++;
        } while (--NumBytes);
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 800cd36:	6a3b      	ldr	r3, [r7, #32]
 800cd38:	685a      	ldr	r2, [r3, #4]
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	693a      	ldr	r2, [r7, #16]
 800cd40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd42:	4618      	mov	r0, r3
 800cd44:	f002 fa3b 	bl	800f1be <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 800cd48:	6a3b      	ldr	r3, [r7, #32]
 800cd4a:	6858      	ldr	r0, [r3, #4]
 800cd4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	18d1      	adds	r1, r2, r3
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	1ad3      	subs	r3, r2, r3
 800cd58:	461a      	mov	r2, r3
 800cd5a:	f002 fa30 	bl	800f1be <memcpy>
        pRing->WrOff = NumBytes - Rem;
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	1ad2      	subs	r2, r2, r3
 800cd64:	6a3b      	ldr	r3, [r7, #32]
 800cd66:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e019      	b.n	800cda0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 800cd6c:	69fa      	ldr	r2, [r7, #28]
 800cd6e:	69bb      	ldr	r3, [r7, #24]
 800cd70:	1ad3      	subs	r3, r2, r3
 800cd72:	3b01      	subs	r3, #1
 800cd74:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800cd76:	697a      	ldr	r2, [r7, #20]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d30f      	bcc.n	800cd9e <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800cd7e:	6a3b      	ldr	r3, [r7, #32]
 800cd80:	685a      	ldr	r2, [r3, #4]
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	4413      	add	r3, r2
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f002 fa17 	bl	800f1be <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 800cd90:	69ba      	ldr	r2, [r7, #24]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	441a      	add	r2, r3
 800cd96:	6a3b      	ldr	r3, [r7, #32]
 800cd98:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e000      	b.n	800cda0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 800cd9e:	2300      	movs	r3, #0
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3728      	adds	r7, #40	@ 0x28
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	2000075c 	.word	0x2000075c

0800cdac <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b086      	sub	sp, #24
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	607a      	str	r2, [r7, #4]
 800cdb8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800cdba:	4b30      	ldr	r3, [pc, #192]	@ (800ce7c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d101      	bne.n	800cdc6 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800cdc2:	f7ff fe8f 	bl	800cae4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800cdc6:	4b2d      	ldr	r3, [pc, #180]	@ (800ce7c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800cdc8:	691b      	ldr	r3, [r3, #16]
 800cdca:	461a      	mov	r2, r3
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d24c      	bcs.n	800ce6c <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800cdd2:	f3ef 8311 	mrs	r3, BASEPRI
 800cdd6:	f04f 0120 	mov.w	r1, #32
 800cdda:	f381 8811 	msr	BASEPRI, r1
 800cdde:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d032      	beq.n	800ce4c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800cde6:	4925      	ldr	r1, [pc, #148]	@ (800ce7c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	1c5a      	adds	r2, r3, #1
 800cdec:	4613      	mov	r3, r2
 800cdee:	005b      	lsls	r3, r3, #1
 800cdf0:	4413      	add	r3, r2
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	440b      	add	r3, r1
 800cdf6:	68ba      	ldr	r2, [r7, #8]
 800cdf8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800cdfa:	4920      	ldr	r1, [pc, #128]	@ (800ce7c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	1c5a      	adds	r2, r3, #1
 800ce00:	4613      	mov	r3, r2
 800ce02:	005b      	lsls	r3, r3, #1
 800ce04:	4413      	add	r3, r2
 800ce06:	00db      	lsls	r3, r3, #3
 800ce08:	440b      	add	r3, r1
 800ce0a:	3304      	adds	r3, #4
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800ce10:	491a      	ldr	r1, [pc, #104]	@ (800ce7c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	4613      	mov	r3, r2
 800ce16:	005b      	lsls	r3, r3, #1
 800ce18:	4413      	add	r3, r2
 800ce1a:	00db      	lsls	r3, r3, #3
 800ce1c:	440b      	add	r3, r1
 800ce1e:	3320      	adds	r3, #32
 800ce20:	683a      	ldr	r2, [r7, #0]
 800ce22:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800ce24:	4915      	ldr	r1, [pc, #84]	@ (800ce7c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800ce26:	68fa      	ldr	r2, [r7, #12]
 800ce28:	4613      	mov	r3, r2
 800ce2a:	005b      	lsls	r3, r3, #1
 800ce2c:	4413      	add	r3, r2
 800ce2e:	00db      	lsls	r3, r3, #3
 800ce30:	440b      	add	r3, r1
 800ce32:	3328      	adds	r3, #40	@ 0x28
 800ce34:	2200      	movs	r2, #0
 800ce36:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 800ce38:	4910      	ldr	r1, [pc, #64]	@ (800ce7c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800ce3a:	68fa      	ldr	r2, [r7, #12]
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	005b      	lsls	r3, r3, #1
 800ce40:	4413      	add	r3, r2
 800ce42:	00db      	lsls	r3, r3, #3
 800ce44:	440b      	add	r3, r1
 800ce46:	3324      	adds	r3, #36	@ 0x24
 800ce48:	2200      	movs	r2, #0
 800ce4a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800ce4c:	490b      	ldr	r1, [pc, #44]	@ (800ce7c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800ce4e:	68fa      	ldr	r2, [r7, #12]
 800ce50:	4613      	mov	r3, r2
 800ce52:	005b      	lsls	r3, r3, #1
 800ce54:	4413      	add	r3, r2
 800ce56:	00db      	lsls	r3, r3, #3
 800ce58:	440b      	add	r3, r1
 800ce5a:	332c      	adds	r3, #44	@ 0x2c
 800ce5c:	6a3a      	ldr	r2, [r7, #32]
 800ce5e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	617b      	str	r3, [r7, #20]
 800ce6a:	e002      	b.n	800ce72 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800ce6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce70:	617b      	str	r3, [r7, #20]
  }
  return r;
 800ce72:	697b      	ldr	r3, [r7, #20]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3718      	adds	r7, #24
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	2000075c 	.word	0x2000075c

0800ce80 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b086      	sub	sp, #24
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
 800ce8c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800ce8e:	4b30      	ldr	r3, [pc, #192]	@ (800cf50 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d101      	bne.n	800ce9a <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800ce96:	f7ff fe25 	bl	800cae4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800ce9a:	4b2d      	ldr	r3, [pc, #180]	@ (800cf50 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800ce9c:	695b      	ldr	r3, [r3, #20]
 800ce9e:	461a      	mov	r2, r3
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d24b      	bcs.n	800cf3e <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800cea6:	f3ef 8311 	mrs	r3, BASEPRI
 800ceaa:	f04f 0120 	mov.w	r1, #32
 800ceae:	f381 8811 	msr	BASEPRI, r1
 800ceb2:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d031      	beq.n	800cf1e <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800ceba:	4925      	ldr	r1, [pc, #148]	@ (800cf50 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	4613      	mov	r3, r2
 800cec0:	005b      	lsls	r3, r3, #1
 800cec2:	4413      	add	r3, r2
 800cec4:	00db      	lsls	r3, r3, #3
 800cec6:	440b      	add	r3, r1
 800cec8:	3360      	adds	r3, #96	@ 0x60
 800ceca:	68ba      	ldr	r2, [r7, #8]
 800cecc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800cece:	4920      	ldr	r1, [pc, #128]	@ (800cf50 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800ced0:	68fa      	ldr	r2, [r7, #12]
 800ced2:	4613      	mov	r3, r2
 800ced4:	005b      	lsls	r3, r3, #1
 800ced6:	4413      	add	r3, r2
 800ced8:	00db      	lsls	r3, r3, #3
 800ceda:	440b      	add	r3, r1
 800cedc:	3364      	adds	r3, #100	@ 0x64
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800cee2:	491b      	ldr	r1, [pc, #108]	@ (800cf50 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	4613      	mov	r3, r2
 800cee8:	005b      	lsls	r3, r3, #1
 800ceea:	4413      	add	r3, r2
 800ceec:	00db      	lsls	r3, r3, #3
 800ceee:	440b      	add	r3, r1
 800cef0:	3368      	adds	r3, #104	@ 0x68
 800cef2:	683a      	ldr	r2, [r7, #0]
 800cef4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800cef6:	4916      	ldr	r1, [pc, #88]	@ (800cf50 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800cef8:	68fa      	ldr	r2, [r7, #12]
 800cefa:	4613      	mov	r3, r2
 800cefc:	005b      	lsls	r3, r3, #1
 800cefe:	4413      	add	r3, r2
 800cf00:	00db      	lsls	r3, r3, #3
 800cf02:	440b      	add	r3, r1
 800cf04:	3370      	adds	r3, #112	@ 0x70
 800cf06:	2200      	movs	r2, #0
 800cf08:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800cf0a:	4911      	ldr	r1, [pc, #68]	@ (800cf50 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800cf0c:	68fa      	ldr	r2, [r7, #12]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	005b      	lsls	r3, r3, #1
 800cf12:	4413      	add	r3, r2
 800cf14:	00db      	lsls	r3, r3, #3
 800cf16:	440b      	add	r3, r1
 800cf18:	336c      	adds	r3, #108	@ 0x6c
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800cf1e:	490c      	ldr	r1, [pc, #48]	@ (800cf50 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800cf20:	68fa      	ldr	r2, [r7, #12]
 800cf22:	4613      	mov	r3, r2
 800cf24:	005b      	lsls	r3, r3, #1
 800cf26:	4413      	add	r3, r2
 800cf28:	00db      	lsls	r3, r3, #3
 800cf2a:	440b      	add	r3, r1
 800cf2c:	3374      	adds	r3, #116	@ 0x74
 800cf2e:	6a3a      	ldr	r2, [r7, #32]
 800cf30:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	617b      	str	r3, [r7, #20]
 800cf3c:	e002      	b.n	800cf44 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800cf3e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf42:	617b      	str	r3, [r7, #20]
  }
  return r;
 800cf44:	697b      	ldr	r3, [r7, #20]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3718      	adds	r7, #24
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	2000075c 	.word	0x2000075c

0800cf54 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800cf54:	b480      	push	{r7}
 800cf56:	b087      	sub	sp, #28
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800cf60:	2300      	movs	r3, #0
 800cf62:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800cf64:	e002      	b.n	800cf6c <_EncodeStr+0x18>
    Len++;
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	3301      	adds	r3, #1
 800cf6a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	4413      	add	r3, r2
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d1f6      	bne.n	800cf66 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800cf78:	693a      	ldr	r2, [r7, #16]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d901      	bls.n	800cf84 <_EncodeStr+0x30>
    Len = Limit;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	2bfe      	cmp	r3, #254	@ 0xfe
 800cf88:	d806      	bhi.n	800cf98 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	1c5a      	adds	r2, r3, #1
 800cf8e:	60fa      	str	r2, [r7, #12]
 800cf90:	693a      	ldr	r2, [r7, #16]
 800cf92:	b2d2      	uxtb	r2, r2
 800cf94:	701a      	strb	r2, [r3, #0]
 800cf96:	e011      	b.n	800cfbc <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	1c5a      	adds	r2, r3, #1
 800cf9c:	60fa      	str	r2, [r7, #12]
 800cf9e:	22ff      	movs	r2, #255	@ 0xff
 800cfa0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	1c5a      	adds	r2, r3, #1
 800cfa6:	60fa      	str	r2, [r7, #12]
 800cfa8:	693a      	ldr	r2, [r7, #16]
 800cfaa:	b2d2      	uxtb	r2, r2
 800cfac:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	0a19      	lsrs	r1, r3, #8
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	1c5a      	adds	r2, r3, #1
 800cfb6:	60fa      	str	r2, [r7, #12]
 800cfb8:	b2ca      	uxtb	r2, r1
 800cfba:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800cfc0:	e00a      	b.n	800cfd8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800cfc2:	68ba      	ldr	r2, [r7, #8]
 800cfc4:	1c53      	adds	r3, r2, #1
 800cfc6:	60bb      	str	r3, [r7, #8]
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	1c59      	adds	r1, r3, #1
 800cfcc:	60f9      	str	r1, [r7, #12]
 800cfce:	7812      	ldrb	r2, [r2, #0]
 800cfd0:	701a      	strb	r2, [r3, #0]
    n++;
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800cfd8:	697a      	ldr	r2, [r7, #20]
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d3f0      	bcc.n	800cfc2 <_EncodeStr+0x6e>
  }
  return pPayload;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	371c      	adds	r7, #28
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr

0800cfee <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800cfee:	b480      	push	{r7}
 800cff0:	b083      	sub	sp, #12
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	3304      	adds	r3, #4
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	370c      	adds	r7, #12
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr
	...

0800d008 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800d00e:	1cfb      	adds	r3, r7, #3
 800d010:	2201      	movs	r2, #1
 800d012:	4619      	mov	r1, r3
 800d014:	2001      	movs	r0, #1
 800d016:	f7ff fdb7 	bl	800cb88 <SEGGER_RTT_ReadNoLock>
 800d01a:	4603      	mov	r3, r0
 800d01c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2b00      	cmp	r3, #0
 800d022:	dd4f      	ble.n	800d0c4 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 800d024:	78fb      	ldrb	r3, [r7, #3]
 800d026:	2b07      	cmp	r3, #7
 800d028:	dc16      	bgt.n	800d058 <_HandleIncomingPacket+0x50>
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	dd3c      	ble.n	800d0a8 <_HandleIncomingPacket+0xa0>
 800d02e:	3b01      	subs	r3, #1
 800d030:	2b06      	cmp	r3, #6
 800d032:	d839      	bhi.n	800d0a8 <_HandleIncomingPacket+0xa0>
 800d034:	a201      	add	r2, pc, #4	@ (adr r2, 800d03c <_HandleIncomingPacket+0x34>)
 800d036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d03a:	bf00      	nop
 800d03c:	0800d05f 	.word	0x0800d05f
 800d040:	0800d065 	.word	0x0800d065
 800d044:	0800d06b 	.word	0x0800d06b
 800d048:	0800d071 	.word	0x0800d071
 800d04c:	0800d077 	.word	0x0800d077
 800d050:	0800d07d 	.word	0x0800d07d
 800d054:	0800d083 	.word	0x0800d083
 800d058:	2b80      	cmp	r3, #128	@ 0x80
 800d05a:	d015      	beq.n	800d088 <_HandleIncomingPacket+0x80>
 800d05c:	e024      	b.n	800d0a8 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800d05e:	f000 fa7b 	bl	800d558 <SEGGER_SYSVIEW_Start>
      break;
 800d062:	e02f      	b.n	800d0c4 <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800d064:	f000 fb34 	bl	800d6d0 <SEGGER_SYSVIEW_Stop>
      break;
 800d068:	e02c      	b.n	800d0c4 <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800d06a:	f000 fc29 	bl	800d8c0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800d06e:	e029      	b.n	800d0c4 <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800d070:	f000 fbee 	bl	800d850 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800d074:	e026      	b.n	800d0c4 <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800d076:	f000 fb51 	bl	800d71c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800d07a:	e023      	b.n	800d0c4 <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800d07c:	f000 fda6 	bl	800dbcc <SEGGER_SYSVIEW_SendNumModules>
      break;
 800d080:	e020      	b.n	800d0c4 <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800d082:	f000 fd85 	bl	800db90 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800d086:	e01d      	b.n	800d0c4 <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800d088:	1cfb      	adds	r3, r7, #3
 800d08a:	2201      	movs	r2, #1
 800d08c:	4619      	mov	r1, r3
 800d08e:	2001      	movs	r0, #1
 800d090:	f7ff fd7a 	bl	800cb88 <SEGGER_RTT_ReadNoLock>
 800d094:	4603      	mov	r3, r0
 800d096:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	dd0f      	ble.n	800d0be <_HandleIncomingPacket+0xb6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800d09e:	78fb      	ldrb	r3, [r7, #3]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f000 fcf5 	bl	800da90 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800d0a6:	e00a      	b.n	800d0be <_HandleIncomingPacket+0xb6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800d0a8:	78fb      	ldrb	r3, [r7, #3]
 800d0aa:	b25b      	sxtb	r3, r3
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	da08      	bge.n	800d0c2 <_HandleIncomingPacket+0xba>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800d0b0:	1cfb      	adds	r3, r7, #3
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	2001      	movs	r0, #1
 800d0b8:	f7ff fd66 	bl	800cb88 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800d0bc:	e001      	b.n	800d0c2 <_HandleIncomingPacket+0xba>
      break;
 800d0be:	bf00      	nop
 800d0c0:	e000      	b.n	800d0c4 <_HandleIncomingPacket+0xbc>
      break;
 800d0c2:	bf00      	nop
    }
  }
}
 800d0c4:	bf00      	nop
 800d0c6:	3708      	adds	r7, #8
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b08c      	sub	sp, #48	@ 0x30
 800d0d0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800d0d6:	1d3b      	adds	r3, r7, #4
 800d0d8:	3301      	adds	r3, #1
 800d0da:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d0e0:	4b30      	ldr	r3, [pc, #192]	@ (800d1a4 <_TrySendOverflowPacket+0xd8>)
 800d0e2:	695b      	ldr	r3, [r3, #20]
 800d0e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d0e6:	e00b      	b.n	800d100 <_TrySendOverflowPacket+0x34>
 800d0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ea:	b2da      	uxtb	r2, r3
 800d0ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ee:	1c59      	adds	r1, r3, #1
 800d0f0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d0f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d0f6:	b2d2      	uxtb	r2, r2
 800d0f8:	701a      	strb	r2, [r3, #0]
 800d0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0fc:	09db      	lsrs	r3, r3, #7
 800d0fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d102:	2b7f      	cmp	r3, #127	@ 0x7f
 800d104:	d8f0      	bhi.n	800d0e8 <_TrySendOverflowPacket+0x1c>
 800d106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d108:	1c5a      	adds	r2, r3, #1
 800d10a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d10c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d10e:	b2d2      	uxtb	r2, r2
 800d110:	701a      	strb	r2, [r3, #0]
 800d112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d114:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800d116:	4b24      	ldr	r3, [pc, #144]	@ (800d1a8 <_TrySendOverflowPacket+0xdc>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800d11c:	4b21      	ldr	r3, [pc, #132]	@ (800d1a4 <_TrySendOverflowPacket+0xd8>)
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	69ba      	ldr	r2, [r7, #24]
 800d122:	1ad3      	subs	r3, r2, r3
 800d124:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800d126:	69fb      	ldr	r3, [r7, #28]
 800d128:	627b      	str	r3, [r7, #36]	@ 0x24
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	623b      	str	r3, [r7, #32]
 800d12e:	e00b      	b.n	800d148 <_TrySendOverflowPacket+0x7c>
 800d130:	6a3b      	ldr	r3, [r7, #32]
 800d132:	b2da      	uxtb	r2, r3
 800d134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d136:	1c59      	adds	r1, r3, #1
 800d138:	6279      	str	r1, [r7, #36]	@ 0x24
 800d13a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d13e:	b2d2      	uxtb	r2, r2
 800d140:	701a      	strb	r2, [r3, #0]
 800d142:	6a3b      	ldr	r3, [r7, #32]
 800d144:	09db      	lsrs	r3, r3, #7
 800d146:	623b      	str	r3, [r7, #32]
 800d148:	6a3b      	ldr	r3, [r7, #32]
 800d14a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d14c:	d8f0      	bhi.n	800d130 <_TrySendOverflowPacket+0x64>
 800d14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d150:	1c5a      	adds	r2, r3, #1
 800d152:	627a      	str	r2, [r7, #36]	@ 0x24
 800d154:	6a3a      	ldr	r2, [r7, #32]
 800d156:	b2d2      	uxtb	r2, r2
 800d158:	701a      	strb	r2, [r3, #0]
 800d15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d15c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800d15e:	1d3b      	adds	r3, r7, #4
 800d160:	69fa      	ldr	r2, [r7, #28]
 800d162:	1ad3      	subs	r3, r2, r3
 800d164:	461a      	mov	r2, r3
 800d166:	1d3b      	adds	r3, r7, #4
 800d168:	4619      	mov	r1, r3
 800d16a:	2001      	movs	r0, #1
 800d16c:	f7ff fd8e 	bl	800cc8c <SEGGER_RTT_WriteSkipNoLock>
 800d170:	4603      	mov	r3, r0
 800d172:	613b      	str	r3, [r7, #16]
  if (Status) {
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d009      	beq.n	800d18e <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800d17a:	4a0a      	ldr	r2, [pc, #40]	@ (800d1a4 <_TrySendOverflowPacket+0xd8>)
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800d180:	4b08      	ldr	r3, [pc, #32]	@ (800d1a4 <_TrySendOverflowPacket+0xd8>)
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	3b01      	subs	r3, #1
 800d186:	b2da      	uxtb	r2, r3
 800d188:	4b06      	ldr	r3, [pc, #24]	@ (800d1a4 <_TrySendOverflowPacket+0xd8>)
 800d18a:	701a      	strb	r2, [r3, #0]
 800d18c:	e004      	b.n	800d198 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800d18e:	4b05      	ldr	r3, [pc, #20]	@ (800d1a4 <_TrySendOverflowPacket+0xd8>)
 800d190:	695b      	ldr	r3, [r3, #20]
 800d192:	3301      	adds	r3, #1
 800d194:	4a03      	ldr	r2, [pc, #12]	@ (800d1a4 <_TrySendOverflowPacket+0xd8>)
 800d196:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800d198:	693b      	ldr	r3, [r7, #16]
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3730      	adds	r7, #48	@ 0x30
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	2001e0dc 	.word	0x2001e0dc
 800d1a8:	e0001004 	.word	0xe0001004

0800d1ac <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b08a      	sub	sp, #40	@ 0x28
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800d1b8:	4b63      	ldr	r3, [pc, #396]	@ (800d348 <_SendPacket+0x19c>)
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d010      	beq.n	800d1e2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800d1c0:	4b61      	ldr	r3, [pc, #388]	@ (800d348 <_SendPacket+0x19c>)
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f000 80a1 	beq.w	800d30c <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800d1ca:	4b5f      	ldr	r3, [pc, #380]	@ (800d348 <_SendPacket+0x19c>)
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	2b02      	cmp	r3, #2
 800d1d0:	d109      	bne.n	800d1e6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800d1d2:	f7ff ff7b 	bl	800d0cc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800d1d6:	4b5c      	ldr	r3, [pc, #368]	@ (800d348 <_SendPacket+0x19c>)
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	f040 8098 	bne.w	800d310 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 800d1e0:	e001      	b.n	800d1e6 <_SendPacket+0x3a>
    goto Send;
 800d1e2:	bf00      	nop
 800d1e4:	e000      	b.n	800d1e8 <_SendPacket+0x3c>
Send:
 800d1e6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2b1f      	cmp	r3, #31
 800d1ec:	d809      	bhi.n	800d202 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800d1ee:	4b56      	ldr	r3, [pc, #344]	@ (800d348 <_SendPacket+0x19c>)
 800d1f0:	69da      	ldr	r2, [r3, #28]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	fa22 f303 	lsr.w	r3, r2, r3
 800d1f8:	f003 0301 	and.w	r3, r3, #1
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f040 8089 	bne.w	800d314 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2b17      	cmp	r3, #23
 800d206:	d807      	bhi.n	800d218 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	3b01      	subs	r3, #1
 800d20c:	60fb      	str	r3, [r7, #12]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	b2da      	uxtb	r2, r3
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	701a      	strb	r2, [r3, #0]
 800d216:	e03d      	b.n	800d294 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800d218:	68ba      	ldr	r2, [r7, #8]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	1ad3      	subs	r3, r2, r3
 800d21e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800d220:	69fb      	ldr	r3, [r7, #28]
 800d222:	2b7f      	cmp	r3, #127	@ 0x7f
 800d224:	d912      	bls.n	800d24c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	09da      	lsrs	r2, r3, #7
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	3b01      	subs	r3, #1
 800d22e:	60fb      	str	r3, [r7, #12]
 800d230:	b2d2      	uxtb	r2, r2
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	68fa      	ldr	r2, [r7, #12]
 800d23c:	3a01      	subs	r2, #1
 800d23e:	60fa      	str	r2, [r7, #12]
 800d240:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d244:	b2da      	uxtb	r2, r3
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	701a      	strb	r2, [r3, #0]
 800d24a:	e006      	b.n	800d25a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	3b01      	subs	r3, #1
 800d250:	60fb      	str	r3, [r7, #12]
 800d252:	69fb      	ldr	r3, [r7, #28]
 800d254:	b2da      	uxtb	r2, r3
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d25e:	d912      	bls.n	800d286 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	09da      	lsrs	r2, r3, #7
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	3b01      	subs	r3, #1
 800d268:	60fb      	str	r3, [r7, #12]
 800d26a:	b2d2      	uxtb	r2, r2
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	b2db      	uxtb	r3, r3
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	3a01      	subs	r2, #1
 800d278:	60fa      	str	r2, [r7, #12]
 800d27a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d27e:	b2da      	uxtb	r2, r3
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	701a      	strb	r2, [r3, #0]
 800d284:	e006      	b.n	800d294 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	3b01      	subs	r3, #1
 800d28a:	60fb      	str	r3, [r7, #12]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	b2da      	uxtb	r2, r3
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800d294:	4b2d      	ldr	r3, [pc, #180]	@ (800d34c <_SendPacket+0x1a0>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800d29a:	4b2b      	ldr	r3, [pc, #172]	@ (800d348 <_SendPacket+0x19c>)
 800d29c:	68db      	ldr	r3, [r3, #12]
 800d29e:	69ba      	ldr	r2, [r7, #24]
 800d2a0:	1ad3      	subs	r3, r2, r3
 800d2a2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	623b      	str	r3, [r7, #32]
 800d2ac:	e00b      	b.n	800d2c6 <_SendPacket+0x11a>
 800d2ae:	6a3b      	ldr	r3, [r7, #32]
 800d2b0:	b2da      	uxtb	r2, r3
 800d2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b4:	1c59      	adds	r1, r3, #1
 800d2b6:	6279      	str	r1, [r7, #36]	@ 0x24
 800d2b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d2bc:	b2d2      	uxtb	r2, r2
 800d2be:	701a      	strb	r2, [r3, #0]
 800d2c0:	6a3b      	ldr	r3, [r7, #32]
 800d2c2:	09db      	lsrs	r3, r3, #7
 800d2c4:	623b      	str	r3, [r7, #32]
 800d2c6:	6a3b      	ldr	r3, [r7, #32]
 800d2c8:	2b7f      	cmp	r3, #127	@ 0x7f
 800d2ca:	d8f0      	bhi.n	800d2ae <_SendPacket+0x102>
 800d2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ce:	1c5a      	adds	r2, r3, #1
 800d2d0:	627a      	str	r2, [r7, #36]	@ 0x24
 800d2d2:	6a3a      	ldr	r2, [r7, #32]
 800d2d4:	b2d2      	uxtb	r2, r2
 800d2d6:	701a      	strb	r2, [r3, #0]
 800d2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2da:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800d2dc:	68ba      	ldr	r2, [r7, #8]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	1ad3      	subs	r3, r2, r3
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	68f9      	ldr	r1, [r7, #12]
 800d2e6:	2001      	movs	r0, #1
 800d2e8:	f7ff fcd0 	bl	800cc8c <SEGGER_RTT_WriteSkipNoLock>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	613b      	str	r3, [r7, #16]
  if (Status) {
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d003      	beq.n	800d2fe <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800d2f6:	4a14      	ldr	r2, [pc, #80]	@ (800d348 <_SendPacket+0x19c>)
 800d2f8:	69bb      	ldr	r3, [r7, #24]
 800d2fa:	60d3      	str	r3, [r2, #12]
 800d2fc:	e00b      	b.n	800d316 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800d2fe:	4b12      	ldr	r3, [pc, #72]	@ (800d348 <_SendPacket+0x19c>)
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	3301      	adds	r3, #1
 800d304:	b2da      	uxtb	r2, r3
 800d306:	4b10      	ldr	r3, [pc, #64]	@ (800d348 <_SendPacket+0x19c>)
 800d308:	701a      	strb	r2, [r3, #0]
 800d30a:	e004      	b.n	800d316 <_SendPacket+0x16a>
    goto SendDone;
 800d30c:	bf00      	nop
 800d30e:	e002      	b.n	800d316 <_SendPacket+0x16a>
      goto SendDone;
 800d310:	bf00      	nop
 800d312:	e000      	b.n	800d316 <_SendPacket+0x16a>
      goto SendDone;
 800d314:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800d316:	4b0e      	ldr	r3, [pc, #56]	@ (800d350 <_SendPacket+0x1a4>)
 800d318:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800d31c:	4b0c      	ldr	r3, [pc, #48]	@ (800d350 <_SendPacket+0x1a4>)
 800d31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d322:	429a      	cmp	r2, r3
 800d324:	d00b      	beq.n	800d33e <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800d326:	4b08      	ldr	r3, [pc, #32]	@ (800d348 <_SendPacket+0x19c>)
 800d328:	789b      	ldrb	r3, [r3, #2]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d107      	bne.n	800d33e <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800d32e:	4b06      	ldr	r3, [pc, #24]	@ (800d348 <_SendPacket+0x19c>)
 800d330:	2201      	movs	r2, #1
 800d332:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800d334:	f7ff fe68 	bl	800d008 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800d338:	4b03      	ldr	r3, [pc, #12]	@ (800d348 <_SendPacket+0x19c>)
 800d33a:	2200      	movs	r2, #0
 800d33c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800d33e:	bf00      	nop
 800d340:	3728      	adds	r7, #40	@ 0x28
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	2001e0dc 	.word	0x2001e0dc
 800d34c:	e0001004 	.word	0xe0001004
 800d350:	2000075c 	.word	0x2000075c

0800d354 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800d354:	b580      	push	{r7, lr}
 800d356:	b086      	sub	sp, #24
 800d358:	af02      	add	r7, sp, #8
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	60b9      	str	r1, [r7, #8]
 800d35e:	607a      	str	r2, [r7, #4]
 800d360:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800d362:	2300      	movs	r3, #0
 800d364:	9300      	str	r3, [sp, #0]
 800d366:	4b14      	ldr	r3, [pc, #80]	@ (800d3b8 <SEGGER_SYSVIEW_Init+0x64>)
 800d368:	4a14      	ldr	r2, [pc, #80]	@ (800d3bc <SEGGER_SYSVIEW_Init+0x68>)
 800d36a:	4915      	ldr	r1, [pc, #84]	@ (800d3c0 <SEGGER_SYSVIEW_Init+0x6c>)
 800d36c:	2001      	movs	r0, #1
 800d36e:	f7ff fd1d 	bl	800cdac <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800d372:	2300      	movs	r3, #0
 800d374:	9300      	str	r3, [sp, #0]
 800d376:	2308      	movs	r3, #8
 800d378:	4a12      	ldr	r2, [pc, #72]	@ (800d3c4 <SEGGER_SYSVIEW_Init+0x70>)
 800d37a:	4911      	ldr	r1, [pc, #68]	@ (800d3c0 <SEGGER_SYSVIEW_Init+0x6c>)
 800d37c:	2001      	movs	r0, #1
 800d37e:	f7ff fd7f 	bl	800ce80 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800d382:	4b11      	ldr	r3, [pc, #68]	@ (800d3c8 <SEGGER_SYSVIEW_Init+0x74>)
 800d384:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800d388:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800d38a:	4b10      	ldr	r3, [pc, #64]	@ (800d3cc <SEGGER_SYSVIEW_Init+0x78>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a0e      	ldr	r2, [pc, #56]	@ (800d3c8 <SEGGER_SYSVIEW_Init+0x74>)
 800d390:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800d392:	4a0d      	ldr	r2, [pc, #52]	@ (800d3c8 <SEGGER_SYSVIEW_Init+0x74>)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800d398:	4a0b      	ldr	r2, [pc, #44]	@ (800d3c8 <SEGGER_SYSVIEW_Init+0x74>)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800d39e:	4a0a      	ldr	r2, [pc, #40]	@ (800d3c8 <SEGGER_SYSVIEW_Init+0x74>)
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800d3a4:	4a08      	ldr	r2, [pc, #32]	@ (800d3c8 <SEGGER_SYSVIEW_Init+0x74>)
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800d3aa:	4b07      	ldr	r3, [pc, #28]	@ (800d3c8 <SEGGER_SYSVIEW_Init+0x74>)
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800d3b0:	bf00      	nop
 800d3b2:	3710      	adds	r7, #16
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	0001d4c0 	.word	0x0001d4c0
 800d3bc:	20000c14 	.word	0x20000c14
 800d3c0:	08012ebc 	.word	0x08012ebc
 800d3c4:	2001e0d4 	.word	0x2001e0d4
 800d3c8:	2001e0dc 	.word	0x2001e0dc
 800d3cc:	e0001004 	.word	0xe0001004

0800d3d0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800d3d8:	4a04      	ldr	r2, [pc, #16]	@ (800d3ec <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6113      	str	r3, [r2, #16]
}
 800d3de:	bf00      	nop
 800d3e0:	370c      	adds	r7, #12
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr
 800d3ea:	bf00      	nop
 800d3ec:	2001e0dc 	.word	0x2001e0dc

0800d3f0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d3f8:	f3ef 8311 	mrs	r3, BASEPRI
 800d3fc:	f04f 0120 	mov.w	r1, #32
 800d400:	f381 8811 	msr	BASEPRI, r1
 800d404:	60fb      	str	r3, [r7, #12]
 800d406:	4808      	ldr	r0, [pc, #32]	@ (800d428 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800d408:	f7ff fdf1 	bl	800cfee <_PreparePacket>
 800d40c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	68b9      	ldr	r1, [r7, #8]
 800d412:	68b8      	ldr	r0, [r7, #8]
 800d414:	f7ff feca 	bl	800d1ac <_SendPacket>
  RECORD_END();
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f383 8811 	msr	BASEPRI, r3
}
 800d41e:	bf00      	nop
 800d420:	3710      	adds	r7, #16
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	2001e10c 	.word	0x2001e10c

0800d42c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b088      	sub	sp, #32
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d436:	f3ef 8311 	mrs	r3, BASEPRI
 800d43a:	f04f 0120 	mov.w	r1, #32
 800d43e:	f381 8811 	msr	BASEPRI, r1
 800d442:	617b      	str	r3, [r7, #20]
 800d444:	4816      	ldr	r0, [pc, #88]	@ (800d4a0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800d446:	f7ff fdd2 	bl	800cfee <_PreparePacket>
 800d44a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	61fb      	str	r3, [r7, #28]
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	61bb      	str	r3, [r7, #24]
 800d458:	e00b      	b.n	800d472 <SEGGER_SYSVIEW_RecordU32+0x46>
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	b2da      	uxtb	r2, r3
 800d45e:	69fb      	ldr	r3, [r7, #28]
 800d460:	1c59      	adds	r1, r3, #1
 800d462:	61f9      	str	r1, [r7, #28]
 800d464:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d468:	b2d2      	uxtb	r2, r2
 800d46a:	701a      	strb	r2, [r3, #0]
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	09db      	lsrs	r3, r3, #7
 800d470:	61bb      	str	r3, [r7, #24]
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	2b7f      	cmp	r3, #127	@ 0x7f
 800d476:	d8f0      	bhi.n	800d45a <SEGGER_SYSVIEW_RecordU32+0x2e>
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	1c5a      	adds	r2, r3, #1
 800d47c:	61fa      	str	r2, [r7, #28]
 800d47e:	69ba      	ldr	r2, [r7, #24]
 800d480:	b2d2      	uxtb	r2, r2
 800d482:	701a      	strb	r2, [r3, #0]
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	68f9      	ldr	r1, [r7, #12]
 800d48c:	6938      	ldr	r0, [r7, #16]
 800d48e:	f7ff fe8d 	bl	800d1ac <_SendPacket>
  RECORD_END();
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	f383 8811 	msr	BASEPRI, r3
}
 800d498:	bf00      	nop
 800d49a:	3720      	adds	r7, #32
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	2001e10c 	.word	0x2001e10c

0800d4a4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b08c      	sub	sp, #48	@ 0x30
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800d4b0:	f3ef 8311 	mrs	r3, BASEPRI
 800d4b4:	f04f 0120 	mov.w	r1, #32
 800d4b8:	f381 8811 	msr	BASEPRI, r1
 800d4bc:	61fb      	str	r3, [r7, #28]
 800d4be:	4825      	ldr	r0, [pc, #148]	@ (800d554 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800d4c0:	f7ff fd95 	bl	800cfee <_PreparePacket>
 800d4c4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d4d2:	e00b      	b.n	800d4ec <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800d4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4d6:	b2da      	uxtb	r2, r3
 800d4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4da:	1c59      	adds	r1, r3, #1
 800d4dc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d4de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d4e2:	b2d2      	uxtb	r2, r2
 800d4e4:	701a      	strb	r2, [r3, #0]
 800d4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e8:	09db      	lsrs	r3, r3, #7
 800d4ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800d4f0:	d8f0      	bhi.n	800d4d4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800d4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f4:	1c5a      	adds	r2, r3, #1
 800d4f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d4f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4fa:	b2d2      	uxtb	r2, r2
 800d4fc:	701a      	strb	r2, [r3, #0]
 800d4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d500:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	627b      	str	r3, [r7, #36]	@ 0x24
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	623b      	str	r3, [r7, #32]
 800d50a:	e00b      	b.n	800d524 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800d50c:	6a3b      	ldr	r3, [r7, #32]
 800d50e:	b2da      	uxtb	r2, r3
 800d510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d512:	1c59      	adds	r1, r3, #1
 800d514:	6279      	str	r1, [r7, #36]	@ 0x24
 800d516:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d51a:	b2d2      	uxtb	r2, r2
 800d51c:	701a      	strb	r2, [r3, #0]
 800d51e:	6a3b      	ldr	r3, [r7, #32]
 800d520:	09db      	lsrs	r3, r3, #7
 800d522:	623b      	str	r3, [r7, #32]
 800d524:	6a3b      	ldr	r3, [r7, #32]
 800d526:	2b7f      	cmp	r3, #127	@ 0x7f
 800d528:	d8f0      	bhi.n	800d50c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800d52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d52c:	1c5a      	adds	r2, r3, #1
 800d52e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d530:	6a3a      	ldr	r2, [r7, #32]
 800d532:	b2d2      	uxtb	r2, r2
 800d534:	701a      	strb	r2, [r3, #0]
 800d536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d538:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	6979      	ldr	r1, [r7, #20]
 800d53e:	69b8      	ldr	r0, [r7, #24]
 800d540:	f7ff fe34 	bl	800d1ac <_SendPacket>
  RECORD_END();
 800d544:	69fb      	ldr	r3, [r7, #28]
 800d546:	f383 8811 	msr	BASEPRI, r3
}
 800d54a:	bf00      	nop
 800d54c:	3730      	adds	r7, #48	@ 0x30
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
 800d552:	bf00      	nop
 800d554:	2001e10c 	.word	0x2001e10c

0800d558 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 800d558:	b580      	push	{r7, lr}
 800d55a:	b08c      	sub	sp, #48	@ 0x30
 800d55c:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 800d55e:	4b59      	ldr	r3, [pc, #356]	@ (800d6c4 <SEGGER_SYSVIEW_Start+0x16c>)
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	f040 80aa 	bne.w	800d6bc <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 800d568:	4b56      	ldr	r3, [pc, #344]	@ (800d6c4 <SEGGER_SYSVIEW_Start+0x16c>)
 800d56a:	2201      	movs	r2, #1
 800d56c:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800d56e:	f3ef 8311 	mrs	r3, BASEPRI
 800d572:	f04f 0120 	mov.w	r1, #32
 800d576:	f381 8811 	msr	BASEPRI, r1
 800d57a:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800d57c:	220a      	movs	r2, #10
 800d57e:	4952      	ldr	r1, [pc, #328]	@ (800d6c8 <SEGGER_SYSVIEW_Start+0x170>)
 800d580:	2001      	movs	r0, #1
 800d582:	f7ff fb83 	bl	800cc8c <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800d58c:	200a      	movs	r0, #10
 800d58e:	f7ff ff2f 	bl	800d3f0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800d592:	f3ef 8311 	mrs	r3, BASEPRI
 800d596:	f04f 0120 	mov.w	r1, #32
 800d59a:	f381 8811 	msr	BASEPRI, r1
 800d59e:	60bb      	str	r3, [r7, #8]
 800d5a0:	484a      	ldr	r0, [pc, #296]	@ (800d6cc <SEGGER_SYSVIEW_Start+0x174>)
 800d5a2:	f7ff fd24 	bl	800cfee <_PreparePacket>
 800d5a6:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d5b0:	4b44      	ldr	r3, [pc, #272]	@ (800d6c4 <SEGGER_SYSVIEW_Start+0x16c>)
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d5b6:	e00b      	b.n	800d5d0 <SEGGER_SYSVIEW_Start+0x78>
 800d5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ba:	b2da      	uxtb	r2, r3
 800d5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5be:	1c59      	adds	r1, r3, #1
 800d5c0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d5c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d5c6:	b2d2      	uxtb	r2, r2
 800d5c8:	701a      	strb	r2, [r3, #0]
 800d5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5cc:	09db      	lsrs	r3, r3, #7
 800d5ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d2:	2b7f      	cmp	r3, #127	@ 0x7f
 800d5d4:	d8f0      	bhi.n	800d5b8 <SEGGER_SYSVIEW_Start+0x60>
 800d5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5d8:	1c5a      	adds	r2, r3, #1
 800d5da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d5dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d5de:	b2d2      	uxtb	r2, r2
 800d5e0:	701a      	strb	r2, [r3, #0]
 800d5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5ea:	4b36      	ldr	r3, [pc, #216]	@ (800d6c4 <SEGGER_SYSVIEW_Start+0x16c>)
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	623b      	str	r3, [r7, #32]
 800d5f0:	e00b      	b.n	800d60a <SEGGER_SYSVIEW_Start+0xb2>
 800d5f2:	6a3b      	ldr	r3, [r7, #32]
 800d5f4:	b2da      	uxtb	r2, r3
 800d5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f8:	1c59      	adds	r1, r3, #1
 800d5fa:	6279      	str	r1, [r7, #36]	@ 0x24
 800d5fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d600:	b2d2      	uxtb	r2, r2
 800d602:	701a      	strb	r2, [r3, #0]
 800d604:	6a3b      	ldr	r3, [r7, #32]
 800d606:	09db      	lsrs	r3, r3, #7
 800d608:	623b      	str	r3, [r7, #32]
 800d60a:	6a3b      	ldr	r3, [r7, #32]
 800d60c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d60e:	d8f0      	bhi.n	800d5f2 <SEGGER_SYSVIEW_Start+0x9a>
 800d610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d612:	1c5a      	adds	r2, r3, #1
 800d614:	627a      	str	r2, [r7, #36]	@ 0x24
 800d616:	6a3a      	ldr	r2, [r7, #32]
 800d618:	b2d2      	uxtb	r2, r2
 800d61a:	701a      	strb	r2, [r3, #0]
 800d61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	61fb      	str	r3, [r7, #28]
 800d624:	4b27      	ldr	r3, [pc, #156]	@ (800d6c4 <SEGGER_SYSVIEW_Start+0x16c>)
 800d626:	691b      	ldr	r3, [r3, #16]
 800d628:	61bb      	str	r3, [r7, #24]
 800d62a:	e00b      	b.n	800d644 <SEGGER_SYSVIEW_Start+0xec>
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	b2da      	uxtb	r2, r3
 800d630:	69fb      	ldr	r3, [r7, #28]
 800d632:	1c59      	adds	r1, r3, #1
 800d634:	61f9      	str	r1, [r7, #28]
 800d636:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d63a:	b2d2      	uxtb	r2, r2
 800d63c:	701a      	strb	r2, [r3, #0]
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	09db      	lsrs	r3, r3, #7
 800d642:	61bb      	str	r3, [r7, #24]
 800d644:	69bb      	ldr	r3, [r7, #24]
 800d646:	2b7f      	cmp	r3, #127	@ 0x7f
 800d648:	d8f0      	bhi.n	800d62c <SEGGER_SYSVIEW_Start+0xd4>
 800d64a:	69fb      	ldr	r3, [r7, #28]
 800d64c:	1c5a      	adds	r2, r3, #1
 800d64e:	61fa      	str	r2, [r7, #28]
 800d650:	69ba      	ldr	r2, [r7, #24]
 800d652:	b2d2      	uxtb	r2, r2
 800d654:	701a      	strb	r2, [r3, #0]
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	617b      	str	r3, [r7, #20]
 800d65e:	2302      	movs	r3, #2
 800d660:	613b      	str	r3, [r7, #16]
 800d662:	e00b      	b.n	800d67c <SEGGER_SYSVIEW_Start+0x124>
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	b2da      	uxtb	r2, r3
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	1c59      	adds	r1, r3, #1
 800d66c:	6179      	str	r1, [r7, #20]
 800d66e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d672:	b2d2      	uxtb	r2, r2
 800d674:	701a      	strb	r2, [r3, #0]
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	09db      	lsrs	r3, r3, #7
 800d67a:	613b      	str	r3, [r7, #16]
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d680:	d8f0      	bhi.n	800d664 <SEGGER_SYSVIEW_Start+0x10c>
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	1c5a      	adds	r2, r3, #1
 800d686:	617a      	str	r2, [r7, #20]
 800d688:	693a      	ldr	r2, [r7, #16]
 800d68a:	b2d2      	uxtb	r2, r2
 800d68c:	701a      	strb	r2, [r3, #0]
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800d692:	2218      	movs	r2, #24
 800d694:	6839      	ldr	r1, [r7, #0]
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f7ff fd88 	bl	800d1ac <_SendPacket>
      RECORD_END();
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800d6a2:	4b08      	ldr	r3, [pc, #32]	@ (800d6c4 <SEGGER_SYSVIEW_Start+0x16c>)
 800d6a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d002      	beq.n	800d6b0 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 800d6aa:	4b06      	ldr	r3, [pc, #24]	@ (800d6c4 <SEGGER_SYSVIEW_Start+0x16c>)
 800d6ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6ae:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800d6b0:	f000 f906 	bl	800d8c0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800d6b4:	f000 f8cc 	bl	800d850 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800d6b8:	f000 fa88 	bl	800dbcc <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 800d6bc:	bf00      	nop
 800d6be:	3730      	adds	r7, #48	@ 0x30
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	2001e0dc 	.word	0x2001e0dc
 800d6c8:	08012f48 	.word	0x08012f48
 800d6cc:	2001e10c 	.word	0x2001e10c

0800d6d0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d6d6:	f3ef 8311 	mrs	r3, BASEPRI
 800d6da:	f04f 0120 	mov.w	r1, #32
 800d6de:	f381 8811 	msr	BASEPRI, r1
 800d6e2:	607b      	str	r3, [r7, #4]
 800d6e4:	480b      	ldr	r0, [pc, #44]	@ (800d714 <SEGGER_SYSVIEW_Stop+0x44>)
 800d6e6:	f7ff fc82 	bl	800cfee <_PreparePacket>
 800d6ea:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800d6ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d718 <SEGGER_SYSVIEW_Stop+0x48>)
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d007      	beq.n	800d704 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800d6f4:	220b      	movs	r2, #11
 800d6f6:	6839      	ldr	r1, [r7, #0]
 800d6f8:	6838      	ldr	r0, [r7, #0]
 800d6fa:	f7ff fd57 	bl	800d1ac <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800d6fe:	4b06      	ldr	r3, [pc, #24]	@ (800d718 <SEGGER_SYSVIEW_Stop+0x48>)
 800d700:	2200      	movs	r2, #0
 800d702:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f383 8811 	msr	BASEPRI, r3
}
 800d70a:	bf00      	nop
 800d70c:	3708      	adds	r7, #8
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	2001e10c 	.word	0x2001e10c
 800d718:	2001e0dc 	.word	0x2001e0dc

0800d71c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b08c      	sub	sp, #48	@ 0x30
 800d720:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800d722:	f3ef 8311 	mrs	r3, BASEPRI
 800d726:	f04f 0120 	mov.w	r1, #32
 800d72a:	f381 8811 	msr	BASEPRI, r1
 800d72e:	60fb      	str	r3, [r7, #12]
 800d730:	4845      	ldr	r0, [pc, #276]	@ (800d848 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800d732:	f7ff fc5c 	bl	800cfee <_PreparePacket>
 800d736:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d740:	4b42      	ldr	r3, [pc, #264]	@ (800d84c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d746:	e00b      	b.n	800d760 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800d748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d74a:	b2da      	uxtb	r2, r3
 800d74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d74e:	1c59      	adds	r1, r3, #1
 800d750:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d752:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d756:	b2d2      	uxtb	r2, r2
 800d758:	701a      	strb	r2, [r3, #0]
 800d75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d75c:	09db      	lsrs	r3, r3, #7
 800d75e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d762:	2b7f      	cmp	r3, #127	@ 0x7f
 800d764:	d8f0      	bhi.n	800d748 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800d766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d768:	1c5a      	adds	r2, r3, #1
 800d76a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d76c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d76e:	b2d2      	uxtb	r2, r2
 800d770:	701a      	strb	r2, [r3, #0]
 800d772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d774:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	627b      	str	r3, [r7, #36]	@ 0x24
 800d77a:	4b34      	ldr	r3, [pc, #208]	@ (800d84c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	623b      	str	r3, [r7, #32]
 800d780:	e00b      	b.n	800d79a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800d782:	6a3b      	ldr	r3, [r7, #32]
 800d784:	b2da      	uxtb	r2, r3
 800d786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d788:	1c59      	adds	r1, r3, #1
 800d78a:	6279      	str	r1, [r7, #36]	@ 0x24
 800d78c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d790:	b2d2      	uxtb	r2, r2
 800d792:	701a      	strb	r2, [r3, #0]
 800d794:	6a3b      	ldr	r3, [r7, #32]
 800d796:	09db      	lsrs	r3, r3, #7
 800d798:	623b      	str	r3, [r7, #32]
 800d79a:	6a3b      	ldr	r3, [r7, #32]
 800d79c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d79e:	d8f0      	bhi.n	800d782 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a2:	1c5a      	adds	r2, r3, #1
 800d7a4:	627a      	str	r2, [r7, #36]	@ 0x24
 800d7a6:	6a3a      	ldr	r2, [r7, #32]
 800d7a8:	b2d2      	uxtb	r2, r2
 800d7aa:	701a      	strb	r2, [r3, #0]
 800d7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	61fb      	str	r3, [r7, #28]
 800d7b4:	4b25      	ldr	r3, [pc, #148]	@ (800d84c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d7b6:	691b      	ldr	r3, [r3, #16]
 800d7b8:	61bb      	str	r3, [r7, #24]
 800d7ba:	e00b      	b.n	800d7d4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	b2da      	uxtb	r2, r3
 800d7c0:	69fb      	ldr	r3, [r7, #28]
 800d7c2:	1c59      	adds	r1, r3, #1
 800d7c4:	61f9      	str	r1, [r7, #28]
 800d7c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d7ca:	b2d2      	uxtb	r2, r2
 800d7cc:	701a      	strb	r2, [r3, #0]
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	09db      	lsrs	r3, r3, #7
 800d7d2:	61bb      	str	r3, [r7, #24]
 800d7d4:	69bb      	ldr	r3, [r7, #24]
 800d7d6:	2b7f      	cmp	r3, #127	@ 0x7f
 800d7d8:	d8f0      	bhi.n	800d7bc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	1c5a      	adds	r2, r3, #1
 800d7de:	61fa      	str	r2, [r7, #28]
 800d7e0:	69ba      	ldr	r2, [r7, #24]
 800d7e2:	b2d2      	uxtb	r2, r2
 800d7e4:	701a      	strb	r2, [r3, #0]
 800d7e6:	69fb      	ldr	r3, [r7, #28]
 800d7e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	617b      	str	r3, [r7, #20]
 800d7ee:	2302      	movs	r3, #2
 800d7f0:	613b      	str	r3, [r7, #16]
 800d7f2:	e00b      	b.n	800d80c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	b2da      	uxtb	r2, r3
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	1c59      	adds	r1, r3, #1
 800d7fc:	6179      	str	r1, [r7, #20]
 800d7fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d802:	b2d2      	uxtb	r2, r2
 800d804:	701a      	strb	r2, [r3, #0]
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	09db      	lsrs	r3, r3, #7
 800d80a:	613b      	str	r3, [r7, #16]
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d810:	d8f0      	bhi.n	800d7f4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	1c5a      	adds	r2, r3, #1
 800d816:	617a      	str	r2, [r7, #20]
 800d818:	693a      	ldr	r2, [r7, #16]
 800d81a:	b2d2      	uxtb	r2, r2
 800d81c:	701a      	strb	r2, [r3, #0]
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800d822:	2218      	movs	r2, #24
 800d824:	6879      	ldr	r1, [r7, #4]
 800d826:	68b8      	ldr	r0, [r7, #8]
 800d828:	f7ff fcc0 	bl	800d1ac <_SendPacket>
  RECORD_END();
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800d832:	4b06      	ldr	r3, [pc, #24]	@ (800d84c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d836:	2b00      	cmp	r3, #0
 800d838:	d002      	beq.n	800d840 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800d83a:	4b04      	ldr	r3, [pc, #16]	@ (800d84c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d83e:	4798      	blx	r3
  }
}
 800d840:	bf00      	nop
 800d842:	3730      	adds	r7, #48	@ 0x30
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}
 800d848:	2001e10c 	.word	0x2001e10c
 800d84c:	2001e0dc 	.word	0x2001e0dc

0800d850 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800d850:	b580      	push	{r7, lr}
 800d852:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800d854:	4b07      	ldr	r3, [pc, #28]	@ (800d874 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d856:	6a1b      	ldr	r3, [r3, #32]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d008      	beq.n	800d86e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800d85c:	4b05      	ldr	r3, [pc, #20]	@ (800d874 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d85e:	6a1b      	ldr	r3, [r3, #32]
 800d860:	685b      	ldr	r3, [r3, #4]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d003      	beq.n	800d86e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800d866:	4b03      	ldr	r3, [pc, #12]	@ (800d874 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d868:	6a1b      	ldr	r3, [r3, #32]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	4798      	blx	r3
  }
}
 800d86e:	bf00      	nop
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	2001e0dc 	.word	0x2001e0dc

0800d878 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800d878:	b580      	push	{r7, lr}
 800d87a:	b086      	sub	sp, #24
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d880:	f3ef 8311 	mrs	r3, BASEPRI
 800d884:	f04f 0120 	mov.w	r1, #32
 800d888:	f381 8811 	msr	BASEPRI, r1
 800d88c:	617b      	str	r3, [r7, #20]
 800d88e:	480b      	ldr	r0, [pc, #44]	@ (800d8bc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800d890:	f7ff fbad 	bl	800cfee <_PreparePacket>
 800d894:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d896:	2280      	movs	r2, #128	@ 0x80
 800d898:	6879      	ldr	r1, [r7, #4]
 800d89a:	6938      	ldr	r0, [r7, #16]
 800d89c:	f7ff fb5a 	bl	800cf54 <_EncodeStr>
 800d8a0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800d8a2:	220e      	movs	r2, #14
 800d8a4:	68f9      	ldr	r1, [r7, #12]
 800d8a6:	6938      	ldr	r0, [r7, #16]
 800d8a8:	f7ff fc80 	bl	800d1ac <_SendPacket>
  RECORD_END();
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	f383 8811 	msr	BASEPRI, r3
}
 800d8b2:	bf00      	nop
 800d8b4:	3718      	adds	r7, #24
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	2001e10c 	.word	0x2001e10c

0800d8c0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800d8c0:	b590      	push	{r4, r7, lr}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800d8c6:	4b15      	ldr	r3, [pc, #84]	@ (800d91c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d8c8:	6a1b      	ldr	r3, [r3, #32]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d01a      	beq.n	800d904 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800d8ce:	4b13      	ldr	r3, [pc, #76]	@ (800d91c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d8d0:	6a1b      	ldr	r3, [r3, #32]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d015      	beq.n	800d904 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800d8d8:	4b10      	ldr	r3, [pc, #64]	@ (800d91c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d8da:	6a1b      	ldr	r3, [r3, #32]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4798      	blx	r3
 800d8e0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d8e4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800d8e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d8ea:	f04f 0200 	mov.w	r2, #0
 800d8ee:	f04f 0300 	mov.w	r3, #0
 800d8f2:	000a      	movs	r2, r1
 800d8f4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	4621      	mov	r1, r4
 800d8fc:	200d      	movs	r0, #13
 800d8fe:	f7ff fdd1 	bl	800d4a4 <SEGGER_SYSVIEW_RecordU32x2>
 800d902:	e006      	b.n	800d912 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800d904:	4b06      	ldr	r3, [pc, #24]	@ (800d920 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4619      	mov	r1, r3
 800d90a:	200c      	movs	r0, #12
 800d90c:	f7ff fd8e 	bl	800d42c <SEGGER_SYSVIEW_RecordU32>
  }
}
 800d910:	bf00      	nop
 800d912:	bf00      	nop
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	bd90      	pop	{r4, r7, pc}
 800d91a:	bf00      	nop
 800d91c:	2001e0dc 	.word	0x2001e0dc
 800d920:	e0001004 	.word	0xe0001004

0800d924 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800d924:	b580      	push	{r7, lr}
 800d926:	b086      	sub	sp, #24
 800d928:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d92a:	f3ef 8311 	mrs	r3, BASEPRI
 800d92e:	f04f 0120 	mov.w	r1, #32
 800d932:	f381 8811 	msr	BASEPRI, r1
 800d936:	60fb      	str	r3, [r7, #12]
 800d938:	4819      	ldr	r0, [pc, #100]	@ (800d9a0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800d93a:	f7ff fb58 	bl	800cfee <_PreparePacket>
 800d93e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800d944:	4b17      	ldr	r3, [pc, #92]	@ (800d9a4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d94c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	617b      	str	r3, [r7, #20]
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	613b      	str	r3, [r7, #16]
 800d956:	e00b      	b.n	800d970 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	b2da      	uxtb	r2, r3
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	1c59      	adds	r1, r3, #1
 800d960:	6179      	str	r1, [r7, #20]
 800d962:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d966:	b2d2      	uxtb	r2, r2
 800d968:	701a      	strb	r2, [r3, #0]
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	09db      	lsrs	r3, r3, #7
 800d96e:	613b      	str	r3, [r7, #16]
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	2b7f      	cmp	r3, #127	@ 0x7f
 800d974:	d8f0      	bhi.n	800d958 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	1c5a      	adds	r2, r3, #1
 800d97a:	617a      	str	r2, [r7, #20]
 800d97c:	693a      	ldr	r2, [r7, #16]
 800d97e:	b2d2      	uxtb	r2, r2
 800d980:	701a      	strb	r2, [r3, #0]
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800d986:	2202      	movs	r2, #2
 800d988:	6879      	ldr	r1, [r7, #4]
 800d98a:	68b8      	ldr	r0, [r7, #8]
 800d98c:	f7ff fc0e 	bl	800d1ac <_SendPacket>
  RECORD_END();
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f383 8811 	msr	BASEPRI, r3
}
 800d996:	bf00      	nop
 800d998:	3718      	adds	r7, #24
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	2001e10c 	.word	0x2001e10c
 800d9a4:	e000ed04 	.word	0xe000ed04

0800d9a8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d9ae:	f3ef 8311 	mrs	r3, BASEPRI
 800d9b2:	f04f 0120 	mov.w	r1, #32
 800d9b6:	f381 8811 	msr	BASEPRI, r1
 800d9ba:	607b      	str	r3, [r7, #4]
 800d9bc:	4807      	ldr	r0, [pc, #28]	@ (800d9dc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800d9be:	f7ff fb16 	bl	800cfee <_PreparePacket>
 800d9c2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800d9c4:	2203      	movs	r2, #3
 800d9c6:	6839      	ldr	r1, [r7, #0]
 800d9c8:	6838      	ldr	r0, [r7, #0]
 800d9ca:	f7ff fbef 	bl	800d1ac <_SendPacket>
  RECORD_END();
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f383 8811 	msr	BASEPRI, r3
}
 800d9d4:	bf00      	nop
 800d9d6:	3708      	adds	r7, #8
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	2001e10c 	.word	0x2001e10c

0800d9e0 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*  
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b088      	sub	sp, #32
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d9e8:	f3ef 8311 	mrs	r3, BASEPRI
 800d9ec:	f04f 0120 	mov.w	r1, #32
 800d9f0:	f381 8811 	msr	BASEPRI, r1
 800d9f4:	617b      	str	r3, [r7, #20]
 800d9f6:	4817      	ldr	r0, [pc, #92]	@ (800da54 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 800d9f8:	f7ff faf9 	bl	800cfee <_PreparePacket>
 800d9fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	61fb      	str	r3, [r7, #28]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	61bb      	str	r3, [r7, #24]
 800da0a:	e00b      	b.n	800da24 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	1c59      	adds	r1, r3, #1
 800da14:	61f9      	str	r1, [r7, #28]
 800da16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800da1a:	b2d2      	uxtb	r2, r2
 800da1c:	701a      	strb	r2, [r3, #0]
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	09db      	lsrs	r3, r3, #7
 800da22:	61bb      	str	r3, [r7, #24]
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	2b7f      	cmp	r3, #127	@ 0x7f
 800da28:	d8f0      	bhi.n	800da0c <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	1c5a      	adds	r2, r3, #1
 800da2e:	61fa      	str	r2, [r7, #28]
 800da30:	69ba      	ldr	r2, [r7, #24]
 800da32:	b2d2      	uxtb	r2, r2
 800da34:	701a      	strb	r2, [r3, #0]
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800da3a:	221c      	movs	r2, #28
 800da3c:	68f9      	ldr	r1, [r7, #12]
 800da3e:	6938      	ldr	r0, [r7, #16]
 800da40:	f7ff fbb4 	bl	800d1ac <_SendPacket>
  RECORD_END();
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	f383 8811 	msr	BASEPRI, r3
}
 800da4a:	bf00      	nop
 800da4c:	3720      	adds	r7, #32
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	2001e10c 	.word	0x2001e10c

0800da58 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800da58:	b580      	push	{r7, lr}
 800da5a:	b082      	sub	sp, #8
 800da5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800da5e:	f3ef 8311 	mrs	r3, BASEPRI
 800da62:	f04f 0120 	mov.w	r1, #32
 800da66:	f381 8811 	msr	BASEPRI, r1
 800da6a:	607b      	str	r3, [r7, #4]
 800da6c:	4807      	ldr	r0, [pc, #28]	@ (800da8c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800da6e:	f7ff fabe 	bl	800cfee <_PreparePacket>
 800da72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800da74:	2211      	movs	r2, #17
 800da76:	6839      	ldr	r1, [r7, #0]
 800da78:	6838      	ldr	r0, [r7, #0]
 800da7a:	f7ff fb97 	bl	800d1ac <_SendPacket>
  RECORD_END();
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f383 8811 	msr	BASEPRI, r3
}
 800da84:	bf00      	nop
 800da86:	3708      	adds	r7, #8
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	2001e10c 	.word	0x2001e10c

0800da90 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800da90:	b580      	push	{r7, lr}
 800da92:	b08c      	sub	sp, #48	@ 0x30
 800da94:	af00      	add	r7, sp, #0
 800da96:	4603      	mov	r3, r0
 800da98:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800da9a:	4b3b      	ldr	r3, [pc, #236]	@ (800db88 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d06d      	beq.n	800db7e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800daa2:	4b39      	ldr	r3, [pc, #228]	@ (800db88 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800daa8:	2300      	movs	r3, #0
 800daaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800daac:	e008      	b.n	800dac0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800daae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800dab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d007      	beq.n	800daca <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800daba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dabc:	3301      	adds	r3, #1
 800dabe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dac0:	79fb      	ldrb	r3, [r7, #7]
 800dac2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d3f2      	bcc.n	800daae <SEGGER_SYSVIEW_SendModule+0x1e>
 800dac8:	e000      	b.n	800dacc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800daca:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800dacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d055      	beq.n	800db7e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800dad2:	f3ef 8311 	mrs	r3, BASEPRI
 800dad6:	f04f 0120 	mov.w	r1, #32
 800dada:	f381 8811 	msr	BASEPRI, r1
 800dade:	617b      	str	r3, [r7, #20]
 800dae0:	482a      	ldr	r0, [pc, #168]	@ (800db8c <SEGGER_SYSVIEW_SendModule+0xfc>)
 800dae2:	f7ff fa84 	bl	800cfee <_PreparePacket>
 800dae6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	627b      	str	r3, [r7, #36]	@ 0x24
 800daf0:	79fb      	ldrb	r3, [r7, #7]
 800daf2:	623b      	str	r3, [r7, #32]
 800daf4:	e00b      	b.n	800db0e <SEGGER_SYSVIEW_SendModule+0x7e>
 800daf6:	6a3b      	ldr	r3, [r7, #32]
 800daf8:	b2da      	uxtb	r2, r3
 800dafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dafc:	1c59      	adds	r1, r3, #1
 800dafe:	6279      	str	r1, [r7, #36]	@ 0x24
 800db00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800db04:	b2d2      	uxtb	r2, r2
 800db06:	701a      	strb	r2, [r3, #0]
 800db08:	6a3b      	ldr	r3, [r7, #32]
 800db0a:	09db      	lsrs	r3, r3, #7
 800db0c:	623b      	str	r3, [r7, #32]
 800db0e:	6a3b      	ldr	r3, [r7, #32]
 800db10:	2b7f      	cmp	r3, #127	@ 0x7f
 800db12:	d8f0      	bhi.n	800daf6 <SEGGER_SYSVIEW_SendModule+0x66>
 800db14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db16:	1c5a      	adds	r2, r3, #1
 800db18:	627a      	str	r2, [r7, #36]	@ 0x24
 800db1a:	6a3a      	ldr	r2, [r7, #32]
 800db1c:	b2d2      	uxtb	r2, r2
 800db1e:	701a      	strb	r2, [r3, #0]
 800db20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db22:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	61fb      	str	r3, [r7, #28]
 800db28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db2a:	689b      	ldr	r3, [r3, #8]
 800db2c:	61bb      	str	r3, [r7, #24]
 800db2e:	e00b      	b.n	800db48 <SEGGER_SYSVIEW_SendModule+0xb8>
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	b2da      	uxtb	r2, r3
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	1c59      	adds	r1, r3, #1
 800db38:	61f9      	str	r1, [r7, #28]
 800db3a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800db3e:	b2d2      	uxtb	r2, r2
 800db40:	701a      	strb	r2, [r3, #0]
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	09db      	lsrs	r3, r3, #7
 800db46:	61bb      	str	r3, [r7, #24]
 800db48:	69bb      	ldr	r3, [r7, #24]
 800db4a:	2b7f      	cmp	r3, #127	@ 0x7f
 800db4c:	d8f0      	bhi.n	800db30 <SEGGER_SYSVIEW_SendModule+0xa0>
 800db4e:	69fb      	ldr	r3, [r7, #28]
 800db50:	1c5a      	adds	r2, r3, #1
 800db52:	61fa      	str	r2, [r7, #28]
 800db54:	69ba      	ldr	r2, [r7, #24]
 800db56:	b2d2      	uxtb	r2, r2
 800db58:	701a      	strb	r2, [r3, #0]
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800db5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2280      	movs	r2, #128	@ 0x80
 800db64:	4619      	mov	r1, r3
 800db66:	68f8      	ldr	r0, [r7, #12]
 800db68:	f7ff f9f4 	bl	800cf54 <_EncodeStr>
 800db6c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800db6e:	2216      	movs	r2, #22
 800db70:	68f9      	ldr	r1, [r7, #12]
 800db72:	6938      	ldr	r0, [r7, #16]
 800db74:	f7ff fb1a 	bl	800d1ac <_SendPacket>
      RECORD_END();
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800db7e:	bf00      	nop
 800db80:	3730      	adds	r7, #48	@ 0x30
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	2001e104 	.word	0x2001e104
 800db8c:	2001e10c 	.word	0x2001e10c

0800db90 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800db96:	4b0c      	ldr	r3, [pc, #48]	@ (800dbc8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d00f      	beq.n	800dbbe <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800db9e:	4b0a      	ldr	r3, [pc, #40]	@ (800dbc8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d002      	beq.n	800dbb2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	691b      	ldr	r3, [r3, #16]
 800dbb6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d1f2      	bne.n	800dba4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800dbbe:	bf00      	nop
 800dbc0:	3708      	adds	r7, #8
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	2001e104 	.word	0x2001e104

0800dbcc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b086      	sub	sp, #24
 800dbd0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800dbd2:	f3ef 8311 	mrs	r3, BASEPRI
 800dbd6:	f04f 0120 	mov.w	r1, #32
 800dbda:	f381 8811 	msr	BASEPRI, r1
 800dbde:	60fb      	str	r3, [r7, #12]
 800dbe0:	4817      	ldr	r0, [pc, #92]	@ (800dc40 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800dbe2:	f7ff fa04 	bl	800cfee <_PreparePacket>
 800dbe6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	617b      	str	r3, [r7, #20]
 800dbf0:	4b14      	ldr	r3, [pc, #80]	@ (800dc44 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	613b      	str	r3, [r7, #16]
 800dbf6:	e00b      	b.n	800dc10 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	b2da      	uxtb	r2, r3
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	1c59      	adds	r1, r3, #1
 800dc00:	6179      	str	r1, [r7, #20]
 800dc02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dc06:	b2d2      	uxtb	r2, r2
 800dc08:	701a      	strb	r2, [r3, #0]
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	09db      	lsrs	r3, r3, #7
 800dc0e:	613b      	str	r3, [r7, #16]
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	2b7f      	cmp	r3, #127	@ 0x7f
 800dc14:	d8f0      	bhi.n	800dbf8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	1c5a      	adds	r2, r3, #1
 800dc1a:	617a      	str	r2, [r7, #20]
 800dc1c:	693a      	ldr	r2, [r7, #16]
 800dc1e:	b2d2      	uxtb	r2, r2
 800dc20:	701a      	strb	r2, [r3, #0]
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800dc26:	221b      	movs	r2, #27
 800dc28:	6879      	ldr	r1, [r7, #4]
 800dc2a:	68b8      	ldr	r0, [r7, #8]
 800dc2c:	f7ff fabe 	bl	800d1ac <_SendPacket>
  RECORD_END();
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f383 8811 	msr	BASEPRI, r3
}
 800dc36:	bf00      	nop
 800dc38:	3718      	adds	r7, #24
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	2001e10c 	.word	0x2001e10c
 800dc44:	2001e108 	.word	0x2001e108

0800dc48 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",O=NoOS,D="SYSVIEW_DEVICE_NAME);
 800dc4c:	4803      	ldr	r0, [pc, #12]	@ (800dc5c <_cbSendSystemDesc+0x14>)
 800dc4e:	f7ff fe13 	bl	800d878 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800dc52:	4803      	ldr	r0, [pc, #12]	@ (800dc60 <_cbSendSystemDesc+0x18>)
 800dc54:	f7ff fe10 	bl	800d878 <SEGGER_SYSVIEW_SendSysDesc>
}
 800dc58:	bf00      	nop
 800dc5a:	bd80      	pop	{r7, pc}
 800dc5c:	08012ec4 	.word	0x08012ec4
 800dc60:	08012eec 	.word	0x08012eec

0800dc64 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800dc64:	b580      	push	{r7, lr}
 800dc66:	af00      	add	r7, sp, #0
#endif
  //
  //  The cycle counter must be activated in order
  //  to use time related functions.
  //
  if ((DWT_CTRL & NOCYCCNT_BIT) == 0) {       // Cycle counter supported?
 800dc68:	4b0f      	ldr	r3, [pc, #60]	@ (800dca8 <SEGGER_SYSVIEW_Conf+0x44>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d10b      	bne.n	800dc8c <SEGGER_SYSVIEW_Conf+0x28>
    if ((DWT_CTRL & CYCCNTENA_BIT) == 0) {    // Cycle counter not enabled?
 800dc74:	4b0c      	ldr	r3, [pc, #48]	@ (800dca8 <SEGGER_SYSVIEW_Conf+0x44>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f003 0301 	and.w	r3, r3, #1
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d105      	bne.n	800dc8c <SEGGER_SYSVIEW_Conf+0x28>
      DWT_CTRL |= CYCCNTENA_BIT;              // Enable Cycle counter
 800dc80:	4b09      	ldr	r3, [pc, #36]	@ (800dca8 <SEGGER_SYSVIEW_Conf+0x44>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a08      	ldr	r2, [pc, #32]	@ (800dca8 <SEGGER_SYSVIEW_Conf+0x44>)
 800dc86:	f043 0301 	orr.w	r3, r3, #1
 800dc8a:	6013      	str	r3, [r2, #0]
    }
  }
#endif
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800dc8c:	4b07      	ldr	r3, [pc, #28]	@ (800dcac <SEGGER_SYSVIEW_Conf+0x48>)
 800dc8e:	6818      	ldr	r0, [r3, #0]
 800dc90:	4b07      	ldr	r3, [pc, #28]	@ (800dcb0 <SEGGER_SYSVIEW_Conf+0x4c>)
 800dc92:	2200      	movs	r2, #0
 800dc94:	4907      	ldr	r1, [pc, #28]	@ (800dcb4 <SEGGER_SYSVIEW_Conf+0x50>)
 800dc96:	f7ff fb5d 	bl	800d354 <SEGGER_SYSVIEW_Init>
                      0, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800dc9a:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 800dc9e:	f7ff fb97 	bl	800d3d0 <SEGGER_SYSVIEW_SetRAMBase>
}
 800dca2:	bf00      	nop
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	e0001000 	.word	0xe0001000
 800dcac:	20000000 	.word	0x20000000
 800dcb0:	0800dc49 	.word	0x0800dc49
 800dcb4:	00989680 	.word	0x00989680

0800dcb8 <_ZdlPv>:
 800dcb8:	f000 b836 	b.w	800dd28 <free>

0800dcbc <_ZdlPvj>:
 800dcbc:	f7ff bffc 	b.w	800dcb8 <_ZdlPv>

0800dcc0 <_Znwj>:
 800dcc0:	2801      	cmp	r0, #1
 800dcc2:	bf38      	it	cc
 800dcc4:	2001      	movcc	r0, #1
 800dcc6:	b510      	push	{r4, lr}
 800dcc8:	4604      	mov	r4, r0
 800dcca:	4620      	mov	r0, r4
 800dccc:	f000 f824 	bl	800dd18 <malloc>
 800dcd0:	b100      	cbz	r0, 800dcd4 <_Znwj+0x14>
 800dcd2:	bd10      	pop	{r4, pc}
 800dcd4:	f000 f810 	bl	800dcf8 <_ZSt15get_new_handlerv>
 800dcd8:	b908      	cbnz	r0, 800dcde <_Znwj+0x1e>
 800dcda:	f000 f815 	bl	800dd08 <abort>
 800dcde:	4780      	blx	r0
 800dce0:	e7f3      	b.n	800dcca <_Znwj+0xa>

0800dce2 <_Znaj>:
 800dce2:	f7ff bfed 	b.w	800dcc0 <_Znwj>

0800dce6 <_ZSt17__throw_bad_allocv>:
 800dce6:	b508      	push	{r3, lr}
 800dce8:	f000 f80e 	bl	800dd08 <abort>

0800dcec <_ZSt28__throw_bad_array_new_lengthv>:
 800dcec:	b508      	push	{r3, lr}
 800dcee:	f000 f80b 	bl	800dd08 <abort>

0800dcf2 <_ZSt20__throw_length_errorPKc>:
 800dcf2:	b508      	push	{r3, lr}
 800dcf4:	f000 f808 	bl	800dd08 <abort>

0800dcf8 <_ZSt15get_new_handlerv>:
 800dcf8:	4b02      	ldr	r3, [pc, #8]	@ (800dd04 <_ZSt15get_new_handlerv+0xc>)
 800dcfa:	6818      	ldr	r0, [r3, #0]
 800dcfc:	f3bf 8f5b 	dmb	ish
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	2001e1f0 	.word	0x2001e1f0

0800dd08 <abort>:
 800dd08:	b508      	push	{r3, lr}
 800dd0a:	2006      	movs	r0, #6
 800dd0c:	f001 f9b4 	bl	800f078 <raise>
 800dd10:	2001      	movs	r0, #1
 800dd12:	f7f6 f973 	bl	8003ffc <_exit>
	...

0800dd18 <malloc>:
 800dd18:	4b02      	ldr	r3, [pc, #8]	@ (800dd24 <malloc+0xc>)
 800dd1a:	4601      	mov	r1, r0
 800dd1c:	6818      	ldr	r0, [r3, #0]
 800dd1e:	f000 b82d 	b.w	800dd7c <_malloc_r>
 800dd22:	bf00      	nop
 800dd24:	20000018 	.word	0x20000018

0800dd28 <free>:
 800dd28:	4b02      	ldr	r3, [pc, #8]	@ (800dd34 <free+0xc>)
 800dd2a:	4601      	mov	r1, r0
 800dd2c:	6818      	ldr	r0, [r3, #0]
 800dd2e:	f002 b8a7 	b.w	800fe80 <_free_r>
 800dd32:	bf00      	nop
 800dd34:	20000018 	.word	0x20000018

0800dd38 <sbrk_aligned>:
 800dd38:	b570      	push	{r4, r5, r6, lr}
 800dd3a:	4e0f      	ldr	r6, [pc, #60]	@ (800dd78 <sbrk_aligned+0x40>)
 800dd3c:	460c      	mov	r4, r1
 800dd3e:	6831      	ldr	r1, [r6, #0]
 800dd40:	4605      	mov	r5, r0
 800dd42:	b911      	cbnz	r1, 800dd4a <sbrk_aligned+0x12>
 800dd44:	f001 f9ec 	bl	800f120 <_sbrk_r>
 800dd48:	6030      	str	r0, [r6, #0]
 800dd4a:	4621      	mov	r1, r4
 800dd4c:	4628      	mov	r0, r5
 800dd4e:	f001 f9e7 	bl	800f120 <_sbrk_r>
 800dd52:	1c43      	adds	r3, r0, #1
 800dd54:	d103      	bne.n	800dd5e <sbrk_aligned+0x26>
 800dd56:	f04f 34ff 	mov.w	r4, #4294967295
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	bd70      	pop	{r4, r5, r6, pc}
 800dd5e:	1cc4      	adds	r4, r0, #3
 800dd60:	f024 0403 	bic.w	r4, r4, #3
 800dd64:	42a0      	cmp	r0, r4
 800dd66:	d0f8      	beq.n	800dd5a <sbrk_aligned+0x22>
 800dd68:	1a21      	subs	r1, r4, r0
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	f001 f9d8 	bl	800f120 <_sbrk_r>
 800dd70:	3001      	adds	r0, #1
 800dd72:	d1f2      	bne.n	800dd5a <sbrk_aligned+0x22>
 800dd74:	e7ef      	b.n	800dd56 <sbrk_aligned+0x1e>
 800dd76:	bf00      	nop
 800dd78:	2001e1f4 	.word	0x2001e1f4

0800dd7c <_malloc_r>:
 800dd7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd80:	1ccd      	adds	r5, r1, #3
 800dd82:	f025 0503 	bic.w	r5, r5, #3
 800dd86:	3508      	adds	r5, #8
 800dd88:	2d0c      	cmp	r5, #12
 800dd8a:	bf38      	it	cc
 800dd8c:	250c      	movcc	r5, #12
 800dd8e:	2d00      	cmp	r5, #0
 800dd90:	4606      	mov	r6, r0
 800dd92:	db01      	blt.n	800dd98 <_malloc_r+0x1c>
 800dd94:	42a9      	cmp	r1, r5
 800dd96:	d904      	bls.n	800dda2 <_malloc_r+0x26>
 800dd98:	230c      	movs	r3, #12
 800dd9a:	6033      	str	r3, [r6, #0]
 800dd9c:	2000      	movs	r0, #0
 800dd9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dda2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800de78 <_malloc_r+0xfc>
 800dda6:	f000 f869 	bl	800de7c <__malloc_lock>
 800ddaa:	f8d8 3000 	ldr.w	r3, [r8]
 800ddae:	461c      	mov	r4, r3
 800ddb0:	bb44      	cbnz	r4, 800de04 <_malloc_r+0x88>
 800ddb2:	4629      	mov	r1, r5
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	f7ff ffbf 	bl	800dd38 <sbrk_aligned>
 800ddba:	1c43      	adds	r3, r0, #1
 800ddbc:	4604      	mov	r4, r0
 800ddbe:	d158      	bne.n	800de72 <_malloc_r+0xf6>
 800ddc0:	f8d8 4000 	ldr.w	r4, [r8]
 800ddc4:	4627      	mov	r7, r4
 800ddc6:	2f00      	cmp	r7, #0
 800ddc8:	d143      	bne.n	800de52 <_malloc_r+0xd6>
 800ddca:	2c00      	cmp	r4, #0
 800ddcc:	d04b      	beq.n	800de66 <_malloc_r+0xea>
 800ddce:	6823      	ldr	r3, [r4, #0]
 800ddd0:	4639      	mov	r1, r7
 800ddd2:	4630      	mov	r0, r6
 800ddd4:	eb04 0903 	add.w	r9, r4, r3
 800ddd8:	f001 f9a2 	bl	800f120 <_sbrk_r>
 800dddc:	4581      	cmp	r9, r0
 800ddde:	d142      	bne.n	800de66 <_malloc_r+0xea>
 800dde0:	6821      	ldr	r1, [r4, #0]
 800dde2:	1a6d      	subs	r5, r5, r1
 800dde4:	4629      	mov	r1, r5
 800dde6:	4630      	mov	r0, r6
 800dde8:	f7ff ffa6 	bl	800dd38 <sbrk_aligned>
 800ddec:	3001      	adds	r0, #1
 800ddee:	d03a      	beq.n	800de66 <_malloc_r+0xea>
 800ddf0:	6823      	ldr	r3, [r4, #0]
 800ddf2:	442b      	add	r3, r5
 800ddf4:	6023      	str	r3, [r4, #0]
 800ddf6:	f8d8 3000 	ldr.w	r3, [r8]
 800ddfa:	685a      	ldr	r2, [r3, #4]
 800ddfc:	bb62      	cbnz	r2, 800de58 <_malloc_r+0xdc>
 800ddfe:	f8c8 7000 	str.w	r7, [r8]
 800de02:	e00f      	b.n	800de24 <_malloc_r+0xa8>
 800de04:	6822      	ldr	r2, [r4, #0]
 800de06:	1b52      	subs	r2, r2, r5
 800de08:	d420      	bmi.n	800de4c <_malloc_r+0xd0>
 800de0a:	2a0b      	cmp	r2, #11
 800de0c:	d917      	bls.n	800de3e <_malloc_r+0xc2>
 800de0e:	1961      	adds	r1, r4, r5
 800de10:	42a3      	cmp	r3, r4
 800de12:	6025      	str	r5, [r4, #0]
 800de14:	bf18      	it	ne
 800de16:	6059      	strne	r1, [r3, #4]
 800de18:	6863      	ldr	r3, [r4, #4]
 800de1a:	bf08      	it	eq
 800de1c:	f8c8 1000 	streq.w	r1, [r8]
 800de20:	5162      	str	r2, [r4, r5]
 800de22:	604b      	str	r3, [r1, #4]
 800de24:	4630      	mov	r0, r6
 800de26:	f000 f82f 	bl	800de88 <__malloc_unlock>
 800de2a:	f104 000b 	add.w	r0, r4, #11
 800de2e:	1d23      	adds	r3, r4, #4
 800de30:	f020 0007 	bic.w	r0, r0, #7
 800de34:	1ac2      	subs	r2, r0, r3
 800de36:	bf1c      	itt	ne
 800de38:	1a1b      	subne	r3, r3, r0
 800de3a:	50a3      	strne	r3, [r4, r2]
 800de3c:	e7af      	b.n	800dd9e <_malloc_r+0x22>
 800de3e:	6862      	ldr	r2, [r4, #4]
 800de40:	42a3      	cmp	r3, r4
 800de42:	bf0c      	ite	eq
 800de44:	f8c8 2000 	streq.w	r2, [r8]
 800de48:	605a      	strne	r2, [r3, #4]
 800de4a:	e7eb      	b.n	800de24 <_malloc_r+0xa8>
 800de4c:	4623      	mov	r3, r4
 800de4e:	6864      	ldr	r4, [r4, #4]
 800de50:	e7ae      	b.n	800ddb0 <_malloc_r+0x34>
 800de52:	463c      	mov	r4, r7
 800de54:	687f      	ldr	r7, [r7, #4]
 800de56:	e7b6      	b.n	800ddc6 <_malloc_r+0x4a>
 800de58:	461a      	mov	r2, r3
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	42a3      	cmp	r3, r4
 800de5e:	d1fb      	bne.n	800de58 <_malloc_r+0xdc>
 800de60:	2300      	movs	r3, #0
 800de62:	6053      	str	r3, [r2, #4]
 800de64:	e7de      	b.n	800de24 <_malloc_r+0xa8>
 800de66:	230c      	movs	r3, #12
 800de68:	6033      	str	r3, [r6, #0]
 800de6a:	4630      	mov	r0, r6
 800de6c:	f000 f80c 	bl	800de88 <__malloc_unlock>
 800de70:	e794      	b.n	800dd9c <_malloc_r+0x20>
 800de72:	6005      	str	r5, [r0, #0]
 800de74:	e7d6      	b.n	800de24 <_malloc_r+0xa8>
 800de76:	bf00      	nop
 800de78:	2001e1f8 	.word	0x2001e1f8

0800de7c <__malloc_lock>:
 800de7c:	4801      	ldr	r0, [pc, #4]	@ (800de84 <__malloc_lock+0x8>)
 800de7e:	f001 b99c 	b.w	800f1ba <__retarget_lock_acquire_recursive>
 800de82:	bf00      	nop
 800de84:	2001e33c 	.word	0x2001e33c

0800de88 <__malloc_unlock>:
 800de88:	4801      	ldr	r0, [pc, #4]	@ (800de90 <__malloc_unlock+0x8>)
 800de8a:	f001 b997 	b.w	800f1bc <__retarget_lock_release_recursive>
 800de8e:	bf00      	nop
 800de90:	2001e33c 	.word	0x2001e33c

0800de94 <__cvt>:
 800de94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de98:	ec57 6b10 	vmov	r6, r7, d0
 800de9c:	2f00      	cmp	r7, #0
 800de9e:	460c      	mov	r4, r1
 800dea0:	4619      	mov	r1, r3
 800dea2:	463b      	mov	r3, r7
 800dea4:	bfbb      	ittet	lt
 800dea6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800deaa:	461f      	movlt	r7, r3
 800deac:	2300      	movge	r3, #0
 800deae:	232d      	movlt	r3, #45	@ 0x2d
 800deb0:	700b      	strb	r3, [r1, #0]
 800deb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800deb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800deb8:	4691      	mov	r9, r2
 800deba:	f023 0820 	bic.w	r8, r3, #32
 800debe:	bfbc      	itt	lt
 800dec0:	4632      	movlt	r2, r6
 800dec2:	4616      	movlt	r6, r2
 800dec4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dec8:	d005      	beq.n	800ded6 <__cvt+0x42>
 800deca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800dece:	d100      	bne.n	800ded2 <__cvt+0x3e>
 800ded0:	3401      	adds	r4, #1
 800ded2:	2102      	movs	r1, #2
 800ded4:	e000      	b.n	800ded8 <__cvt+0x44>
 800ded6:	2103      	movs	r1, #3
 800ded8:	ab03      	add	r3, sp, #12
 800deda:	9301      	str	r3, [sp, #4]
 800dedc:	ab02      	add	r3, sp, #8
 800dede:	9300      	str	r3, [sp, #0]
 800dee0:	ec47 6b10 	vmov	d0, r6, r7
 800dee4:	4653      	mov	r3, sl
 800dee6:	4622      	mov	r2, r4
 800dee8:	f001 fa06 	bl	800f2f8 <_dtoa_r>
 800deec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800def0:	4605      	mov	r5, r0
 800def2:	d119      	bne.n	800df28 <__cvt+0x94>
 800def4:	f019 0f01 	tst.w	r9, #1
 800def8:	d00e      	beq.n	800df18 <__cvt+0x84>
 800defa:	eb00 0904 	add.w	r9, r0, r4
 800defe:	2200      	movs	r2, #0
 800df00:	2300      	movs	r3, #0
 800df02:	4630      	mov	r0, r6
 800df04:	4639      	mov	r1, r7
 800df06:	f7f2 fe17 	bl	8000b38 <__aeabi_dcmpeq>
 800df0a:	b108      	cbz	r0, 800df10 <__cvt+0x7c>
 800df0c:	f8cd 900c 	str.w	r9, [sp, #12]
 800df10:	2230      	movs	r2, #48	@ 0x30
 800df12:	9b03      	ldr	r3, [sp, #12]
 800df14:	454b      	cmp	r3, r9
 800df16:	d31e      	bcc.n	800df56 <__cvt+0xc2>
 800df18:	9b03      	ldr	r3, [sp, #12]
 800df1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df1c:	1b5b      	subs	r3, r3, r5
 800df1e:	4628      	mov	r0, r5
 800df20:	6013      	str	r3, [r2, #0]
 800df22:	b004      	add	sp, #16
 800df24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800df2c:	eb00 0904 	add.w	r9, r0, r4
 800df30:	d1e5      	bne.n	800defe <__cvt+0x6a>
 800df32:	7803      	ldrb	r3, [r0, #0]
 800df34:	2b30      	cmp	r3, #48	@ 0x30
 800df36:	d10a      	bne.n	800df4e <__cvt+0xba>
 800df38:	2200      	movs	r2, #0
 800df3a:	2300      	movs	r3, #0
 800df3c:	4630      	mov	r0, r6
 800df3e:	4639      	mov	r1, r7
 800df40:	f7f2 fdfa 	bl	8000b38 <__aeabi_dcmpeq>
 800df44:	b918      	cbnz	r0, 800df4e <__cvt+0xba>
 800df46:	f1c4 0401 	rsb	r4, r4, #1
 800df4a:	f8ca 4000 	str.w	r4, [sl]
 800df4e:	f8da 3000 	ldr.w	r3, [sl]
 800df52:	4499      	add	r9, r3
 800df54:	e7d3      	b.n	800defe <__cvt+0x6a>
 800df56:	1c59      	adds	r1, r3, #1
 800df58:	9103      	str	r1, [sp, #12]
 800df5a:	701a      	strb	r2, [r3, #0]
 800df5c:	e7d9      	b.n	800df12 <__cvt+0x7e>

0800df5e <__exponent>:
 800df5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df60:	2900      	cmp	r1, #0
 800df62:	bfba      	itte	lt
 800df64:	4249      	neglt	r1, r1
 800df66:	232d      	movlt	r3, #45	@ 0x2d
 800df68:	232b      	movge	r3, #43	@ 0x2b
 800df6a:	2909      	cmp	r1, #9
 800df6c:	7002      	strb	r2, [r0, #0]
 800df6e:	7043      	strb	r3, [r0, #1]
 800df70:	dd29      	ble.n	800dfc6 <__exponent+0x68>
 800df72:	f10d 0307 	add.w	r3, sp, #7
 800df76:	461d      	mov	r5, r3
 800df78:	270a      	movs	r7, #10
 800df7a:	461a      	mov	r2, r3
 800df7c:	fbb1 f6f7 	udiv	r6, r1, r7
 800df80:	fb07 1416 	mls	r4, r7, r6, r1
 800df84:	3430      	adds	r4, #48	@ 0x30
 800df86:	f802 4c01 	strb.w	r4, [r2, #-1]
 800df8a:	460c      	mov	r4, r1
 800df8c:	2c63      	cmp	r4, #99	@ 0x63
 800df8e:	f103 33ff 	add.w	r3, r3, #4294967295
 800df92:	4631      	mov	r1, r6
 800df94:	dcf1      	bgt.n	800df7a <__exponent+0x1c>
 800df96:	3130      	adds	r1, #48	@ 0x30
 800df98:	1e94      	subs	r4, r2, #2
 800df9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800df9e:	1c41      	adds	r1, r0, #1
 800dfa0:	4623      	mov	r3, r4
 800dfa2:	42ab      	cmp	r3, r5
 800dfa4:	d30a      	bcc.n	800dfbc <__exponent+0x5e>
 800dfa6:	f10d 0309 	add.w	r3, sp, #9
 800dfaa:	1a9b      	subs	r3, r3, r2
 800dfac:	42ac      	cmp	r4, r5
 800dfae:	bf88      	it	hi
 800dfb0:	2300      	movhi	r3, #0
 800dfb2:	3302      	adds	r3, #2
 800dfb4:	4403      	add	r3, r0
 800dfb6:	1a18      	subs	r0, r3, r0
 800dfb8:	b003      	add	sp, #12
 800dfba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dfc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dfc4:	e7ed      	b.n	800dfa2 <__exponent+0x44>
 800dfc6:	2330      	movs	r3, #48	@ 0x30
 800dfc8:	3130      	adds	r1, #48	@ 0x30
 800dfca:	7083      	strb	r3, [r0, #2]
 800dfcc:	70c1      	strb	r1, [r0, #3]
 800dfce:	1d03      	adds	r3, r0, #4
 800dfd0:	e7f1      	b.n	800dfb6 <__exponent+0x58>
	...

0800dfd4 <_printf_float>:
 800dfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd8:	b08d      	sub	sp, #52	@ 0x34
 800dfda:	460c      	mov	r4, r1
 800dfdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dfe0:	4616      	mov	r6, r2
 800dfe2:	461f      	mov	r7, r3
 800dfe4:	4605      	mov	r5, r0
 800dfe6:	f001 f84f 	bl	800f088 <_localeconv_r>
 800dfea:	6803      	ldr	r3, [r0, #0]
 800dfec:	9304      	str	r3, [sp, #16]
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7f2 f976 	bl	80002e0 <strlen>
 800dff4:	2300      	movs	r3, #0
 800dff6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dff8:	f8d8 3000 	ldr.w	r3, [r8]
 800dffc:	9005      	str	r0, [sp, #20]
 800dffe:	3307      	adds	r3, #7
 800e000:	f023 0307 	bic.w	r3, r3, #7
 800e004:	f103 0208 	add.w	r2, r3, #8
 800e008:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e00c:	f8d4 b000 	ldr.w	fp, [r4]
 800e010:	f8c8 2000 	str.w	r2, [r8]
 800e014:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e018:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e01c:	9307      	str	r3, [sp, #28]
 800e01e:	f8cd 8018 	str.w	r8, [sp, #24]
 800e022:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e02a:	4b9c      	ldr	r3, [pc, #624]	@ (800e29c <_printf_float+0x2c8>)
 800e02c:	f04f 32ff 	mov.w	r2, #4294967295
 800e030:	f7f2 fdb4 	bl	8000b9c <__aeabi_dcmpun>
 800e034:	bb70      	cbnz	r0, 800e094 <_printf_float+0xc0>
 800e036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e03a:	4b98      	ldr	r3, [pc, #608]	@ (800e29c <_printf_float+0x2c8>)
 800e03c:	f04f 32ff 	mov.w	r2, #4294967295
 800e040:	f7f2 fd8e 	bl	8000b60 <__aeabi_dcmple>
 800e044:	bb30      	cbnz	r0, 800e094 <_printf_float+0xc0>
 800e046:	2200      	movs	r2, #0
 800e048:	2300      	movs	r3, #0
 800e04a:	4640      	mov	r0, r8
 800e04c:	4649      	mov	r1, r9
 800e04e:	f7f2 fd7d 	bl	8000b4c <__aeabi_dcmplt>
 800e052:	b110      	cbz	r0, 800e05a <_printf_float+0x86>
 800e054:	232d      	movs	r3, #45	@ 0x2d
 800e056:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e05a:	4a91      	ldr	r2, [pc, #580]	@ (800e2a0 <_printf_float+0x2cc>)
 800e05c:	4b91      	ldr	r3, [pc, #580]	@ (800e2a4 <_printf_float+0x2d0>)
 800e05e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e062:	bf94      	ite	ls
 800e064:	4690      	movls	r8, r2
 800e066:	4698      	movhi	r8, r3
 800e068:	2303      	movs	r3, #3
 800e06a:	6123      	str	r3, [r4, #16]
 800e06c:	f02b 0304 	bic.w	r3, fp, #4
 800e070:	6023      	str	r3, [r4, #0]
 800e072:	f04f 0900 	mov.w	r9, #0
 800e076:	9700      	str	r7, [sp, #0]
 800e078:	4633      	mov	r3, r6
 800e07a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e07c:	4621      	mov	r1, r4
 800e07e:	4628      	mov	r0, r5
 800e080:	f000 f9d2 	bl	800e428 <_printf_common>
 800e084:	3001      	adds	r0, #1
 800e086:	f040 808d 	bne.w	800e1a4 <_printf_float+0x1d0>
 800e08a:	f04f 30ff 	mov.w	r0, #4294967295
 800e08e:	b00d      	add	sp, #52	@ 0x34
 800e090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e094:	4642      	mov	r2, r8
 800e096:	464b      	mov	r3, r9
 800e098:	4640      	mov	r0, r8
 800e09a:	4649      	mov	r1, r9
 800e09c:	f7f2 fd7e 	bl	8000b9c <__aeabi_dcmpun>
 800e0a0:	b140      	cbz	r0, 800e0b4 <_printf_float+0xe0>
 800e0a2:	464b      	mov	r3, r9
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	bfbc      	itt	lt
 800e0a8:	232d      	movlt	r3, #45	@ 0x2d
 800e0aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e0ae:	4a7e      	ldr	r2, [pc, #504]	@ (800e2a8 <_printf_float+0x2d4>)
 800e0b0:	4b7e      	ldr	r3, [pc, #504]	@ (800e2ac <_printf_float+0x2d8>)
 800e0b2:	e7d4      	b.n	800e05e <_printf_float+0x8a>
 800e0b4:	6863      	ldr	r3, [r4, #4]
 800e0b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e0ba:	9206      	str	r2, [sp, #24]
 800e0bc:	1c5a      	adds	r2, r3, #1
 800e0be:	d13b      	bne.n	800e138 <_printf_float+0x164>
 800e0c0:	2306      	movs	r3, #6
 800e0c2:	6063      	str	r3, [r4, #4]
 800e0c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	6022      	str	r2, [r4, #0]
 800e0cc:	9303      	str	r3, [sp, #12]
 800e0ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800e0d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e0d4:	ab09      	add	r3, sp, #36	@ 0x24
 800e0d6:	9300      	str	r3, [sp, #0]
 800e0d8:	6861      	ldr	r1, [r4, #4]
 800e0da:	ec49 8b10 	vmov	d0, r8, r9
 800e0de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	f7ff fed6 	bl	800de94 <__cvt>
 800e0e8:	9b06      	ldr	r3, [sp, #24]
 800e0ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e0ec:	2b47      	cmp	r3, #71	@ 0x47
 800e0ee:	4680      	mov	r8, r0
 800e0f0:	d129      	bne.n	800e146 <_printf_float+0x172>
 800e0f2:	1cc8      	adds	r0, r1, #3
 800e0f4:	db02      	blt.n	800e0fc <_printf_float+0x128>
 800e0f6:	6863      	ldr	r3, [r4, #4]
 800e0f8:	4299      	cmp	r1, r3
 800e0fa:	dd41      	ble.n	800e180 <_printf_float+0x1ac>
 800e0fc:	f1aa 0a02 	sub.w	sl, sl, #2
 800e100:	fa5f fa8a 	uxtb.w	sl, sl
 800e104:	3901      	subs	r1, #1
 800e106:	4652      	mov	r2, sl
 800e108:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e10c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e10e:	f7ff ff26 	bl	800df5e <__exponent>
 800e112:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e114:	1813      	adds	r3, r2, r0
 800e116:	2a01      	cmp	r2, #1
 800e118:	4681      	mov	r9, r0
 800e11a:	6123      	str	r3, [r4, #16]
 800e11c:	dc02      	bgt.n	800e124 <_printf_float+0x150>
 800e11e:	6822      	ldr	r2, [r4, #0]
 800e120:	07d2      	lsls	r2, r2, #31
 800e122:	d501      	bpl.n	800e128 <_printf_float+0x154>
 800e124:	3301      	adds	r3, #1
 800e126:	6123      	str	r3, [r4, #16]
 800e128:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d0a2      	beq.n	800e076 <_printf_float+0xa2>
 800e130:	232d      	movs	r3, #45	@ 0x2d
 800e132:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e136:	e79e      	b.n	800e076 <_printf_float+0xa2>
 800e138:	9a06      	ldr	r2, [sp, #24]
 800e13a:	2a47      	cmp	r2, #71	@ 0x47
 800e13c:	d1c2      	bne.n	800e0c4 <_printf_float+0xf0>
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d1c0      	bne.n	800e0c4 <_printf_float+0xf0>
 800e142:	2301      	movs	r3, #1
 800e144:	e7bd      	b.n	800e0c2 <_printf_float+0xee>
 800e146:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e14a:	d9db      	bls.n	800e104 <_printf_float+0x130>
 800e14c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e150:	d118      	bne.n	800e184 <_printf_float+0x1b0>
 800e152:	2900      	cmp	r1, #0
 800e154:	6863      	ldr	r3, [r4, #4]
 800e156:	dd0b      	ble.n	800e170 <_printf_float+0x19c>
 800e158:	6121      	str	r1, [r4, #16]
 800e15a:	b913      	cbnz	r3, 800e162 <_printf_float+0x18e>
 800e15c:	6822      	ldr	r2, [r4, #0]
 800e15e:	07d0      	lsls	r0, r2, #31
 800e160:	d502      	bpl.n	800e168 <_printf_float+0x194>
 800e162:	3301      	adds	r3, #1
 800e164:	440b      	add	r3, r1
 800e166:	6123      	str	r3, [r4, #16]
 800e168:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e16a:	f04f 0900 	mov.w	r9, #0
 800e16e:	e7db      	b.n	800e128 <_printf_float+0x154>
 800e170:	b913      	cbnz	r3, 800e178 <_printf_float+0x1a4>
 800e172:	6822      	ldr	r2, [r4, #0]
 800e174:	07d2      	lsls	r2, r2, #31
 800e176:	d501      	bpl.n	800e17c <_printf_float+0x1a8>
 800e178:	3302      	adds	r3, #2
 800e17a:	e7f4      	b.n	800e166 <_printf_float+0x192>
 800e17c:	2301      	movs	r3, #1
 800e17e:	e7f2      	b.n	800e166 <_printf_float+0x192>
 800e180:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e186:	4299      	cmp	r1, r3
 800e188:	db05      	blt.n	800e196 <_printf_float+0x1c2>
 800e18a:	6823      	ldr	r3, [r4, #0]
 800e18c:	6121      	str	r1, [r4, #16]
 800e18e:	07d8      	lsls	r0, r3, #31
 800e190:	d5ea      	bpl.n	800e168 <_printf_float+0x194>
 800e192:	1c4b      	adds	r3, r1, #1
 800e194:	e7e7      	b.n	800e166 <_printf_float+0x192>
 800e196:	2900      	cmp	r1, #0
 800e198:	bfd4      	ite	le
 800e19a:	f1c1 0202 	rsble	r2, r1, #2
 800e19e:	2201      	movgt	r2, #1
 800e1a0:	4413      	add	r3, r2
 800e1a2:	e7e0      	b.n	800e166 <_printf_float+0x192>
 800e1a4:	6823      	ldr	r3, [r4, #0]
 800e1a6:	055a      	lsls	r2, r3, #21
 800e1a8:	d407      	bmi.n	800e1ba <_printf_float+0x1e6>
 800e1aa:	6923      	ldr	r3, [r4, #16]
 800e1ac:	4642      	mov	r2, r8
 800e1ae:	4631      	mov	r1, r6
 800e1b0:	4628      	mov	r0, r5
 800e1b2:	47b8      	blx	r7
 800e1b4:	3001      	adds	r0, #1
 800e1b6:	d12b      	bne.n	800e210 <_printf_float+0x23c>
 800e1b8:	e767      	b.n	800e08a <_printf_float+0xb6>
 800e1ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e1be:	f240 80dd 	bls.w	800e37c <_printf_float+0x3a8>
 800e1c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	f7f2 fcb5 	bl	8000b38 <__aeabi_dcmpeq>
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	d033      	beq.n	800e23a <_printf_float+0x266>
 800e1d2:	4a37      	ldr	r2, [pc, #220]	@ (800e2b0 <_printf_float+0x2dc>)
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	4631      	mov	r1, r6
 800e1d8:	4628      	mov	r0, r5
 800e1da:	47b8      	blx	r7
 800e1dc:	3001      	adds	r0, #1
 800e1de:	f43f af54 	beq.w	800e08a <_printf_float+0xb6>
 800e1e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e1e6:	4543      	cmp	r3, r8
 800e1e8:	db02      	blt.n	800e1f0 <_printf_float+0x21c>
 800e1ea:	6823      	ldr	r3, [r4, #0]
 800e1ec:	07d8      	lsls	r0, r3, #31
 800e1ee:	d50f      	bpl.n	800e210 <_printf_float+0x23c>
 800e1f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1f4:	4631      	mov	r1, r6
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	47b8      	blx	r7
 800e1fa:	3001      	adds	r0, #1
 800e1fc:	f43f af45 	beq.w	800e08a <_printf_float+0xb6>
 800e200:	f04f 0900 	mov.w	r9, #0
 800e204:	f108 38ff 	add.w	r8, r8, #4294967295
 800e208:	f104 0a1a 	add.w	sl, r4, #26
 800e20c:	45c8      	cmp	r8, r9
 800e20e:	dc09      	bgt.n	800e224 <_printf_float+0x250>
 800e210:	6823      	ldr	r3, [r4, #0]
 800e212:	079b      	lsls	r3, r3, #30
 800e214:	f100 8103 	bmi.w	800e41e <_printf_float+0x44a>
 800e218:	68e0      	ldr	r0, [r4, #12]
 800e21a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e21c:	4298      	cmp	r0, r3
 800e21e:	bfb8      	it	lt
 800e220:	4618      	movlt	r0, r3
 800e222:	e734      	b.n	800e08e <_printf_float+0xba>
 800e224:	2301      	movs	r3, #1
 800e226:	4652      	mov	r2, sl
 800e228:	4631      	mov	r1, r6
 800e22a:	4628      	mov	r0, r5
 800e22c:	47b8      	blx	r7
 800e22e:	3001      	adds	r0, #1
 800e230:	f43f af2b 	beq.w	800e08a <_printf_float+0xb6>
 800e234:	f109 0901 	add.w	r9, r9, #1
 800e238:	e7e8      	b.n	800e20c <_printf_float+0x238>
 800e23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	dc39      	bgt.n	800e2b4 <_printf_float+0x2e0>
 800e240:	4a1b      	ldr	r2, [pc, #108]	@ (800e2b0 <_printf_float+0x2dc>)
 800e242:	2301      	movs	r3, #1
 800e244:	4631      	mov	r1, r6
 800e246:	4628      	mov	r0, r5
 800e248:	47b8      	blx	r7
 800e24a:	3001      	adds	r0, #1
 800e24c:	f43f af1d 	beq.w	800e08a <_printf_float+0xb6>
 800e250:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e254:	ea59 0303 	orrs.w	r3, r9, r3
 800e258:	d102      	bne.n	800e260 <_printf_float+0x28c>
 800e25a:	6823      	ldr	r3, [r4, #0]
 800e25c:	07d9      	lsls	r1, r3, #31
 800e25e:	d5d7      	bpl.n	800e210 <_printf_float+0x23c>
 800e260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e264:	4631      	mov	r1, r6
 800e266:	4628      	mov	r0, r5
 800e268:	47b8      	blx	r7
 800e26a:	3001      	adds	r0, #1
 800e26c:	f43f af0d 	beq.w	800e08a <_printf_float+0xb6>
 800e270:	f04f 0a00 	mov.w	sl, #0
 800e274:	f104 0b1a 	add.w	fp, r4, #26
 800e278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e27a:	425b      	negs	r3, r3
 800e27c:	4553      	cmp	r3, sl
 800e27e:	dc01      	bgt.n	800e284 <_printf_float+0x2b0>
 800e280:	464b      	mov	r3, r9
 800e282:	e793      	b.n	800e1ac <_printf_float+0x1d8>
 800e284:	2301      	movs	r3, #1
 800e286:	465a      	mov	r2, fp
 800e288:	4631      	mov	r1, r6
 800e28a:	4628      	mov	r0, r5
 800e28c:	47b8      	blx	r7
 800e28e:	3001      	adds	r0, #1
 800e290:	f43f aefb 	beq.w	800e08a <_printf_float+0xb6>
 800e294:	f10a 0a01 	add.w	sl, sl, #1
 800e298:	e7ee      	b.n	800e278 <_printf_float+0x2a4>
 800e29a:	bf00      	nop
 800e29c:	7fefffff 	.word	0x7fefffff
 800e2a0:	08012f52 	.word	0x08012f52
 800e2a4:	08012f56 	.word	0x08012f56
 800e2a8:	08012f5a 	.word	0x08012f5a
 800e2ac:	08012f5e 	.word	0x08012f5e
 800e2b0:	080132f0 	.word	0x080132f0
 800e2b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e2b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e2ba:	4553      	cmp	r3, sl
 800e2bc:	bfa8      	it	ge
 800e2be:	4653      	movge	r3, sl
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	4699      	mov	r9, r3
 800e2c4:	dc36      	bgt.n	800e334 <_printf_float+0x360>
 800e2c6:	f04f 0b00 	mov.w	fp, #0
 800e2ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2ce:	f104 021a 	add.w	r2, r4, #26
 800e2d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e2d4:	9306      	str	r3, [sp, #24]
 800e2d6:	eba3 0309 	sub.w	r3, r3, r9
 800e2da:	455b      	cmp	r3, fp
 800e2dc:	dc31      	bgt.n	800e342 <_printf_float+0x36e>
 800e2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2e0:	459a      	cmp	sl, r3
 800e2e2:	dc3a      	bgt.n	800e35a <_printf_float+0x386>
 800e2e4:	6823      	ldr	r3, [r4, #0]
 800e2e6:	07da      	lsls	r2, r3, #31
 800e2e8:	d437      	bmi.n	800e35a <_printf_float+0x386>
 800e2ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2ec:	ebaa 0903 	sub.w	r9, sl, r3
 800e2f0:	9b06      	ldr	r3, [sp, #24]
 800e2f2:	ebaa 0303 	sub.w	r3, sl, r3
 800e2f6:	4599      	cmp	r9, r3
 800e2f8:	bfa8      	it	ge
 800e2fa:	4699      	movge	r9, r3
 800e2fc:	f1b9 0f00 	cmp.w	r9, #0
 800e300:	dc33      	bgt.n	800e36a <_printf_float+0x396>
 800e302:	f04f 0800 	mov.w	r8, #0
 800e306:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e30a:	f104 0b1a 	add.w	fp, r4, #26
 800e30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e310:	ebaa 0303 	sub.w	r3, sl, r3
 800e314:	eba3 0309 	sub.w	r3, r3, r9
 800e318:	4543      	cmp	r3, r8
 800e31a:	f77f af79 	ble.w	800e210 <_printf_float+0x23c>
 800e31e:	2301      	movs	r3, #1
 800e320:	465a      	mov	r2, fp
 800e322:	4631      	mov	r1, r6
 800e324:	4628      	mov	r0, r5
 800e326:	47b8      	blx	r7
 800e328:	3001      	adds	r0, #1
 800e32a:	f43f aeae 	beq.w	800e08a <_printf_float+0xb6>
 800e32e:	f108 0801 	add.w	r8, r8, #1
 800e332:	e7ec      	b.n	800e30e <_printf_float+0x33a>
 800e334:	4642      	mov	r2, r8
 800e336:	4631      	mov	r1, r6
 800e338:	4628      	mov	r0, r5
 800e33a:	47b8      	blx	r7
 800e33c:	3001      	adds	r0, #1
 800e33e:	d1c2      	bne.n	800e2c6 <_printf_float+0x2f2>
 800e340:	e6a3      	b.n	800e08a <_printf_float+0xb6>
 800e342:	2301      	movs	r3, #1
 800e344:	4631      	mov	r1, r6
 800e346:	4628      	mov	r0, r5
 800e348:	9206      	str	r2, [sp, #24]
 800e34a:	47b8      	blx	r7
 800e34c:	3001      	adds	r0, #1
 800e34e:	f43f ae9c 	beq.w	800e08a <_printf_float+0xb6>
 800e352:	9a06      	ldr	r2, [sp, #24]
 800e354:	f10b 0b01 	add.w	fp, fp, #1
 800e358:	e7bb      	b.n	800e2d2 <_printf_float+0x2fe>
 800e35a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e35e:	4631      	mov	r1, r6
 800e360:	4628      	mov	r0, r5
 800e362:	47b8      	blx	r7
 800e364:	3001      	adds	r0, #1
 800e366:	d1c0      	bne.n	800e2ea <_printf_float+0x316>
 800e368:	e68f      	b.n	800e08a <_printf_float+0xb6>
 800e36a:	9a06      	ldr	r2, [sp, #24]
 800e36c:	464b      	mov	r3, r9
 800e36e:	4442      	add	r2, r8
 800e370:	4631      	mov	r1, r6
 800e372:	4628      	mov	r0, r5
 800e374:	47b8      	blx	r7
 800e376:	3001      	adds	r0, #1
 800e378:	d1c3      	bne.n	800e302 <_printf_float+0x32e>
 800e37a:	e686      	b.n	800e08a <_printf_float+0xb6>
 800e37c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e380:	f1ba 0f01 	cmp.w	sl, #1
 800e384:	dc01      	bgt.n	800e38a <_printf_float+0x3b6>
 800e386:	07db      	lsls	r3, r3, #31
 800e388:	d536      	bpl.n	800e3f8 <_printf_float+0x424>
 800e38a:	2301      	movs	r3, #1
 800e38c:	4642      	mov	r2, r8
 800e38e:	4631      	mov	r1, r6
 800e390:	4628      	mov	r0, r5
 800e392:	47b8      	blx	r7
 800e394:	3001      	adds	r0, #1
 800e396:	f43f ae78 	beq.w	800e08a <_printf_float+0xb6>
 800e39a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e39e:	4631      	mov	r1, r6
 800e3a0:	4628      	mov	r0, r5
 800e3a2:	47b8      	blx	r7
 800e3a4:	3001      	adds	r0, #1
 800e3a6:	f43f ae70 	beq.w	800e08a <_printf_float+0xb6>
 800e3aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e3b6:	f7f2 fbbf 	bl	8000b38 <__aeabi_dcmpeq>
 800e3ba:	b9c0      	cbnz	r0, 800e3ee <_printf_float+0x41a>
 800e3bc:	4653      	mov	r3, sl
 800e3be:	f108 0201 	add.w	r2, r8, #1
 800e3c2:	4631      	mov	r1, r6
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	47b8      	blx	r7
 800e3c8:	3001      	adds	r0, #1
 800e3ca:	d10c      	bne.n	800e3e6 <_printf_float+0x412>
 800e3cc:	e65d      	b.n	800e08a <_printf_float+0xb6>
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	465a      	mov	r2, fp
 800e3d2:	4631      	mov	r1, r6
 800e3d4:	4628      	mov	r0, r5
 800e3d6:	47b8      	blx	r7
 800e3d8:	3001      	adds	r0, #1
 800e3da:	f43f ae56 	beq.w	800e08a <_printf_float+0xb6>
 800e3de:	f108 0801 	add.w	r8, r8, #1
 800e3e2:	45d0      	cmp	r8, sl
 800e3e4:	dbf3      	blt.n	800e3ce <_printf_float+0x3fa>
 800e3e6:	464b      	mov	r3, r9
 800e3e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e3ec:	e6df      	b.n	800e1ae <_printf_float+0x1da>
 800e3ee:	f04f 0800 	mov.w	r8, #0
 800e3f2:	f104 0b1a 	add.w	fp, r4, #26
 800e3f6:	e7f4      	b.n	800e3e2 <_printf_float+0x40e>
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	4642      	mov	r2, r8
 800e3fc:	e7e1      	b.n	800e3c2 <_printf_float+0x3ee>
 800e3fe:	2301      	movs	r3, #1
 800e400:	464a      	mov	r2, r9
 800e402:	4631      	mov	r1, r6
 800e404:	4628      	mov	r0, r5
 800e406:	47b8      	blx	r7
 800e408:	3001      	adds	r0, #1
 800e40a:	f43f ae3e 	beq.w	800e08a <_printf_float+0xb6>
 800e40e:	f108 0801 	add.w	r8, r8, #1
 800e412:	68e3      	ldr	r3, [r4, #12]
 800e414:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e416:	1a5b      	subs	r3, r3, r1
 800e418:	4543      	cmp	r3, r8
 800e41a:	dcf0      	bgt.n	800e3fe <_printf_float+0x42a>
 800e41c:	e6fc      	b.n	800e218 <_printf_float+0x244>
 800e41e:	f04f 0800 	mov.w	r8, #0
 800e422:	f104 0919 	add.w	r9, r4, #25
 800e426:	e7f4      	b.n	800e412 <_printf_float+0x43e>

0800e428 <_printf_common>:
 800e428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e42c:	4616      	mov	r6, r2
 800e42e:	4698      	mov	r8, r3
 800e430:	688a      	ldr	r2, [r1, #8]
 800e432:	690b      	ldr	r3, [r1, #16]
 800e434:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e438:	4293      	cmp	r3, r2
 800e43a:	bfb8      	it	lt
 800e43c:	4613      	movlt	r3, r2
 800e43e:	6033      	str	r3, [r6, #0]
 800e440:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e444:	4607      	mov	r7, r0
 800e446:	460c      	mov	r4, r1
 800e448:	b10a      	cbz	r2, 800e44e <_printf_common+0x26>
 800e44a:	3301      	adds	r3, #1
 800e44c:	6033      	str	r3, [r6, #0]
 800e44e:	6823      	ldr	r3, [r4, #0]
 800e450:	0699      	lsls	r1, r3, #26
 800e452:	bf42      	ittt	mi
 800e454:	6833      	ldrmi	r3, [r6, #0]
 800e456:	3302      	addmi	r3, #2
 800e458:	6033      	strmi	r3, [r6, #0]
 800e45a:	6825      	ldr	r5, [r4, #0]
 800e45c:	f015 0506 	ands.w	r5, r5, #6
 800e460:	d106      	bne.n	800e470 <_printf_common+0x48>
 800e462:	f104 0a19 	add.w	sl, r4, #25
 800e466:	68e3      	ldr	r3, [r4, #12]
 800e468:	6832      	ldr	r2, [r6, #0]
 800e46a:	1a9b      	subs	r3, r3, r2
 800e46c:	42ab      	cmp	r3, r5
 800e46e:	dc26      	bgt.n	800e4be <_printf_common+0x96>
 800e470:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e474:	6822      	ldr	r2, [r4, #0]
 800e476:	3b00      	subs	r3, #0
 800e478:	bf18      	it	ne
 800e47a:	2301      	movne	r3, #1
 800e47c:	0692      	lsls	r2, r2, #26
 800e47e:	d42b      	bmi.n	800e4d8 <_printf_common+0xb0>
 800e480:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e484:	4641      	mov	r1, r8
 800e486:	4638      	mov	r0, r7
 800e488:	47c8      	blx	r9
 800e48a:	3001      	adds	r0, #1
 800e48c:	d01e      	beq.n	800e4cc <_printf_common+0xa4>
 800e48e:	6823      	ldr	r3, [r4, #0]
 800e490:	6922      	ldr	r2, [r4, #16]
 800e492:	f003 0306 	and.w	r3, r3, #6
 800e496:	2b04      	cmp	r3, #4
 800e498:	bf02      	ittt	eq
 800e49a:	68e5      	ldreq	r5, [r4, #12]
 800e49c:	6833      	ldreq	r3, [r6, #0]
 800e49e:	1aed      	subeq	r5, r5, r3
 800e4a0:	68a3      	ldr	r3, [r4, #8]
 800e4a2:	bf0c      	ite	eq
 800e4a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4a8:	2500      	movne	r5, #0
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	bfc4      	itt	gt
 800e4ae:	1a9b      	subgt	r3, r3, r2
 800e4b0:	18ed      	addgt	r5, r5, r3
 800e4b2:	2600      	movs	r6, #0
 800e4b4:	341a      	adds	r4, #26
 800e4b6:	42b5      	cmp	r5, r6
 800e4b8:	d11a      	bne.n	800e4f0 <_printf_common+0xc8>
 800e4ba:	2000      	movs	r0, #0
 800e4bc:	e008      	b.n	800e4d0 <_printf_common+0xa8>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	4652      	mov	r2, sl
 800e4c2:	4641      	mov	r1, r8
 800e4c4:	4638      	mov	r0, r7
 800e4c6:	47c8      	blx	r9
 800e4c8:	3001      	adds	r0, #1
 800e4ca:	d103      	bne.n	800e4d4 <_printf_common+0xac>
 800e4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4d4:	3501      	adds	r5, #1
 800e4d6:	e7c6      	b.n	800e466 <_printf_common+0x3e>
 800e4d8:	18e1      	adds	r1, r4, r3
 800e4da:	1c5a      	adds	r2, r3, #1
 800e4dc:	2030      	movs	r0, #48	@ 0x30
 800e4de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e4e2:	4422      	add	r2, r4
 800e4e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e4e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e4ec:	3302      	adds	r3, #2
 800e4ee:	e7c7      	b.n	800e480 <_printf_common+0x58>
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	4622      	mov	r2, r4
 800e4f4:	4641      	mov	r1, r8
 800e4f6:	4638      	mov	r0, r7
 800e4f8:	47c8      	blx	r9
 800e4fa:	3001      	adds	r0, #1
 800e4fc:	d0e6      	beq.n	800e4cc <_printf_common+0xa4>
 800e4fe:	3601      	adds	r6, #1
 800e500:	e7d9      	b.n	800e4b6 <_printf_common+0x8e>
	...

0800e504 <_printf_i>:
 800e504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e508:	7e0f      	ldrb	r7, [r1, #24]
 800e50a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e50c:	2f78      	cmp	r7, #120	@ 0x78
 800e50e:	4691      	mov	r9, r2
 800e510:	4680      	mov	r8, r0
 800e512:	460c      	mov	r4, r1
 800e514:	469a      	mov	sl, r3
 800e516:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e51a:	d807      	bhi.n	800e52c <_printf_i+0x28>
 800e51c:	2f62      	cmp	r7, #98	@ 0x62
 800e51e:	d80a      	bhi.n	800e536 <_printf_i+0x32>
 800e520:	2f00      	cmp	r7, #0
 800e522:	f000 80d2 	beq.w	800e6ca <_printf_i+0x1c6>
 800e526:	2f58      	cmp	r7, #88	@ 0x58
 800e528:	f000 80b9 	beq.w	800e69e <_printf_i+0x19a>
 800e52c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e530:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e534:	e03a      	b.n	800e5ac <_printf_i+0xa8>
 800e536:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e53a:	2b15      	cmp	r3, #21
 800e53c:	d8f6      	bhi.n	800e52c <_printf_i+0x28>
 800e53e:	a101      	add	r1, pc, #4	@ (adr r1, 800e544 <_printf_i+0x40>)
 800e540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e544:	0800e59d 	.word	0x0800e59d
 800e548:	0800e5b1 	.word	0x0800e5b1
 800e54c:	0800e52d 	.word	0x0800e52d
 800e550:	0800e52d 	.word	0x0800e52d
 800e554:	0800e52d 	.word	0x0800e52d
 800e558:	0800e52d 	.word	0x0800e52d
 800e55c:	0800e5b1 	.word	0x0800e5b1
 800e560:	0800e52d 	.word	0x0800e52d
 800e564:	0800e52d 	.word	0x0800e52d
 800e568:	0800e52d 	.word	0x0800e52d
 800e56c:	0800e52d 	.word	0x0800e52d
 800e570:	0800e6b1 	.word	0x0800e6b1
 800e574:	0800e5db 	.word	0x0800e5db
 800e578:	0800e66b 	.word	0x0800e66b
 800e57c:	0800e52d 	.word	0x0800e52d
 800e580:	0800e52d 	.word	0x0800e52d
 800e584:	0800e6d3 	.word	0x0800e6d3
 800e588:	0800e52d 	.word	0x0800e52d
 800e58c:	0800e5db 	.word	0x0800e5db
 800e590:	0800e52d 	.word	0x0800e52d
 800e594:	0800e52d 	.word	0x0800e52d
 800e598:	0800e673 	.word	0x0800e673
 800e59c:	6833      	ldr	r3, [r6, #0]
 800e59e:	1d1a      	adds	r2, r3, #4
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	6032      	str	r2, [r6, #0]
 800e5a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e5a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	e09d      	b.n	800e6ec <_printf_i+0x1e8>
 800e5b0:	6833      	ldr	r3, [r6, #0]
 800e5b2:	6820      	ldr	r0, [r4, #0]
 800e5b4:	1d19      	adds	r1, r3, #4
 800e5b6:	6031      	str	r1, [r6, #0]
 800e5b8:	0606      	lsls	r6, r0, #24
 800e5ba:	d501      	bpl.n	800e5c0 <_printf_i+0xbc>
 800e5bc:	681d      	ldr	r5, [r3, #0]
 800e5be:	e003      	b.n	800e5c8 <_printf_i+0xc4>
 800e5c0:	0645      	lsls	r5, r0, #25
 800e5c2:	d5fb      	bpl.n	800e5bc <_printf_i+0xb8>
 800e5c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e5c8:	2d00      	cmp	r5, #0
 800e5ca:	da03      	bge.n	800e5d4 <_printf_i+0xd0>
 800e5cc:	232d      	movs	r3, #45	@ 0x2d
 800e5ce:	426d      	negs	r5, r5
 800e5d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5d4:	4859      	ldr	r0, [pc, #356]	@ (800e73c <_printf_i+0x238>)
 800e5d6:	230a      	movs	r3, #10
 800e5d8:	e011      	b.n	800e5fe <_printf_i+0xfa>
 800e5da:	6821      	ldr	r1, [r4, #0]
 800e5dc:	6833      	ldr	r3, [r6, #0]
 800e5de:	0608      	lsls	r0, r1, #24
 800e5e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e5e4:	d402      	bmi.n	800e5ec <_printf_i+0xe8>
 800e5e6:	0649      	lsls	r1, r1, #25
 800e5e8:	bf48      	it	mi
 800e5ea:	b2ad      	uxthmi	r5, r5
 800e5ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800e5ee:	4853      	ldr	r0, [pc, #332]	@ (800e73c <_printf_i+0x238>)
 800e5f0:	6033      	str	r3, [r6, #0]
 800e5f2:	bf14      	ite	ne
 800e5f4:	230a      	movne	r3, #10
 800e5f6:	2308      	moveq	r3, #8
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e5fe:	6866      	ldr	r6, [r4, #4]
 800e600:	60a6      	str	r6, [r4, #8]
 800e602:	2e00      	cmp	r6, #0
 800e604:	bfa2      	ittt	ge
 800e606:	6821      	ldrge	r1, [r4, #0]
 800e608:	f021 0104 	bicge.w	r1, r1, #4
 800e60c:	6021      	strge	r1, [r4, #0]
 800e60e:	b90d      	cbnz	r5, 800e614 <_printf_i+0x110>
 800e610:	2e00      	cmp	r6, #0
 800e612:	d04b      	beq.n	800e6ac <_printf_i+0x1a8>
 800e614:	4616      	mov	r6, r2
 800e616:	fbb5 f1f3 	udiv	r1, r5, r3
 800e61a:	fb03 5711 	mls	r7, r3, r1, r5
 800e61e:	5dc7      	ldrb	r7, [r0, r7]
 800e620:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e624:	462f      	mov	r7, r5
 800e626:	42bb      	cmp	r3, r7
 800e628:	460d      	mov	r5, r1
 800e62a:	d9f4      	bls.n	800e616 <_printf_i+0x112>
 800e62c:	2b08      	cmp	r3, #8
 800e62e:	d10b      	bne.n	800e648 <_printf_i+0x144>
 800e630:	6823      	ldr	r3, [r4, #0]
 800e632:	07df      	lsls	r7, r3, #31
 800e634:	d508      	bpl.n	800e648 <_printf_i+0x144>
 800e636:	6923      	ldr	r3, [r4, #16]
 800e638:	6861      	ldr	r1, [r4, #4]
 800e63a:	4299      	cmp	r1, r3
 800e63c:	bfde      	ittt	le
 800e63e:	2330      	movle	r3, #48	@ 0x30
 800e640:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e644:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e648:	1b92      	subs	r2, r2, r6
 800e64a:	6122      	str	r2, [r4, #16]
 800e64c:	f8cd a000 	str.w	sl, [sp]
 800e650:	464b      	mov	r3, r9
 800e652:	aa03      	add	r2, sp, #12
 800e654:	4621      	mov	r1, r4
 800e656:	4640      	mov	r0, r8
 800e658:	f7ff fee6 	bl	800e428 <_printf_common>
 800e65c:	3001      	adds	r0, #1
 800e65e:	d14a      	bne.n	800e6f6 <_printf_i+0x1f2>
 800e660:	f04f 30ff 	mov.w	r0, #4294967295
 800e664:	b004      	add	sp, #16
 800e666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e66a:	6823      	ldr	r3, [r4, #0]
 800e66c:	f043 0320 	orr.w	r3, r3, #32
 800e670:	6023      	str	r3, [r4, #0]
 800e672:	4833      	ldr	r0, [pc, #204]	@ (800e740 <_printf_i+0x23c>)
 800e674:	2778      	movs	r7, #120	@ 0x78
 800e676:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e67a:	6823      	ldr	r3, [r4, #0]
 800e67c:	6831      	ldr	r1, [r6, #0]
 800e67e:	061f      	lsls	r7, r3, #24
 800e680:	f851 5b04 	ldr.w	r5, [r1], #4
 800e684:	d402      	bmi.n	800e68c <_printf_i+0x188>
 800e686:	065f      	lsls	r7, r3, #25
 800e688:	bf48      	it	mi
 800e68a:	b2ad      	uxthmi	r5, r5
 800e68c:	6031      	str	r1, [r6, #0]
 800e68e:	07d9      	lsls	r1, r3, #31
 800e690:	bf44      	itt	mi
 800e692:	f043 0320 	orrmi.w	r3, r3, #32
 800e696:	6023      	strmi	r3, [r4, #0]
 800e698:	b11d      	cbz	r5, 800e6a2 <_printf_i+0x19e>
 800e69a:	2310      	movs	r3, #16
 800e69c:	e7ac      	b.n	800e5f8 <_printf_i+0xf4>
 800e69e:	4827      	ldr	r0, [pc, #156]	@ (800e73c <_printf_i+0x238>)
 800e6a0:	e7e9      	b.n	800e676 <_printf_i+0x172>
 800e6a2:	6823      	ldr	r3, [r4, #0]
 800e6a4:	f023 0320 	bic.w	r3, r3, #32
 800e6a8:	6023      	str	r3, [r4, #0]
 800e6aa:	e7f6      	b.n	800e69a <_printf_i+0x196>
 800e6ac:	4616      	mov	r6, r2
 800e6ae:	e7bd      	b.n	800e62c <_printf_i+0x128>
 800e6b0:	6833      	ldr	r3, [r6, #0]
 800e6b2:	6825      	ldr	r5, [r4, #0]
 800e6b4:	6961      	ldr	r1, [r4, #20]
 800e6b6:	1d18      	adds	r0, r3, #4
 800e6b8:	6030      	str	r0, [r6, #0]
 800e6ba:	062e      	lsls	r6, r5, #24
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	d501      	bpl.n	800e6c4 <_printf_i+0x1c0>
 800e6c0:	6019      	str	r1, [r3, #0]
 800e6c2:	e002      	b.n	800e6ca <_printf_i+0x1c6>
 800e6c4:	0668      	lsls	r0, r5, #25
 800e6c6:	d5fb      	bpl.n	800e6c0 <_printf_i+0x1bc>
 800e6c8:	8019      	strh	r1, [r3, #0]
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	6123      	str	r3, [r4, #16]
 800e6ce:	4616      	mov	r6, r2
 800e6d0:	e7bc      	b.n	800e64c <_printf_i+0x148>
 800e6d2:	6833      	ldr	r3, [r6, #0]
 800e6d4:	1d1a      	adds	r2, r3, #4
 800e6d6:	6032      	str	r2, [r6, #0]
 800e6d8:	681e      	ldr	r6, [r3, #0]
 800e6da:	6862      	ldr	r2, [r4, #4]
 800e6dc:	2100      	movs	r1, #0
 800e6de:	4630      	mov	r0, r6
 800e6e0:	f7f1 fdae 	bl	8000240 <memchr>
 800e6e4:	b108      	cbz	r0, 800e6ea <_printf_i+0x1e6>
 800e6e6:	1b80      	subs	r0, r0, r6
 800e6e8:	6060      	str	r0, [r4, #4]
 800e6ea:	6863      	ldr	r3, [r4, #4]
 800e6ec:	6123      	str	r3, [r4, #16]
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6f4:	e7aa      	b.n	800e64c <_printf_i+0x148>
 800e6f6:	6923      	ldr	r3, [r4, #16]
 800e6f8:	4632      	mov	r2, r6
 800e6fa:	4649      	mov	r1, r9
 800e6fc:	4640      	mov	r0, r8
 800e6fe:	47d0      	blx	sl
 800e700:	3001      	adds	r0, #1
 800e702:	d0ad      	beq.n	800e660 <_printf_i+0x15c>
 800e704:	6823      	ldr	r3, [r4, #0]
 800e706:	079b      	lsls	r3, r3, #30
 800e708:	d413      	bmi.n	800e732 <_printf_i+0x22e>
 800e70a:	68e0      	ldr	r0, [r4, #12]
 800e70c:	9b03      	ldr	r3, [sp, #12]
 800e70e:	4298      	cmp	r0, r3
 800e710:	bfb8      	it	lt
 800e712:	4618      	movlt	r0, r3
 800e714:	e7a6      	b.n	800e664 <_printf_i+0x160>
 800e716:	2301      	movs	r3, #1
 800e718:	4632      	mov	r2, r6
 800e71a:	4649      	mov	r1, r9
 800e71c:	4640      	mov	r0, r8
 800e71e:	47d0      	blx	sl
 800e720:	3001      	adds	r0, #1
 800e722:	d09d      	beq.n	800e660 <_printf_i+0x15c>
 800e724:	3501      	adds	r5, #1
 800e726:	68e3      	ldr	r3, [r4, #12]
 800e728:	9903      	ldr	r1, [sp, #12]
 800e72a:	1a5b      	subs	r3, r3, r1
 800e72c:	42ab      	cmp	r3, r5
 800e72e:	dcf2      	bgt.n	800e716 <_printf_i+0x212>
 800e730:	e7eb      	b.n	800e70a <_printf_i+0x206>
 800e732:	2500      	movs	r5, #0
 800e734:	f104 0619 	add.w	r6, r4, #25
 800e738:	e7f5      	b.n	800e726 <_printf_i+0x222>
 800e73a:	bf00      	nop
 800e73c:	08012f62 	.word	0x08012f62
 800e740:	08012f73 	.word	0x08012f73

0800e744 <_scanf_float>:
 800e744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e748:	b087      	sub	sp, #28
 800e74a:	4617      	mov	r7, r2
 800e74c:	9303      	str	r3, [sp, #12]
 800e74e:	688b      	ldr	r3, [r1, #8]
 800e750:	1e5a      	subs	r2, r3, #1
 800e752:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e756:	bf81      	itttt	hi
 800e758:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e75c:	eb03 0b05 	addhi.w	fp, r3, r5
 800e760:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e764:	608b      	strhi	r3, [r1, #8]
 800e766:	680b      	ldr	r3, [r1, #0]
 800e768:	460a      	mov	r2, r1
 800e76a:	f04f 0500 	mov.w	r5, #0
 800e76e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e772:	f842 3b1c 	str.w	r3, [r2], #28
 800e776:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e77a:	4680      	mov	r8, r0
 800e77c:	460c      	mov	r4, r1
 800e77e:	bf98      	it	ls
 800e780:	f04f 0b00 	movls.w	fp, #0
 800e784:	9201      	str	r2, [sp, #4]
 800e786:	4616      	mov	r6, r2
 800e788:	46aa      	mov	sl, r5
 800e78a:	46a9      	mov	r9, r5
 800e78c:	9502      	str	r5, [sp, #8]
 800e78e:	68a2      	ldr	r2, [r4, #8]
 800e790:	b152      	cbz	r2, 800e7a8 <_scanf_float+0x64>
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	2b4e      	cmp	r3, #78	@ 0x4e
 800e798:	d864      	bhi.n	800e864 <_scanf_float+0x120>
 800e79a:	2b40      	cmp	r3, #64	@ 0x40
 800e79c:	d83c      	bhi.n	800e818 <_scanf_float+0xd4>
 800e79e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e7a2:	b2c8      	uxtb	r0, r1
 800e7a4:	280e      	cmp	r0, #14
 800e7a6:	d93a      	bls.n	800e81e <_scanf_float+0xda>
 800e7a8:	f1b9 0f00 	cmp.w	r9, #0
 800e7ac:	d003      	beq.n	800e7b6 <_scanf_float+0x72>
 800e7ae:	6823      	ldr	r3, [r4, #0]
 800e7b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e7b4:	6023      	str	r3, [r4, #0]
 800e7b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e7ba:	f1ba 0f01 	cmp.w	sl, #1
 800e7be:	f200 8117 	bhi.w	800e9f0 <_scanf_float+0x2ac>
 800e7c2:	9b01      	ldr	r3, [sp, #4]
 800e7c4:	429e      	cmp	r6, r3
 800e7c6:	f200 8108 	bhi.w	800e9da <_scanf_float+0x296>
 800e7ca:	2001      	movs	r0, #1
 800e7cc:	b007      	add	sp, #28
 800e7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e7d6:	2a0d      	cmp	r2, #13
 800e7d8:	d8e6      	bhi.n	800e7a8 <_scanf_float+0x64>
 800e7da:	a101      	add	r1, pc, #4	@ (adr r1, 800e7e0 <_scanf_float+0x9c>)
 800e7dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e7e0:	0800e927 	.word	0x0800e927
 800e7e4:	0800e7a9 	.word	0x0800e7a9
 800e7e8:	0800e7a9 	.word	0x0800e7a9
 800e7ec:	0800e7a9 	.word	0x0800e7a9
 800e7f0:	0800e987 	.word	0x0800e987
 800e7f4:	0800e95f 	.word	0x0800e95f
 800e7f8:	0800e7a9 	.word	0x0800e7a9
 800e7fc:	0800e7a9 	.word	0x0800e7a9
 800e800:	0800e935 	.word	0x0800e935
 800e804:	0800e7a9 	.word	0x0800e7a9
 800e808:	0800e7a9 	.word	0x0800e7a9
 800e80c:	0800e7a9 	.word	0x0800e7a9
 800e810:	0800e7a9 	.word	0x0800e7a9
 800e814:	0800e8ed 	.word	0x0800e8ed
 800e818:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e81c:	e7db      	b.n	800e7d6 <_scanf_float+0x92>
 800e81e:	290e      	cmp	r1, #14
 800e820:	d8c2      	bhi.n	800e7a8 <_scanf_float+0x64>
 800e822:	a001      	add	r0, pc, #4	@ (adr r0, 800e828 <_scanf_float+0xe4>)
 800e824:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e828:	0800e8dd 	.word	0x0800e8dd
 800e82c:	0800e7a9 	.word	0x0800e7a9
 800e830:	0800e8dd 	.word	0x0800e8dd
 800e834:	0800e973 	.word	0x0800e973
 800e838:	0800e7a9 	.word	0x0800e7a9
 800e83c:	0800e885 	.word	0x0800e885
 800e840:	0800e8c3 	.word	0x0800e8c3
 800e844:	0800e8c3 	.word	0x0800e8c3
 800e848:	0800e8c3 	.word	0x0800e8c3
 800e84c:	0800e8c3 	.word	0x0800e8c3
 800e850:	0800e8c3 	.word	0x0800e8c3
 800e854:	0800e8c3 	.word	0x0800e8c3
 800e858:	0800e8c3 	.word	0x0800e8c3
 800e85c:	0800e8c3 	.word	0x0800e8c3
 800e860:	0800e8c3 	.word	0x0800e8c3
 800e864:	2b6e      	cmp	r3, #110	@ 0x6e
 800e866:	d809      	bhi.n	800e87c <_scanf_float+0x138>
 800e868:	2b60      	cmp	r3, #96	@ 0x60
 800e86a:	d8b2      	bhi.n	800e7d2 <_scanf_float+0x8e>
 800e86c:	2b54      	cmp	r3, #84	@ 0x54
 800e86e:	d07b      	beq.n	800e968 <_scanf_float+0x224>
 800e870:	2b59      	cmp	r3, #89	@ 0x59
 800e872:	d199      	bne.n	800e7a8 <_scanf_float+0x64>
 800e874:	2d07      	cmp	r5, #7
 800e876:	d197      	bne.n	800e7a8 <_scanf_float+0x64>
 800e878:	2508      	movs	r5, #8
 800e87a:	e02c      	b.n	800e8d6 <_scanf_float+0x192>
 800e87c:	2b74      	cmp	r3, #116	@ 0x74
 800e87e:	d073      	beq.n	800e968 <_scanf_float+0x224>
 800e880:	2b79      	cmp	r3, #121	@ 0x79
 800e882:	e7f6      	b.n	800e872 <_scanf_float+0x12e>
 800e884:	6821      	ldr	r1, [r4, #0]
 800e886:	05c8      	lsls	r0, r1, #23
 800e888:	d51b      	bpl.n	800e8c2 <_scanf_float+0x17e>
 800e88a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e88e:	6021      	str	r1, [r4, #0]
 800e890:	f109 0901 	add.w	r9, r9, #1
 800e894:	f1bb 0f00 	cmp.w	fp, #0
 800e898:	d003      	beq.n	800e8a2 <_scanf_float+0x15e>
 800e89a:	3201      	adds	r2, #1
 800e89c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e8a0:	60a2      	str	r2, [r4, #8]
 800e8a2:	68a3      	ldr	r3, [r4, #8]
 800e8a4:	3b01      	subs	r3, #1
 800e8a6:	60a3      	str	r3, [r4, #8]
 800e8a8:	6923      	ldr	r3, [r4, #16]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	6123      	str	r3, [r4, #16]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	3b01      	subs	r3, #1
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	607b      	str	r3, [r7, #4]
 800e8b6:	f340 8087 	ble.w	800e9c8 <_scanf_float+0x284>
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	603b      	str	r3, [r7, #0]
 800e8c0:	e765      	b.n	800e78e <_scanf_float+0x4a>
 800e8c2:	eb1a 0105 	adds.w	r1, sl, r5
 800e8c6:	f47f af6f 	bne.w	800e7a8 <_scanf_float+0x64>
 800e8ca:	6822      	ldr	r2, [r4, #0]
 800e8cc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e8d0:	6022      	str	r2, [r4, #0]
 800e8d2:	460d      	mov	r5, r1
 800e8d4:	468a      	mov	sl, r1
 800e8d6:	f806 3b01 	strb.w	r3, [r6], #1
 800e8da:	e7e2      	b.n	800e8a2 <_scanf_float+0x15e>
 800e8dc:	6822      	ldr	r2, [r4, #0]
 800e8de:	0610      	lsls	r0, r2, #24
 800e8e0:	f57f af62 	bpl.w	800e7a8 <_scanf_float+0x64>
 800e8e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e8e8:	6022      	str	r2, [r4, #0]
 800e8ea:	e7f4      	b.n	800e8d6 <_scanf_float+0x192>
 800e8ec:	f1ba 0f00 	cmp.w	sl, #0
 800e8f0:	d10e      	bne.n	800e910 <_scanf_float+0x1cc>
 800e8f2:	f1b9 0f00 	cmp.w	r9, #0
 800e8f6:	d10e      	bne.n	800e916 <_scanf_float+0x1d2>
 800e8f8:	6822      	ldr	r2, [r4, #0]
 800e8fa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e8fe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e902:	d108      	bne.n	800e916 <_scanf_float+0x1d2>
 800e904:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e908:	6022      	str	r2, [r4, #0]
 800e90a:	f04f 0a01 	mov.w	sl, #1
 800e90e:	e7e2      	b.n	800e8d6 <_scanf_float+0x192>
 800e910:	f1ba 0f02 	cmp.w	sl, #2
 800e914:	d055      	beq.n	800e9c2 <_scanf_float+0x27e>
 800e916:	2d01      	cmp	r5, #1
 800e918:	d002      	beq.n	800e920 <_scanf_float+0x1dc>
 800e91a:	2d04      	cmp	r5, #4
 800e91c:	f47f af44 	bne.w	800e7a8 <_scanf_float+0x64>
 800e920:	3501      	adds	r5, #1
 800e922:	b2ed      	uxtb	r5, r5
 800e924:	e7d7      	b.n	800e8d6 <_scanf_float+0x192>
 800e926:	f1ba 0f01 	cmp.w	sl, #1
 800e92a:	f47f af3d 	bne.w	800e7a8 <_scanf_float+0x64>
 800e92e:	f04f 0a02 	mov.w	sl, #2
 800e932:	e7d0      	b.n	800e8d6 <_scanf_float+0x192>
 800e934:	b97d      	cbnz	r5, 800e956 <_scanf_float+0x212>
 800e936:	f1b9 0f00 	cmp.w	r9, #0
 800e93a:	f47f af38 	bne.w	800e7ae <_scanf_float+0x6a>
 800e93e:	6822      	ldr	r2, [r4, #0]
 800e940:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e944:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e948:	f040 8108 	bne.w	800eb5c <_scanf_float+0x418>
 800e94c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e950:	6022      	str	r2, [r4, #0]
 800e952:	2501      	movs	r5, #1
 800e954:	e7bf      	b.n	800e8d6 <_scanf_float+0x192>
 800e956:	2d03      	cmp	r5, #3
 800e958:	d0e2      	beq.n	800e920 <_scanf_float+0x1dc>
 800e95a:	2d05      	cmp	r5, #5
 800e95c:	e7de      	b.n	800e91c <_scanf_float+0x1d8>
 800e95e:	2d02      	cmp	r5, #2
 800e960:	f47f af22 	bne.w	800e7a8 <_scanf_float+0x64>
 800e964:	2503      	movs	r5, #3
 800e966:	e7b6      	b.n	800e8d6 <_scanf_float+0x192>
 800e968:	2d06      	cmp	r5, #6
 800e96a:	f47f af1d 	bne.w	800e7a8 <_scanf_float+0x64>
 800e96e:	2507      	movs	r5, #7
 800e970:	e7b1      	b.n	800e8d6 <_scanf_float+0x192>
 800e972:	6822      	ldr	r2, [r4, #0]
 800e974:	0591      	lsls	r1, r2, #22
 800e976:	f57f af17 	bpl.w	800e7a8 <_scanf_float+0x64>
 800e97a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e97e:	6022      	str	r2, [r4, #0]
 800e980:	f8cd 9008 	str.w	r9, [sp, #8]
 800e984:	e7a7      	b.n	800e8d6 <_scanf_float+0x192>
 800e986:	6822      	ldr	r2, [r4, #0]
 800e988:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e98c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e990:	d006      	beq.n	800e9a0 <_scanf_float+0x25c>
 800e992:	0550      	lsls	r0, r2, #21
 800e994:	f57f af08 	bpl.w	800e7a8 <_scanf_float+0x64>
 800e998:	f1b9 0f00 	cmp.w	r9, #0
 800e99c:	f000 80de 	beq.w	800eb5c <_scanf_float+0x418>
 800e9a0:	0591      	lsls	r1, r2, #22
 800e9a2:	bf58      	it	pl
 800e9a4:	9902      	ldrpl	r1, [sp, #8]
 800e9a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e9aa:	bf58      	it	pl
 800e9ac:	eba9 0101 	subpl.w	r1, r9, r1
 800e9b0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e9b4:	bf58      	it	pl
 800e9b6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e9ba:	6022      	str	r2, [r4, #0]
 800e9bc:	f04f 0900 	mov.w	r9, #0
 800e9c0:	e789      	b.n	800e8d6 <_scanf_float+0x192>
 800e9c2:	f04f 0a03 	mov.w	sl, #3
 800e9c6:	e786      	b.n	800e8d6 <_scanf_float+0x192>
 800e9c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e9cc:	4639      	mov	r1, r7
 800e9ce:	4640      	mov	r0, r8
 800e9d0:	4798      	blx	r3
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	f43f aedb 	beq.w	800e78e <_scanf_float+0x4a>
 800e9d8:	e6e6      	b.n	800e7a8 <_scanf_float+0x64>
 800e9da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e9de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e9e2:	463a      	mov	r2, r7
 800e9e4:	4640      	mov	r0, r8
 800e9e6:	4798      	blx	r3
 800e9e8:	6923      	ldr	r3, [r4, #16]
 800e9ea:	3b01      	subs	r3, #1
 800e9ec:	6123      	str	r3, [r4, #16]
 800e9ee:	e6e8      	b.n	800e7c2 <_scanf_float+0x7e>
 800e9f0:	1e6b      	subs	r3, r5, #1
 800e9f2:	2b06      	cmp	r3, #6
 800e9f4:	d824      	bhi.n	800ea40 <_scanf_float+0x2fc>
 800e9f6:	2d02      	cmp	r5, #2
 800e9f8:	d836      	bhi.n	800ea68 <_scanf_float+0x324>
 800e9fa:	9b01      	ldr	r3, [sp, #4]
 800e9fc:	429e      	cmp	r6, r3
 800e9fe:	f67f aee4 	bls.w	800e7ca <_scanf_float+0x86>
 800ea02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ea06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ea0a:	463a      	mov	r2, r7
 800ea0c:	4640      	mov	r0, r8
 800ea0e:	4798      	blx	r3
 800ea10:	6923      	ldr	r3, [r4, #16]
 800ea12:	3b01      	subs	r3, #1
 800ea14:	6123      	str	r3, [r4, #16]
 800ea16:	e7f0      	b.n	800e9fa <_scanf_float+0x2b6>
 800ea18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ea1c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ea20:	463a      	mov	r2, r7
 800ea22:	4640      	mov	r0, r8
 800ea24:	4798      	blx	r3
 800ea26:	6923      	ldr	r3, [r4, #16]
 800ea28:	3b01      	subs	r3, #1
 800ea2a:	6123      	str	r3, [r4, #16]
 800ea2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea30:	fa5f fa8a 	uxtb.w	sl, sl
 800ea34:	f1ba 0f02 	cmp.w	sl, #2
 800ea38:	d1ee      	bne.n	800ea18 <_scanf_float+0x2d4>
 800ea3a:	3d03      	subs	r5, #3
 800ea3c:	b2ed      	uxtb	r5, r5
 800ea3e:	1b76      	subs	r6, r6, r5
 800ea40:	6823      	ldr	r3, [r4, #0]
 800ea42:	05da      	lsls	r2, r3, #23
 800ea44:	d530      	bpl.n	800eaa8 <_scanf_float+0x364>
 800ea46:	055b      	lsls	r3, r3, #21
 800ea48:	d511      	bpl.n	800ea6e <_scanf_float+0x32a>
 800ea4a:	9b01      	ldr	r3, [sp, #4]
 800ea4c:	429e      	cmp	r6, r3
 800ea4e:	f67f aebc 	bls.w	800e7ca <_scanf_float+0x86>
 800ea52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ea56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ea5a:	463a      	mov	r2, r7
 800ea5c:	4640      	mov	r0, r8
 800ea5e:	4798      	blx	r3
 800ea60:	6923      	ldr	r3, [r4, #16]
 800ea62:	3b01      	subs	r3, #1
 800ea64:	6123      	str	r3, [r4, #16]
 800ea66:	e7f0      	b.n	800ea4a <_scanf_float+0x306>
 800ea68:	46aa      	mov	sl, r5
 800ea6a:	46b3      	mov	fp, r6
 800ea6c:	e7de      	b.n	800ea2c <_scanf_float+0x2e8>
 800ea6e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ea72:	6923      	ldr	r3, [r4, #16]
 800ea74:	2965      	cmp	r1, #101	@ 0x65
 800ea76:	f103 33ff 	add.w	r3, r3, #4294967295
 800ea7a:	f106 35ff 	add.w	r5, r6, #4294967295
 800ea7e:	6123      	str	r3, [r4, #16]
 800ea80:	d00c      	beq.n	800ea9c <_scanf_float+0x358>
 800ea82:	2945      	cmp	r1, #69	@ 0x45
 800ea84:	d00a      	beq.n	800ea9c <_scanf_float+0x358>
 800ea86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ea8a:	463a      	mov	r2, r7
 800ea8c:	4640      	mov	r0, r8
 800ea8e:	4798      	blx	r3
 800ea90:	6923      	ldr	r3, [r4, #16]
 800ea92:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ea96:	3b01      	subs	r3, #1
 800ea98:	1eb5      	subs	r5, r6, #2
 800ea9a:	6123      	str	r3, [r4, #16]
 800ea9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eaa0:	463a      	mov	r2, r7
 800eaa2:	4640      	mov	r0, r8
 800eaa4:	4798      	blx	r3
 800eaa6:	462e      	mov	r6, r5
 800eaa8:	6822      	ldr	r2, [r4, #0]
 800eaaa:	f012 0210 	ands.w	r2, r2, #16
 800eaae:	d001      	beq.n	800eab4 <_scanf_float+0x370>
 800eab0:	2000      	movs	r0, #0
 800eab2:	e68b      	b.n	800e7cc <_scanf_float+0x88>
 800eab4:	7032      	strb	r2, [r6, #0]
 800eab6:	6823      	ldr	r3, [r4, #0]
 800eab8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800eabc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eac0:	d11c      	bne.n	800eafc <_scanf_float+0x3b8>
 800eac2:	9b02      	ldr	r3, [sp, #8]
 800eac4:	454b      	cmp	r3, r9
 800eac6:	eba3 0209 	sub.w	r2, r3, r9
 800eaca:	d123      	bne.n	800eb14 <_scanf_float+0x3d0>
 800eacc:	9901      	ldr	r1, [sp, #4]
 800eace:	2200      	movs	r2, #0
 800ead0:	4640      	mov	r0, r8
 800ead2:	f002 fcd5 	bl	8011480 <_strtod_r>
 800ead6:	9b03      	ldr	r3, [sp, #12]
 800ead8:	6821      	ldr	r1, [r4, #0]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	f011 0f02 	tst.w	r1, #2
 800eae0:	ec57 6b10 	vmov	r6, r7, d0
 800eae4:	f103 0204 	add.w	r2, r3, #4
 800eae8:	d01f      	beq.n	800eb2a <_scanf_float+0x3e6>
 800eaea:	9903      	ldr	r1, [sp, #12]
 800eaec:	600a      	str	r2, [r1, #0]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	e9c3 6700 	strd	r6, r7, [r3]
 800eaf4:	68e3      	ldr	r3, [r4, #12]
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	60e3      	str	r3, [r4, #12]
 800eafa:	e7d9      	b.n	800eab0 <_scanf_float+0x36c>
 800eafc:	9b04      	ldr	r3, [sp, #16]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d0e4      	beq.n	800eacc <_scanf_float+0x388>
 800eb02:	9905      	ldr	r1, [sp, #20]
 800eb04:	230a      	movs	r3, #10
 800eb06:	3101      	adds	r1, #1
 800eb08:	4640      	mov	r0, r8
 800eb0a:	f002 fd39 	bl	8011580 <_strtol_r>
 800eb0e:	9b04      	ldr	r3, [sp, #16]
 800eb10:	9e05      	ldr	r6, [sp, #20]
 800eb12:	1ac2      	subs	r2, r0, r3
 800eb14:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800eb18:	429e      	cmp	r6, r3
 800eb1a:	bf28      	it	cs
 800eb1c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800eb20:	4910      	ldr	r1, [pc, #64]	@ (800eb64 <_scanf_float+0x420>)
 800eb22:	4630      	mov	r0, r6
 800eb24:	f000 f954 	bl	800edd0 <siprintf>
 800eb28:	e7d0      	b.n	800eacc <_scanf_float+0x388>
 800eb2a:	f011 0f04 	tst.w	r1, #4
 800eb2e:	9903      	ldr	r1, [sp, #12]
 800eb30:	600a      	str	r2, [r1, #0]
 800eb32:	d1dc      	bne.n	800eaee <_scanf_float+0x3aa>
 800eb34:	681d      	ldr	r5, [r3, #0]
 800eb36:	4632      	mov	r2, r6
 800eb38:	463b      	mov	r3, r7
 800eb3a:	4630      	mov	r0, r6
 800eb3c:	4639      	mov	r1, r7
 800eb3e:	f7f2 f82d 	bl	8000b9c <__aeabi_dcmpun>
 800eb42:	b128      	cbz	r0, 800eb50 <_scanf_float+0x40c>
 800eb44:	4808      	ldr	r0, [pc, #32]	@ (800eb68 <_scanf_float+0x424>)
 800eb46:	f000 fb49 	bl	800f1dc <nanf>
 800eb4a:	ed85 0a00 	vstr	s0, [r5]
 800eb4e:	e7d1      	b.n	800eaf4 <_scanf_float+0x3b0>
 800eb50:	4630      	mov	r0, r6
 800eb52:	4639      	mov	r1, r7
 800eb54:	f7f2 f880 	bl	8000c58 <__aeabi_d2f>
 800eb58:	6028      	str	r0, [r5, #0]
 800eb5a:	e7cb      	b.n	800eaf4 <_scanf_float+0x3b0>
 800eb5c:	f04f 0900 	mov.w	r9, #0
 800eb60:	e629      	b.n	800e7b6 <_scanf_float+0x72>
 800eb62:	bf00      	nop
 800eb64:	08012f84 	.word	0x08012f84
 800eb68:	08013338 	.word	0x08013338

0800eb6c <std>:
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	b510      	push	{r4, lr}
 800eb70:	4604      	mov	r4, r0
 800eb72:	e9c0 3300 	strd	r3, r3, [r0]
 800eb76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb7a:	6083      	str	r3, [r0, #8]
 800eb7c:	8181      	strh	r1, [r0, #12]
 800eb7e:	6643      	str	r3, [r0, #100]	@ 0x64
 800eb80:	81c2      	strh	r2, [r0, #14]
 800eb82:	6183      	str	r3, [r0, #24]
 800eb84:	4619      	mov	r1, r3
 800eb86:	2208      	movs	r2, #8
 800eb88:	305c      	adds	r0, #92	@ 0x5c
 800eb8a:	f000 fa45 	bl	800f018 <memset>
 800eb8e:	4b0d      	ldr	r3, [pc, #52]	@ (800ebc4 <std+0x58>)
 800eb90:	6263      	str	r3, [r4, #36]	@ 0x24
 800eb92:	4b0d      	ldr	r3, [pc, #52]	@ (800ebc8 <std+0x5c>)
 800eb94:	62a3      	str	r3, [r4, #40]	@ 0x28
 800eb96:	4b0d      	ldr	r3, [pc, #52]	@ (800ebcc <std+0x60>)
 800eb98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800eb9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ebd0 <std+0x64>)
 800eb9c:	6323      	str	r3, [r4, #48]	@ 0x30
 800eb9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ebd4 <std+0x68>)
 800eba0:	6224      	str	r4, [r4, #32]
 800eba2:	429c      	cmp	r4, r3
 800eba4:	d006      	beq.n	800ebb4 <std+0x48>
 800eba6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ebaa:	4294      	cmp	r4, r2
 800ebac:	d002      	beq.n	800ebb4 <std+0x48>
 800ebae:	33d0      	adds	r3, #208	@ 0xd0
 800ebb0:	429c      	cmp	r4, r3
 800ebb2:	d105      	bne.n	800ebc0 <std+0x54>
 800ebb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ebb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebbc:	f000 bafc 	b.w	800f1b8 <__retarget_lock_init_recursive>
 800ebc0:	bd10      	pop	{r4, pc}
 800ebc2:	bf00      	nop
 800ebc4:	0800ee65 	.word	0x0800ee65
 800ebc8:	0800ee8b 	.word	0x0800ee8b
 800ebcc:	0800eec3 	.word	0x0800eec3
 800ebd0:	0800eee7 	.word	0x0800eee7
 800ebd4:	2001e1fc 	.word	0x2001e1fc

0800ebd8 <stdio_exit_handler>:
 800ebd8:	4a02      	ldr	r2, [pc, #8]	@ (800ebe4 <stdio_exit_handler+0xc>)
 800ebda:	4903      	ldr	r1, [pc, #12]	@ (800ebe8 <stdio_exit_handler+0x10>)
 800ebdc:	4803      	ldr	r0, [pc, #12]	@ (800ebec <stdio_exit_handler+0x14>)
 800ebde:	f000 b869 	b.w	800ecb4 <_fwalk_sglue>
 800ebe2:	bf00      	nop
 800ebe4:	2000000c 	.word	0x2000000c
 800ebe8:	080121f5 	.word	0x080121f5
 800ebec:	2000001c 	.word	0x2000001c

0800ebf0 <cleanup_stdio>:
 800ebf0:	6841      	ldr	r1, [r0, #4]
 800ebf2:	4b0c      	ldr	r3, [pc, #48]	@ (800ec24 <cleanup_stdio+0x34>)
 800ebf4:	4299      	cmp	r1, r3
 800ebf6:	b510      	push	{r4, lr}
 800ebf8:	4604      	mov	r4, r0
 800ebfa:	d001      	beq.n	800ec00 <cleanup_stdio+0x10>
 800ebfc:	f003 fafa 	bl	80121f4 <_fflush_r>
 800ec00:	68a1      	ldr	r1, [r4, #8]
 800ec02:	4b09      	ldr	r3, [pc, #36]	@ (800ec28 <cleanup_stdio+0x38>)
 800ec04:	4299      	cmp	r1, r3
 800ec06:	d002      	beq.n	800ec0e <cleanup_stdio+0x1e>
 800ec08:	4620      	mov	r0, r4
 800ec0a:	f003 faf3 	bl	80121f4 <_fflush_r>
 800ec0e:	68e1      	ldr	r1, [r4, #12]
 800ec10:	4b06      	ldr	r3, [pc, #24]	@ (800ec2c <cleanup_stdio+0x3c>)
 800ec12:	4299      	cmp	r1, r3
 800ec14:	d004      	beq.n	800ec20 <cleanup_stdio+0x30>
 800ec16:	4620      	mov	r0, r4
 800ec18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec1c:	f003 baea 	b.w	80121f4 <_fflush_r>
 800ec20:	bd10      	pop	{r4, pc}
 800ec22:	bf00      	nop
 800ec24:	2001e1fc 	.word	0x2001e1fc
 800ec28:	2001e264 	.word	0x2001e264
 800ec2c:	2001e2cc 	.word	0x2001e2cc

0800ec30 <global_stdio_init.part.0>:
 800ec30:	b510      	push	{r4, lr}
 800ec32:	4b0b      	ldr	r3, [pc, #44]	@ (800ec60 <global_stdio_init.part.0+0x30>)
 800ec34:	4c0b      	ldr	r4, [pc, #44]	@ (800ec64 <global_stdio_init.part.0+0x34>)
 800ec36:	4a0c      	ldr	r2, [pc, #48]	@ (800ec68 <global_stdio_init.part.0+0x38>)
 800ec38:	601a      	str	r2, [r3, #0]
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	2104      	movs	r1, #4
 800ec40:	f7ff ff94 	bl	800eb6c <std>
 800ec44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ec48:	2201      	movs	r2, #1
 800ec4a:	2109      	movs	r1, #9
 800ec4c:	f7ff ff8e 	bl	800eb6c <std>
 800ec50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ec54:	2202      	movs	r2, #2
 800ec56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec5a:	2112      	movs	r1, #18
 800ec5c:	f7ff bf86 	b.w	800eb6c <std>
 800ec60:	2001e334 	.word	0x2001e334
 800ec64:	2001e1fc 	.word	0x2001e1fc
 800ec68:	0800ebd9 	.word	0x0800ebd9

0800ec6c <__sfp_lock_acquire>:
 800ec6c:	4801      	ldr	r0, [pc, #4]	@ (800ec74 <__sfp_lock_acquire+0x8>)
 800ec6e:	f000 baa4 	b.w	800f1ba <__retarget_lock_acquire_recursive>
 800ec72:	bf00      	nop
 800ec74:	2001e33d 	.word	0x2001e33d

0800ec78 <__sfp_lock_release>:
 800ec78:	4801      	ldr	r0, [pc, #4]	@ (800ec80 <__sfp_lock_release+0x8>)
 800ec7a:	f000 ba9f 	b.w	800f1bc <__retarget_lock_release_recursive>
 800ec7e:	bf00      	nop
 800ec80:	2001e33d 	.word	0x2001e33d

0800ec84 <__sinit>:
 800ec84:	b510      	push	{r4, lr}
 800ec86:	4604      	mov	r4, r0
 800ec88:	f7ff fff0 	bl	800ec6c <__sfp_lock_acquire>
 800ec8c:	6a23      	ldr	r3, [r4, #32]
 800ec8e:	b11b      	cbz	r3, 800ec98 <__sinit+0x14>
 800ec90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec94:	f7ff bff0 	b.w	800ec78 <__sfp_lock_release>
 800ec98:	4b04      	ldr	r3, [pc, #16]	@ (800ecac <__sinit+0x28>)
 800ec9a:	6223      	str	r3, [r4, #32]
 800ec9c:	4b04      	ldr	r3, [pc, #16]	@ (800ecb0 <__sinit+0x2c>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d1f5      	bne.n	800ec90 <__sinit+0xc>
 800eca4:	f7ff ffc4 	bl	800ec30 <global_stdio_init.part.0>
 800eca8:	e7f2      	b.n	800ec90 <__sinit+0xc>
 800ecaa:	bf00      	nop
 800ecac:	0800ebf1 	.word	0x0800ebf1
 800ecb0:	2001e334 	.word	0x2001e334

0800ecb4 <_fwalk_sglue>:
 800ecb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecb8:	4607      	mov	r7, r0
 800ecba:	4688      	mov	r8, r1
 800ecbc:	4614      	mov	r4, r2
 800ecbe:	2600      	movs	r6, #0
 800ecc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ecc4:	f1b9 0901 	subs.w	r9, r9, #1
 800ecc8:	d505      	bpl.n	800ecd6 <_fwalk_sglue+0x22>
 800ecca:	6824      	ldr	r4, [r4, #0]
 800eccc:	2c00      	cmp	r4, #0
 800ecce:	d1f7      	bne.n	800ecc0 <_fwalk_sglue+0xc>
 800ecd0:	4630      	mov	r0, r6
 800ecd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecd6:	89ab      	ldrh	r3, [r5, #12]
 800ecd8:	2b01      	cmp	r3, #1
 800ecda:	d907      	bls.n	800ecec <_fwalk_sglue+0x38>
 800ecdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ece0:	3301      	adds	r3, #1
 800ece2:	d003      	beq.n	800ecec <_fwalk_sglue+0x38>
 800ece4:	4629      	mov	r1, r5
 800ece6:	4638      	mov	r0, r7
 800ece8:	47c0      	blx	r8
 800ecea:	4306      	orrs	r6, r0
 800ecec:	3568      	adds	r5, #104	@ 0x68
 800ecee:	e7e9      	b.n	800ecc4 <_fwalk_sglue+0x10>

0800ecf0 <iprintf>:
 800ecf0:	b40f      	push	{r0, r1, r2, r3}
 800ecf2:	b507      	push	{r0, r1, r2, lr}
 800ecf4:	4906      	ldr	r1, [pc, #24]	@ (800ed10 <iprintf+0x20>)
 800ecf6:	ab04      	add	r3, sp, #16
 800ecf8:	6808      	ldr	r0, [r1, #0]
 800ecfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecfe:	6881      	ldr	r1, [r0, #8]
 800ed00:	9301      	str	r3, [sp, #4]
 800ed02:	f002 ff8d 	bl	8011c20 <_vfiprintf_r>
 800ed06:	b003      	add	sp, #12
 800ed08:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed0c:	b004      	add	sp, #16
 800ed0e:	4770      	bx	lr
 800ed10:	20000018 	.word	0x20000018

0800ed14 <_puts_r>:
 800ed14:	6a03      	ldr	r3, [r0, #32]
 800ed16:	b570      	push	{r4, r5, r6, lr}
 800ed18:	6884      	ldr	r4, [r0, #8]
 800ed1a:	4605      	mov	r5, r0
 800ed1c:	460e      	mov	r6, r1
 800ed1e:	b90b      	cbnz	r3, 800ed24 <_puts_r+0x10>
 800ed20:	f7ff ffb0 	bl	800ec84 <__sinit>
 800ed24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed26:	07db      	lsls	r3, r3, #31
 800ed28:	d405      	bmi.n	800ed36 <_puts_r+0x22>
 800ed2a:	89a3      	ldrh	r3, [r4, #12]
 800ed2c:	0598      	lsls	r0, r3, #22
 800ed2e:	d402      	bmi.n	800ed36 <_puts_r+0x22>
 800ed30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed32:	f000 fa42 	bl	800f1ba <__retarget_lock_acquire_recursive>
 800ed36:	89a3      	ldrh	r3, [r4, #12]
 800ed38:	0719      	lsls	r1, r3, #28
 800ed3a:	d502      	bpl.n	800ed42 <_puts_r+0x2e>
 800ed3c:	6923      	ldr	r3, [r4, #16]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d135      	bne.n	800edae <_puts_r+0x9a>
 800ed42:	4621      	mov	r1, r4
 800ed44:	4628      	mov	r0, r5
 800ed46:	f000 f911 	bl	800ef6c <__swsetup_r>
 800ed4a:	b380      	cbz	r0, 800edae <_puts_r+0x9a>
 800ed4c:	f04f 35ff 	mov.w	r5, #4294967295
 800ed50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed52:	07da      	lsls	r2, r3, #31
 800ed54:	d405      	bmi.n	800ed62 <_puts_r+0x4e>
 800ed56:	89a3      	ldrh	r3, [r4, #12]
 800ed58:	059b      	lsls	r3, r3, #22
 800ed5a:	d402      	bmi.n	800ed62 <_puts_r+0x4e>
 800ed5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed5e:	f000 fa2d 	bl	800f1bc <__retarget_lock_release_recursive>
 800ed62:	4628      	mov	r0, r5
 800ed64:	bd70      	pop	{r4, r5, r6, pc}
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	da04      	bge.n	800ed74 <_puts_r+0x60>
 800ed6a:	69a2      	ldr	r2, [r4, #24]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	dc17      	bgt.n	800eda0 <_puts_r+0x8c>
 800ed70:	290a      	cmp	r1, #10
 800ed72:	d015      	beq.n	800eda0 <_puts_r+0x8c>
 800ed74:	6823      	ldr	r3, [r4, #0]
 800ed76:	1c5a      	adds	r2, r3, #1
 800ed78:	6022      	str	r2, [r4, #0]
 800ed7a:	7019      	strb	r1, [r3, #0]
 800ed7c:	68a3      	ldr	r3, [r4, #8]
 800ed7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ed82:	3b01      	subs	r3, #1
 800ed84:	60a3      	str	r3, [r4, #8]
 800ed86:	2900      	cmp	r1, #0
 800ed88:	d1ed      	bne.n	800ed66 <_puts_r+0x52>
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	da11      	bge.n	800edb2 <_puts_r+0x9e>
 800ed8e:	4622      	mov	r2, r4
 800ed90:	210a      	movs	r1, #10
 800ed92:	4628      	mov	r0, r5
 800ed94:	f000 f8ab 	bl	800eeee <__swbuf_r>
 800ed98:	3001      	adds	r0, #1
 800ed9a:	d0d7      	beq.n	800ed4c <_puts_r+0x38>
 800ed9c:	250a      	movs	r5, #10
 800ed9e:	e7d7      	b.n	800ed50 <_puts_r+0x3c>
 800eda0:	4622      	mov	r2, r4
 800eda2:	4628      	mov	r0, r5
 800eda4:	f000 f8a3 	bl	800eeee <__swbuf_r>
 800eda8:	3001      	adds	r0, #1
 800edaa:	d1e7      	bne.n	800ed7c <_puts_r+0x68>
 800edac:	e7ce      	b.n	800ed4c <_puts_r+0x38>
 800edae:	3e01      	subs	r6, #1
 800edb0:	e7e4      	b.n	800ed7c <_puts_r+0x68>
 800edb2:	6823      	ldr	r3, [r4, #0]
 800edb4:	1c5a      	adds	r2, r3, #1
 800edb6:	6022      	str	r2, [r4, #0]
 800edb8:	220a      	movs	r2, #10
 800edba:	701a      	strb	r2, [r3, #0]
 800edbc:	e7ee      	b.n	800ed9c <_puts_r+0x88>
	...

0800edc0 <puts>:
 800edc0:	4b02      	ldr	r3, [pc, #8]	@ (800edcc <puts+0xc>)
 800edc2:	4601      	mov	r1, r0
 800edc4:	6818      	ldr	r0, [r3, #0]
 800edc6:	f7ff bfa5 	b.w	800ed14 <_puts_r>
 800edca:	bf00      	nop
 800edcc:	20000018 	.word	0x20000018

0800edd0 <siprintf>:
 800edd0:	b40e      	push	{r1, r2, r3}
 800edd2:	b500      	push	{lr}
 800edd4:	b09c      	sub	sp, #112	@ 0x70
 800edd6:	ab1d      	add	r3, sp, #116	@ 0x74
 800edd8:	9002      	str	r0, [sp, #8]
 800edda:	9006      	str	r0, [sp, #24]
 800eddc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ede0:	4809      	ldr	r0, [pc, #36]	@ (800ee08 <siprintf+0x38>)
 800ede2:	9107      	str	r1, [sp, #28]
 800ede4:	9104      	str	r1, [sp, #16]
 800ede6:	4909      	ldr	r1, [pc, #36]	@ (800ee0c <siprintf+0x3c>)
 800ede8:	f853 2b04 	ldr.w	r2, [r3], #4
 800edec:	9105      	str	r1, [sp, #20]
 800edee:	6800      	ldr	r0, [r0, #0]
 800edf0:	9301      	str	r3, [sp, #4]
 800edf2:	a902      	add	r1, sp, #8
 800edf4:	f002 fc22 	bl	801163c <_svfiprintf_r>
 800edf8:	9b02      	ldr	r3, [sp, #8]
 800edfa:	2200      	movs	r2, #0
 800edfc:	701a      	strb	r2, [r3, #0]
 800edfe:	b01c      	add	sp, #112	@ 0x70
 800ee00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee04:	b003      	add	sp, #12
 800ee06:	4770      	bx	lr
 800ee08:	20000018 	.word	0x20000018
 800ee0c:	ffff0208 	.word	0xffff0208

0800ee10 <siscanf>:
 800ee10:	b40e      	push	{r1, r2, r3}
 800ee12:	b530      	push	{r4, r5, lr}
 800ee14:	b09c      	sub	sp, #112	@ 0x70
 800ee16:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ee18:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800ee1c:	f854 5b04 	ldr.w	r5, [r4], #4
 800ee20:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ee24:	9002      	str	r0, [sp, #8]
 800ee26:	9006      	str	r0, [sp, #24]
 800ee28:	f7f1 fa5a 	bl	80002e0 <strlen>
 800ee2c:	4b0b      	ldr	r3, [pc, #44]	@ (800ee5c <siscanf+0x4c>)
 800ee2e:	9003      	str	r0, [sp, #12]
 800ee30:	9007      	str	r0, [sp, #28]
 800ee32:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee34:	480a      	ldr	r0, [pc, #40]	@ (800ee60 <siscanf+0x50>)
 800ee36:	9401      	str	r4, [sp, #4]
 800ee38:	2300      	movs	r3, #0
 800ee3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ee3c:	9314      	str	r3, [sp, #80]	@ 0x50
 800ee3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ee42:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ee46:	462a      	mov	r2, r5
 800ee48:	4623      	mov	r3, r4
 800ee4a:	a902      	add	r1, sp, #8
 800ee4c:	6800      	ldr	r0, [r0, #0]
 800ee4e:	f002 fd49 	bl	80118e4 <__ssvfiscanf_r>
 800ee52:	b01c      	add	sp, #112	@ 0x70
 800ee54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee58:	b003      	add	sp, #12
 800ee5a:	4770      	bx	lr
 800ee5c:	0800ee87 	.word	0x0800ee87
 800ee60:	20000018 	.word	0x20000018

0800ee64 <__sread>:
 800ee64:	b510      	push	{r4, lr}
 800ee66:	460c      	mov	r4, r1
 800ee68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee6c:	f000 f932 	bl	800f0d4 <_read_r>
 800ee70:	2800      	cmp	r0, #0
 800ee72:	bfab      	itete	ge
 800ee74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ee76:	89a3      	ldrhlt	r3, [r4, #12]
 800ee78:	181b      	addge	r3, r3, r0
 800ee7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ee7e:	bfac      	ite	ge
 800ee80:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ee82:	81a3      	strhlt	r3, [r4, #12]
 800ee84:	bd10      	pop	{r4, pc}

0800ee86 <__seofread>:
 800ee86:	2000      	movs	r0, #0
 800ee88:	4770      	bx	lr

0800ee8a <__swrite>:
 800ee8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee8e:	461f      	mov	r7, r3
 800ee90:	898b      	ldrh	r3, [r1, #12]
 800ee92:	05db      	lsls	r3, r3, #23
 800ee94:	4605      	mov	r5, r0
 800ee96:	460c      	mov	r4, r1
 800ee98:	4616      	mov	r6, r2
 800ee9a:	d505      	bpl.n	800eea8 <__swrite+0x1e>
 800ee9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eea0:	2302      	movs	r3, #2
 800eea2:	2200      	movs	r2, #0
 800eea4:	f000 f904 	bl	800f0b0 <_lseek_r>
 800eea8:	89a3      	ldrh	r3, [r4, #12]
 800eeaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eeae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eeb2:	81a3      	strh	r3, [r4, #12]
 800eeb4:	4632      	mov	r2, r6
 800eeb6:	463b      	mov	r3, r7
 800eeb8:	4628      	mov	r0, r5
 800eeba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eebe:	f000 b93f 	b.w	800f140 <_write_r>

0800eec2 <__sseek>:
 800eec2:	b510      	push	{r4, lr}
 800eec4:	460c      	mov	r4, r1
 800eec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeca:	f000 f8f1 	bl	800f0b0 <_lseek_r>
 800eece:	1c43      	adds	r3, r0, #1
 800eed0:	89a3      	ldrh	r3, [r4, #12]
 800eed2:	bf15      	itete	ne
 800eed4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eed6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eeda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eede:	81a3      	strheq	r3, [r4, #12]
 800eee0:	bf18      	it	ne
 800eee2:	81a3      	strhne	r3, [r4, #12]
 800eee4:	bd10      	pop	{r4, pc}

0800eee6 <__sclose>:
 800eee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeea:	f000 b8d1 	b.w	800f090 <_close_r>

0800eeee <__swbuf_r>:
 800eeee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eef0:	460e      	mov	r6, r1
 800eef2:	4614      	mov	r4, r2
 800eef4:	4605      	mov	r5, r0
 800eef6:	b118      	cbz	r0, 800ef00 <__swbuf_r+0x12>
 800eef8:	6a03      	ldr	r3, [r0, #32]
 800eefa:	b90b      	cbnz	r3, 800ef00 <__swbuf_r+0x12>
 800eefc:	f7ff fec2 	bl	800ec84 <__sinit>
 800ef00:	69a3      	ldr	r3, [r4, #24]
 800ef02:	60a3      	str	r3, [r4, #8]
 800ef04:	89a3      	ldrh	r3, [r4, #12]
 800ef06:	071a      	lsls	r2, r3, #28
 800ef08:	d501      	bpl.n	800ef0e <__swbuf_r+0x20>
 800ef0a:	6923      	ldr	r3, [r4, #16]
 800ef0c:	b943      	cbnz	r3, 800ef20 <__swbuf_r+0x32>
 800ef0e:	4621      	mov	r1, r4
 800ef10:	4628      	mov	r0, r5
 800ef12:	f000 f82b 	bl	800ef6c <__swsetup_r>
 800ef16:	b118      	cbz	r0, 800ef20 <__swbuf_r+0x32>
 800ef18:	f04f 37ff 	mov.w	r7, #4294967295
 800ef1c:	4638      	mov	r0, r7
 800ef1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef20:	6823      	ldr	r3, [r4, #0]
 800ef22:	6922      	ldr	r2, [r4, #16]
 800ef24:	1a98      	subs	r0, r3, r2
 800ef26:	6963      	ldr	r3, [r4, #20]
 800ef28:	b2f6      	uxtb	r6, r6
 800ef2a:	4283      	cmp	r3, r0
 800ef2c:	4637      	mov	r7, r6
 800ef2e:	dc05      	bgt.n	800ef3c <__swbuf_r+0x4e>
 800ef30:	4621      	mov	r1, r4
 800ef32:	4628      	mov	r0, r5
 800ef34:	f003 f95e 	bl	80121f4 <_fflush_r>
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	d1ed      	bne.n	800ef18 <__swbuf_r+0x2a>
 800ef3c:	68a3      	ldr	r3, [r4, #8]
 800ef3e:	3b01      	subs	r3, #1
 800ef40:	60a3      	str	r3, [r4, #8]
 800ef42:	6823      	ldr	r3, [r4, #0]
 800ef44:	1c5a      	adds	r2, r3, #1
 800ef46:	6022      	str	r2, [r4, #0]
 800ef48:	701e      	strb	r6, [r3, #0]
 800ef4a:	6962      	ldr	r2, [r4, #20]
 800ef4c:	1c43      	adds	r3, r0, #1
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d004      	beq.n	800ef5c <__swbuf_r+0x6e>
 800ef52:	89a3      	ldrh	r3, [r4, #12]
 800ef54:	07db      	lsls	r3, r3, #31
 800ef56:	d5e1      	bpl.n	800ef1c <__swbuf_r+0x2e>
 800ef58:	2e0a      	cmp	r6, #10
 800ef5a:	d1df      	bne.n	800ef1c <__swbuf_r+0x2e>
 800ef5c:	4621      	mov	r1, r4
 800ef5e:	4628      	mov	r0, r5
 800ef60:	f003 f948 	bl	80121f4 <_fflush_r>
 800ef64:	2800      	cmp	r0, #0
 800ef66:	d0d9      	beq.n	800ef1c <__swbuf_r+0x2e>
 800ef68:	e7d6      	b.n	800ef18 <__swbuf_r+0x2a>
	...

0800ef6c <__swsetup_r>:
 800ef6c:	b538      	push	{r3, r4, r5, lr}
 800ef6e:	4b29      	ldr	r3, [pc, #164]	@ (800f014 <__swsetup_r+0xa8>)
 800ef70:	4605      	mov	r5, r0
 800ef72:	6818      	ldr	r0, [r3, #0]
 800ef74:	460c      	mov	r4, r1
 800ef76:	b118      	cbz	r0, 800ef80 <__swsetup_r+0x14>
 800ef78:	6a03      	ldr	r3, [r0, #32]
 800ef7a:	b90b      	cbnz	r3, 800ef80 <__swsetup_r+0x14>
 800ef7c:	f7ff fe82 	bl	800ec84 <__sinit>
 800ef80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef84:	0719      	lsls	r1, r3, #28
 800ef86:	d422      	bmi.n	800efce <__swsetup_r+0x62>
 800ef88:	06da      	lsls	r2, r3, #27
 800ef8a:	d407      	bmi.n	800ef9c <__swsetup_r+0x30>
 800ef8c:	2209      	movs	r2, #9
 800ef8e:	602a      	str	r2, [r5, #0]
 800ef90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef94:	81a3      	strh	r3, [r4, #12]
 800ef96:	f04f 30ff 	mov.w	r0, #4294967295
 800ef9a:	e033      	b.n	800f004 <__swsetup_r+0x98>
 800ef9c:	0758      	lsls	r0, r3, #29
 800ef9e:	d512      	bpl.n	800efc6 <__swsetup_r+0x5a>
 800efa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800efa2:	b141      	cbz	r1, 800efb6 <__swsetup_r+0x4a>
 800efa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800efa8:	4299      	cmp	r1, r3
 800efaa:	d002      	beq.n	800efb2 <__swsetup_r+0x46>
 800efac:	4628      	mov	r0, r5
 800efae:	f000 ff67 	bl	800fe80 <_free_r>
 800efb2:	2300      	movs	r3, #0
 800efb4:	6363      	str	r3, [r4, #52]	@ 0x34
 800efb6:	89a3      	ldrh	r3, [r4, #12]
 800efb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800efbc:	81a3      	strh	r3, [r4, #12]
 800efbe:	2300      	movs	r3, #0
 800efc0:	6063      	str	r3, [r4, #4]
 800efc2:	6923      	ldr	r3, [r4, #16]
 800efc4:	6023      	str	r3, [r4, #0]
 800efc6:	89a3      	ldrh	r3, [r4, #12]
 800efc8:	f043 0308 	orr.w	r3, r3, #8
 800efcc:	81a3      	strh	r3, [r4, #12]
 800efce:	6923      	ldr	r3, [r4, #16]
 800efd0:	b94b      	cbnz	r3, 800efe6 <__swsetup_r+0x7a>
 800efd2:	89a3      	ldrh	r3, [r4, #12]
 800efd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800efd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800efdc:	d003      	beq.n	800efe6 <__swsetup_r+0x7a>
 800efde:	4621      	mov	r1, r4
 800efe0:	4628      	mov	r0, r5
 800efe2:	f003 f955 	bl	8012290 <__smakebuf_r>
 800efe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efea:	f013 0201 	ands.w	r2, r3, #1
 800efee:	d00a      	beq.n	800f006 <__swsetup_r+0x9a>
 800eff0:	2200      	movs	r2, #0
 800eff2:	60a2      	str	r2, [r4, #8]
 800eff4:	6962      	ldr	r2, [r4, #20]
 800eff6:	4252      	negs	r2, r2
 800eff8:	61a2      	str	r2, [r4, #24]
 800effa:	6922      	ldr	r2, [r4, #16]
 800effc:	b942      	cbnz	r2, 800f010 <__swsetup_r+0xa4>
 800effe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f002:	d1c5      	bne.n	800ef90 <__swsetup_r+0x24>
 800f004:	bd38      	pop	{r3, r4, r5, pc}
 800f006:	0799      	lsls	r1, r3, #30
 800f008:	bf58      	it	pl
 800f00a:	6962      	ldrpl	r2, [r4, #20]
 800f00c:	60a2      	str	r2, [r4, #8]
 800f00e:	e7f4      	b.n	800effa <__swsetup_r+0x8e>
 800f010:	2000      	movs	r0, #0
 800f012:	e7f7      	b.n	800f004 <__swsetup_r+0x98>
 800f014:	20000018 	.word	0x20000018

0800f018 <memset>:
 800f018:	4402      	add	r2, r0
 800f01a:	4603      	mov	r3, r0
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d100      	bne.n	800f022 <memset+0xa>
 800f020:	4770      	bx	lr
 800f022:	f803 1b01 	strb.w	r1, [r3], #1
 800f026:	e7f9      	b.n	800f01c <memset+0x4>

0800f028 <_raise_r>:
 800f028:	291f      	cmp	r1, #31
 800f02a:	b538      	push	{r3, r4, r5, lr}
 800f02c:	4605      	mov	r5, r0
 800f02e:	460c      	mov	r4, r1
 800f030:	d904      	bls.n	800f03c <_raise_r+0x14>
 800f032:	2316      	movs	r3, #22
 800f034:	6003      	str	r3, [r0, #0]
 800f036:	f04f 30ff 	mov.w	r0, #4294967295
 800f03a:	bd38      	pop	{r3, r4, r5, pc}
 800f03c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f03e:	b112      	cbz	r2, 800f046 <_raise_r+0x1e>
 800f040:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f044:	b94b      	cbnz	r3, 800f05a <_raise_r+0x32>
 800f046:	4628      	mov	r0, r5
 800f048:	f000 f868 	bl	800f11c <_getpid_r>
 800f04c:	4622      	mov	r2, r4
 800f04e:	4601      	mov	r1, r0
 800f050:	4628      	mov	r0, r5
 800f052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f056:	f000 b84f 	b.w	800f0f8 <_kill_r>
 800f05a:	2b01      	cmp	r3, #1
 800f05c:	d00a      	beq.n	800f074 <_raise_r+0x4c>
 800f05e:	1c59      	adds	r1, r3, #1
 800f060:	d103      	bne.n	800f06a <_raise_r+0x42>
 800f062:	2316      	movs	r3, #22
 800f064:	6003      	str	r3, [r0, #0]
 800f066:	2001      	movs	r0, #1
 800f068:	e7e7      	b.n	800f03a <_raise_r+0x12>
 800f06a:	2100      	movs	r1, #0
 800f06c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f070:	4620      	mov	r0, r4
 800f072:	4798      	blx	r3
 800f074:	2000      	movs	r0, #0
 800f076:	e7e0      	b.n	800f03a <_raise_r+0x12>

0800f078 <raise>:
 800f078:	4b02      	ldr	r3, [pc, #8]	@ (800f084 <raise+0xc>)
 800f07a:	4601      	mov	r1, r0
 800f07c:	6818      	ldr	r0, [r3, #0]
 800f07e:	f7ff bfd3 	b.w	800f028 <_raise_r>
 800f082:	bf00      	nop
 800f084:	20000018 	.word	0x20000018

0800f088 <_localeconv_r>:
 800f088:	4800      	ldr	r0, [pc, #0]	@ (800f08c <_localeconv_r+0x4>)
 800f08a:	4770      	bx	lr
 800f08c:	20000158 	.word	0x20000158

0800f090 <_close_r>:
 800f090:	b538      	push	{r3, r4, r5, lr}
 800f092:	4d06      	ldr	r5, [pc, #24]	@ (800f0ac <_close_r+0x1c>)
 800f094:	2300      	movs	r3, #0
 800f096:	4604      	mov	r4, r0
 800f098:	4608      	mov	r0, r1
 800f09a:	602b      	str	r3, [r5, #0]
 800f09c:	f7f4 fff2 	bl	8004084 <_close>
 800f0a0:	1c43      	adds	r3, r0, #1
 800f0a2:	d102      	bne.n	800f0aa <_close_r+0x1a>
 800f0a4:	682b      	ldr	r3, [r5, #0]
 800f0a6:	b103      	cbz	r3, 800f0aa <_close_r+0x1a>
 800f0a8:	6023      	str	r3, [r4, #0]
 800f0aa:	bd38      	pop	{r3, r4, r5, pc}
 800f0ac:	2001e338 	.word	0x2001e338

0800f0b0 <_lseek_r>:
 800f0b0:	b538      	push	{r3, r4, r5, lr}
 800f0b2:	4d07      	ldr	r5, [pc, #28]	@ (800f0d0 <_lseek_r+0x20>)
 800f0b4:	4604      	mov	r4, r0
 800f0b6:	4608      	mov	r0, r1
 800f0b8:	4611      	mov	r1, r2
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	602a      	str	r2, [r5, #0]
 800f0be:	461a      	mov	r2, r3
 800f0c0:	f7f5 f807 	bl	80040d2 <_lseek>
 800f0c4:	1c43      	adds	r3, r0, #1
 800f0c6:	d102      	bne.n	800f0ce <_lseek_r+0x1e>
 800f0c8:	682b      	ldr	r3, [r5, #0]
 800f0ca:	b103      	cbz	r3, 800f0ce <_lseek_r+0x1e>
 800f0cc:	6023      	str	r3, [r4, #0]
 800f0ce:	bd38      	pop	{r3, r4, r5, pc}
 800f0d0:	2001e338 	.word	0x2001e338

0800f0d4 <_read_r>:
 800f0d4:	b538      	push	{r3, r4, r5, lr}
 800f0d6:	4d07      	ldr	r5, [pc, #28]	@ (800f0f4 <_read_r+0x20>)
 800f0d8:	4604      	mov	r4, r0
 800f0da:	4608      	mov	r0, r1
 800f0dc:	4611      	mov	r1, r2
 800f0de:	2200      	movs	r2, #0
 800f0e0:	602a      	str	r2, [r5, #0]
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	f7f4 ff95 	bl	8004012 <_read>
 800f0e8:	1c43      	adds	r3, r0, #1
 800f0ea:	d102      	bne.n	800f0f2 <_read_r+0x1e>
 800f0ec:	682b      	ldr	r3, [r5, #0]
 800f0ee:	b103      	cbz	r3, 800f0f2 <_read_r+0x1e>
 800f0f0:	6023      	str	r3, [r4, #0]
 800f0f2:	bd38      	pop	{r3, r4, r5, pc}
 800f0f4:	2001e338 	.word	0x2001e338

0800f0f8 <_kill_r>:
 800f0f8:	b538      	push	{r3, r4, r5, lr}
 800f0fa:	4d07      	ldr	r5, [pc, #28]	@ (800f118 <_kill_r+0x20>)
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	4604      	mov	r4, r0
 800f100:	4608      	mov	r0, r1
 800f102:	4611      	mov	r1, r2
 800f104:	602b      	str	r3, [r5, #0]
 800f106:	f7f4 ff69 	bl	8003fdc <_kill>
 800f10a:	1c43      	adds	r3, r0, #1
 800f10c:	d102      	bne.n	800f114 <_kill_r+0x1c>
 800f10e:	682b      	ldr	r3, [r5, #0]
 800f110:	b103      	cbz	r3, 800f114 <_kill_r+0x1c>
 800f112:	6023      	str	r3, [r4, #0]
 800f114:	bd38      	pop	{r3, r4, r5, pc}
 800f116:	bf00      	nop
 800f118:	2001e338 	.word	0x2001e338

0800f11c <_getpid_r>:
 800f11c:	f7f4 bf56 	b.w	8003fcc <_getpid>

0800f120 <_sbrk_r>:
 800f120:	b538      	push	{r3, r4, r5, lr}
 800f122:	4d06      	ldr	r5, [pc, #24]	@ (800f13c <_sbrk_r+0x1c>)
 800f124:	2300      	movs	r3, #0
 800f126:	4604      	mov	r4, r0
 800f128:	4608      	mov	r0, r1
 800f12a:	602b      	str	r3, [r5, #0]
 800f12c:	f7f4 ffde 	bl	80040ec <_sbrk>
 800f130:	1c43      	adds	r3, r0, #1
 800f132:	d102      	bne.n	800f13a <_sbrk_r+0x1a>
 800f134:	682b      	ldr	r3, [r5, #0]
 800f136:	b103      	cbz	r3, 800f13a <_sbrk_r+0x1a>
 800f138:	6023      	str	r3, [r4, #0]
 800f13a:	bd38      	pop	{r3, r4, r5, pc}
 800f13c:	2001e338 	.word	0x2001e338

0800f140 <_write_r>:
 800f140:	b538      	push	{r3, r4, r5, lr}
 800f142:	4d07      	ldr	r5, [pc, #28]	@ (800f160 <_write_r+0x20>)
 800f144:	4604      	mov	r4, r0
 800f146:	4608      	mov	r0, r1
 800f148:	4611      	mov	r1, r2
 800f14a:	2200      	movs	r2, #0
 800f14c:	602a      	str	r2, [r5, #0]
 800f14e:	461a      	mov	r2, r3
 800f150:	f7f4 ff7c 	bl	800404c <_write>
 800f154:	1c43      	adds	r3, r0, #1
 800f156:	d102      	bne.n	800f15e <_write_r+0x1e>
 800f158:	682b      	ldr	r3, [r5, #0]
 800f15a:	b103      	cbz	r3, 800f15e <_write_r+0x1e>
 800f15c:	6023      	str	r3, [r4, #0]
 800f15e:	bd38      	pop	{r3, r4, r5, pc}
 800f160:	2001e338 	.word	0x2001e338

0800f164 <__errno>:
 800f164:	4b01      	ldr	r3, [pc, #4]	@ (800f16c <__errno+0x8>)
 800f166:	6818      	ldr	r0, [r3, #0]
 800f168:	4770      	bx	lr
 800f16a:	bf00      	nop
 800f16c:	20000018 	.word	0x20000018

0800f170 <__libc_init_array>:
 800f170:	b570      	push	{r4, r5, r6, lr}
 800f172:	4d0d      	ldr	r5, [pc, #52]	@ (800f1a8 <__libc_init_array+0x38>)
 800f174:	4c0d      	ldr	r4, [pc, #52]	@ (800f1ac <__libc_init_array+0x3c>)
 800f176:	1b64      	subs	r4, r4, r5
 800f178:	10a4      	asrs	r4, r4, #2
 800f17a:	2600      	movs	r6, #0
 800f17c:	42a6      	cmp	r6, r4
 800f17e:	d109      	bne.n	800f194 <__libc_init_array+0x24>
 800f180:	4d0b      	ldr	r5, [pc, #44]	@ (800f1b0 <__libc_init_array+0x40>)
 800f182:	4c0c      	ldr	r4, [pc, #48]	@ (800f1b4 <__libc_init_array+0x44>)
 800f184:	f003 fdd0 	bl	8012d28 <_init>
 800f188:	1b64      	subs	r4, r4, r5
 800f18a:	10a4      	asrs	r4, r4, #2
 800f18c:	2600      	movs	r6, #0
 800f18e:	42a6      	cmp	r6, r4
 800f190:	d105      	bne.n	800f19e <__libc_init_array+0x2e>
 800f192:	bd70      	pop	{r4, r5, r6, pc}
 800f194:	f855 3b04 	ldr.w	r3, [r5], #4
 800f198:	4798      	blx	r3
 800f19a:	3601      	adds	r6, #1
 800f19c:	e7ee      	b.n	800f17c <__libc_init_array+0xc>
 800f19e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1a2:	4798      	blx	r3
 800f1a4:	3601      	adds	r6, #1
 800f1a6:	e7f2      	b.n	800f18e <__libc_init_array+0x1e>
 800f1a8:	080133a4 	.word	0x080133a4
 800f1ac:	080133a4 	.word	0x080133a4
 800f1b0:	080133a4 	.word	0x080133a4
 800f1b4:	080133ac 	.word	0x080133ac

0800f1b8 <__retarget_lock_init_recursive>:
 800f1b8:	4770      	bx	lr

0800f1ba <__retarget_lock_acquire_recursive>:
 800f1ba:	4770      	bx	lr

0800f1bc <__retarget_lock_release_recursive>:
 800f1bc:	4770      	bx	lr

0800f1be <memcpy>:
 800f1be:	440a      	add	r2, r1
 800f1c0:	4291      	cmp	r1, r2
 800f1c2:	f100 33ff 	add.w	r3, r0, #4294967295
 800f1c6:	d100      	bne.n	800f1ca <memcpy+0xc>
 800f1c8:	4770      	bx	lr
 800f1ca:	b510      	push	{r4, lr}
 800f1cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1d4:	4291      	cmp	r1, r2
 800f1d6:	d1f9      	bne.n	800f1cc <memcpy+0xe>
 800f1d8:	bd10      	pop	{r4, pc}
	...

0800f1dc <nanf>:
 800f1dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f1e4 <nanf+0x8>
 800f1e0:	4770      	bx	lr
 800f1e2:	bf00      	nop
 800f1e4:	7fc00000 	.word	0x7fc00000

0800f1e8 <quorem>:
 800f1e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ec:	6903      	ldr	r3, [r0, #16]
 800f1ee:	690c      	ldr	r4, [r1, #16]
 800f1f0:	42a3      	cmp	r3, r4
 800f1f2:	4607      	mov	r7, r0
 800f1f4:	db7e      	blt.n	800f2f4 <quorem+0x10c>
 800f1f6:	3c01      	subs	r4, #1
 800f1f8:	f101 0814 	add.w	r8, r1, #20
 800f1fc:	00a3      	lsls	r3, r4, #2
 800f1fe:	f100 0514 	add.w	r5, r0, #20
 800f202:	9300      	str	r3, [sp, #0]
 800f204:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f208:	9301      	str	r3, [sp, #4]
 800f20a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f20e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f212:	3301      	adds	r3, #1
 800f214:	429a      	cmp	r2, r3
 800f216:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f21a:	fbb2 f6f3 	udiv	r6, r2, r3
 800f21e:	d32e      	bcc.n	800f27e <quorem+0x96>
 800f220:	f04f 0a00 	mov.w	sl, #0
 800f224:	46c4      	mov	ip, r8
 800f226:	46ae      	mov	lr, r5
 800f228:	46d3      	mov	fp, sl
 800f22a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f22e:	b298      	uxth	r0, r3
 800f230:	fb06 a000 	mla	r0, r6, r0, sl
 800f234:	0c02      	lsrs	r2, r0, #16
 800f236:	0c1b      	lsrs	r3, r3, #16
 800f238:	fb06 2303 	mla	r3, r6, r3, r2
 800f23c:	f8de 2000 	ldr.w	r2, [lr]
 800f240:	b280      	uxth	r0, r0
 800f242:	b292      	uxth	r2, r2
 800f244:	1a12      	subs	r2, r2, r0
 800f246:	445a      	add	r2, fp
 800f248:	f8de 0000 	ldr.w	r0, [lr]
 800f24c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f250:	b29b      	uxth	r3, r3
 800f252:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f256:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f25a:	b292      	uxth	r2, r2
 800f25c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f260:	45e1      	cmp	r9, ip
 800f262:	f84e 2b04 	str.w	r2, [lr], #4
 800f266:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f26a:	d2de      	bcs.n	800f22a <quorem+0x42>
 800f26c:	9b00      	ldr	r3, [sp, #0]
 800f26e:	58eb      	ldr	r3, [r5, r3]
 800f270:	b92b      	cbnz	r3, 800f27e <quorem+0x96>
 800f272:	9b01      	ldr	r3, [sp, #4]
 800f274:	3b04      	subs	r3, #4
 800f276:	429d      	cmp	r5, r3
 800f278:	461a      	mov	r2, r3
 800f27a:	d32f      	bcc.n	800f2dc <quorem+0xf4>
 800f27c:	613c      	str	r4, [r7, #16]
 800f27e:	4638      	mov	r0, r7
 800f280:	f001 f90c 	bl	801049c <__mcmp>
 800f284:	2800      	cmp	r0, #0
 800f286:	db25      	blt.n	800f2d4 <quorem+0xec>
 800f288:	4629      	mov	r1, r5
 800f28a:	2000      	movs	r0, #0
 800f28c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f290:	f8d1 c000 	ldr.w	ip, [r1]
 800f294:	fa1f fe82 	uxth.w	lr, r2
 800f298:	fa1f f38c 	uxth.w	r3, ip
 800f29c:	eba3 030e 	sub.w	r3, r3, lr
 800f2a0:	4403      	add	r3, r0
 800f2a2:	0c12      	lsrs	r2, r2, #16
 800f2a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f2a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f2ac:	b29b      	uxth	r3, r3
 800f2ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f2b2:	45c1      	cmp	r9, r8
 800f2b4:	f841 3b04 	str.w	r3, [r1], #4
 800f2b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f2bc:	d2e6      	bcs.n	800f28c <quorem+0xa4>
 800f2be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f2c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f2c6:	b922      	cbnz	r2, 800f2d2 <quorem+0xea>
 800f2c8:	3b04      	subs	r3, #4
 800f2ca:	429d      	cmp	r5, r3
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	d30b      	bcc.n	800f2e8 <quorem+0x100>
 800f2d0:	613c      	str	r4, [r7, #16]
 800f2d2:	3601      	adds	r6, #1
 800f2d4:	4630      	mov	r0, r6
 800f2d6:	b003      	add	sp, #12
 800f2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2dc:	6812      	ldr	r2, [r2, #0]
 800f2de:	3b04      	subs	r3, #4
 800f2e0:	2a00      	cmp	r2, #0
 800f2e2:	d1cb      	bne.n	800f27c <quorem+0x94>
 800f2e4:	3c01      	subs	r4, #1
 800f2e6:	e7c6      	b.n	800f276 <quorem+0x8e>
 800f2e8:	6812      	ldr	r2, [r2, #0]
 800f2ea:	3b04      	subs	r3, #4
 800f2ec:	2a00      	cmp	r2, #0
 800f2ee:	d1ef      	bne.n	800f2d0 <quorem+0xe8>
 800f2f0:	3c01      	subs	r4, #1
 800f2f2:	e7ea      	b.n	800f2ca <quorem+0xe2>
 800f2f4:	2000      	movs	r0, #0
 800f2f6:	e7ee      	b.n	800f2d6 <quorem+0xee>

0800f2f8 <_dtoa_r>:
 800f2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2fc:	69c7      	ldr	r7, [r0, #28]
 800f2fe:	b099      	sub	sp, #100	@ 0x64
 800f300:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f304:	ec55 4b10 	vmov	r4, r5, d0
 800f308:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f30a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f30c:	4683      	mov	fp, r0
 800f30e:	920e      	str	r2, [sp, #56]	@ 0x38
 800f310:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f312:	b97f      	cbnz	r7, 800f334 <_dtoa_r+0x3c>
 800f314:	2010      	movs	r0, #16
 800f316:	f7fe fcff 	bl	800dd18 <malloc>
 800f31a:	4602      	mov	r2, r0
 800f31c:	f8cb 001c 	str.w	r0, [fp, #28]
 800f320:	b920      	cbnz	r0, 800f32c <_dtoa_r+0x34>
 800f322:	4ba7      	ldr	r3, [pc, #668]	@ (800f5c0 <_dtoa_r+0x2c8>)
 800f324:	21ef      	movs	r1, #239	@ 0xef
 800f326:	48a7      	ldr	r0, [pc, #668]	@ (800f5c4 <_dtoa_r+0x2cc>)
 800f328:	f003 f8ba 	bl	80124a0 <__assert_func>
 800f32c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f330:	6007      	str	r7, [r0, #0]
 800f332:	60c7      	str	r7, [r0, #12]
 800f334:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f338:	6819      	ldr	r1, [r3, #0]
 800f33a:	b159      	cbz	r1, 800f354 <_dtoa_r+0x5c>
 800f33c:	685a      	ldr	r2, [r3, #4]
 800f33e:	604a      	str	r2, [r1, #4]
 800f340:	2301      	movs	r3, #1
 800f342:	4093      	lsls	r3, r2
 800f344:	608b      	str	r3, [r1, #8]
 800f346:	4658      	mov	r0, fp
 800f348:	f000 fe24 	bl	800ff94 <_Bfree>
 800f34c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f350:	2200      	movs	r2, #0
 800f352:	601a      	str	r2, [r3, #0]
 800f354:	1e2b      	subs	r3, r5, #0
 800f356:	bfb9      	ittee	lt
 800f358:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f35c:	9303      	strlt	r3, [sp, #12]
 800f35e:	2300      	movge	r3, #0
 800f360:	6033      	strge	r3, [r6, #0]
 800f362:	9f03      	ldr	r7, [sp, #12]
 800f364:	4b98      	ldr	r3, [pc, #608]	@ (800f5c8 <_dtoa_r+0x2d0>)
 800f366:	bfbc      	itt	lt
 800f368:	2201      	movlt	r2, #1
 800f36a:	6032      	strlt	r2, [r6, #0]
 800f36c:	43bb      	bics	r3, r7
 800f36e:	d112      	bne.n	800f396 <_dtoa_r+0x9e>
 800f370:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f372:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f376:	6013      	str	r3, [r2, #0]
 800f378:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f37c:	4323      	orrs	r3, r4
 800f37e:	f000 854d 	beq.w	800fe1c <_dtoa_r+0xb24>
 800f382:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f384:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f5dc <_dtoa_r+0x2e4>
 800f388:	2b00      	cmp	r3, #0
 800f38a:	f000 854f 	beq.w	800fe2c <_dtoa_r+0xb34>
 800f38e:	f10a 0303 	add.w	r3, sl, #3
 800f392:	f000 bd49 	b.w	800fe28 <_dtoa_r+0xb30>
 800f396:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f39a:	2200      	movs	r2, #0
 800f39c:	ec51 0b17 	vmov	r0, r1, d7
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f3a6:	f7f1 fbc7 	bl	8000b38 <__aeabi_dcmpeq>
 800f3aa:	4680      	mov	r8, r0
 800f3ac:	b158      	cbz	r0, 800f3c6 <_dtoa_r+0xce>
 800f3ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	6013      	str	r3, [r2, #0]
 800f3b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f3b6:	b113      	cbz	r3, 800f3be <_dtoa_r+0xc6>
 800f3b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f3ba:	4b84      	ldr	r3, [pc, #528]	@ (800f5cc <_dtoa_r+0x2d4>)
 800f3bc:	6013      	str	r3, [r2, #0]
 800f3be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f5e0 <_dtoa_r+0x2e8>
 800f3c2:	f000 bd33 	b.w	800fe2c <_dtoa_r+0xb34>
 800f3c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f3ca:	aa16      	add	r2, sp, #88	@ 0x58
 800f3cc:	a917      	add	r1, sp, #92	@ 0x5c
 800f3ce:	4658      	mov	r0, fp
 800f3d0:	f001 f984 	bl	80106dc <__d2b>
 800f3d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f3d8:	4681      	mov	r9, r0
 800f3da:	2e00      	cmp	r6, #0
 800f3dc:	d077      	beq.n	800f4ce <_dtoa_r+0x1d6>
 800f3de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f3e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f3e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f3e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f3f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f3f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	4b74      	ldr	r3, [pc, #464]	@ (800f5d0 <_dtoa_r+0x2d8>)
 800f3fe:	f7f0 ff7b 	bl	80002f8 <__aeabi_dsub>
 800f402:	a369      	add	r3, pc, #420	@ (adr r3, 800f5a8 <_dtoa_r+0x2b0>)
 800f404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f408:	f7f1 f92e 	bl	8000668 <__aeabi_dmul>
 800f40c:	a368      	add	r3, pc, #416	@ (adr r3, 800f5b0 <_dtoa_r+0x2b8>)
 800f40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f412:	f7f0 ff73 	bl	80002fc <__adddf3>
 800f416:	4604      	mov	r4, r0
 800f418:	4630      	mov	r0, r6
 800f41a:	460d      	mov	r5, r1
 800f41c:	f7f1 f8ba 	bl	8000594 <__aeabi_i2d>
 800f420:	a365      	add	r3, pc, #404	@ (adr r3, 800f5b8 <_dtoa_r+0x2c0>)
 800f422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f426:	f7f1 f91f 	bl	8000668 <__aeabi_dmul>
 800f42a:	4602      	mov	r2, r0
 800f42c:	460b      	mov	r3, r1
 800f42e:	4620      	mov	r0, r4
 800f430:	4629      	mov	r1, r5
 800f432:	f7f0 ff63 	bl	80002fc <__adddf3>
 800f436:	4604      	mov	r4, r0
 800f438:	460d      	mov	r5, r1
 800f43a:	f7f1 fbc5 	bl	8000bc8 <__aeabi_d2iz>
 800f43e:	2200      	movs	r2, #0
 800f440:	4607      	mov	r7, r0
 800f442:	2300      	movs	r3, #0
 800f444:	4620      	mov	r0, r4
 800f446:	4629      	mov	r1, r5
 800f448:	f7f1 fb80 	bl	8000b4c <__aeabi_dcmplt>
 800f44c:	b140      	cbz	r0, 800f460 <_dtoa_r+0x168>
 800f44e:	4638      	mov	r0, r7
 800f450:	f7f1 f8a0 	bl	8000594 <__aeabi_i2d>
 800f454:	4622      	mov	r2, r4
 800f456:	462b      	mov	r3, r5
 800f458:	f7f1 fb6e 	bl	8000b38 <__aeabi_dcmpeq>
 800f45c:	b900      	cbnz	r0, 800f460 <_dtoa_r+0x168>
 800f45e:	3f01      	subs	r7, #1
 800f460:	2f16      	cmp	r7, #22
 800f462:	d851      	bhi.n	800f508 <_dtoa_r+0x210>
 800f464:	4b5b      	ldr	r3, [pc, #364]	@ (800f5d4 <_dtoa_r+0x2dc>)
 800f466:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f472:	f7f1 fb6b 	bl	8000b4c <__aeabi_dcmplt>
 800f476:	2800      	cmp	r0, #0
 800f478:	d048      	beq.n	800f50c <_dtoa_r+0x214>
 800f47a:	3f01      	subs	r7, #1
 800f47c:	2300      	movs	r3, #0
 800f47e:	9312      	str	r3, [sp, #72]	@ 0x48
 800f480:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f482:	1b9b      	subs	r3, r3, r6
 800f484:	1e5a      	subs	r2, r3, #1
 800f486:	bf44      	itt	mi
 800f488:	f1c3 0801 	rsbmi	r8, r3, #1
 800f48c:	2300      	movmi	r3, #0
 800f48e:	9208      	str	r2, [sp, #32]
 800f490:	bf54      	ite	pl
 800f492:	f04f 0800 	movpl.w	r8, #0
 800f496:	9308      	strmi	r3, [sp, #32]
 800f498:	2f00      	cmp	r7, #0
 800f49a:	db39      	blt.n	800f510 <_dtoa_r+0x218>
 800f49c:	9b08      	ldr	r3, [sp, #32]
 800f49e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f4a0:	443b      	add	r3, r7
 800f4a2:	9308      	str	r3, [sp, #32]
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f4a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4aa:	2b09      	cmp	r3, #9
 800f4ac:	d864      	bhi.n	800f578 <_dtoa_r+0x280>
 800f4ae:	2b05      	cmp	r3, #5
 800f4b0:	bfc4      	itt	gt
 800f4b2:	3b04      	subgt	r3, #4
 800f4b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4b8:	f1a3 0302 	sub.w	r3, r3, #2
 800f4bc:	bfcc      	ite	gt
 800f4be:	2400      	movgt	r4, #0
 800f4c0:	2401      	movle	r4, #1
 800f4c2:	2b03      	cmp	r3, #3
 800f4c4:	d863      	bhi.n	800f58e <_dtoa_r+0x296>
 800f4c6:	e8df f003 	tbb	[pc, r3]
 800f4ca:	372a      	.short	0x372a
 800f4cc:	5535      	.short	0x5535
 800f4ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f4d2:	441e      	add	r6, r3
 800f4d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f4d8:	2b20      	cmp	r3, #32
 800f4da:	bfc1      	itttt	gt
 800f4dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f4e0:	409f      	lslgt	r7, r3
 800f4e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f4e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f4ea:	bfd6      	itet	le
 800f4ec:	f1c3 0320 	rsble	r3, r3, #32
 800f4f0:	ea47 0003 	orrgt.w	r0, r7, r3
 800f4f4:	fa04 f003 	lslle.w	r0, r4, r3
 800f4f8:	f7f1 f83c 	bl	8000574 <__aeabi_ui2d>
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f502:	3e01      	subs	r6, #1
 800f504:	9214      	str	r2, [sp, #80]	@ 0x50
 800f506:	e777      	b.n	800f3f8 <_dtoa_r+0x100>
 800f508:	2301      	movs	r3, #1
 800f50a:	e7b8      	b.n	800f47e <_dtoa_r+0x186>
 800f50c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f50e:	e7b7      	b.n	800f480 <_dtoa_r+0x188>
 800f510:	427b      	negs	r3, r7
 800f512:	930a      	str	r3, [sp, #40]	@ 0x28
 800f514:	2300      	movs	r3, #0
 800f516:	eba8 0807 	sub.w	r8, r8, r7
 800f51a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f51c:	e7c4      	b.n	800f4a8 <_dtoa_r+0x1b0>
 800f51e:	2300      	movs	r3, #0
 800f520:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f522:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f524:	2b00      	cmp	r3, #0
 800f526:	dc35      	bgt.n	800f594 <_dtoa_r+0x29c>
 800f528:	2301      	movs	r3, #1
 800f52a:	9300      	str	r3, [sp, #0]
 800f52c:	9307      	str	r3, [sp, #28]
 800f52e:	461a      	mov	r2, r3
 800f530:	920e      	str	r2, [sp, #56]	@ 0x38
 800f532:	e00b      	b.n	800f54c <_dtoa_r+0x254>
 800f534:	2301      	movs	r3, #1
 800f536:	e7f3      	b.n	800f520 <_dtoa_r+0x228>
 800f538:	2300      	movs	r3, #0
 800f53a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f53c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f53e:	18fb      	adds	r3, r7, r3
 800f540:	9300      	str	r3, [sp, #0]
 800f542:	3301      	adds	r3, #1
 800f544:	2b01      	cmp	r3, #1
 800f546:	9307      	str	r3, [sp, #28]
 800f548:	bfb8      	it	lt
 800f54a:	2301      	movlt	r3, #1
 800f54c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f550:	2100      	movs	r1, #0
 800f552:	2204      	movs	r2, #4
 800f554:	f102 0514 	add.w	r5, r2, #20
 800f558:	429d      	cmp	r5, r3
 800f55a:	d91f      	bls.n	800f59c <_dtoa_r+0x2a4>
 800f55c:	6041      	str	r1, [r0, #4]
 800f55e:	4658      	mov	r0, fp
 800f560:	f000 fcd8 	bl	800ff14 <_Balloc>
 800f564:	4682      	mov	sl, r0
 800f566:	2800      	cmp	r0, #0
 800f568:	d13c      	bne.n	800f5e4 <_dtoa_r+0x2ec>
 800f56a:	4b1b      	ldr	r3, [pc, #108]	@ (800f5d8 <_dtoa_r+0x2e0>)
 800f56c:	4602      	mov	r2, r0
 800f56e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f572:	e6d8      	b.n	800f326 <_dtoa_r+0x2e>
 800f574:	2301      	movs	r3, #1
 800f576:	e7e0      	b.n	800f53a <_dtoa_r+0x242>
 800f578:	2401      	movs	r4, #1
 800f57a:	2300      	movs	r3, #0
 800f57c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f57e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f580:	f04f 33ff 	mov.w	r3, #4294967295
 800f584:	9300      	str	r3, [sp, #0]
 800f586:	9307      	str	r3, [sp, #28]
 800f588:	2200      	movs	r2, #0
 800f58a:	2312      	movs	r3, #18
 800f58c:	e7d0      	b.n	800f530 <_dtoa_r+0x238>
 800f58e:	2301      	movs	r3, #1
 800f590:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f592:	e7f5      	b.n	800f580 <_dtoa_r+0x288>
 800f594:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	9307      	str	r3, [sp, #28]
 800f59a:	e7d7      	b.n	800f54c <_dtoa_r+0x254>
 800f59c:	3101      	adds	r1, #1
 800f59e:	0052      	lsls	r2, r2, #1
 800f5a0:	e7d8      	b.n	800f554 <_dtoa_r+0x25c>
 800f5a2:	bf00      	nop
 800f5a4:	f3af 8000 	nop.w
 800f5a8:	636f4361 	.word	0x636f4361
 800f5ac:	3fd287a7 	.word	0x3fd287a7
 800f5b0:	8b60c8b3 	.word	0x8b60c8b3
 800f5b4:	3fc68a28 	.word	0x3fc68a28
 800f5b8:	509f79fb 	.word	0x509f79fb
 800f5bc:	3fd34413 	.word	0x3fd34413
 800f5c0:	08012f96 	.word	0x08012f96
 800f5c4:	08012fad 	.word	0x08012fad
 800f5c8:	7ff00000 	.word	0x7ff00000
 800f5cc:	080132f1 	.word	0x080132f1
 800f5d0:	3ff80000 	.word	0x3ff80000
 800f5d4:	080130a8 	.word	0x080130a8
 800f5d8:	08013005 	.word	0x08013005
 800f5dc:	08012f92 	.word	0x08012f92
 800f5e0:	080132f0 	.word	0x080132f0
 800f5e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f5e8:	6018      	str	r0, [r3, #0]
 800f5ea:	9b07      	ldr	r3, [sp, #28]
 800f5ec:	2b0e      	cmp	r3, #14
 800f5ee:	f200 80a4 	bhi.w	800f73a <_dtoa_r+0x442>
 800f5f2:	2c00      	cmp	r4, #0
 800f5f4:	f000 80a1 	beq.w	800f73a <_dtoa_r+0x442>
 800f5f8:	2f00      	cmp	r7, #0
 800f5fa:	dd33      	ble.n	800f664 <_dtoa_r+0x36c>
 800f5fc:	4bad      	ldr	r3, [pc, #692]	@ (800f8b4 <_dtoa_r+0x5bc>)
 800f5fe:	f007 020f 	and.w	r2, r7, #15
 800f602:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f606:	ed93 7b00 	vldr	d7, [r3]
 800f60a:	05f8      	lsls	r0, r7, #23
 800f60c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f610:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f614:	d516      	bpl.n	800f644 <_dtoa_r+0x34c>
 800f616:	4ba8      	ldr	r3, [pc, #672]	@ (800f8b8 <_dtoa_r+0x5c0>)
 800f618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f61c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f620:	f7f1 f94c 	bl	80008bc <__aeabi_ddiv>
 800f624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f628:	f004 040f 	and.w	r4, r4, #15
 800f62c:	2603      	movs	r6, #3
 800f62e:	4da2      	ldr	r5, [pc, #648]	@ (800f8b8 <_dtoa_r+0x5c0>)
 800f630:	b954      	cbnz	r4, 800f648 <_dtoa_r+0x350>
 800f632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f63a:	f7f1 f93f 	bl	80008bc <__aeabi_ddiv>
 800f63e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f642:	e028      	b.n	800f696 <_dtoa_r+0x39e>
 800f644:	2602      	movs	r6, #2
 800f646:	e7f2      	b.n	800f62e <_dtoa_r+0x336>
 800f648:	07e1      	lsls	r1, r4, #31
 800f64a:	d508      	bpl.n	800f65e <_dtoa_r+0x366>
 800f64c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f650:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f654:	f7f1 f808 	bl	8000668 <__aeabi_dmul>
 800f658:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f65c:	3601      	adds	r6, #1
 800f65e:	1064      	asrs	r4, r4, #1
 800f660:	3508      	adds	r5, #8
 800f662:	e7e5      	b.n	800f630 <_dtoa_r+0x338>
 800f664:	f000 80d2 	beq.w	800f80c <_dtoa_r+0x514>
 800f668:	427c      	negs	r4, r7
 800f66a:	4b92      	ldr	r3, [pc, #584]	@ (800f8b4 <_dtoa_r+0x5bc>)
 800f66c:	4d92      	ldr	r5, [pc, #584]	@ (800f8b8 <_dtoa_r+0x5c0>)
 800f66e:	f004 020f 	and.w	r2, r4, #15
 800f672:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f67a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f67e:	f7f0 fff3 	bl	8000668 <__aeabi_dmul>
 800f682:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f686:	1124      	asrs	r4, r4, #4
 800f688:	2300      	movs	r3, #0
 800f68a:	2602      	movs	r6, #2
 800f68c:	2c00      	cmp	r4, #0
 800f68e:	f040 80b2 	bne.w	800f7f6 <_dtoa_r+0x4fe>
 800f692:	2b00      	cmp	r3, #0
 800f694:	d1d3      	bne.n	800f63e <_dtoa_r+0x346>
 800f696:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f698:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	f000 80b7 	beq.w	800f810 <_dtoa_r+0x518>
 800f6a2:	4b86      	ldr	r3, [pc, #536]	@ (800f8bc <_dtoa_r+0x5c4>)
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	4629      	mov	r1, r5
 800f6aa:	f7f1 fa4f 	bl	8000b4c <__aeabi_dcmplt>
 800f6ae:	2800      	cmp	r0, #0
 800f6b0:	f000 80ae 	beq.w	800f810 <_dtoa_r+0x518>
 800f6b4:	9b07      	ldr	r3, [sp, #28]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	f000 80aa 	beq.w	800f810 <_dtoa_r+0x518>
 800f6bc:	9b00      	ldr	r3, [sp, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	dd37      	ble.n	800f732 <_dtoa_r+0x43a>
 800f6c2:	1e7b      	subs	r3, r7, #1
 800f6c4:	9304      	str	r3, [sp, #16]
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	4b7d      	ldr	r3, [pc, #500]	@ (800f8c0 <_dtoa_r+0x5c8>)
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	4629      	mov	r1, r5
 800f6ce:	f7f0 ffcb 	bl	8000668 <__aeabi_dmul>
 800f6d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6d6:	9c00      	ldr	r4, [sp, #0]
 800f6d8:	3601      	adds	r6, #1
 800f6da:	4630      	mov	r0, r6
 800f6dc:	f7f0 ff5a 	bl	8000594 <__aeabi_i2d>
 800f6e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f6e4:	f7f0 ffc0 	bl	8000668 <__aeabi_dmul>
 800f6e8:	4b76      	ldr	r3, [pc, #472]	@ (800f8c4 <_dtoa_r+0x5cc>)
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	f7f0 fe06 	bl	80002fc <__adddf3>
 800f6f0:	4605      	mov	r5, r0
 800f6f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f6f6:	2c00      	cmp	r4, #0
 800f6f8:	f040 808d 	bne.w	800f816 <_dtoa_r+0x51e>
 800f6fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f700:	4b71      	ldr	r3, [pc, #452]	@ (800f8c8 <_dtoa_r+0x5d0>)
 800f702:	2200      	movs	r2, #0
 800f704:	f7f0 fdf8 	bl	80002f8 <__aeabi_dsub>
 800f708:	4602      	mov	r2, r0
 800f70a:	460b      	mov	r3, r1
 800f70c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f710:	462a      	mov	r2, r5
 800f712:	4633      	mov	r3, r6
 800f714:	f7f1 fa38 	bl	8000b88 <__aeabi_dcmpgt>
 800f718:	2800      	cmp	r0, #0
 800f71a:	f040 828b 	bne.w	800fc34 <_dtoa_r+0x93c>
 800f71e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f722:	462a      	mov	r2, r5
 800f724:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f728:	f7f1 fa10 	bl	8000b4c <__aeabi_dcmplt>
 800f72c:	2800      	cmp	r0, #0
 800f72e:	f040 8128 	bne.w	800f982 <_dtoa_r+0x68a>
 800f732:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f736:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f73a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	f2c0 815a 	blt.w	800f9f6 <_dtoa_r+0x6fe>
 800f742:	2f0e      	cmp	r7, #14
 800f744:	f300 8157 	bgt.w	800f9f6 <_dtoa_r+0x6fe>
 800f748:	4b5a      	ldr	r3, [pc, #360]	@ (800f8b4 <_dtoa_r+0x5bc>)
 800f74a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f74e:	ed93 7b00 	vldr	d7, [r3]
 800f752:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f754:	2b00      	cmp	r3, #0
 800f756:	ed8d 7b00 	vstr	d7, [sp]
 800f75a:	da03      	bge.n	800f764 <_dtoa_r+0x46c>
 800f75c:	9b07      	ldr	r3, [sp, #28]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	f340 8101 	ble.w	800f966 <_dtoa_r+0x66e>
 800f764:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f768:	4656      	mov	r6, sl
 800f76a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f76e:	4620      	mov	r0, r4
 800f770:	4629      	mov	r1, r5
 800f772:	f7f1 f8a3 	bl	80008bc <__aeabi_ddiv>
 800f776:	f7f1 fa27 	bl	8000bc8 <__aeabi_d2iz>
 800f77a:	4680      	mov	r8, r0
 800f77c:	f7f0 ff0a 	bl	8000594 <__aeabi_i2d>
 800f780:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f784:	f7f0 ff70 	bl	8000668 <__aeabi_dmul>
 800f788:	4602      	mov	r2, r0
 800f78a:	460b      	mov	r3, r1
 800f78c:	4620      	mov	r0, r4
 800f78e:	4629      	mov	r1, r5
 800f790:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f794:	f7f0 fdb0 	bl	80002f8 <__aeabi_dsub>
 800f798:	f806 4b01 	strb.w	r4, [r6], #1
 800f79c:	9d07      	ldr	r5, [sp, #28]
 800f79e:	eba6 040a 	sub.w	r4, r6, sl
 800f7a2:	42a5      	cmp	r5, r4
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	460b      	mov	r3, r1
 800f7a8:	f040 8117 	bne.w	800f9da <_dtoa_r+0x6e2>
 800f7ac:	f7f0 fda6 	bl	80002fc <__adddf3>
 800f7b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f7b4:	4604      	mov	r4, r0
 800f7b6:	460d      	mov	r5, r1
 800f7b8:	f7f1 f9e6 	bl	8000b88 <__aeabi_dcmpgt>
 800f7bc:	2800      	cmp	r0, #0
 800f7be:	f040 80f9 	bne.w	800f9b4 <_dtoa_r+0x6bc>
 800f7c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	4629      	mov	r1, r5
 800f7ca:	f7f1 f9b5 	bl	8000b38 <__aeabi_dcmpeq>
 800f7ce:	b118      	cbz	r0, 800f7d8 <_dtoa_r+0x4e0>
 800f7d0:	f018 0f01 	tst.w	r8, #1
 800f7d4:	f040 80ee 	bne.w	800f9b4 <_dtoa_r+0x6bc>
 800f7d8:	4649      	mov	r1, r9
 800f7da:	4658      	mov	r0, fp
 800f7dc:	f000 fbda 	bl	800ff94 <_Bfree>
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	7033      	strb	r3, [r6, #0]
 800f7e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f7e6:	3701      	adds	r7, #1
 800f7e8:	601f      	str	r7, [r3, #0]
 800f7ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	f000 831d 	beq.w	800fe2c <_dtoa_r+0xb34>
 800f7f2:	601e      	str	r6, [r3, #0]
 800f7f4:	e31a      	b.n	800fe2c <_dtoa_r+0xb34>
 800f7f6:	07e2      	lsls	r2, r4, #31
 800f7f8:	d505      	bpl.n	800f806 <_dtoa_r+0x50e>
 800f7fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f7fe:	f7f0 ff33 	bl	8000668 <__aeabi_dmul>
 800f802:	3601      	adds	r6, #1
 800f804:	2301      	movs	r3, #1
 800f806:	1064      	asrs	r4, r4, #1
 800f808:	3508      	adds	r5, #8
 800f80a:	e73f      	b.n	800f68c <_dtoa_r+0x394>
 800f80c:	2602      	movs	r6, #2
 800f80e:	e742      	b.n	800f696 <_dtoa_r+0x39e>
 800f810:	9c07      	ldr	r4, [sp, #28]
 800f812:	9704      	str	r7, [sp, #16]
 800f814:	e761      	b.n	800f6da <_dtoa_r+0x3e2>
 800f816:	4b27      	ldr	r3, [pc, #156]	@ (800f8b4 <_dtoa_r+0x5bc>)
 800f818:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f81a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f81e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f822:	4454      	add	r4, sl
 800f824:	2900      	cmp	r1, #0
 800f826:	d053      	beq.n	800f8d0 <_dtoa_r+0x5d8>
 800f828:	4928      	ldr	r1, [pc, #160]	@ (800f8cc <_dtoa_r+0x5d4>)
 800f82a:	2000      	movs	r0, #0
 800f82c:	f7f1 f846 	bl	80008bc <__aeabi_ddiv>
 800f830:	4633      	mov	r3, r6
 800f832:	462a      	mov	r2, r5
 800f834:	f7f0 fd60 	bl	80002f8 <__aeabi_dsub>
 800f838:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f83c:	4656      	mov	r6, sl
 800f83e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f842:	f7f1 f9c1 	bl	8000bc8 <__aeabi_d2iz>
 800f846:	4605      	mov	r5, r0
 800f848:	f7f0 fea4 	bl	8000594 <__aeabi_i2d>
 800f84c:	4602      	mov	r2, r0
 800f84e:	460b      	mov	r3, r1
 800f850:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f854:	f7f0 fd50 	bl	80002f8 <__aeabi_dsub>
 800f858:	3530      	adds	r5, #48	@ 0x30
 800f85a:	4602      	mov	r2, r0
 800f85c:	460b      	mov	r3, r1
 800f85e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f862:	f806 5b01 	strb.w	r5, [r6], #1
 800f866:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f86a:	f7f1 f96f 	bl	8000b4c <__aeabi_dcmplt>
 800f86e:	2800      	cmp	r0, #0
 800f870:	d171      	bne.n	800f956 <_dtoa_r+0x65e>
 800f872:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f876:	4911      	ldr	r1, [pc, #68]	@ (800f8bc <_dtoa_r+0x5c4>)
 800f878:	2000      	movs	r0, #0
 800f87a:	f7f0 fd3d 	bl	80002f8 <__aeabi_dsub>
 800f87e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f882:	f7f1 f963 	bl	8000b4c <__aeabi_dcmplt>
 800f886:	2800      	cmp	r0, #0
 800f888:	f040 8095 	bne.w	800f9b6 <_dtoa_r+0x6be>
 800f88c:	42a6      	cmp	r6, r4
 800f88e:	f43f af50 	beq.w	800f732 <_dtoa_r+0x43a>
 800f892:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f896:	4b0a      	ldr	r3, [pc, #40]	@ (800f8c0 <_dtoa_r+0x5c8>)
 800f898:	2200      	movs	r2, #0
 800f89a:	f7f0 fee5 	bl	8000668 <__aeabi_dmul>
 800f89e:	4b08      	ldr	r3, [pc, #32]	@ (800f8c0 <_dtoa_r+0x5c8>)
 800f8a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8aa:	f7f0 fedd 	bl	8000668 <__aeabi_dmul>
 800f8ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8b2:	e7c4      	b.n	800f83e <_dtoa_r+0x546>
 800f8b4:	080130a8 	.word	0x080130a8
 800f8b8:	08013080 	.word	0x08013080
 800f8bc:	3ff00000 	.word	0x3ff00000
 800f8c0:	40240000 	.word	0x40240000
 800f8c4:	401c0000 	.word	0x401c0000
 800f8c8:	40140000 	.word	0x40140000
 800f8cc:	3fe00000 	.word	0x3fe00000
 800f8d0:	4631      	mov	r1, r6
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	f7f0 fec8 	bl	8000668 <__aeabi_dmul>
 800f8d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f8dc:	9415      	str	r4, [sp, #84]	@ 0x54
 800f8de:	4656      	mov	r6, sl
 800f8e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8e4:	f7f1 f970 	bl	8000bc8 <__aeabi_d2iz>
 800f8e8:	4605      	mov	r5, r0
 800f8ea:	f7f0 fe53 	bl	8000594 <__aeabi_i2d>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8f6:	f7f0 fcff 	bl	80002f8 <__aeabi_dsub>
 800f8fa:	3530      	adds	r5, #48	@ 0x30
 800f8fc:	f806 5b01 	strb.w	r5, [r6], #1
 800f900:	4602      	mov	r2, r0
 800f902:	460b      	mov	r3, r1
 800f904:	42a6      	cmp	r6, r4
 800f906:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f90a:	f04f 0200 	mov.w	r2, #0
 800f90e:	d124      	bne.n	800f95a <_dtoa_r+0x662>
 800f910:	4bac      	ldr	r3, [pc, #688]	@ (800fbc4 <_dtoa_r+0x8cc>)
 800f912:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f916:	f7f0 fcf1 	bl	80002fc <__adddf3>
 800f91a:	4602      	mov	r2, r0
 800f91c:	460b      	mov	r3, r1
 800f91e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f922:	f7f1 f931 	bl	8000b88 <__aeabi_dcmpgt>
 800f926:	2800      	cmp	r0, #0
 800f928:	d145      	bne.n	800f9b6 <_dtoa_r+0x6be>
 800f92a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f92e:	49a5      	ldr	r1, [pc, #660]	@ (800fbc4 <_dtoa_r+0x8cc>)
 800f930:	2000      	movs	r0, #0
 800f932:	f7f0 fce1 	bl	80002f8 <__aeabi_dsub>
 800f936:	4602      	mov	r2, r0
 800f938:	460b      	mov	r3, r1
 800f93a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f93e:	f7f1 f905 	bl	8000b4c <__aeabi_dcmplt>
 800f942:	2800      	cmp	r0, #0
 800f944:	f43f aef5 	beq.w	800f732 <_dtoa_r+0x43a>
 800f948:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f94a:	1e73      	subs	r3, r6, #1
 800f94c:	9315      	str	r3, [sp, #84]	@ 0x54
 800f94e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f952:	2b30      	cmp	r3, #48	@ 0x30
 800f954:	d0f8      	beq.n	800f948 <_dtoa_r+0x650>
 800f956:	9f04      	ldr	r7, [sp, #16]
 800f958:	e73e      	b.n	800f7d8 <_dtoa_r+0x4e0>
 800f95a:	4b9b      	ldr	r3, [pc, #620]	@ (800fbc8 <_dtoa_r+0x8d0>)
 800f95c:	f7f0 fe84 	bl	8000668 <__aeabi_dmul>
 800f960:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f964:	e7bc      	b.n	800f8e0 <_dtoa_r+0x5e8>
 800f966:	d10c      	bne.n	800f982 <_dtoa_r+0x68a>
 800f968:	4b98      	ldr	r3, [pc, #608]	@ (800fbcc <_dtoa_r+0x8d4>)
 800f96a:	2200      	movs	r2, #0
 800f96c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f970:	f7f0 fe7a 	bl	8000668 <__aeabi_dmul>
 800f974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f978:	f7f1 f8fc 	bl	8000b74 <__aeabi_dcmpge>
 800f97c:	2800      	cmp	r0, #0
 800f97e:	f000 8157 	beq.w	800fc30 <_dtoa_r+0x938>
 800f982:	2400      	movs	r4, #0
 800f984:	4625      	mov	r5, r4
 800f986:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f988:	43db      	mvns	r3, r3
 800f98a:	9304      	str	r3, [sp, #16]
 800f98c:	4656      	mov	r6, sl
 800f98e:	2700      	movs	r7, #0
 800f990:	4621      	mov	r1, r4
 800f992:	4658      	mov	r0, fp
 800f994:	f000 fafe 	bl	800ff94 <_Bfree>
 800f998:	2d00      	cmp	r5, #0
 800f99a:	d0dc      	beq.n	800f956 <_dtoa_r+0x65e>
 800f99c:	b12f      	cbz	r7, 800f9aa <_dtoa_r+0x6b2>
 800f99e:	42af      	cmp	r7, r5
 800f9a0:	d003      	beq.n	800f9aa <_dtoa_r+0x6b2>
 800f9a2:	4639      	mov	r1, r7
 800f9a4:	4658      	mov	r0, fp
 800f9a6:	f000 faf5 	bl	800ff94 <_Bfree>
 800f9aa:	4629      	mov	r1, r5
 800f9ac:	4658      	mov	r0, fp
 800f9ae:	f000 faf1 	bl	800ff94 <_Bfree>
 800f9b2:	e7d0      	b.n	800f956 <_dtoa_r+0x65e>
 800f9b4:	9704      	str	r7, [sp, #16]
 800f9b6:	4633      	mov	r3, r6
 800f9b8:	461e      	mov	r6, r3
 800f9ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f9be:	2a39      	cmp	r2, #57	@ 0x39
 800f9c0:	d107      	bne.n	800f9d2 <_dtoa_r+0x6da>
 800f9c2:	459a      	cmp	sl, r3
 800f9c4:	d1f8      	bne.n	800f9b8 <_dtoa_r+0x6c0>
 800f9c6:	9a04      	ldr	r2, [sp, #16]
 800f9c8:	3201      	adds	r2, #1
 800f9ca:	9204      	str	r2, [sp, #16]
 800f9cc:	2230      	movs	r2, #48	@ 0x30
 800f9ce:	f88a 2000 	strb.w	r2, [sl]
 800f9d2:	781a      	ldrb	r2, [r3, #0]
 800f9d4:	3201      	adds	r2, #1
 800f9d6:	701a      	strb	r2, [r3, #0]
 800f9d8:	e7bd      	b.n	800f956 <_dtoa_r+0x65e>
 800f9da:	4b7b      	ldr	r3, [pc, #492]	@ (800fbc8 <_dtoa_r+0x8d0>)
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f7f0 fe43 	bl	8000668 <__aeabi_dmul>
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	4604      	mov	r4, r0
 800f9e8:	460d      	mov	r5, r1
 800f9ea:	f7f1 f8a5 	bl	8000b38 <__aeabi_dcmpeq>
 800f9ee:	2800      	cmp	r0, #0
 800f9f0:	f43f aebb 	beq.w	800f76a <_dtoa_r+0x472>
 800f9f4:	e6f0      	b.n	800f7d8 <_dtoa_r+0x4e0>
 800f9f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f9f8:	2a00      	cmp	r2, #0
 800f9fa:	f000 80db 	beq.w	800fbb4 <_dtoa_r+0x8bc>
 800f9fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa00:	2a01      	cmp	r2, #1
 800fa02:	f300 80bf 	bgt.w	800fb84 <_dtoa_r+0x88c>
 800fa06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fa08:	2a00      	cmp	r2, #0
 800fa0a:	f000 80b7 	beq.w	800fb7c <_dtoa_r+0x884>
 800fa0e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fa12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fa14:	4646      	mov	r6, r8
 800fa16:	9a08      	ldr	r2, [sp, #32]
 800fa18:	2101      	movs	r1, #1
 800fa1a:	441a      	add	r2, r3
 800fa1c:	4658      	mov	r0, fp
 800fa1e:	4498      	add	r8, r3
 800fa20:	9208      	str	r2, [sp, #32]
 800fa22:	f000 fbb5 	bl	8010190 <__i2b>
 800fa26:	4605      	mov	r5, r0
 800fa28:	b15e      	cbz	r6, 800fa42 <_dtoa_r+0x74a>
 800fa2a:	9b08      	ldr	r3, [sp, #32]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	dd08      	ble.n	800fa42 <_dtoa_r+0x74a>
 800fa30:	42b3      	cmp	r3, r6
 800fa32:	9a08      	ldr	r2, [sp, #32]
 800fa34:	bfa8      	it	ge
 800fa36:	4633      	movge	r3, r6
 800fa38:	eba8 0803 	sub.w	r8, r8, r3
 800fa3c:	1af6      	subs	r6, r6, r3
 800fa3e:	1ad3      	subs	r3, r2, r3
 800fa40:	9308      	str	r3, [sp, #32]
 800fa42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa44:	b1f3      	cbz	r3, 800fa84 <_dtoa_r+0x78c>
 800fa46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f000 80b7 	beq.w	800fbbc <_dtoa_r+0x8c4>
 800fa4e:	b18c      	cbz	r4, 800fa74 <_dtoa_r+0x77c>
 800fa50:	4629      	mov	r1, r5
 800fa52:	4622      	mov	r2, r4
 800fa54:	4658      	mov	r0, fp
 800fa56:	f000 fc5b 	bl	8010310 <__pow5mult>
 800fa5a:	464a      	mov	r2, r9
 800fa5c:	4601      	mov	r1, r0
 800fa5e:	4605      	mov	r5, r0
 800fa60:	4658      	mov	r0, fp
 800fa62:	f000 fbab 	bl	80101bc <__multiply>
 800fa66:	4649      	mov	r1, r9
 800fa68:	9004      	str	r0, [sp, #16]
 800fa6a:	4658      	mov	r0, fp
 800fa6c:	f000 fa92 	bl	800ff94 <_Bfree>
 800fa70:	9b04      	ldr	r3, [sp, #16]
 800fa72:	4699      	mov	r9, r3
 800fa74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa76:	1b1a      	subs	r2, r3, r4
 800fa78:	d004      	beq.n	800fa84 <_dtoa_r+0x78c>
 800fa7a:	4649      	mov	r1, r9
 800fa7c:	4658      	mov	r0, fp
 800fa7e:	f000 fc47 	bl	8010310 <__pow5mult>
 800fa82:	4681      	mov	r9, r0
 800fa84:	2101      	movs	r1, #1
 800fa86:	4658      	mov	r0, fp
 800fa88:	f000 fb82 	bl	8010190 <__i2b>
 800fa8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa8e:	4604      	mov	r4, r0
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	f000 81cf 	beq.w	800fe34 <_dtoa_r+0xb3c>
 800fa96:	461a      	mov	r2, r3
 800fa98:	4601      	mov	r1, r0
 800fa9a:	4658      	mov	r0, fp
 800fa9c:	f000 fc38 	bl	8010310 <__pow5mult>
 800faa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faa2:	2b01      	cmp	r3, #1
 800faa4:	4604      	mov	r4, r0
 800faa6:	f300 8095 	bgt.w	800fbd4 <_dtoa_r+0x8dc>
 800faaa:	9b02      	ldr	r3, [sp, #8]
 800faac:	2b00      	cmp	r3, #0
 800faae:	f040 8087 	bne.w	800fbc0 <_dtoa_r+0x8c8>
 800fab2:	9b03      	ldr	r3, [sp, #12]
 800fab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fab8:	2b00      	cmp	r3, #0
 800faba:	f040 8089 	bne.w	800fbd0 <_dtoa_r+0x8d8>
 800fabe:	9b03      	ldr	r3, [sp, #12]
 800fac0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fac4:	0d1b      	lsrs	r3, r3, #20
 800fac6:	051b      	lsls	r3, r3, #20
 800fac8:	b12b      	cbz	r3, 800fad6 <_dtoa_r+0x7de>
 800faca:	9b08      	ldr	r3, [sp, #32]
 800facc:	3301      	adds	r3, #1
 800face:	9308      	str	r3, [sp, #32]
 800fad0:	f108 0801 	add.w	r8, r8, #1
 800fad4:	2301      	movs	r3, #1
 800fad6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fad8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fada:	2b00      	cmp	r3, #0
 800fadc:	f000 81b0 	beq.w	800fe40 <_dtoa_r+0xb48>
 800fae0:	6923      	ldr	r3, [r4, #16]
 800fae2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fae6:	6918      	ldr	r0, [r3, #16]
 800fae8:	f000 fb06 	bl	80100f8 <__hi0bits>
 800faec:	f1c0 0020 	rsb	r0, r0, #32
 800faf0:	9b08      	ldr	r3, [sp, #32]
 800faf2:	4418      	add	r0, r3
 800faf4:	f010 001f 	ands.w	r0, r0, #31
 800faf8:	d077      	beq.n	800fbea <_dtoa_r+0x8f2>
 800fafa:	f1c0 0320 	rsb	r3, r0, #32
 800fafe:	2b04      	cmp	r3, #4
 800fb00:	dd6b      	ble.n	800fbda <_dtoa_r+0x8e2>
 800fb02:	9b08      	ldr	r3, [sp, #32]
 800fb04:	f1c0 001c 	rsb	r0, r0, #28
 800fb08:	4403      	add	r3, r0
 800fb0a:	4480      	add	r8, r0
 800fb0c:	4406      	add	r6, r0
 800fb0e:	9308      	str	r3, [sp, #32]
 800fb10:	f1b8 0f00 	cmp.w	r8, #0
 800fb14:	dd05      	ble.n	800fb22 <_dtoa_r+0x82a>
 800fb16:	4649      	mov	r1, r9
 800fb18:	4642      	mov	r2, r8
 800fb1a:	4658      	mov	r0, fp
 800fb1c:	f000 fc52 	bl	80103c4 <__lshift>
 800fb20:	4681      	mov	r9, r0
 800fb22:	9b08      	ldr	r3, [sp, #32]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	dd05      	ble.n	800fb34 <_dtoa_r+0x83c>
 800fb28:	4621      	mov	r1, r4
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	4658      	mov	r0, fp
 800fb2e:	f000 fc49 	bl	80103c4 <__lshift>
 800fb32:	4604      	mov	r4, r0
 800fb34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d059      	beq.n	800fbee <_dtoa_r+0x8f6>
 800fb3a:	4621      	mov	r1, r4
 800fb3c:	4648      	mov	r0, r9
 800fb3e:	f000 fcad 	bl	801049c <__mcmp>
 800fb42:	2800      	cmp	r0, #0
 800fb44:	da53      	bge.n	800fbee <_dtoa_r+0x8f6>
 800fb46:	1e7b      	subs	r3, r7, #1
 800fb48:	9304      	str	r3, [sp, #16]
 800fb4a:	4649      	mov	r1, r9
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	220a      	movs	r2, #10
 800fb50:	4658      	mov	r0, fp
 800fb52:	f000 fa41 	bl	800ffd8 <__multadd>
 800fb56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb58:	4681      	mov	r9, r0
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	f000 8172 	beq.w	800fe44 <_dtoa_r+0xb4c>
 800fb60:	2300      	movs	r3, #0
 800fb62:	4629      	mov	r1, r5
 800fb64:	220a      	movs	r2, #10
 800fb66:	4658      	mov	r0, fp
 800fb68:	f000 fa36 	bl	800ffd8 <__multadd>
 800fb6c:	9b00      	ldr	r3, [sp, #0]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	4605      	mov	r5, r0
 800fb72:	dc67      	bgt.n	800fc44 <_dtoa_r+0x94c>
 800fb74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb76:	2b02      	cmp	r3, #2
 800fb78:	dc41      	bgt.n	800fbfe <_dtoa_r+0x906>
 800fb7a:	e063      	b.n	800fc44 <_dtoa_r+0x94c>
 800fb7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fb7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fb82:	e746      	b.n	800fa12 <_dtoa_r+0x71a>
 800fb84:	9b07      	ldr	r3, [sp, #28]
 800fb86:	1e5c      	subs	r4, r3, #1
 800fb88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb8a:	42a3      	cmp	r3, r4
 800fb8c:	bfbf      	itttt	lt
 800fb8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fb90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fb92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fb94:	1ae3      	sublt	r3, r4, r3
 800fb96:	bfb4      	ite	lt
 800fb98:	18d2      	addlt	r2, r2, r3
 800fb9a:	1b1c      	subge	r4, r3, r4
 800fb9c:	9b07      	ldr	r3, [sp, #28]
 800fb9e:	bfbc      	itt	lt
 800fba0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fba2:	2400      	movlt	r4, #0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	bfb5      	itete	lt
 800fba8:	eba8 0603 	sublt.w	r6, r8, r3
 800fbac:	9b07      	ldrge	r3, [sp, #28]
 800fbae:	2300      	movlt	r3, #0
 800fbb0:	4646      	movge	r6, r8
 800fbb2:	e730      	b.n	800fa16 <_dtoa_r+0x71e>
 800fbb4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fbb6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fbb8:	4646      	mov	r6, r8
 800fbba:	e735      	b.n	800fa28 <_dtoa_r+0x730>
 800fbbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fbbe:	e75c      	b.n	800fa7a <_dtoa_r+0x782>
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	e788      	b.n	800fad6 <_dtoa_r+0x7de>
 800fbc4:	3fe00000 	.word	0x3fe00000
 800fbc8:	40240000 	.word	0x40240000
 800fbcc:	40140000 	.word	0x40140000
 800fbd0:	9b02      	ldr	r3, [sp, #8]
 800fbd2:	e780      	b.n	800fad6 <_dtoa_r+0x7de>
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbd8:	e782      	b.n	800fae0 <_dtoa_r+0x7e8>
 800fbda:	d099      	beq.n	800fb10 <_dtoa_r+0x818>
 800fbdc:	9a08      	ldr	r2, [sp, #32]
 800fbde:	331c      	adds	r3, #28
 800fbe0:	441a      	add	r2, r3
 800fbe2:	4498      	add	r8, r3
 800fbe4:	441e      	add	r6, r3
 800fbe6:	9208      	str	r2, [sp, #32]
 800fbe8:	e792      	b.n	800fb10 <_dtoa_r+0x818>
 800fbea:	4603      	mov	r3, r0
 800fbec:	e7f6      	b.n	800fbdc <_dtoa_r+0x8e4>
 800fbee:	9b07      	ldr	r3, [sp, #28]
 800fbf0:	9704      	str	r7, [sp, #16]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	dc20      	bgt.n	800fc38 <_dtoa_r+0x940>
 800fbf6:	9300      	str	r3, [sp, #0]
 800fbf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbfa:	2b02      	cmp	r3, #2
 800fbfc:	dd1e      	ble.n	800fc3c <_dtoa_r+0x944>
 800fbfe:	9b00      	ldr	r3, [sp, #0]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	f47f aec0 	bne.w	800f986 <_dtoa_r+0x68e>
 800fc06:	4621      	mov	r1, r4
 800fc08:	2205      	movs	r2, #5
 800fc0a:	4658      	mov	r0, fp
 800fc0c:	f000 f9e4 	bl	800ffd8 <__multadd>
 800fc10:	4601      	mov	r1, r0
 800fc12:	4604      	mov	r4, r0
 800fc14:	4648      	mov	r0, r9
 800fc16:	f000 fc41 	bl	801049c <__mcmp>
 800fc1a:	2800      	cmp	r0, #0
 800fc1c:	f77f aeb3 	ble.w	800f986 <_dtoa_r+0x68e>
 800fc20:	4656      	mov	r6, sl
 800fc22:	2331      	movs	r3, #49	@ 0x31
 800fc24:	f806 3b01 	strb.w	r3, [r6], #1
 800fc28:	9b04      	ldr	r3, [sp, #16]
 800fc2a:	3301      	adds	r3, #1
 800fc2c:	9304      	str	r3, [sp, #16]
 800fc2e:	e6ae      	b.n	800f98e <_dtoa_r+0x696>
 800fc30:	9c07      	ldr	r4, [sp, #28]
 800fc32:	9704      	str	r7, [sp, #16]
 800fc34:	4625      	mov	r5, r4
 800fc36:	e7f3      	b.n	800fc20 <_dtoa_r+0x928>
 800fc38:	9b07      	ldr	r3, [sp, #28]
 800fc3a:	9300      	str	r3, [sp, #0]
 800fc3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	f000 8104 	beq.w	800fe4c <_dtoa_r+0xb54>
 800fc44:	2e00      	cmp	r6, #0
 800fc46:	dd05      	ble.n	800fc54 <_dtoa_r+0x95c>
 800fc48:	4629      	mov	r1, r5
 800fc4a:	4632      	mov	r2, r6
 800fc4c:	4658      	mov	r0, fp
 800fc4e:	f000 fbb9 	bl	80103c4 <__lshift>
 800fc52:	4605      	mov	r5, r0
 800fc54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d05a      	beq.n	800fd10 <_dtoa_r+0xa18>
 800fc5a:	6869      	ldr	r1, [r5, #4]
 800fc5c:	4658      	mov	r0, fp
 800fc5e:	f000 f959 	bl	800ff14 <_Balloc>
 800fc62:	4606      	mov	r6, r0
 800fc64:	b928      	cbnz	r0, 800fc72 <_dtoa_r+0x97a>
 800fc66:	4b84      	ldr	r3, [pc, #528]	@ (800fe78 <_dtoa_r+0xb80>)
 800fc68:	4602      	mov	r2, r0
 800fc6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fc6e:	f7ff bb5a 	b.w	800f326 <_dtoa_r+0x2e>
 800fc72:	692a      	ldr	r2, [r5, #16]
 800fc74:	3202      	adds	r2, #2
 800fc76:	0092      	lsls	r2, r2, #2
 800fc78:	f105 010c 	add.w	r1, r5, #12
 800fc7c:	300c      	adds	r0, #12
 800fc7e:	f7ff fa9e 	bl	800f1be <memcpy>
 800fc82:	2201      	movs	r2, #1
 800fc84:	4631      	mov	r1, r6
 800fc86:	4658      	mov	r0, fp
 800fc88:	f000 fb9c 	bl	80103c4 <__lshift>
 800fc8c:	f10a 0301 	add.w	r3, sl, #1
 800fc90:	9307      	str	r3, [sp, #28]
 800fc92:	9b00      	ldr	r3, [sp, #0]
 800fc94:	4453      	add	r3, sl
 800fc96:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc98:	9b02      	ldr	r3, [sp, #8]
 800fc9a:	f003 0301 	and.w	r3, r3, #1
 800fc9e:	462f      	mov	r7, r5
 800fca0:	930a      	str	r3, [sp, #40]	@ 0x28
 800fca2:	4605      	mov	r5, r0
 800fca4:	9b07      	ldr	r3, [sp, #28]
 800fca6:	4621      	mov	r1, r4
 800fca8:	3b01      	subs	r3, #1
 800fcaa:	4648      	mov	r0, r9
 800fcac:	9300      	str	r3, [sp, #0]
 800fcae:	f7ff fa9b 	bl	800f1e8 <quorem>
 800fcb2:	4639      	mov	r1, r7
 800fcb4:	9002      	str	r0, [sp, #8]
 800fcb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fcba:	4648      	mov	r0, r9
 800fcbc:	f000 fbee 	bl	801049c <__mcmp>
 800fcc0:	462a      	mov	r2, r5
 800fcc2:	9008      	str	r0, [sp, #32]
 800fcc4:	4621      	mov	r1, r4
 800fcc6:	4658      	mov	r0, fp
 800fcc8:	f000 fc04 	bl	80104d4 <__mdiff>
 800fccc:	68c2      	ldr	r2, [r0, #12]
 800fcce:	4606      	mov	r6, r0
 800fcd0:	bb02      	cbnz	r2, 800fd14 <_dtoa_r+0xa1c>
 800fcd2:	4601      	mov	r1, r0
 800fcd4:	4648      	mov	r0, r9
 800fcd6:	f000 fbe1 	bl	801049c <__mcmp>
 800fcda:	4602      	mov	r2, r0
 800fcdc:	4631      	mov	r1, r6
 800fcde:	4658      	mov	r0, fp
 800fce0:	920e      	str	r2, [sp, #56]	@ 0x38
 800fce2:	f000 f957 	bl	800ff94 <_Bfree>
 800fce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fce8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fcea:	9e07      	ldr	r6, [sp, #28]
 800fcec:	ea43 0102 	orr.w	r1, r3, r2
 800fcf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcf2:	4319      	orrs	r1, r3
 800fcf4:	d110      	bne.n	800fd18 <_dtoa_r+0xa20>
 800fcf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fcfa:	d029      	beq.n	800fd50 <_dtoa_r+0xa58>
 800fcfc:	9b08      	ldr	r3, [sp, #32]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	dd02      	ble.n	800fd08 <_dtoa_r+0xa10>
 800fd02:	9b02      	ldr	r3, [sp, #8]
 800fd04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fd08:	9b00      	ldr	r3, [sp, #0]
 800fd0a:	f883 8000 	strb.w	r8, [r3]
 800fd0e:	e63f      	b.n	800f990 <_dtoa_r+0x698>
 800fd10:	4628      	mov	r0, r5
 800fd12:	e7bb      	b.n	800fc8c <_dtoa_r+0x994>
 800fd14:	2201      	movs	r2, #1
 800fd16:	e7e1      	b.n	800fcdc <_dtoa_r+0x9e4>
 800fd18:	9b08      	ldr	r3, [sp, #32]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	db04      	blt.n	800fd28 <_dtoa_r+0xa30>
 800fd1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fd20:	430b      	orrs	r3, r1
 800fd22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fd24:	430b      	orrs	r3, r1
 800fd26:	d120      	bne.n	800fd6a <_dtoa_r+0xa72>
 800fd28:	2a00      	cmp	r2, #0
 800fd2a:	dded      	ble.n	800fd08 <_dtoa_r+0xa10>
 800fd2c:	4649      	mov	r1, r9
 800fd2e:	2201      	movs	r2, #1
 800fd30:	4658      	mov	r0, fp
 800fd32:	f000 fb47 	bl	80103c4 <__lshift>
 800fd36:	4621      	mov	r1, r4
 800fd38:	4681      	mov	r9, r0
 800fd3a:	f000 fbaf 	bl	801049c <__mcmp>
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	dc03      	bgt.n	800fd4a <_dtoa_r+0xa52>
 800fd42:	d1e1      	bne.n	800fd08 <_dtoa_r+0xa10>
 800fd44:	f018 0f01 	tst.w	r8, #1
 800fd48:	d0de      	beq.n	800fd08 <_dtoa_r+0xa10>
 800fd4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fd4e:	d1d8      	bne.n	800fd02 <_dtoa_r+0xa0a>
 800fd50:	9a00      	ldr	r2, [sp, #0]
 800fd52:	2339      	movs	r3, #57	@ 0x39
 800fd54:	7013      	strb	r3, [r2, #0]
 800fd56:	4633      	mov	r3, r6
 800fd58:	461e      	mov	r6, r3
 800fd5a:	3b01      	subs	r3, #1
 800fd5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fd60:	2a39      	cmp	r2, #57	@ 0x39
 800fd62:	d052      	beq.n	800fe0a <_dtoa_r+0xb12>
 800fd64:	3201      	adds	r2, #1
 800fd66:	701a      	strb	r2, [r3, #0]
 800fd68:	e612      	b.n	800f990 <_dtoa_r+0x698>
 800fd6a:	2a00      	cmp	r2, #0
 800fd6c:	dd07      	ble.n	800fd7e <_dtoa_r+0xa86>
 800fd6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fd72:	d0ed      	beq.n	800fd50 <_dtoa_r+0xa58>
 800fd74:	9a00      	ldr	r2, [sp, #0]
 800fd76:	f108 0301 	add.w	r3, r8, #1
 800fd7a:	7013      	strb	r3, [r2, #0]
 800fd7c:	e608      	b.n	800f990 <_dtoa_r+0x698>
 800fd7e:	9b07      	ldr	r3, [sp, #28]
 800fd80:	9a07      	ldr	r2, [sp, #28]
 800fd82:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fd86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	d028      	beq.n	800fdde <_dtoa_r+0xae6>
 800fd8c:	4649      	mov	r1, r9
 800fd8e:	2300      	movs	r3, #0
 800fd90:	220a      	movs	r2, #10
 800fd92:	4658      	mov	r0, fp
 800fd94:	f000 f920 	bl	800ffd8 <__multadd>
 800fd98:	42af      	cmp	r7, r5
 800fd9a:	4681      	mov	r9, r0
 800fd9c:	f04f 0300 	mov.w	r3, #0
 800fda0:	f04f 020a 	mov.w	r2, #10
 800fda4:	4639      	mov	r1, r7
 800fda6:	4658      	mov	r0, fp
 800fda8:	d107      	bne.n	800fdba <_dtoa_r+0xac2>
 800fdaa:	f000 f915 	bl	800ffd8 <__multadd>
 800fdae:	4607      	mov	r7, r0
 800fdb0:	4605      	mov	r5, r0
 800fdb2:	9b07      	ldr	r3, [sp, #28]
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	9307      	str	r3, [sp, #28]
 800fdb8:	e774      	b.n	800fca4 <_dtoa_r+0x9ac>
 800fdba:	f000 f90d 	bl	800ffd8 <__multadd>
 800fdbe:	4629      	mov	r1, r5
 800fdc0:	4607      	mov	r7, r0
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	220a      	movs	r2, #10
 800fdc6:	4658      	mov	r0, fp
 800fdc8:	f000 f906 	bl	800ffd8 <__multadd>
 800fdcc:	4605      	mov	r5, r0
 800fdce:	e7f0      	b.n	800fdb2 <_dtoa_r+0xaba>
 800fdd0:	9b00      	ldr	r3, [sp, #0]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	bfcc      	ite	gt
 800fdd6:	461e      	movgt	r6, r3
 800fdd8:	2601      	movle	r6, #1
 800fdda:	4456      	add	r6, sl
 800fddc:	2700      	movs	r7, #0
 800fdde:	4649      	mov	r1, r9
 800fde0:	2201      	movs	r2, #1
 800fde2:	4658      	mov	r0, fp
 800fde4:	f000 faee 	bl	80103c4 <__lshift>
 800fde8:	4621      	mov	r1, r4
 800fdea:	4681      	mov	r9, r0
 800fdec:	f000 fb56 	bl	801049c <__mcmp>
 800fdf0:	2800      	cmp	r0, #0
 800fdf2:	dcb0      	bgt.n	800fd56 <_dtoa_r+0xa5e>
 800fdf4:	d102      	bne.n	800fdfc <_dtoa_r+0xb04>
 800fdf6:	f018 0f01 	tst.w	r8, #1
 800fdfa:	d1ac      	bne.n	800fd56 <_dtoa_r+0xa5e>
 800fdfc:	4633      	mov	r3, r6
 800fdfe:	461e      	mov	r6, r3
 800fe00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe04:	2a30      	cmp	r2, #48	@ 0x30
 800fe06:	d0fa      	beq.n	800fdfe <_dtoa_r+0xb06>
 800fe08:	e5c2      	b.n	800f990 <_dtoa_r+0x698>
 800fe0a:	459a      	cmp	sl, r3
 800fe0c:	d1a4      	bne.n	800fd58 <_dtoa_r+0xa60>
 800fe0e:	9b04      	ldr	r3, [sp, #16]
 800fe10:	3301      	adds	r3, #1
 800fe12:	9304      	str	r3, [sp, #16]
 800fe14:	2331      	movs	r3, #49	@ 0x31
 800fe16:	f88a 3000 	strb.w	r3, [sl]
 800fe1a:	e5b9      	b.n	800f990 <_dtoa_r+0x698>
 800fe1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fe1e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fe7c <_dtoa_r+0xb84>
 800fe22:	b11b      	cbz	r3, 800fe2c <_dtoa_r+0xb34>
 800fe24:	f10a 0308 	add.w	r3, sl, #8
 800fe28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fe2a:	6013      	str	r3, [r2, #0]
 800fe2c:	4650      	mov	r0, sl
 800fe2e:	b019      	add	sp, #100	@ 0x64
 800fe30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe36:	2b01      	cmp	r3, #1
 800fe38:	f77f ae37 	ble.w	800faaa <_dtoa_r+0x7b2>
 800fe3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe40:	2001      	movs	r0, #1
 800fe42:	e655      	b.n	800faf0 <_dtoa_r+0x7f8>
 800fe44:	9b00      	ldr	r3, [sp, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	f77f aed6 	ble.w	800fbf8 <_dtoa_r+0x900>
 800fe4c:	4656      	mov	r6, sl
 800fe4e:	4621      	mov	r1, r4
 800fe50:	4648      	mov	r0, r9
 800fe52:	f7ff f9c9 	bl	800f1e8 <quorem>
 800fe56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fe5a:	f806 8b01 	strb.w	r8, [r6], #1
 800fe5e:	9b00      	ldr	r3, [sp, #0]
 800fe60:	eba6 020a 	sub.w	r2, r6, sl
 800fe64:	4293      	cmp	r3, r2
 800fe66:	ddb3      	ble.n	800fdd0 <_dtoa_r+0xad8>
 800fe68:	4649      	mov	r1, r9
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	220a      	movs	r2, #10
 800fe6e:	4658      	mov	r0, fp
 800fe70:	f000 f8b2 	bl	800ffd8 <__multadd>
 800fe74:	4681      	mov	r9, r0
 800fe76:	e7ea      	b.n	800fe4e <_dtoa_r+0xb56>
 800fe78:	08013005 	.word	0x08013005
 800fe7c:	08012f89 	.word	0x08012f89

0800fe80 <_free_r>:
 800fe80:	b538      	push	{r3, r4, r5, lr}
 800fe82:	4605      	mov	r5, r0
 800fe84:	2900      	cmp	r1, #0
 800fe86:	d041      	beq.n	800ff0c <_free_r+0x8c>
 800fe88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe8c:	1f0c      	subs	r4, r1, #4
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	bfb8      	it	lt
 800fe92:	18e4      	addlt	r4, r4, r3
 800fe94:	f7fd fff2 	bl	800de7c <__malloc_lock>
 800fe98:	4a1d      	ldr	r2, [pc, #116]	@ (800ff10 <_free_r+0x90>)
 800fe9a:	6813      	ldr	r3, [r2, #0]
 800fe9c:	b933      	cbnz	r3, 800feac <_free_r+0x2c>
 800fe9e:	6063      	str	r3, [r4, #4]
 800fea0:	6014      	str	r4, [r2, #0]
 800fea2:	4628      	mov	r0, r5
 800fea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fea8:	f7fd bfee 	b.w	800de88 <__malloc_unlock>
 800feac:	42a3      	cmp	r3, r4
 800feae:	d908      	bls.n	800fec2 <_free_r+0x42>
 800feb0:	6820      	ldr	r0, [r4, #0]
 800feb2:	1821      	adds	r1, r4, r0
 800feb4:	428b      	cmp	r3, r1
 800feb6:	bf01      	itttt	eq
 800feb8:	6819      	ldreq	r1, [r3, #0]
 800feba:	685b      	ldreq	r3, [r3, #4]
 800febc:	1809      	addeq	r1, r1, r0
 800febe:	6021      	streq	r1, [r4, #0]
 800fec0:	e7ed      	b.n	800fe9e <_free_r+0x1e>
 800fec2:	461a      	mov	r2, r3
 800fec4:	685b      	ldr	r3, [r3, #4]
 800fec6:	b10b      	cbz	r3, 800fecc <_free_r+0x4c>
 800fec8:	42a3      	cmp	r3, r4
 800feca:	d9fa      	bls.n	800fec2 <_free_r+0x42>
 800fecc:	6811      	ldr	r1, [r2, #0]
 800fece:	1850      	adds	r0, r2, r1
 800fed0:	42a0      	cmp	r0, r4
 800fed2:	d10b      	bne.n	800feec <_free_r+0x6c>
 800fed4:	6820      	ldr	r0, [r4, #0]
 800fed6:	4401      	add	r1, r0
 800fed8:	1850      	adds	r0, r2, r1
 800feda:	4283      	cmp	r3, r0
 800fedc:	6011      	str	r1, [r2, #0]
 800fede:	d1e0      	bne.n	800fea2 <_free_r+0x22>
 800fee0:	6818      	ldr	r0, [r3, #0]
 800fee2:	685b      	ldr	r3, [r3, #4]
 800fee4:	6053      	str	r3, [r2, #4]
 800fee6:	4408      	add	r0, r1
 800fee8:	6010      	str	r0, [r2, #0]
 800feea:	e7da      	b.n	800fea2 <_free_r+0x22>
 800feec:	d902      	bls.n	800fef4 <_free_r+0x74>
 800feee:	230c      	movs	r3, #12
 800fef0:	602b      	str	r3, [r5, #0]
 800fef2:	e7d6      	b.n	800fea2 <_free_r+0x22>
 800fef4:	6820      	ldr	r0, [r4, #0]
 800fef6:	1821      	adds	r1, r4, r0
 800fef8:	428b      	cmp	r3, r1
 800fefa:	bf04      	itt	eq
 800fefc:	6819      	ldreq	r1, [r3, #0]
 800fefe:	685b      	ldreq	r3, [r3, #4]
 800ff00:	6063      	str	r3, [r4, #4]
 800ff02:	bf04      	itt	eq
 800ff04:	1809      	addeq	r1, r1, r0
 800ff06:	6021      	streq	r1, [r4, #0]
 800ff08:	6054      	str	r4, [r2, #4]
 800ff0a:	e7ca      	b.n	800fea2 <_free_r+0x22>
 800ff0c:	bd38      	pop	{r3, r4, r5, pc}
 800ff0e:	bf00      	nop
 800ff10:	2001e1f8 	.word	0x2001e1f8

0800ff14 <_Balloc>:
 800ff14:	b570      	push	{r4, r5, r6, lr}
 800ff16:	69c6      	ldr	r6, [r0, #28]
 800ff18:	4604      	mov	r4, r0
 800ff1a:	460d      	mov	r5, r1
 800ff1c:	b976      	cbnz	r6, 800ff3c <_Balloc+0x28>
 800ff1e:	2010      	movs	r0, #16
 800ff20:	f7fd fefa 	bl	800dd18 <malloc>
 800ff24:	4602      	mov	r2, r0
 800ff26:	61e0      	str	r0, [r4, #28]
 800ff28:	b920      	cbnz	r0, 800ff34 <_Balloc+0x20>
 800ff2a:	4b18      	ldr	r3, [pc, #96]	@ (800ff8c <_Balloc+0x78>)
 800ff2c:	4818      	ldr	r0, [pc, #96]	@ (800ff90 <_Balloc+0x7c>)
 800ff2e:	216b      	movs	r1, #107	@ 0x6b
 800ff30:	f002 fab6 	bl	80124a0 <__assert_func>
 800ff34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff38:	6006      	str	r6, [r0, #0]
 800ff3a:	60c6      	str	r6, [r0, #12]
 800ff3c:	69e6      	ldr	r6, [r4, #28]
 800ff3e:	68f3      	ldr	r3, [r6, #12]
 800ff40:	b183      	cbz	r3, 800ff64 <_Balloc+0x50>
 800ff42:	69e3      	ldr	r3, [r4, #28]
 800ff44:	68db      	ldr	r3, [r3, #12]
 800ff46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ff4a:	b9b8      	cbnz	r0, 800ff7c <_Balloc+0x68>
 800ff4c:	2101      	movs	r1, #1
 800ff4e:	fa01 f605 	lsl.w	r6, r1, r5
 800ff52:	1d72      	adds	r2, r6, #5
 800ff54:	0092      	lsls	r2, r2, #2
 800ff56:	4620      	mov	r0, r4
 800ff58:	f002 fac0 	bl	80124dc <_calloc_r>
 800ff5c:	b160      	cbz	r0, 800ff78 <_Balloc+0x64>
 800ff5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ff62:	e00e      	b.n	800ff82 <_Balloc+0x6e>
 800ff64:	2221      	movs	r2, #33	@ 0x21
 800ff66:	2104      	movs	r1, #4
 800ff68:	4620      	mov	r0, r4
 800ff6a:	f002 fab7 	bl	80124dc <_calloc_r>
 800ff6e:	69e3      	ldr	r3, [r4, #28]
 800ff70:	60f0      	str	r0, [r6, #12]
 800ff72:	68db      	ldr	r3, [r3, #12]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d1e4      	bne.n	800ff42 <_Balloc+0x2e>
 800ff78:	2000      	movs	r0, #0
 800ff7a:	bd70      	pop	{r4, r5, r6, pc}
 800ff7c:	6802      	ldr	r2, [r0, #0]
 800ff7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ff82:	2300      	movs	r3, #0
 800ff84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ff88:	e7f7      	b.n	800ff7a <_Balloc+0x66>
 800ff8a:	bf00      	nop
 800ff8c:	08012f96 	.word	0x08012f96
 800ff90:	08013016 	.word	0x08013016

0800ff94 <_Bfree>:
 800ff94:	b570      	push	{r4, r5, r6, lr}
 800ff96:	69c6      	ldr	r6, [r0, #28]
 800ff98:	4605      	mov	r5, r0
 800ff9a:	460c      	mov	r4, r1
 800ff9c:	b976      	cbnz	r6, 800ffbc <_Bfree+0x28>
 800ff9e:	2010      	movs	r0, #16
 800ffa0:	f7fd feba 	bl	800dd18 <malloc>
 800ffa4:	4602      	mov	r2, r0
 800ffa6:	61e8      	str	r0, [r5, #28]
 800ffa8:	b920      	cbnz	r0, 800ffb4 <_Bfree+0x20>
 800ffaa:	4b09      	ldr	r3, [pc, #36]	@ (800ffd0 <_Bfree+0x3c>)
 800ffac:	4809      	ldr	r0, [pc, #36]	@ (800ffd4 <_Bfree+0x40>)
 800ffae:	218f      	movs	r1, #143	@ 0x8f
 800ffb0:	f002 fa76 	bl	80124a0 <__assert_func>
 800ffb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ffb8:	6006      	str	r6, [r0, #0]
 800ffba:	60c6      	str	r6, [r0, #12]
 800ffbc:	b13c      	cbz	r4, 800ffce <_Bfree+0x3a>
 800ffbe:	69eb      	ldr	r3, [r5, #28]
 800ffc0:	6862      	ldr	r2, [r4, #4]
 800ffc2:	68db      	ldr	r3, [r3, #12]
 800ffc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ffc8:	6021      	str	r1, [r4, #0]
 800ffca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ffce:	bd70      	pop	{r4, r5, r6, pc}
 800ffd0:	08012f96 	.word	0x08012f96
 800ffd4:	08013016 	.word	0x08013016

0800ffd8 <__multadd>:
 800ffd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffdc:	690d      	ldr	r5, [r1, #16]
 800ffde:	4607      	mov	r7, r0
 800ffe0:	460c      	mov	r4, r1
 800ffe2:	461e      	mov	r6, r3
 800ffe4:	f101 0c14 	add.w	ip, r1, #20
 800ffe8:	2000      	movs	r0, #0
 800ffea:	f8dc 3000 	ldr.w	r3, [ip]
 800ffee:	b299      	uxth	r1, r3
 800fff0:	fb02 6101 	mla	r1, r2, r1, r6
 800fff4:	0c1e      	lsrs	r6, r3, #16
 800fff6:	0c0b      	lsrs	r3, r1, #16
 800fff8:	fb02 3306 	mla	r3, r2, r6, r3
 800fffc:	b289      	uxth	r1, r1
 800fffe:	3001      	adds	r0, #1
 8010000:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010004:	4285      	cmp	r5, r0
 8010006:	f84c 1b04 	str.w	r1, [ip], #4
 801000a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801000e:	dcec      	bgt.n	800ffea <__multadd+0x12>
 8010010:	b30e      	cbz	r6, 8010056 <__multadd+0x7e>
 8010012:	68a3      	ldr	r3, [r4, #8]
 8010014:	42ab      	cmp	r3, r5
 8010016:	dc19      	bgt.n	801004c <__multadd+0x74>
 8010018:	6861      	ldr	r1, [r4, #4]
 801001a:	4638      	mov	r0, r7
 801001c:	3101      	adds	r1, #1
 801001e:	f7ff ff79 	bl	800ff14 <_Balloc>
 8010022:	4680      	mov	r8, r0
 8010024:	b928      	cbnz	r0, 8010032 <__multadd+0x5a>
 8010026:	4602      	mov	r2, r0
 8010028:	4b0c      	ldr	r3, [pc, #48]	@ (801005c <__multadd+0x84>)
 801002a:	480d      	ldr	r0, [pc, #52]	@ (8010060 <__multadd+0x88>)
 801002c:	21ba      	movs	r1, #186	@ 0xba
 801002e:	f002 fa37 	bl	80124a0 <__assert_func>
 8010032:	6922      	ldr	r2, [r4, #16]
 8010034:	3202      	adds	r2, #2
 8010036:	f104 010c 	add.w	r1, r4, #12
 801003a:	0092      	lsls	r2, r2, #2
 801003c:	300c      	adds	r0, #12
 801003e:	f7ff f8be 	bl	800f1be <memcpy>
 8010042:	4621      	mov	r1, r4
 8010044:	4638      	mov	r0, r7
 8010046:	f7ff ffa5 	bl	800ff94 <_Bfree>
 801004a:	4644      	mov	r4, r8
 801004c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010050:	3501      	adds	r5, #1
 8010052:	615e      	str	r6, [r3, #20]
 8010054:	6125      	str	r5, [r4, #16]
 8010056:	4620      	mov	r0, r4
 8010058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801005c:	08013005 	.word	0x08013005
 8010060:	08013016 	.word	0x08013016

08010064 <__s2b>:
 8010064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010068:	460c      	mov	r4, r1
 801006a:	4615      	mov	r5, r2
 801006c:	461f      	mov	r7, r3
 801006e:	2209      	movs	r2, #9
 8010070:	3308      	adds	r3, #8
 8010072:	4606      	mov	r6, r0
 8010074:	fb93 f3f2 	sdiv	r3, r3, r2
 8010078:	2100      	movs	r1, #0
 801007a:	2201      	movs	r2, #1
 801007c:	429a      	cmp	r2, r3
 801007e:	db09      	blt.n	8010094 <__s2b+0x30>
 8010080:	4630      	mov	r0, r6
 8010082:	f7ff ff47 	bl	800ff14 <_Balloc>
 8010086:	b940      	cbnz	r0, 801009a <__s2b+0x36>
 8010088:	4602      	mov	r2, r0
 801008a:	4b19      	ldr	r3, [pc, #100]	@ (80100f0 <__s2b+0x8c>)
 801008c:	4819      	ldr	r0, [pc, #100]	@ (80100f4 <__s2b+0x90>)
 801008e:	21d3      	movs	r1, #211	@ 0xd3
 8010090:	f002 fa06 	bl	80124a0 <__assert_func>
 8010094:	0052      	lsls	r2, r2, #1
 8010096:	3101      	adds	r1, #1
 8010098:	e7f0      	b.n	801007c <__s2b+0x18>
 801009a:	9b08      	ldr	r3, [sp, #32]
 801009c:	6143      	str	r3, [r0, #20]
 801009e:	2d09      	cmp	r5, #9
 80100a0:	f04f 0301 	mov.w	r3, #1
 80100a4:	6103      	str	r3, [r0, #16]
 80100a6:	dd16      	ble.n	80100d6 <__s2b+0x72>
 80100a8:	f104 0909 	add.w	r9, r4, #9
 80100ac:	46c8      	mov	r8, r9
 80100ae:	442c      	add	r4, r5
 80100b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80100b4:	4601      	mov	r1, r0
 80100b6:	3b30      	subs	r3, #48	@ 0x30
 80100b8:	220a      	movs	r2, #10
 80100ba:	4630      	mov	r0, r6
 80100bc:	f7ff ff8c 	bl	800ffd8 <__multadd>
 80100c0:	45a0      	cmp	r8, r4
 80100c2:	d1f5      	bne.n	80100b0 <__s2b+0x4c>
 80100c4:	f1a5 0408 	sub.w	r4, r5, #8
 80100c8:	444c      	add	r4, r9
 80100ca:	1b2d      	subs	r5, r5, r4
 80100cc:	1963      	adds	r3, r4, r5
 80100ce:	42bb      	cmp	r3, r7
 80100d0:	db04      	blt.n	80100dc <__s2b+0x78>
 80100d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100d6:	340a      	adds	r4, #10
 80100d8:	2509      	movs	r5, #9
 80100da:	e7f6      	b.n	80100ca <__s2b+0x66>
 80100dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80100e0:	4601      	mov	r1, r0
 80100e2:	3b30      	subs	r3, #48	@ 0x30
 80100e4:	220a      	movs	r2, #10
 80100e6:	4630      	mov	r0, r6
 80100e8:	f7ff ff76 	bl	800ffd8 <__multadd>
 80100ec:	e7ee      	b.n	80100cc <__s2b+0x68>
 80100ee:	bf00      	nop
 80100f0:	08013005 	.word	0x08013005
 80100f4:	08013016 	.word	0x08013016

080100f8 <__hi0bits>:
 80100f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80100fc:	4603      	mov	r3, r0
 80100fe:	bf36      	itet	cc
 8010100:	0403      	lslcc	r3, r0, #16
 8010102:	2000      	movcs	r0, #0
 8010104:	2010      	movcc	r0, #16
 8010106:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801010a:	bf3c      	itt	cc
 801010c:	021b      	lslcc	r3, r3, #8
 801010e:	3008      	addcc	r0, #8
 8010110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010114:	bf3c      	itt	cc
 8010116:	011b      	lslcc	r3, r3, #4
 8010118:	3004      	addcc	r0, #4
 801011a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801011e:	bf3c      	itt	cc
 8010120:	009b      	lslcc	r3, r3, #2
 8010122:	3002      	addcc	r0, #2
 8010124:	2b00      	cmp	r3, #0
 8010126:	db05      	blt.n	8010134 <__hi0bits+0x3c>
 8010128:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801012c:	f100 0001 	add.w	r0, r0, #1
 8010130:	bf08      	it	eq
 8010132:	2020      	moveq	r0, #32
 8010134:	4770      	bx	lr

08010136 <__lo0bits>:
 8010136:	6803      	ldr	r3, [r0, #0]
 8010138:	4602      	mov	r2, r0
 801013a:	f013 0007 	ands.w	r0, r3, #7
 801013e:	d00b      	beq.n	8010158 <__lo0bits+0x22>
 8010140:	07d9      	lsls	r1, r3, #31
 8010142:	d421      	bmi.n	8010188 <__lo0bits+0x52>
 8010144:	0798      	lsls	r0, r3, #30
 8010146:	bf49      	itett	mi
 8010148:	085b      	lsrmi	r3, r3, #1
 801014a:	089b      	lsrpl	r3, r3, #2
 801014c:	2001      	movmi	r0, #1
 801014e:	6013      	strmi	r3, [r2, #0]
 8010150:	bf5c      	itt	pl
 8010152:	6013      	strpl	r3, [r2, #0]
 8010154:	2002      	movpl	r0, #2
 8010156:	4770      	bx	lr
 8010158:	b299      	uxth	r1, r3
 801015a:	b909      	cbnz	r1, 8010160 <__lo0bits+0x2a>
 801015c:	0c1b      	lsrs	r3, r3, #16
 801015e:	2010      	movs	r0, #16
 8010160:	b2d9      	uxtb	r1, r3
 8010162:	b909      	cbnz	r1, 8010168 <__lo0bits+0x32>
 8010164:	3008      	adds	r0, #8
 8010166:	0a1b      	lsrs	r3, r3, #8
 8010168:	0719      	lsls	r1, r3, #28
 801016a:	bf04      	itt	eq
 801016c:	091b      	lsreq	r3, r3, #4
 801016e:	3004      	addeq	r0, #4
 8010170:	0799      	lsls	r1, r3, #30
 8010172:	bf04      	itt	eq
 8010174:	089b      	lsreq	r3, r3, #2
 8010176:	3002      	addeq	r0, #2
 8010178:	07d9      	lsls	r1, r3, #31
 801017a:	d403      	bmi.n	8010184 <__lo0bits+0x4e>
 801017c:	085b      	lsrs	r3, r3, #1
 801017e:	f100 0001 	add.w	r0, r0, #1
 8010182:	d003      	beq.n	801018c <__lo0bits+0x56>
 8010184:	6013      	str	r3, [r2, #0]
 8010186:	4770      	bx	lr
 8010188:	2000      	movs	r0, #0
 801018a:	4770      	bx	lr
 801018c:	2020      	movs	r0, #32
 801018e:	4770      	bx	lr

08010190 <__i2b>:
 8010190:	b510      	push	{r4, lr}
 8010192:	460c      	mov	r4, r1
 8010194:	2101      	movs	r1, #1
 8010196:	f7ff febd 	bl	800ff14 <_Balloc>
 801019a:	4602      	mov	r2, r0
 801019c:	b928      	cbnz	r0, 80101aa <__i2b+0x1a>
 801019e:	4b05      	ldr	r3, [pc, #20]	@ (80101b4 <__i2b+0x24>)
 80101a0:	4805      	ldr	r0, [pc, #20]	@ (80101b8 <__i2b+0x28>)
 80101a2:	f240 1145 	movw	r1, #325	@ 0x145
 80101a6:	f002 f97b 	bl	80124a0 <__assert_func>
 80101aa:	2301      	movs	r3, #1
 80101ac:	6144      	str	r4, [r0, #20]
 80101ae:	6103      	str	r3, [r0, #16]
 80101b0:	bd10      	pop	{r4, pc}
 80101b2:	bf00      	nop
 80101b4:	08013005 	.word	0x08013005
 80101b8:	08013016 	.word	0x08013016

080101bc <__multiply>:
 80101bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101c0:	4614      	mov	r4, r2
 80101c2:	690a      	ldr	r2, [r1, #16]
 80101c4:	6923      	ldr	r3, [r4, #16]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	bfa8      	it	ge
 80101ca:	4623      	movge	r3, r4
 80101cc:	460f      	mov	r7, r1
 80101ce:	bfa4      	itt	ge
 80101d0:	460c      	movge	r4, r1
 80101d2:	461f      	movge	r7, r3
 80101d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80101d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80101dc:	68a3      	ldr	r3, [r4, #8]
 80101de:	6861      	ldr	r1, [r4, #4]
 80101e0:	eb0a 0609 	add.w	r6, sl, r9
 80101e4:	42b3      	cmp	r3, r6
 80101e6:	b085      	sub	sp, #20
 80101e8:	bfb8      	it	lt
 80101ea:	3101      	addlt	r1, #1
 80101ec:	f7ff fe92 	bl	800ff14 <_Balloc>
 80101f0:	b930      	cbnz	r0, 8010200 <__multiply+0x44>
 80101f2:	4602      	mov	r2, r0
 80101f4:	4b44      	ldr	r3, [pc, #272]	@ (8010308 <__multiply+0x14c>)
 80101f6:	4845      	ldr	r0, [pc, #276]	@ (801030c <__multiply+0x150>)
 80101f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80101fc:	f002 f950 	bl	80124a0 <__assert_func>
 8010200:	f100 0514 	add.w	r5, r0, #20
 8010204:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010208:	462b      	mov	r3, r5
 801020a:	2200      	movs	r2, #0
 801020c:	4543      	cmp	r3, r8
 801020e:	d321      	bcc.n	8010254 <__multiply+0x98>
 8010210:	f107 0114 	add.w	r1, r7, #20
 8010214:	f104 0214 	add.w	r2, r4, #20
 8010218:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801021c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010220:	9302      	str	r3, [sp, #8]
 8010222:	1b13      	subs	r3, r2, r4
 8010224:	3b15      	subs	r3, #21
 8010226:	f023 0303 	bic.w	r3, r3, #3
 801022a:	3304      	adds	r3, #4
 801022c:	f104 0715 	add.w	r7, r4, #21
 8010230:	42ba      	cmp	r2, r7
 8010232:	bf38      	it	cc
 8010234:	2304      	movcc	r3, #4
 8010236:	9301      	str	r3, [sp, #4]
 8010238:	9b02      	ldr	r3, [sp, #8]
 801023a:	9103      	str	r1, [sp, #12]
 801023c:	428b      	cmp	r3, r1
 801023e:	d80c      	bhi.n	801025a <__multiply+0x9e>
 8010240:	2e00      	cmp	r6, #0
 8010242:	dd03      	ble.n	801024c <__multiply+0x90>
 8010244:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010248:	2b00      	cmp	r3, #0
 801024a:	d05b      	beq.n	8010304 <__multiply+0x148>
 801024c:	6106      	str	r6, [r0, #16]
 801024e:	b005      	add	sp, #20
 8010250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010254:	f843 2b04 	str.w	r2, [r3], #4
 8010258:	e7d8      	b.n	801020c <__multiply+0x50>
 801025a:	f8b1 a000 	ldrh.w	sl, [r1]
 801025e:	f1ba 0f00 	cmp.w	sl, #0
 8010262:	d024      	beq.n	80102ae <__multiply+0xf2>
 8010264:	f104 0e14 	add.w	lr, r4, #20
 8010268:	46a9      	mov	r9, r5
 801026a:	f04f 0c00 	mov.w	ip, #0
 801026e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010272:	f8d9 3000 	ldr.w	r3, [r9]
 8010276:	fa1f fb87 	uxth.w	fp, r7
 801027a:	b29b      	uxth	r3, r3
 801027c:	fb0a 330b 	mla	r3, sl, fp, r3
 8010280:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010284:	f8d9 7000 	ldr.w	r7, [r9]
 8010288:	4463      	add	r3, ip
 801028a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801028e:	fb0a c70b 	mla	r7, sl, fp, ip
 8010292:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010296:	b29b      	uxth	r3, r3
 8010298:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801029c:	4572      	cmp	r2, lr
 801029e:	f849 3b04 	str.w	r3, [r9], #4
 80102a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80102a6:	d8e2      	bhi.n	801026e <__multiply+0xb2>
 80102a8:	9b01      	ldr	r3, [sp, #4]
 80102aa:	f845 c003 	str.w	ip, [r5, r3]
 80102ae:	9b03      	ldr	r3, [sp, #12]
 80102b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80102b4:	3104      	adds	r1, #4
 80102b6:	f1b9 0f00 	cmp.w	r9, #0
 80102ba:	d021      	beq.n	8010300 <__multiply+0x144>
 80102bc:	682b      	ldr	r3, [r5, #0]
 80102be:	f104 0c14 	add.w	ip, r4, #20
 80102c2:	46ae      	mov	lr, r5
 80102c4:	f04f 0a00 	mov.w	sl, #0
 80102c8:	f8bc b000 	ldrh.w	fp, [ip]
 80102cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80102d0:	fb09 770b 	mla	r7, r9, fp, r7
 80102d4:	4457      	add	r7, sl
 80102d6:	b29b      	uxth	r3, r3
 80102d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80102dc:	f84e 3b04 	str.w	r3, [lr], #4
 80102e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80102e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80102e8:	f8be 3000 	ldrh.w	r3, [lr]
 80102ec:	fb09 330a 	mla	r3, r9, sl, r3
 80102f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80102f4:	4562      	cmp	r2, ip
 80102f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80102fa:	d8e5      	bhi.n	80102c8 <__multiply+0x10c>
 80102fc:	9f01      	ldr	r7, [sp, #4]
 80102fe:	51eb      	str	r3, [r5, r7]
 8010300:	3504      	adds	r5, #4
 8010302:	e799      	b.n	8010238 <__multiply+0x7c>
 8010304:	3e01      	subs	r6, #1
 8010306:	e79b      	b.n	8010240 <__multiply+0x84>
 8010308:	08013005 	.word	0x08013005
 801030c:	08013016 	.word	0x08013016

08010310 <__pow5mult>:
 8010310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010314:	4615      	mov	r5, r2
 8010316:	f012 0203 	ands.w	r2, r2, #3
 801031a:	4607      	mov	r7, r0
 801031c:	460e      	mov	r6, r1
 801031e:	d007      	beq.n	8010330 <__pow5mult+0x20>
 8010320:	4c25      	ldr	r4, [pc, #148]	@ (80103b8 <__pow5mult+0xa8>)
 8010322:	3a01      	subs	r2, #1
 8010324:	2300      	movs	r3, #0
 8010326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801032a:	f7ff fe55 	bl	800ffd8 <__multadd>
 801032e:	4606      	mov	r6, r0
 8010330:	10ad      	asrs	r5, r5, #2
 8010332:	d03d      	beq.n	80103b0 <__pow5mult+0xa0>
 8010334:	69fc      	ldr	r4, [r7, #28]
 8010336:	b97c      	cbnz	r4, 8010358 <__pow5mult+0x48>
 8010338:	2010      	movs	r0, #16
 801033a:	f7fd fced 	bl	800dd18 <malloc>
 801033e:	4602      	mov	r2, r0
 8010340:	61f8      	str	r0, [r7, #28]
 8010342:	b928      	cbnz	r0, 8010350 <__pow5mult+0x40>
 8010344:	4b1d      	ldr	r3, [pc, #116]	@ (80103bc <__pow5mult+0xac>)
 8010346:	481e      	ldr	r0, [pc, #120]	@ (80103c0 <__pow5mult+0xb0>)
 8010348:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801034c:	f002 f8a8 	bl	80124a0 <__assert_func>
 8010350:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010354:	6004      	str	r4, [r0, #0]
 8010356:	60c4      	str	r4, [r0, #12]
 8010358:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801035c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010360:	b94c      	cbnz	r4, 8010376 <__pow5mult+0x66>
 8010362:	f240 2171 	movw	r1, #625	@ 0x271
 8010366:	4638      	mov	r0, r7
 8010368:	f7ff ff12 	bl	8010190 <__i2b>
 801036c:	2300      	movs	r3, #0
 801036e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010372:	4604      	mov	r4, r0
 8010374:	6003      	str	r3, [r0, #0]
 8010376:	f04f 0900 	mov.w	r9, #0
 801037a:	07eb      	lsls	r3, r5, #31
 801037c:	d50a      	bpl.n	8010394 <__pow5mult+0x84>
 801037e:	4631      	mov	r1, r6
 8010380:	4622      	mov	r2, r4
 8010382:	4638      	mov	r0, r7
 8010384:	f7ff ff1a 	bl	80101bc <__multiply>
 8010388:	4631      	mov	r1, r6
 801038a:	4680      	mov	r8, r0
 801038c:	4638      	mov	r0, r7
 801038e:	f7ff fe01 	bl	800ff94 <_Bfree>
 8010392:	4646      	mov	r6, r8
 8010394:	106d      	asrs	r5, r5, #1
 8010396:	d00b      	beq.n	80103b0 <__pow5mult+0xa0>
 8010398:	6820      	ldr	r0, [r4, #0]
 801039a:	b938      	cbnz	r0, 80103ac <__pow5mult+0x9c>
 801039c:	4622      	mov	r2, r4
 801039e:	4621      	mov	r1, r4
 80103a0:	4638      	mov	r0, r7
 80103a2:	f7ff ff0b 	bl	80101bc <__multiply>
 80103a6:	6020      	str	r0, [r4, #0]
 80103a8:	f8c0 9000 	str.w	r9, [r0]
 80103ac:	4604      	mov	r4, r0
 80103ae:	e7e4      	b.n	801037a <__pow5mult+0x6a>
 80103b0:	4630      	mov	r0, r6
 80103b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103b6:	bf00      	nop
 80103b8:	08013070 	.word	0x08013070
 80103bc:	08012f96 	.word	0x08012f96
 80103c0:	08013016 	.word	0x08013016

080103c4 <__lshift>:
 80103c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103c8:	460c      	mov	r4, r1
 80103ca:	6849      	ldr	r1, [r1, #4]
 80103cc:	6923      	ldr	r3, [r4, #16]
 80103ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80103d2:	68a3      	ldr	r3, [r4, #8]
 80103d4:	4607      	mov	r7, r0
 80103d6:	4691      	mov	r9, r2
 80103d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80103dc:	f108 0601 	add.w	r6, r8, #1
 80103e0:	42b3      	cmp	r3, r6
 80103e2:	db0b      	blt.n	80103fc <__lshift+0x38>
 80103e4:	4638      	mov	r0, r7
 80103e6:	f7ff fd95 	bl	800ff14 <_Balloc>
 80103ea:	4605      	mov	r5, r0
 80103ec:	b948      	cbnz	r0, 8010402 <__lshift+0x3e>
 80103ee:	4602      	mov	r2, r0
 80103f0:	4b28      	ldr	r3, [pc, #160]	@ (8010494 <__lshift+0xd0>)
 80103f2:	4829      	ldr	r0, [pc, #164]	@ (8010498 <__lshift+0xd4>)
 80103f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80103f8:	f002 f852 	bl	80124a0 <__assert_func>
 80103fc:	3101      	adds	r1, #1
 80103fe:	005b      	lsls	r3, r3, #1
 8010400:	e7ee      	b.n	80103e0 <__lshift+0x1c>
 8010402:	2300      	movs	r3, #0
 8010404:	f100 0114 	add.w	r1, r0, #20
 8010408:	f100 0210 	add.w	r2, r0, #16
 801040c:	4618      	mov	r0, r3
 801040e:	4553      	cmp	r3, sl
 8010410:	db33      	blt.n	801047a <__lshift+0xb6>
 8010412:	6920      	ldr	r0, [r4, #16]
 8010414:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010418:	f104 0314 	add.w	r3, r4, #20
 801041c:	f019 091f 	ands.w	r9, r9, #31
 8010420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010424:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010428:	d02b      	beq.n	8010482 <__lshift+0xbe>
 801042a:	f1c9 0e20 	rsb	lr, r9, #32
 801042e:	468a      	mov	sl, r1
 8010430:	2200      	movs	r2, #0
 8010432:	6818      	ldr	r0, [r3, #0]
 8010434:	fa00 f009 	lsl.w	r0, r0, r9
 8010438:	4310      	orrs	r0, r2
 801043a:	f84a 0b04 	str.w	r0, [sl], #4
 801043e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010442:	459c      	cmp	ip, r3
 8010444:	fa22 f20e 	lsr.w	r2, r2, lr
 8010448:	d8f3      	bhi.n	8010432 <__lshift+0x6e>
 801044a:	ebac 0304 	sub.w	r3, ip, r4
 801044e:	3b15      	subs	r3, #21
 8010450:	f023 0303 	bic.w	r3, r3, #3
 8010454:	3304      	adds	r3, #4
 8010456:	f104 0015 	add.w	r0, r4, #21
 801045a:	4584      	cmp	ip, r0
 801045c:	bf38      	it	cc
 801045e:	2304      	movcc	r3, #4
 8010460:	50ca      	str	r2, [r1, r3]
 8010462:	b10a      	cbz	r2, 8010468 <__lshift+0xa4>
 8010464:	f108 0602 	add.w	r6, r8, #2
 8010468:	3e01      	subs	r6, #1
 801046a:	4638      	mov	r0, r7
 801046c:	612e      	str	r6, [r5, #16]
 801046e:	4621      	mov	r1, r4
 8010470:	f7ff fd90 	bl	800ff94 <_Bfree>
 8010474:	4628      	mov	r0, r5
 8010476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801047a:	f842 0f04 	str.w	r0, [r2, #4]!
 801047e:	3301      	adds	r3, #1
 8010480:	e7c5      	b.n	801040e <__lshift+0x4a>
 8010482:	3904      	subs	r1, #4
 8010484:	f853 2b04 	ldr.w	r2, [r3], #4
 8010488:	f841 2f04 	str.w	r2, [r1, #4]!
 801048c:	459c      	cmp	ip, r3
 801048e:	d8f9      	bhi.n	8010484 <__lshift+0xc0>
 8010490:	e7ea      	b.n	8010468 <__lshift+0xa4>
 8010492:	bf00      	nop
 8010494:	08013005 	.word	0x08013005
 8010498:	08013016 	.word	0x08013016

0801049c <__mcmp>:
 801049c:	690a      	ldr	r2, [r1, #16]
 801049e:	4603      	mov	r3, r0
 80104a0:	6900      	ldr	r0, [r0, #16]
 80104a2:	1a80      	subs	r0, r0, r2
 80104a4:	b530      	push	{r4, r5, lr}
 80104a6:	d10e      	bne.n	80104c6 <__mcmp+0x2a>
 80104a8:	3314      	adds	r3, #20
 80104aa:	3114      	adds	r1, #20
 80104ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80104b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80104b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80104b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80104bc:	4295      	cmp	r5, r2
 80104be:	d003      	beq.n	80104c8 <__mcmp+0x2c>
 80104c0:	d205      	bcs.n	80104ce <__mcmp+0x32>
 80104c2:	f04f 30ff 	mov.w	r0, #4294967295
 80104c6:	bd30      	pop	{r4, r5, pc}
 80104c8:	42a3      	cmp	r3, r4
 80104ca:	d3f3      	bcc.n	80104b4 <__mcmp+0x18>
 80104cc:	e7fb      	b.n	80104c6 <__mcmp+0x2a>
 80104ce:	2001      	movs	r0, #1
 80104d0:	e7f9      	b.n	80104c6 <__mcmp+0x2a>
	...

080104d4 <__mdiff>:
 80104d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d8:	4689      	mov	r9, r1
 80104da:	4606      	mov	r6, r0
 80104dc:	4611      	mov	r1, r2
 80104de:	4648      	mov	r0, r9
 80104e0:	4614      	mov	r4, r2
 80104e2:	f7ff ffdb 	bl	801049c <__mcmp>
 80104e6:	1e05      	subs	r5, r0, #0
 80104e8:	d112      	bne.n	8010510 <__mdiff+0x3c>
 80104ea:	4629      	mov	r1, r5
 80104ec:	4630      	mov	r0, r6
 80104ee:	f7ff fd11 	bl	800ff14 <_Balloc>
 80104f2:	4602      	mov	r2, r0
 80104f4:	b928      	cbnz	r0, 8010502 <__mdiff+0x2e>
 80104f6:	4b3f      	ldr	r3, [pc, #252]	@ (80105f4 <__mdiff+0x120>)
 80104f8:	f240 2137 	movw	r1, #567	@ 0x237
 80104fc:	483e      	ldr	r0, [pc, #248]	@ (80105f8 <__mdiff+0x124>)
 80104fe:	f001 ffcf 	bl	80124a0 <__assert_func>
 8010502:	2301      	movs	r3, #1
 8010504:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010508:	4610      	mov	r0, r2
 801050a:	b003      	add	sp, #12
 801050c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010510:	bfbc      	itt	lt
 8010512:	464b      	movlt	r3, r9
 8010514:	46a1      	movlt	r9, r4
 8010516:	4630      	mov	r0, r6
 8010518:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801051c:	bfba      	itte	lt
 801051e:	461c      	movlt	r4, r3
 8010520:	2501      	movlt	r5, #1
 8010522:	2500      	movge	r5, #0
 8010524:	f7ff fcf6 	bl	800ff14 <_Balloc>
 8010528:	4602      	mov	r2, r0
 801052a:	b918      	cbnz	r0, 8010534 <__mdiff+0x60>
 801052c:	4b31      	ldr	r3, [pc, #196]	@ (80105f4 <__mdiff+0x120>)
 801052e:	f240 2145 	movw	r1, #581	@ 0x245
 8010532:	e7e3      	b.n	80104fc <__mdiff+0x28>
 8010534:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010538:	6926      	ldr	r6, [r4, #16]
 801053a:	60c5      	str	r5, [r0, #12]
 801053c:	f109 0310 	add.w	r3, r9, #16
 8010540:	f109 0514 	add.w	r5, r9, #20
 8010544:	f104 0e14 	add.w	lr, r4, #20
 8010548:	f100 0b14 	add.w	fp, r0, #20
 801054c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010550:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010554:	9301      	str	r3, [sp, #4]
 8010556:	46d9      	mov	r9, fp
 8010558:	f04f 0c00 	mov.w	ip, #0
 801055c:	9b01      	ldr	r3, [sp, #4]
 801055e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010562:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010566:	9301      	str	r3, [sp, #4]
 8010568:	fa1f f38a 	uxth.w	r3, sl
 801056c:	4619      	mov	r1, r3
 801056e:	b283      	uxth	r3, r0
 8010570:	1acb      	subs	r3, r1, r3
 8010572:	0c00      	lsrs	r0, r0, #16
 8010574:	4463      	add	r3, ip
 8010576:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801057a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801057e:	b29b      	uxth	r3, r3
 8010580:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010584:	4576      	cmp	r6, lr
 8010586:	f849 3b04 	str.w	r3, [r9], #4
 801058a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801058e:	d8e5      	bhi.n	801055c <__mdiff+0x88>
 8010590:	1b33      	subs	r3, r6, r4
 8010592:	3b15      	subs	r3, #21
 8010594:	f023 0303 	bic.w	r3, r3, #3
 8010598:	3415      	adds	r4, #21
 801059a:	3304      	adds	r3, #4
 801059c:	42a6      	cmp	r6, r4
 801059e:	bf38      	it	cc
 80105a0:	2304      	movcc	r3, #4
 80105a2:	441d      	add	r5, r3
 80105a4:	445b      	add	r3, fp
 80105a6:	461e      	mov	r6, r3
 80105a8:	462c      	mov	r4, r5
 80105aa:	4544      	cmp	r4, r8
 80105ac:	d30e      	bcc.n	80105cc <__mdiff+0xf8>
 80105ae:	f108 0103 	add.w	r1, r8, #3
 80105b2:	1b49      	subs	r1, r1, r5
 80105b4:	f021 0103 	bic.w	r1, r1, #3
 80105b8:	3d03      	subs	r5, #3
 80105ba:	45a8      	cmp	r8, r5
 80105bc:	bf38      	it	cc
 80105be:	2100      	movcc	r1, #0
 80105c0:	440b      	add	r3, r1
 80105c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80105c6:	b191      	cbz	r1, 80105ee <__mdiff+0x11a>
 80105c8:	6117      	str	r7, [r2, #16]
 80105ca:	e79d      	b.n	8010508 <__mdiff+0x34>
 80105cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80105d0:	46e6      	mov	lr, ip
 80105d2:	0c08      	lsrs	r0, r1, #16
 80105d4:	fa1c fc81 	uxtah	ip, ip, r1
 80105d8:	4471      	add	r1, lr
 80105da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80105de:	b289      	uxth	r1, r1
 80105e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80105e4:	f846 1b04 	str.w	r1, [r6], #4
 80105e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80105ec:	e7dd      	b.n	80105aa <__mdiff+0xd6>
 80105ee:	3f01      	subs	r7, #1
 80105f0:	e7e7      	b.n	80105c2 <__mdiff+0xee>
 80105f2:	bf00      	nop
 80105f4:	08013005 	.word	0x08013005
 80105f8:	08013016 	.word	0x08013016

080105fc <__ulp>:
 80105fc:	b082      	sub	sp, #8
 80105fe:	ed8d 0b00 	vstr	d0, [sp]
 8010602:	9a01      	ldr	r2, [sp, #4]
 8010604:	4b0f      	ldr	r3, [pc, #60]	@ (8010644 <__ulp+0x48>)
 8010606:	4013      	ands	r3, r2
 8010608:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801060c:	2b00      	cmp	r3, #0
 801060e:	dc08      	bgt.n	8010622 <__ulp+0x26>
 8010610:	425b      	negs	r3, r3
 8010612:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010616:	ea4f 5223 	mov.w	r2, r3, asr #20
 801061a:	da04      	bge.n	8010626 <__ulp+0x2a>
 801061c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010620:	4113      	asrs	r3, r2
 8010622:	2200      	movs	r2, #0
 8010624:	e008      	b.n	8010638 <__ulp+0x3c>
 8010626:	f1a2 0314 	sub.w	r3, r2, #20
 801062a:	2b1e      	cmp	r3, #30
 801062c:	bfda      	itte	le
 801062e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010632:	40da      	lsrle	r2, r3
 8010634:	2201      	movgt	r2, #1
 8010636:	2300      	movs	r3, #0
 8010638:	4619      	mov	r1, r3
 801063a:	4610      	mov	r0, r2
 801063c:	ec41 0b10 	vmov	d0, r0, r1
 8010640:	b002      	add	sp, #8
 8010642:	4770      	bx	lr
 8010644:	7ff00000 	.word	0x7ff00000

08010648 <__b2d>:
 8010648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801064c:	6906      	ldr	r6, [r0, #16]
 801064e:	f100 0814 	add.w	r8, r0, #20
 8010652:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010656:	1f37      	subs	r7, r6, #4
 8010658:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801065c:	4610      	mov	r0, r2
 801065e:	f7ff fd4b 	bl	80100f8 <__hi0bits>
 8010662:	f1c0 0320 	rsb	r3, r0, #32
 8010666:	280a      	cmp	r0, #10
 8010668:	600b      	str	r3, [r1, #0]
 801066a:	491b      	ldr	r1, [pc, #108]	@ (80106d8 <__b2d+0x90>)
 801066c:	dc15      	bgt.n	801069a <__b2d+0x52>
 801066e:	f1c0 0c0b 	rsb	ip, r0, #11
 8010672:	fa22 f30c 	lsr.w	r3, r2, ip
 8010676:	45b8      	cmp	r8, r7
 8010678:	ea43 0501 	orr.w	r5, r3, r1
 801067c:	bf34      	ite	cc
 801067e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010682:	2300      	movcs	r3, #0
 8010684:	3015      	adds	r0, #21
 8010686:	fa02 f000 	lsl.w	r0, r2, r0
 801068a:	fa23 f30c 	lsr.w	r3, r3, ip
 801068e:	4303      	orrs	r3, r0
 8010690:	461c      	mov	r4, r3
 8010692:	ec45 4b10 	vmov	d0, r4, r5
 8010696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801069a:	45b8      	cmp	r8, r7
 801069c:	bf3a      	itte	cc
 801069e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80106a2:	f1a6 0708 	subcc.w	r7, r6, #8
 80106a6:	2300      	movcs	r3, #0
 80106a8:	380b      	subs	r0, #11
 80106aa:	d012      	beq.n	80106d2 <__b2d+0x8a>
 80106ac:	f1c0 0120 	rsb	r1, r0, #32
 80106b0:	fa23 f401 	lsr.w	r4, r3, r1
 80106b4:	4082      	lsls	r2, r0
 80106b6:	4322      	orrs	r2, r4
 80106b8:	4547      	cmp	r7, r8
 80106ba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80106be:	bf8c      	ite	hi
 80106c0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80106c4:	2200      	movls	r2, #0
 80106c6:	4083      	lsls	r3, r0
 80106c8:	40ca      	lsrs	r2, r1
 80106ca:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80106ce:	4313      	orrs	r3, r2
 80106d0:	e7de      	b.n	8010690 <__b2d+0x48>
 80106d2:	ea42 0501 	orr.w	r5, r2, r1
 80106d6:	e7db      	b.n	8010690 <__b2d+0x48>
 80106d8:	3ff00000 	.word	0x3ff00000

080106dc <__d2b>:
 80106dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80106e0:	460f      	mov	r7, r1
 80106e2:	2101      	movs	r1, #1
 80106e4:	ec59 8b10 	vmov	r8, r9, d0
 80106e8:	4616      	mov	r6, r2
 80106ea:	f7ff fc13 	bl	800ff14 <_Balloc>
 80106ee:	4604      	mov	r4, r0
 80106f0:	b930      	cbnz	r0, 8010700 <__d2b+0x24>
 80106f2:	4602      	mov	r2, r0
 80106f4:	4b23      	ldr	r3, [pc, #140]	@ (8010784 <__d2b+0xa8>)
 80106f6:	4824      	ldr	r0, [pc, #144]	@ (8010788 <__d2b+0xac>)
 80106f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80106fc:	f001 fed0 	bl	80124a0 <__assert_func>
 8010700:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010704:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010708:	b10d      	cbz	r5, 801070e <__d2b+0x32>
 801070a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801070e:	9301      	str	r3, [sp, #4]
 8010710:	f1b8 0300 	subs.w	r3, r8, #0
 8010714:	d023      	beq.n	801075e <__d2b+0x82>
 8010716:	4668      	mov	r0, sp
 8010718:	9300      	str	r3, [sp, #0]
 801071a:	f7ff fd0c 	bl	8010136 <__lo0bits>
 801071e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010722:	b1d0      	cbz	r0, 801075a <__d2b+0x7e>
 8010724:	f1c0 0320 	rsb	r3, r0, #32
 8010728:	fa02 f303 	lsl.w	r3, r2, r3
 801072c:	430b      	orrs	r3, r1
 801072e:	40c2      	lsrs	r2, r0
 8010730:	6163      	str	r3, [r4, #20]
 8010732:	9201      	str	r2, [sp, #4]
 8010734:	9b01      	ldr	r3, [sp, #4]
 8010736:	61a3      	str	r3, [r4, #24]
 8010738:	2b00      	cmp	r3, #0
 801073a:	bf0c      	ite	eq
 801073c:	2201      	moveq	r2, #1
 801073e:	2202      	movne	r2, #2
 8010740:	6122      	str	r2, [r4, #16]
 8010742:	b1a5      	cbz	r5, 801076e <__d2b+0x92>
 8010744:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010748:	4405      	add	r5, r0
 801074a:	603d      	str	r5, [r7, #0]
 801074c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010750:	6030      	str	r0, [r6, #0]
 8010752:	4620      	mov	r0, r4
 8010754:	b003      	add	sp, #12
 8010756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801075a:	6161      	str	r1, [r4, #20]
 801075c:	e7ea      	b.n	8010734 <__d2b+0x58>
 801075e:	a801      	add	r0, sp, #4
 8010760:	f7ff fce9 	bl	8010136 <__lo0bits>
 8010764:	9b01      	ldr	r3, [sp, #4]
 8010766:	6163      	str	r3, [r4, #20]
 8010768:	3020      	adds	r0, #32
 801076a:	2201      	movs	r2, #1
 801076c:	e7e8      	b.n	8010740 <__d2b+0x64>
 801076e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010772:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010776:	6038      	str	r0, [r7, #0]
 8010778:	6918      	ldr	r0, [r3, #16]
 801077a:	f7ff fcbd 	bl	80100f8 <__hi0bits>
 801077e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010782:	e7e5      	b.n	8010750 <__d2b+0x74>
 8010784:	08013005 	.word	0x08013005
 8010788:	08013016 	.word	0x08013016

0801078c <__ratio>:
 801078c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010790:	b085      	sub	sp, #20
 8010792:	e9cd 1000 	strd	r1, r0, [sp]
 8010796:	a902      	add	r1, sp, #8
 8010798:	f7ff ff56 	bl	8010648 <__b2d>
 801079c:	9800      	ldr	r0, [sp, #0]
 801079e:	a903      	add	r1, sp, #12
 80107a0:	ec55 4b10 	vmov	r4, r5, d0
 80107a4:	f7ff ff50 	bl	8010648 <__b2d>
 80107a8:	9b01      	ldr	r3, [sp, #4]
 80107aa:	6919      	ldr	r1, [r3, #16]
 80107ac:	9b00      	ldr	r3, [sp, #0]
 80107ae:	691b      	ldr	r3, [r3, #16]
 80107b0:	1ac9      	subs	r1, r1, r3
 80107b2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80107b6:	1a9b      	subs	r3, r3, r2
 80107b8:	ec5b ab10 	vmov	sl, fp, d0
 80107bc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	bfce      	itee	gt
 80107c4:	462a      	movgt	r2, r5
 80107c6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80107ca:	465a      	movle	r2, fp
 80107cc:	462f      	mov	r7, r5
 80107ce:	46d9      	mov	r9, fp
 80107d0:	bfcc      	ite	gt
 80107d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80107d6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80107da:	464b      	mov	r3, r9
 80107dc:	4652      	mov	r2, sl
 80107de:	4620      	mov	r0, r4
 80107e0:	4639      	mov	r1, r7
 80107e2:	f7f0 f86b 	bl	80008bc <__aeabi_ddiv>
 80107e6:	ec41 0b10 	vmov	d0, r0, r1
 80107ea:	b005      	add	sp, #20
 80107ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080107f0 <__copybits>:
 80107f0:	3901      	subs	r1, #1
 80107f2:	b570      	push	{r4, r5, r6, lr}
 80107f4:	1149      	asrs	r1, r1, #5
 80107f6:	6914      	ldr	r4, [r2, #16]
 80107f8:	3101      	adds	r1, #1
 80107fa:	f102 0314 	add.w	r3, r2, #20
 80107fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010802:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010806:	1f05      	subs	r5, r0, #4
 8010808:	42a3      	cmp	r3, r4
 801080a:	d30c      	bcc.n	8010826 <__copybits+0x36>
 801080c:	1aa3      	subs	r3, r4, r2
 801080e:	3b11      	subs	r3, #17
 8010810:	f023 0303 	bic.w	r3, r3, #3
 8010814:	3211      	adds	r2, #17
 8010816:	42a2      	cmp	r2, r4
 8010818:	bf88      	it	hi
 801081a:	2300      	movhi	r3, #0
 801081c:	4418      	add	r0, r3
 801081e:	2300      	movs	r3, #0
 8010820:	4288      	cmp	r0, r1
 8010822:	d305      	bcc.n	8010830 <__copybits+0x40>
 8010824:	bd70      	pop	{r4, r5, r6, pc}
 8010826:	f853 6b04 	ldr.w	r6, [r3], #4
 801082a:	f845 6f04 	str.w	r6, [r5, #4]!
 801082e:	e7eb      	b.n	8010808 <__copybits+0x18>
 8010830:	f840 3b04 	str.w	r3, [r0], #4
 8010834:	e7f4      	b.n	8010820 <__copybits+0x30>

08010836 <__any_on>:
 8010836:	f100 0214 	add.w	r2, r0, #20
 801083a:	6900      	ldr	r0, [r0, #16]
 801083c:	114b      	asrs	r3, r1, #5
 801083e:	4298      	cmp	r0, r3
 8010840:	b510      	push	{r4, lr}
 8010842:	db11      	blt.n	8010868 <__any_on+0x32>
 8010844:	dd0a      	ble.n	801085c <__any_on+0x26>
 8010846:	f011 011f 	ands.w	r1, r1, #31
 801084a:	d007      	beq.n	801085c <__any_on+0x26>
 801084c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010850:	fa24 f001 	lsr.w	r0, r4, r1
 8010854:	fa00 f101 	lsl.w	r1, r0, r1
 8010858:	428c      	cmp	r4, r1
 801085a:	d10b      	bne.n	8010874 <__any_on+0x3e>
 801085c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010860:	4293      	cmp	r3, r2
 8010862:	d803      	bhi.n	801086c <__any_on+0x36>
 8010864:	2000      	movs	r0, #0
 8010866:	bd10      	pop	{r4, pc}
 8010868:	4603      	mov	r3, r0
 801086a:	e7f7      	b.n	801085c <__any_on+0x26>
 801086c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010870:	2900      	cmp	r1, #0
 8010872:	d0f5      	beq.n	8010860 <__any_on+0x2a>
 8010874:	2001      	movs	r0, #1
 8010876:	e7f6      	b.n	8010866 <__any_on+0x30>

08010878 <sulp>:
 8010878:	b570      	push	{r4, r5, r6, lr}
 801087a:	4604      	mov	r4, r0
 801087c:	460d      	mov	r5, r1
 801087e:	ec45 4b10 	vmov	d0, r4, r5
 8010882:	4616      	mov	r6, r2
 8010884:	f7ff feba 	bl	80105fc <__ulp>
 8010888:	ec51 0b10 	vmov	r0, r1, d0
 801088c:	b17e      	cbz	r6, 80108ae <sulp+0x36>
 801088e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010892:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010896:	2b00      	cmp	r3, #0
 8010898:	dd09      	ble.n	80108ae <sulp+0x36>
 801089a:	051b      	lsls	r3, r3, #20
 801089c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80108a0:	2400      	movs	r4, #0
 80108a2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80108a6:	4622      	mov	r2, r4
 80108a8:	462b      	mov	r3, r5
 80108aa:	f7ef fedd 	bl	8000668 <__aeabi_dmul>
 80108ae:	ec41 0b10 	vmov	d0, r0, r1
 80108b2:	bd70      	pop	{r4, r5, r6, pc}
 80108b4:	0000      	movs	r0, r0
	...

080108b8 <_strtod_l>:
 80108b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108bc:	b09f      	sub	sp, #124	@ 0x7c
 80108be:	460c      	mov	r4, r1
 80108c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80108c2:	2200      	movs	r2, #0
 80108c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80108c6:	9005      	str	r0, [sp, #20]
 80108c8:	f04f 0a00 	mov.w	sl, #0
 80108cc:	f04f 0b00 	mov.w	fp, #0
 80108d0:	460a      	mov	r2, r1
 80108d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80108d4:	7811      	ldrb	r1, [r2, #0]
 80108d6:	292b      	cmp	r1, #43	@ 0x2b
 80108d8:	d04a      	beq.n	8010970 <_strtod_l+0xb8>
 80108da:	d838      	bhi.n	801094e <_strtod_l+0x96>
 80108dc:	290d      	cmp	r1, #13
 80108de:	d832      	bhi.n	8010946 <_strtod_l+0x8e>
 80108e0:	2908      	cmp	r1, #8
 80108e2:	d832      	bhi.n	801094a <_strtod_l+0x92>
 80108e4:	2900      	cmp	r1, #0
 80108e6:	d03b      	beq.n	8010960 <_strtod_l+0xa8>
 80108e8:	2200      	movs	r2, #0
 80108ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80108ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80108ee:	782a      	ldrb	r2, [r5, #0]
 80108f0:	2a30      	cmp	r2, #48	@ 0x30
 80108f2:	f040 80b3 	bne.w	8010a5c <_strtod_l+0x1a4>
 80108f6:	786a      	ldrb	r2, [r5, #1]
 80108f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80108fc:	2a58      	cmp	r2, #88	@ 0x58
 80108fe:	d16e      	bne.n	80109de <_strtod_l+0x126>
 8010900:	9302      	str	r3, [sp, #8]
 8010902:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010904:	9301      	str	r3, [sp, #4]
 8010906:	ab1a      	add	r3, sp, #104	@ 0x68
 8010908:	9300      	str	r3, [sp, #0]
 801090a:	4a8e      	ldr	r2, [pc, #568]	@ (8010b44 <_strtod_l+0x28c>)
 801090c:	9805      	ldr	r0, [sp, #20]
 801090e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010910:	a919      	add	r1, sp, #100	@ 0x64
 8010912:	f001 fe5f 	bl	80125d4 <__gethex>
 8010916:	f010 060f 	ands.w	r6, r0, #15
 801091a:	4604      	mov	r4, r0
 801091c:	d005      	beq.n	801092a <_strtod_l+0x72>
 801091e:	2e06      	cmp	r6, #6
 8010920:	d128      	bne.n	8010974 <_strtod_l+0xbc>
 8010922:	3501      	adds	r5, #1
 8010924:	2300      	movs	r3, #0
 8010926:	9519      	str	r5, [sp, #100]	@ 0x64
 8010928:	930b      	str	r3, [sp, #44]	@ 0x2c
 801092a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801092c:	2b00      	cmp	r3, #0
 801092e:	f040 858e 	bne.w	801144e <_strtod_l+0xb96>
 8010932:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010934:	b1cb      	cbz	r3, 801096a <_strtod_l+0xb2>
 8010936:	4652      	mov	r2, sl
 8010938:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801093c:	ec43 2b10 	vmov	d0, r2, r3
 8010940:	b01f      	add	sp, #124	@ 0x7c
 8010942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010946:	2920      	cmp	r1, #32
 8010948:	d1ce      	bne.n	80108e8 <_strtod_l+0x30>
 801094a:	3201      	adds	r2, #1
 801094c:	e7c1      	b.n	80108d2 <_strtod_l+0x1a>
 801094e:	292d      	cmp	r1, #45	@ 0x2d
 8010950:	d1ca      	bne.n	80108e8 <_strtod_l+0x30>
 8010952:	2101      	movs	r1, #1
 8010954:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010956:	1c51      	adds	r1, r2, #1
 8010958:	9119      	str	r1, [sp, #100]	@ 0x64
 801095a:	7852      	ldrb	r2, [r2, #1]
 801095c:	2a00      	cmp	r2, #0
 801095e:	d1c5      	bne.n	80108ec <_strtod_l+0x34>
 8010960:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010962:	9419      	str	r4, [sp, #100]	@ 0x64
 8010964:	2b00      	cmp	r3, #0
 8010966:	f040 8570 	bne.w	801144a <_strtod_l+0xb92>
 801096a:	4652      	mov	r2, sl
 801096c:	465b      	mov	r3, fp
 801096e:	e7e5      	b.n	801093c <_strtod_l+0x84>
 8010970:	2100      	movs	r1, #0
 8010972:	e7ef      	b.n	8010954 <_strtod_l+0x9c>
 8010974:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010976:	b13a      	cbz	r2, 8010988 <_strtod_l+0xd0>
 8010978:	2135      	movs	r1, #53	@ 0x35
 801097a:	a81c      	add	r0, sp, #112	@ 0x70
 801097c:	f7ff ff38 	bl	80107f0 <__copybits>
 8010980:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010982:	9805      	ldr	r0, [sp, #20]
 8010984:	f7ff fb06 	bl	800ff94 <_Bfree>
 8010988:	3e01      	subs	r6, #1
 801098a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801098c:	2e04      	cmp	r6, #4
 801098e:	d806      	bhi.n	801099e <_strtod_l+0xe6>
 8010990:	e8df f006 	tbb	[pc, r6]
 8010994:	201d0314 	.word	0x201d0314
 8010998:	14          	.byte	0x14
 8010999:	00          	.byte	0x00
 801099a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801099e:	05e1      	lsls	r1, r4, #23
 80109a0:	bf48      	it	mi
 80109a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80109a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80109aa:	0d1b      	lsrs	r3, r3, #20
 80109ac:	051b      	lsls	r3, r3, #20
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d1bb      	bne.n	801092a <_strtod_l+0x72>
 80109b2:	f7fe fbd7 	bl	800f164 <__errno>
 80109b6:	2322      	movs	r3, #34	@ 0x22
 80109b8:	6003      	str	r3, [r0, #0]
 80109ba:	e7b6      	b.n	801092a <_strtod_l+0x72>
 80109bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80109c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80109c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80109c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80109cc:	e7e7      	b.n	801099e <_strtod_l+0xe6>
 80109ce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8010b4c <_strtod_l+0x294>
 80109d2:	e7e4      	b.n	801099e <_strtod_l+0xe6>
 80109d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80109d8:	f04f 3aff 	mov.w	sl, #4294967295
 80109dc:	e7df      	b.n	801099e <_strtod_l+0xe6>
 80109de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80109e0:	1c5a      	adds	r2, r3, #1
 80109e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80109e4:	785b      	ldrb	r3, [r3, #1]
 80109e6:	2b30      	cmp	r3, #48	@ 0x30
 80109e8:	d0f9      	beq.n	80109de <_strtod_l+0x126>
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d09d      	beq.n	801092a <_strtod_l+0x72>
 80109ee:	2301      	movs	r3, #1
 80109f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80109f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80109f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80109f6:	2300      	movs	r3, #0
 80109f8:	9308      	str	r3, [sp, #32]
 80109fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80109fc:	461f      	mov	r7, r3
 80109fe:	220a      	movs	r2, #10
 8010a00:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010a02:	7805      	ldrb	r5, [r0, #0]
 8010a04:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010a08:	b2d9      	uxtb	r1, r3
 8010a0a:	2909      	cmp	r1, #9
 8010a0c:	d928      	bls.n	8010a60 <_strtod_l+0x1a8>
 8010a0e:	494e      	ldr	r1, [pc, #312]	@ (8010b48 <_strtod_l+0x290>)
 8010a10:	2201      	movs	r2, #1
 8010a12:	f001 fd06 	bl	8012422 <strncmp>
 8010a16:	2800      	cmp	r0, #0
 8010a18:	d032      	beq.n	8010a80 <_strtod_l+0x1c8>
 8010a1a:	2000      	movs	r0, #0
 8010a1c:	462a      	mov	r2, r5
 8010a1e:	4681      	mov	r9, r0
 8010a20:	463d      	mov	r5, r7
 8010a22:	4603      	mov	r3, r0
 8010a24:	2a65      	cmp	r2, #101	@ 0x65
 8010a26:	d001      	beq.n	8010a2c <_strtod_l+0x174>
 8010a28:	2a45      	cmp	r2, #69	@ 0x45
 8010a2a:	d114      	bne.n	8010a56 <_strtod_l+0x19e>
 8010a2c:	b91d      	cbnz	r5, 8010a36 <_strtod_l+0x17e>
 8010a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a30:	4302      	orrs	r2, r0
 8010a32:	d095      	beq.n	8010960 <_strtod_l+0xa8>
 8010a34:	2500      	movs	r5, #0
 8010a36:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010a38:	1c62      	adds	r2, r4, #1
 8010a3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8010a3c:	7862      	ldrb	r2, [r4, #1]
 8010a3e:	2a2b      	cmp	r2, #43	@ 0x2b
 8010a40:	d077      	beq.n	8010b32 <_strtod_l+0x27a>
 8010a42:	2a2d      	cmp	r2, #45	@ 0x2d
 8010a44:	d07b      	beq.n	8010b3e <_strtod_l+0x286>
 8010a46:	f04f 0c00 	mov.w	ip, #0
 8010a4a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010a4e:	2909      	cmp	r1, #9
 8010a50:	f240 8082 	bls.w	8010b58 <_strtod_l+0x2a0>
 8010a54:	9419      	str	r4, [sp, #100]	@ 0x64
 8010a56:	f04f 0800 	mov.w	r8, #0
 8010a5a:	e0a2      	b.n	8010ba2 <_strtod_l+0x2ea>
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	e7c7      	b.n	80109f0 <_strtod_l+0x138>
 8010a60:	2f08      	cmp	r7, #8
 8010a62:	bfd5      	itete	le
 8010a64:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8010a66:	9908      	ldrgt	r1, [sp, #32]
 8010a68:	fb02 3301 	mlale	r3, r2, r1, r3
 8010a6c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010a70:	f100 0001 	add.w	r0, r0, #1
 8010a74:	bfd4      	ite	le
 8010a76:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010a78:	9308      	strgt	r3, [sp, #32]
 8010a7a:	3701      	adds	r7, #1
 8010a7c:	9019      	str	r0, [sp, #100]	@ 0x64
 8010a7e:	e7bf      	b.n	8010a00 <_strtod_l+0x148>
 8010a80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010a82:	1c5a      	adds	r2, r3, #1
 8010a84:	9219      	str	r2, [sp, #100]	@ 0x64
 8010a86:	785a      	ldrb	r2, [r3, #1]
 8010a88:	b37f      	cbz	r7, 8010aea <_strtod_l+0x232>
 8010a8a:	4681      	mov	r9, r0
 8010a8c:	463d      	mov	r5, r7
 8010a8e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010a92:	2b09      	cmp	r3, #9
 8010a94:	d912      	bls.n	8010abc <_strtod_l+0x204>
 8010a96:	2301      	movs	r3, #1
 8010a98:	e7c4      	b.n	8010a24 <_strtod_l+0x16c>
 8010a9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010a9c:	1c5a      	adds	r2, r3, #1
 8010a9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8010aa0:	785a      	ldrb	r2, [r3, #1]
 8010aa2:	3001      	adds	r0, #1
 8010aa4:	2a30      	cmp	r2, #48	@ 0x30
 8010aa6:	d0f8      	beq.n	8010a9a <_strtod_l+0x1e2>
 8010aa8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010aac:	2b08      	cmp	r3, #8
 8010aae:	f200 84d3 	bhi.w	8011458 <_strtod_l+0xba0>
 8010ab2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ab4:	930c      	str	r3, [sp, #48]	@ 0x30
 8010ab6:	4681      	mov	r9, r0
 8010ab8:	2000      	movs	r0, #0
 8010aba:	4605      	mov	r5, r0
 8010abc:	3a30      	subs	r2, #48	@ 0x30
 8010abe:	f100 0301 	add.w	r3, r0, #1
 8010ac2:	d02a      	beq.n	8010b1a <_strtod_l+0x262>
 8010ac4:	4499      	add	r9, r3
 8010ac6:	eb00 0c05 	add.w	ip, r0, r5
 8010aca:	462b      	mov	r3, r5
 8010acc:	210a      	movs	r1, #10
 8010ace:	4563      	cmp	r3, ip
 8010ad0:	d10d      	bne.n	8010aee <_strtod_l+0x236>
 8010ad2:	1c69      	adds	r1, r5, #1
 8010ad4:	4401      	add	r1, r0
 8010ad6:	4428      	add	r0, r5
 8010ad8:	2808      	cmp	r0, #8
 8010ada:	dc16      	bgt.n	8010b0a <_strtod_l+0x252>
 8010adc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010ade:	230a      	movs	r3, #10
 8010ae0:	fb03 2300 	mla	r3, r3, r0, r2
 8010ae4:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	e018      	b.n	8010b1c <_strtod_l+0x264>
 8010aea:	4638      	mov	r0, r7
 8010aec:	e7da      	b.n	8010aa4 <_strtod_l+0x1ec>
 8010aee:	2b08      	cmp	r3, #8
 8010af0:	f103 0301 	add.w	r3, r3, #1
 8010af4:	dc03      	bgt.n	8010afe <_strtod_l+0x246>
 8010af6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010af8:	434e      	muls	r6, r1
 8010afa:	960a      	str	r6, [sp, #40]	@ 0x28
 8010afc:	e7e7      	b.n	8010ace <_strtod_l+0x216>
 8010afe:	2b10      	cmp	r3, #16
 8010b00:	bfde      	ittt	le
 8010b02:	9e08      	ldrle	r6, [sp, #32]
 8010b04:	434e      	mulle	r6, r1
 8010b06:	9608      	strle	r6, [sp, #32]
 8010b08:	e7e1      	b.n	8010ace <_strtod_l+0x216>
 8010b0a:	280f      	cmp	r0, #15
 8010b0c:	dceb      	bgt.n	8010ae6 <_strtod_l+0x22e>
 8010b0e:	9808      	ldr	r0, [sp, #32]
 8010b10:	230a      	movs	r3, #10
 8010b12:	fb03 2300 	mla	r3, r3, r0, r2
 8010b16:	9308      	str	r3, [sp, #32]
 8010b18:	e7e5      	b.n	8010ae6 <_strtod_l+0x22e>
 8010b1a:	4629      	mov	r1, r5
 8010b1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010b1e:	1c50      	adds	r0, r2, #1
 8010b20:	9019      	str	r0, [sp, #100]	@ 0x64
 8010b22:	7852      	ldrb	r2, [r2, #1]
 8010b24:	4618      	mov	r0, r3
 8010b26:	460d      	mov	r5, r1
 8010b28:	e7b1      	b.n	8010a8e <_strtod_l+0x1d6>
 8010b2a:	f04f 0900 	mov.w	r9, #0
 8010b2e:	2301      	movs	r3, #1
 8010b30:	e77d      	b.n	8010a2e <_strtod_l+0x176>
 8010b32:	f04f 0c00 	mov.w	ip, #0
 8010b36:	1ca2      	adds	r2, r4, #2
 8010b38:	9219      	str	r2, [sp, #100]	@ 0x64
 8010b3a:	78a2      	ldrb	r2, [r4, #2]
 8010b3c:	e785      	b.n	8010a4a <_strtod_l+0x192>
 8010b3e:	f04f 0c01 	mov.w	ip, #1
 8010b42:	e7f8      	b.n	8010b36 <_strtod_l+0x27e>
 8010b44:	08013188 	.word	0x08013188
 8010b48:	08013170 	.word	0x08013170
 8010b4c:	7ff00000 	.word	0x7ff00000
 8010b50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010b52:	1c51      	adds	r1, r2, #1
 8010b54:	9119      	str	r1, [sp, #100]	@ 0x64
 8010b56:	7852      	ldrb	r2, [r2, #1]
 8010b58:	2a30      	cmp	r2, #48	@ 0x30
 8010b5a:	d0f9      	beq.n	8010b50 <_strtod_l+0x298>
 8010b5c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010b60:	2908      	cmp	r1, #8
 8010b62:	f63f af78 	bhi.w	8010a56 <_strtod_l+0x19e>
 8010b66:	3a30      	subs	r2, #48	@ 0x30
 8010b68:	920e      	str	r2, [sp, #56]	@ 0x38
 8010b6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010b6c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010b6e:	f04f 080a 	mov.w	r8, #10
 8010b72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010b74:	1c56      	adds	r6, r2, #1
 8010b76:	9619      	str	r6, [sp, #100]	@ 0x64
 8010b78:	7852      	ldrb	r2, [r2, #1]
 8010b7a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010b7e:	f1be 0f09 	cmp.w	lr, #9
 8010b82:	d939      	bls.n	8010bf8 <_strtod_l+0x340>
 8010b84:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010b86:	1a76      	subs	r6, r6, r1
 8010b88:	2e08      	cmp	r6, #8
 8010b8a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010b8e:	dc03      	bgt.n	8010b98 <_strtod_l+0x2e0>
 8010b90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010b92:	4588      	cmp	r8, r1
 8010b94:	bfa8      	it	ge
 8010b96:	4688      	movge	r8, r1
 8010b98:	f1bc 0f00 	cmp.w	ip, #0
 8010b9c:	d001      	beq.n	8010ba2 <_strtod_l+0x2ea>
 8010b9e:	f1c8 0800 	rsb	r8, r8, #0
 8010ba2:	2d00      	cmp	r5, #0
 8010ba4:	d14e      	bne.n	8010c44 <_strtod_l+0x38c>
 8010ba6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010ba8:	4308      	orrs	r0, r1
 8010baa:	f47f aebe 	bne.w	801092a <_strtod_l+0x72>
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	f47f aed6 	bne.w	8010960 <_strtod_l+0xa8>
 8010bb4:	2a69      	cmp	r2, #105	@ 0x69
 8010bb6:	d028      	beq.n	8010c0a <_strtod_l+0x352>
 8010bb8:	dc25      	bgt.n	8010c06 <_strtod_l+0x34e>
 8010bba:	2a49      	cmp	r2, #73	@ 0x49
 8010bbc:	d025      	beq.n	8010c0a <_strtod_l+0x352>
 8010bbe:	2a4e      	cmp	r2, #78	@ 0x4e
 8010bc0:	f47f aece 	bne.w	8010960 <_strtod_l+0xa8>
 8010bc4:	499b      	ldr	r1, [pc, #620]	@ (8010e34 <_strtod_l+0x57c>)
 8010bc6:	a819      	add	r0, sp, #100	@ 0x64
 8010bc8:	f001 ff26 	bl	8012a18 <__match>
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	f43f aec7 	beq.w	8010960 <_strtod_l+0xa8>
 8010bd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010bd4:	781b      	ldrb	r3, [r3, #0]
 8010bd6:	2b28      	cmp	r3, #40	@ 0x28
 8010bd8:	d12e      	bne.n	8010c38 <_strtod_l+0x380>
 8010bda:	4997      	ldr	r1, [pc, #604]	@ (8010e38 <_strtod_l+0x580>)
 8010bdc:	aa1c      	add	r2, sp, #112	@ 0x70
 8010bde:	a819      	add	r0, sp, #100	@ 0x64
 8010be0:	f001 ff2e 	bl	8012a40 <__hexnan>
 8010be4:	2805      	cmp	r0, #5
 8010be6:	d127      	bne.n	8010c38 <_strtod_l+0x380>
 8010be8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010bea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010bee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010bf2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010bf6:	e698      	b.n	801092a <_strtod_l+0x72>
 8010bf8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010bfa:	fb08 2101 	mla	r1, r8, r1, r2
 8010bfe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010c02:	920e      	str	r2, [sp, #56]	@ 0x38
 8010c04:	e7b5      	b.n	8010b72 <_strtod_l+0x2ba>
 8010c06:	2a6e      	cmp	r2, #110	@ 0x6e
 8010c08:	e7da      	b.n	8010bc0 <_strtod_l+0x308>
 8010c0a:	498c      	ldr	r1, [pc, #560]	@ (8010e3c <_strtod_l+0x584>)
 8010c0c:	a819      	add	r0, sp, #100	@ 0x64
 8010c0e:	f001 ff03 	bl	8012a18 <__match>
 8010c12:	2800      	cmp	r0, #0
 8010c14:	f43f aea4 	beq.w	8010960 <_strtod_l+0xa8>
 8010c18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c1a:	4989      	ldr	r1, [pc, #548]	@ (8010e40 <_strtod_l+0x588>)
 8010c1c:	3b01      	subs	r3, #1
 8010c1e:	a819      	add	r0, sp, #100	@ 0x64
 8010c20:	9319      	str	r3, [sp, #100]	@ 0x64
 8010c22:	f001 fef9 	bl	8012a18 <__match>
 8010c26:	b910      	cbnz	r0, 8010c2e <_strtod_l+0x376>
 8010c28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	9319      	str	r3, [sp, #100]	@ 0x64
 8010c2e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010e50 <_strtod_l+0x598>
 8010c32:	f04f 0a00 	mov.w	sl, #0
 8010c36:	e678      	b.n	801092a <_strtod_l+0x72>
 8010c38:	4882      	ldr	r0, [pc, #520]	@ (8010e44 <_strtod_l+0x58c>)
 8010c3a:	f001 fc29 	bl	8012490 <nan>
 8010c3e:	ec5b ab10 	vmov	sl, fp, d0
 8010c42:	e672      	b.n	801092a <_strtod_l+0x72>
 8010c44:	eba8 0309 	sub.w	r3, r8, r9
 8010c48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010c4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c4c:	2f00      	cmp	r7, #0
 8010c4e:	bf08      	it	eq
 8010c50:	462f      	moveq	r7, r5
 8010c52:	2d10      	cmp	r5, #16
 8010c54:	462c      	mov	r4, r5
 8010c56:	bfa8      	it	ge
 8010c58:	2410      	movge	r4, #16
 8010c5a:	f7ef fc8b 	bl	8000574 <__aeabi_ui2d>
 8010c5e:	2d09      	cmp	r5, #9
 8010c60:	4682      	mov	sl, r0
 8010c62:	468b      	mov	fp, r1
 8010c64:	dc13      	bgt.n	8010c8e <_strtod_l+0x3d6>
 8010c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	f43f ae5e 	beq.w	801092a <_strtod_l+0x72>
 8010c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c70:	dd78      	ble.n	8010d64 <_strtod_l+0x4ac>
 8010c72:	2b16      	cmp	r3, #22
 8010c74:	dc5f      	bgt.n	8010d36 <_strtod_l+0x47e>
 8010c76:	4974      	ldr	r1, [pc, #464]	@ (8010e48 <_strtod_l+0x590>)
 8010c78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c80:	4652      	mov	r2, sl
 8010c82:	465b      	mov	r3, fp
 8010c84:	f7ef fcf0 	bl	8000668 <__aeabi_dmul>
 8010c88:	4682      	mov	sl, r0
 8010c8a:	468b      	mov	fp, r1
 8010c8c:	e64d      	b.n	801092a <_strtod_l+0x72>
 8010c8e:	4b6e      	ldr	r3, [pc, #440]	@ (8010e48 <_strtod_l+0x590>)
 8010c90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010c94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010c98:	f7ef fce6 	bl	8000668 <__aeabi_dmul>
 8010c9c:	4682      	mov	sl, r0
 8010c9e:	9808      	ldr	r0, [sp, #32]
 8010ca0:	468b      	mov	fp, r1
 8010ca2:	f7ef fc67 	bl	8000574 <__aeabi_ui2d>
 8010ca6:	4602      	mov	r2, r0
 8010ca8:	460b      	mov	r3, r1
 8010caa:	4650      	mov	r0, sl
 8010cac:	4659      	mov	r1, fp
 8010cae:	f7ef fb25 	bl	80002fc <__adddf3>
 8010cb2:	2d0f      	cmp	r5, #15
 8010cb4:	4682      	mov	sl, r0
 8010cb6:	468b      	mov	fp, r1
 8010cb8:	ddd5      	ble.n	8010c66 <_strtod_l+0x3ae>
 8010cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cbc:	1b2c      	subs	r4, r5, r4
 8010cbe:	441c      	add	r4, r3
 8010cc0:	2c00      	cmp	r4, #0
 8010cc2:	f340 8096 	ble.w	8010df2 <_strtod_l+0x53a>
 8010cc6:	f014 030f 	ands.w	r3, r4, #15
 8010cca:	d00a      	beq.n	8010ce2 <_strtod_l+0x42a>
 8010ccc:	495e      	ldr	r1, [pc, #376]	@ (8010e48 <_strtod_l+0x590>)
 8010cce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010cd2:	4652      	mov	r2, sl
 8010cd4:	465b      	mov	r3, fp
 8010cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cda:	f7ef fcc5 	bl	8000668 <__aeabi_dmul>
 8010cde:	4682      	mov	sl, r0
 8010ce0:	468b      	mov	fp, r1
 8010ce2:	f034 040f 	bics.w	r4, r4, #15
 8010ce6:	d073      	beq.n	8010dd0 <_strtod_l+0x518>
 8010ce8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010cec:	dd48      	ble.n	8010d80 <_strtod_l+0x4c8>
 8010cee:	2400      	movs	r4, #0
 8010cf0:	46a0      	mov	r8, r4
 8010cf2:	940a      	str	r4, [sp, #40]	@ 0x28
 8010cf4:	46a1      	mov	r9, r4
 8010cf6:	9a05      	ldr	r2, [sp, #20]
 8010cf8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010e50 <_strtod_l+0x598>
 8010cfc:	2322      	movs	r3, #34	@ 0x22
 8010cfe:	6013      	str	r3, [r2, #0]
 8010d00:	f04f 0a00 	mov.w	sl, #0
 8010d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	f43f ae0f 	beq.w	801092a <_strtod_l+0x72>
 8010d0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010d0e:	9805      	ldr	r0, [sp, #20]
 8010d10:	f7ff f940 	bl	800ff94 <_Bfree>
 8010d14:	9805      	ldr	r0, [sp, #20]
 8010d16:	4649      	mov	r1, r9
 8010d18:	f7ff f93c 	bl	800ff94 <_Bfree>
 8010d1c:	9805      	ldr	r0, [sp, #20]
 8010d1e:	4641      	mov	r1, r8
 8010d20:	f7ff f938 	bl	800ff94 <_Bfree>
 8010d24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010d26:	9805      	ldr	r0, [sp, #20]
 8010d28:	f7ff f934 	bl	800ff94 <_Bfree>
 8010d2c:	9805      	ldr	r0, [sp, #20]
 8010d2e:	4621      	mov	r1, r4
 8010d30:	f7ff f930 	bl	800ff94 <_Bfree>
 8010d34:	e5f9      	b.n	801092a <_strtod_l+0x72>
 8010d36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010d3c:	4293      	cmp	r3, r2
 8010d3e:	dbbc      	blt.n	8010cba <_strtod_l+0x402>
 8010d40:	4c41      	ldr	r4, [pc, #260]	@ (8010e48 <_strtod_l+0x590>)
 8010d42:	f1c5 050f 	rsb	r5, r5, #15
 8010d46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010d4a:	4652      	mov	r2, sl
 8010d4c:	465b      	mov	r3, fp
 8010d4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d52:	f7ef fc89 	bl	8000668 <__aeabi_dmul>
 8010d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d58:	1b5d      	subs	r5, r3, r5
 8010d5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010d5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010d62:	e78f      	b.n	8010c84 <_strtod_l+0x3cc>
 8010d64:	3316      	adds	r3, #22
 8010d66:	dba8      	blt.n	8010cba <_strtod_l+0x402>
 8010d68:	4b37      	ldr	r3, [pc, #220]	@ (8010e48 <_strtod_l+0x590>)
 8010d6a:	eba9 0808 	sub.w	r8, r9, r8
 8010d6e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010d72:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010d76:	4650      	mov	r0, sl
 8010d78:	4659      	mov	r1, fp
 8010d7a:	f7ef fd9f 	bl	80008bc <__aeabi_ddiv>
 8010d7e:	e783      	b.n	8010c88 <_strtod_l+0x3d0>
 8010d80:	4b32      	ldr	r3, [pc, #200]	@ (8010e4c <_strtod_l+0x594>)
 8010d82:	9308      	str	r3, [sp, #32]
 8010d84:	2300      	movs	r3, #0
 8010d86:	1124      	asrs	r4, r4, #4
 8010d88:	4650      	mov	r0, sl
 8010d8a:	4659      	mov	r1, fp
 8010d8c:	461e      	mov	r6, r3
 8010d8e:	2c01      	cmp	r4, #1
 8010d90:	dc21      	bgt.n	8010dd6 <_strtod_l+0x51e>
 8010d92:	b10b      	cbz	r3, 8010d98 <_strtod_l+0x4e0>
 8010d94:	4682      	mov	sl, r0
 8010d96:	468b      	mov	fp, r1
 8010d98:	492c      	ldr	r1, [pc, #176]	@ (8010e4c <_strtod_l+0x594>)
 8010d9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010d9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010da2:	4652      	mov	r2, sl
 8010da4:	465b      	mov	r3, fp
 8010da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010daa:	f7ef fc5d 	bl	8000668 <__aeabi_dmul>
 8010dae:	4b28      	ldr	r3, [pc, #160]	@ (8010e50 <_strtod_l+0x598>)
 8010db0:	460a      	mov	r2, r1
 8010db2:	400b      	ands	r3, r1
 8010db4:	4927      	ldr	r1, [pc, #156]	@ (8010e54 <_strtod_l+0x59c>)
 8010db6:	428b      	cmp	r3, r1
 8010db8:	4682      	mov	sl, r0
 8010dba:	d898      	bhi.n	8010cee <_strtod_l+0x436>
 8010dbc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010dc0:	428b      	cmp	r3, r1
 8010dc2:	bf86      	itte	hi
 8010dc4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010e58 <_strtod_l+0x5a0>
 8010dc8:	f04f 3aff 	movhi.w	sl, #4294967295
 8010dcc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	9308      	str	r3, [sp, #32]
 8010dd4:	e07a      	b.n	8010ecc <_strtod_l+0x614>
 8010dd6:	07e2      	lsls	r2, r4, #31
 8010dd8:	d505      	bpl.n	8010de6 <_strtod_l+0x52e>
 8010dda:	9b08      	ldr	r3, [sp, #32]
 8010ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de0:	f7ef fc42 	bl	8000668 <__aeabi_dmul>
 8010de4:	2301      	movs	r3, #1
 8010de6:	9a08      	ldr	r2, [sp, #32]
 8010de8:	3208      	adds	r2, #8
 8010dea:	3601      	adds	r6, #1
 8010dec:	1064      	asrs	r4, r4, #1
 8010dee:	9208      	str	r2, [sp, #32]
 8010df0:	e7cd      	b.n	8010d8e <_strtod_l+0x4d6>
 8010df2:	d0ed      	beq.n	8010dd0 <_strtod_l+0x518>
 8010df4:	4264      	negs	r4, r4
 8010df6:	f014 020f 	ands.w	r2, r4, #15
 8010dfa:	d00a      	beq.n	8010e12 <_strtod_l+0x55a>
 8010dfc:	4b12      	ldr	r3, [pc, #72]	@ (8010e48 <_strtod_l+0x590>)
 8010dfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e02:	4650      	mov	r0, sl
 8010e04:	4659      	mov	r1, fp
 8010e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0a:	f7ef fd57 	bl	80008bc <__aeabi_ddiv>
 8010e0e:	4682      	mov	sl, r0
 8010e10:	468b      	mov	fp, r1
 8010e12:	1124      	asrs	r4, r4, #4
 8010e14:	d0dc      	beq.n	8010dd0 <_strtod_l+0x518>
 8010e16:	2c1f      	cmp	r4, #31
 8010e18:	dd20      	ble.n	8010e5c <_strtod_l+0x5a4>
 8010e1a:	2400      	movs	r4, #0
 8010e1c:	46a0      	mov	r8, r4
 8010e1e:	940a      	str	r4, [sp, #40]	@ 0x28
 8010e20:	46a1      	mov	r9, r4
 8010e22:	9a05      	ldr	r2, [sp, #20]
 8010e24:	2322      	movs	r3, #34	@ 0x22
 8010e26:	f04f 0a00 	mov.w	sl, #0
 8010e2a:	f04f 0b00 	mov.w	fp, #0
 8010e2e:	6013      	str	r3, [r2, #0]
 8010e30:	e768      	b.n	8010d04 <_strtod_l+0x44c>
 8010e32:	bf00      	nop
 8010e34:	08012f5f 	.word	0x08012f5f
 8010e38:	08013174 	.word	0x08013174
 8010e3c:	08012f57 	.word	0x08012f57
 8010e40:	08012f8c 	.word	0x08012f8c
 8010e44:	08013338 	.word	0x08013338
 8010e48:	080130a8 	.word	0x080130a8
 8010e4c:	08013080 	.word	0x08013080
 8010e50:	7ff00000 	.word	0x7ff00000
 8010e54:	7ca00000 	.word	0x7ca00000
 8010e58:	7fefffff 	.word	0x7fefffff
 8010e5c:	f014 0310 	ands.w	r3, r4, #16
 8010e60:	bf18      	it	ne
 8010e62:	236a      	movne	r3, #106	@ 0x6a
 8010e64:	4ea9      	ldr	r6, [pc, #676]	@ (801110c <_strtod_l+0x854>)
 8010e66:	9308      	str	r3, [sp, #32]
 8010e68:	4650      	mov	r0, sl
 8010e6a:	4659      	mov	r1, fp
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	07e2      	lsls	r2, r4, #31
 8010e70:	d504      	bpl.n	8010e7c <_strtod_l+0x5c4>
 8010e72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010e76:	f7ef fbf7 	bl	8000668 <__aeabi_dmul>
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	1064      	asrs	r4, r4, #1
 8010e7e:	f106 0608 	add.w	r6, r6, #8
 8010e82:	d1f4      	bne.n	8010e6e <_strtod_l+0x5b6>
 8010e84:	b10b      	cbz	r3, 8010e8a <_strtod_l+0x5d2>
 8010e86:	4682      	mov	sl, r0
 8010e88:	468b      	mov	fp, r1
 8010e8a:	9b08      	ldr	r3, [sp, #32]
 8010e8c:	b1b3      	cbz	r3, 8010ebc <_strtod_l+0x604>
 8010e8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010e92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	4659      	mov	r1, fp
 8010e9a:	dd0f      	ble.n	8010ebc <_strtod_l+0x604>
 8010e9c:	2b1f      	cmp	r3, #31
 8010e9e:	dd55      	ble.n	8010f4c <_strtod_l+0x694>
 8010ea0:	2b34      	cmp	r3, #52	@ 0x34
 8010ea2:	bfde      	ittt	le
 8010ea4:	f04f 33ff 	movle.w	r3, #4294967295
 8010ea8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010eac:	4093      	lslle	r3, r2
 8010eae:	f04f 0a00 	mov.w	sl, #0
 8010eb2:	bfcc      	ite	gt
 8010eb4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010eb8:	ea03 0b01 	andle.w	fp, r3, r1
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	4650      	mov	r0, sl
 8010ec2:	4659      	mov	r1, fp
 8010ec4:	f7ef fe38 	bl	8000b38 <__aeabi_dcmpeq>
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	d1a6      	bne.n	8010e1a <_strtod_l+0x562>
 8010ecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ece:	9300      	str	r3, [sp, #0]
 8010ed0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010ed2:	9805      	ldr	r0, [sp, #20]
 8010ed4:	462b      	mov	r3, r5
 8010ed6:	463a      	mov	r2, r7
 8010ed8:	f7ff f8c4 	bl	8010064 <__s2b>
 8010edc:	900a      	str	r0, [sp, #40]	@ 0x28
 8010ede:	2800      	cmp	r0, #0
 8010ee0:	f43f af05 	beq.w	8010cee <_strtod_l+0x436>
 8010ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ee6:	2a00      	cmp	r2, #0
 8010ee8:	eba9 0308 	sub.w	r3, r9, r8
 8010eec:	bfa8      	it	ge
 8010eee:	2300      	movge	r3, #0
 8010ef0:	9312      	str	r3, [sp, #72]	@ 0x48
 8010ef2:	2400      	movs	r4, #0
 8010ef4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010ef8:	9316      	str	r3, [sp, #88]	@ 0x58
 8010efa:	46a0      	mov	r8, r4
 8010efc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010efe:	9805      	ldr	r0, [sp, #20]
 8010f00:	6859      	ldr	r1, [r3, #4]
 8010f02:	f7ff f807 	bl	800ff14 <_Balloc>
 8010f06:	4681      	mov	r9, r0
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	f43f aef4 	beq.w	8010cf6 <_strtod_l+0x43e>
 8010f0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f10:	691a      	ldr	r2, [r3, #16]
 8010f12:	3202      	adds	r2, #2
 8010f14:	f103 010c 	add.w	r1, r3, #12
 8010f18:	0092      	lsls	r2, r2, #2
 8010f1a:	300c      	adds	r0, #12
 8010f1c:	f7fe f94f 	bl	800f1be <memcpy>
 8010f20:	ec4b ab10 	vmov	d0, sl, fp
 8010f24:	9805      	ldr	r0, [sp, #20]
 8010f26:	aa1c      	add	r2, sp, #112	@ 0x70
 8010f28:	a91b      	add	r1, sp, #108	@ 0x6c
 8010f2a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010f2e:	f7ff fbd5 	bl	80106dc <__d2b>
 8010f32:	901a      	str	r0, [sp, #104]	@ 0x68
 8010f34:	2800      	cmp	r0, #0
 8010f36:	f43f aede 	beq.w	8010cf6 <_strtod_l+0x43e>
 8010f3a:	9805      	ldr	r0, [sp, #20]
 8010f3c:	2101      	movs	r1, #1
 8010f3e:	f7ff f927 	bl	8010190 <__i2b>
 8010f42:	4680      	mov	r8, r0
 8010f44:	b948      	cbnz	r0, 8010f5a <_strtod_l+0x6a2>
 8010f46:	f04f 0800 	mov.w	r8, #0
 8010f4a:	e6d4      	b.n	8010cf6 <_strtod_l+0x43e>
 8010f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8010f50:	fa02 f303 	lsl.w	r3, r2, r3
 8010f54:	ea03 0a0a 	and.w	sl, r3, sl
 8010f58:	e7b0      	b.n	8010ebc <_strtod_l+0x604>
 8010f5a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010f5c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010f5e:	2d00      	cmp	r5, #0
 8010f60:	bfab      	itete	ge
 8010f62:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010f64:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010f66:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010f68:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010f6a:	bfac      	ite	ge
 8010f6c:	18ef      	addge	r7, r5, r3
 8010f6e:	1b5e      	sublt	r6, r3, r5
 8010f70:	9b08      	ldr	r3, [sp, #32]
 8010f72:	1aed      	subs	r5, r5, r3
 8010f74:	4415      	add	r5, r2
 8010f76:	4b66      	ldr	r3, [pc, #408]	@ (8011110 <_strtod_l+0x858>)
 8010f78:	3d01      	subs	r5, #1
 8010f7a:	429d      	cmp	r5, r3
 8010f7c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010f80:	da50      	bge.n	8011024 <_strtod_l+0x76c>
 8010f82:	1b5b      	subs	r3, r3, r5
 8010f84:	2b1f      	cmp	r3, #31
 8010f86:	eba2 0203 	sub.w	r2, r2, r3
 8010f8a:	f04f 0101 	mov.w	r1, #1
 8010f8e:	dc3d      	bgt.n	801100c <_strtod_l+0x754>
 8010f90:	fa01 f303 	lsl.w	r3, r1, r3
 8010f94:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010f96:	2300      	movs	r3, #0
 8010f98:	9310      	str	r3, [sp, #64]	@ 0x40
 8010f9a:	18bd      	adds	r5, r7, r2
 8010f9c:	9b08      	ldr	r3, [sp, #32]
 8010f9e:	42af      	cmp	r7, r5
 8010fa0:	4416      	add	r6, r2
 8010fa2:	441e      	add	r6, r3
 8010fa4:	463b      	mov	r3, r7
 8010fa6:	bfa8      	it	ge
 8010fa8:	462b      	movge	r3, r5
 8010faa:	42b3      	cmp	r3, r6
 8010fac:	bfa8      	it	ge
 8010fae:	4633      	movge	r3, r6
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	bfc2      	ittt	gt
 8010fb4:	1aed      	subgt	r5, r5, r3
 8010fb6:	1af6      	subgt	r6, r6, r3
 8010fb8:	1aff      	subgt	r7, r7, r3
 8010fba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	dd16      	ble.n	8010fee <_strtod_l+0x736>
 8010fc0:	4641      	mov	r1, r8
 8010fc2:	9805      	ldr	r0, [sp, #20]
 8010fc4:	461a      	mov	r2, r3
 8010fc6:	f7ff f9a3 	bl	8010310 <__pow5mult>
 8010fca:	4680      	mov	r8, r0
 8010fcc:	2800      	cmp	r0, #0
 8010fce:	d0ba      	beq.n	8010f46 <_strtod_l+0x68e>
 8010fd0:	4601      	mov	r1, r0
 8010fd2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010fd4:	9805      	ldr	r0, [sp, #20]
 8010fd6:	f7ff f8f1 	bl	80101bc <__multiply>
 8010fda:	900e      	str	r0, [sp, #56]	@ 0x38
 8010fdc:	2800      	cmp	r0, #0
 8010fde:	f43f ae8a 	beq.w	8010cf6 <_strtod_l+0x43e>
 8010fe2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010fe4:	9805      	ldr	r0, [sp, #20]
 8010fe6:	f7fe ffd5 	bl	800ff94 <_Bfree>
 8010fea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010fec:	931a      	str	r3, [sp, #104]	@ 0x68
 8010fee:	2d00      	cmp	r5, #0
 8010ff0:	dc1d      	bgt.n	801102e <_strtod_l+0x776>
 8010ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	dd23      	ble.n	8011040 <_strtod_l+0x788>
 8010ff8:	4649      	mov	r1, r9
 8010ffa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010ffc:	9805      	ldr	r0, [sp, #20]
 8010ffe:	f7ff f987 	bl	8010310 <__pow5mult>
 8011002:	4681      	mov	r9, r0
 8011004:	b9e0      	cbnz	r0, 8011040 <_strtod_l+0x788>
 8011006:	f04f 0900 	mov.w	r9, #0
 801100a:	e674      	b.n	8010cf6 <_strtod_l+0x43e>
 801100c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011010:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011014:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011018:	35e2      	adds	r5, #226	@ 0xe2
 801101a:	fa01 f305 	lsl.w	r3, r1, r5
 801101e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011020:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011022:	e7ba      	b.n	8010f9a <_strtod_l+0x6e2>
 8011024:	2300      	movs	r3, #0
 8011026:	9310      	str	r3, [sp, #64]	@ 0x40
 8011028:	2301      	movs	r3, #1
 801102a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801102c:	e7b5      	b.n	8010f9a <_strtod_l+0x6e2>
 801102e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011030:	9805      	ldr	r0, [sp, #20]
 8011032:	462a      	mov	r2, r5
 8011034:	f7ff f9c6 	bl	80103c4 <__lshift>
 8011038:	901a      	str	r0, [sp, #104]	@ 0x68
 801103a:	2800      	cmp	r0, #0
 801103c:	d1d9      	bne.n	8010ff2 <_strtod_l+0x73a>
 801103e:	e65a      	b.n	8010cf6 <_strtod_l+0x43e>
 8011040:	2e00      	cmp	r6, #0
 8011042:	dd07      	ble.n	8011054 <_strtod_l+0x79c>
 8011044:	4649      	mov	r1, r9
 8011046:	9805      	ldr	r0, [sp, #20]
 8011048:	4632      	mov	r2, r6
 801104a:	f7ff f9bb 	bl	80103c4 <__lshift>
 801104e:	4681      	mov	r9, r0
 8011050:	2800      	cmp	r0, #0
 8011052:	d0d8      	beq.n	8011006 <_strtod_l+0x74e>
 8011054:	2f00      	cmp	r7, #0
 8011056:	dd08      	ble.n	801106a <_strtod_l+0x7b2>
 8011058:	4641      	mov	r1, r8
 801105a:	9805      	ldr	r0, [sp, #20]
 801105c:	463a      	mov	r2, r7
 801105e:	f7ff f9b1 	bl	80103c4 <__lshift>
 8011062:	4680      	mov	r8, r0
 8011064:	2800      	cmp	r0, #0
 8011066:	f43f ae46 	beq.w	8010cf6 <_strtod_l+0x43e>
 801106a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801106c:	9805      	ldr	r0, [sp, #20]
 801106e:	464a      	mov	r2, r9
 8011070:	f7ff fa30 	bl	80104d4 <__mdiff>
 8011074:	4604      	mov	r4, r0
 8011076:	2800      	cmp	r0, #0
 8011078:	f43f ae3d 	beq.w	8010cf6 <_strtod_l+0x43e>
 801107c:	68c3      	ldr	r3, [r0, #12]
 801107e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011080:	2300      	movs	r3, #0
 8011082:	60c3      	str	r3, [r0, #12]
 8011084:	4641      	mov	r1, r8
 8011086:	f7ff fa09 	bl	801049c <__mcmp>
 801108a:	2800      	cmp	r0, #0
 801108c:	da46      	bge.n	801111c <_strtod_l+0x864>
 801108e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011090:	ea53 030a 	orrs.w	r3, r3, sl
 8011094:	d16c      	bne.n	8011170 <_strtod_l+0x8b8>
 8011096:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801109a:	2b00      	cmp	r3, #0
 801109c:	d168      	bne.n	8011170 <_strtod_l+0x8b8>
 801109e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80110a2:	0d1b      	lsrs	r3, r3, #20
 80110a4:	051b      	lsls	r3, r3, #20
 80110a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80110aa:	d961      	bls.n	8011170 <_strtod_l+0x8b8>
 80110ac:	6963      	ldr	r3, [r4, #20]
 80110ae:	b913      	cbnz	r3, 80110b6 <_strtod_l+0x7fe>
 80110b0:	6923      	ldr	r3, [r4, #16]
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	dd5c      	ble.n	8011170 <_strtod_l+0x8b8>
 80110b6:	4621      	mov	r1, r4
 80110b8:	2201      	movs	r2, #1
 80110ba:	9805      	ldr	r0, [sp, #20]
 80110bc:	f7ff f982 	bl	80103c4 <__lshift>
 80110c0:	4641      	mov	r1, r8
 80110c2:	4604      	mov	r4, r0
 80110c4:	f7ff f9ea 	bl	801049c <__mcmp>
 80110c8:	2800      	cmp	r0, #0
 80110ca:	dd51      	ble.n	8011170 <_strtod_l+0x8b8>
 80110cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80110d0:	9a08      	ldr	r2, [sp, #32]
 80110d2:	0d1b      	lsrs	r3, r3, #20
 80110d4:	051b      	lsls	r3, r3, #20
 80110d6:	2a00      	cmp	r2, #0
 80110d8:	d06b      	beq.n	80111b2 <_strtod_l+0x8fa>
 80110da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80110de:	d868      	bhi.n	80111b2 <_strtod_l+0x8fa>
 80110e0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80110e4:	f67f ae9d 	bls.w	8010e22 <_strtod_l+0x56a>
 80110e8:	4b0a      	ldr	r3, [pc, #40]	@ (8011114 <_strtod_l+0x85c>)
 80110ea:	4650      	mov	r0, sl
 80110ec:	4659      	mov	r1, fp
 80110ee:	2200      	movs	r2, #0
 80110f0:	f7ef faba 	bl	8000668 <__aeabi_dmul>
 80110f4:	4b08      	ldr	r3, [pc, #32]	@ (8011118 <_strtod_l+0x860>)
 80110f6:	400b      	ands	r3, r1
 80110f8:	4682      	mov	sl, r0
 80110fa:	468b      	mov	fp, r1
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	f47f ae05 	bne.w	8010d0c <_strtod_l+0x454>
 8011102:	9a05      	ldr	r2, [sp, #20]
 8011104:	2322      	movs	r3, #34	@ 0x22
 8011106:	6013      	str	r3, [r2, #0]
 8011108:	e600      	b.n	8010d0c <_strtod_l+0x454>
 801110a:	bf00      	nop
 801110c:	080131a0 	.word	0x080131a0
 8011110:	fffffc02 	.word	0xfffffc02
 8011114:	39500000 	.word	0x39500000
 8011118:	7ff00000 	.word	0x7ff00000
 801111c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011120:	d165      	bne.n	80111ee <_strtod_l+0x936>
 8011122:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011124:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011128:	b35a      	cbz	r2, 8011182 <_strtod_l+0x8ca>
 801112a:	4a9f      	ldr	r2, [pc, #636]	@ (80113a8 <_strtod_l+0xaf0>)
 801112c:	4293      	cmp	r3, r2
 801112e:	d12b      	bne.n	8011188 <_strtod_l+0x8d0>
 8011130:	9b08      	ldr	r3, [sp, #32]
 8011132:	4651      	mov	r1, sl
 8011134:	b303      	cbz	r3, 8011178 <_strtod_l+0x8c0>
 8011136:	4b9d      	ldr	r3, [pc, #628]	@ (80113ac <_strtod_l+0xaf4>)
 8011138:	465a      	mov	r2, fp
 801113a:	4013      	ands	r3, r2
 801113c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011140:	f04f 32ff 	mov.w	r2, #4294967295
 8011144:	d81b      	bhi.n	801117e <_strtod_l+0x8c6>
 8011146:	0d1b      	lsrs	r3, r3, #20
 8011148:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801114c:	fa02 f303 	lsl.w	r3, r2, r3
 8011150:	4299      	cmp	r1, r3
 8011152:	d119      	bne.n	8011188 <_strtod_l+0x8d0>
 8011154:	4b96      	ldr	r3, [pc, #600]	@ (80113b0 <_strtod_l+0xaf8>)
 8011156:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011158:	429a      	cmp	r2, r3
 801115a:	d102      	bne.n	8011162 <_strtod_l+0x8aa>
 801115c:	3101      	adds	r1, #1
 801115e:	f43f adca 	beq.w	8010cf6 <_strtod_l+0x43e>
 8011162:	4b92      	ldr	r3, [pc, #584]	@ (80113ac <_strtod_l+0xaf4>)
 8011164:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011166:	401a      	ands	r2, r3
 8011168:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801116c:	f04f 0a00 	mov.w	sl, #0
 8011170:	9b08      	ldr	r3, [sp, #32]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d1b8      	bne.n	80110e8 <_strtod_l+0x830>
 8011176:	e5c9      	b.n	8010d0c <_strtod_l+0x454>
 8011178:	f04f 33ff 	mov.w	r3, #4294967295
 801117c:	e7e8      	b.n	8011150 <_strtod_l+0x898>
 801117e:	4613      	mov	r3, r2
 8011180:	e7e6      	b.n	8011150 <_strtod_l+0x898>
 8011182:	ea53 030a 	orrs.w	r3, r3, sl
 8011186:	d0a1      	beq.n	80110cc <_strtod_l+0x814>
 8011188:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801118a:	b1db      	cbz	r3, 80111c4 <_strtod_l+0x90c>
 801118c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801118e:	4213      	tst	r3, r2
 8011190:	d0ee      	beq.n	8011170 <_strtod_l+0x8b8>
 8011192:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011194:	9a08      	ldr	r2, [sp, #32]
 8011196:	4650      	mov	r0, sl
 8011198:	4659      	mov	r1, fp
 801119a:	b1bb      	cbz	r3, 80111cc <_strtod_l+0x914>
 801119c:	f7ff fb6c 	bl	8010878 <sulp>
 80111a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80111a4:	ec53 2b10 	vmov	r2, r3, d0
 80111a8:	f7ef f8a8 	bl	80002fc <__adddf3>
 80111ac:	4682      	mov	sl, r0
 80111ae:	468b      	mov	fp, r1
 80111b0:	e7de      	b.n	8011170 <_strtod_l+0x8b8>
 80111b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80111b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80111ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80111be:	f04f 3aff 	mov.w	sl, #4294967295
 80111c2:	e7d5      	b.n	8011170 <_strtod_l+0x8b8>
 80111c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80111c6:	ea13 0f0a 	tst.w	r3, sl
 80111ca:	e7e1      	b.n	8011190 <_strtod_l+0x8d8>
 80111cc:	f7ff fb54 	bl	8010878 <sulp>
 80111d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80111d4:	ec53 2b10 	vmov	r2, r3, d0
 80111d8:	f7ef f88e 	bl	80002f8 <__aeabi_dsub>
 80111dc:	2200      	movs	r2, #0
 80111de:	2300      	movs	r3, #0
 80111e0:	4682      	mov	sl, r0
 80111e2:	468b      	mov	fp, r1
 80111e4:	f7ef fca8 	bl	8000b38 <__aeabi_dcmpeq>
 80111e8:	2800      	cmp	r0, #0
 80111ea:	d0c1      	beq.n	8011170 <_strtod_l+0x8b8>
 80111ec:	e619      	b.n	8010e22 <_strtod_l+0x56a>
 80111ee:	4641      	mov	r1, r8
 80111f0:	4620      	mov	r0, r4
 80111f2:	f7ff facb 	bl	801078c <__ratio>
 80111f6:	ec57 6b10 	vmov	r6, r7, d0
 80111fa:	2200      	movs	r2, #0
 80111fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011200:	4630      	mov	r0, r6
 8011202:	4639      	mov	r1, r7
 8011204:	f7ef fcac 	bl	8000b60 <__aeabi_dcmple>
 8011208:	2800      	cmp	r0, #0
 801120a:	d06f      	beq.n	80112ec <_strtod_l+0xa34>
 801120c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801120e:	2b00      	cmp	r3, #0
 8011210:	d17a      	bne.n	8011308 <_strtod_l+0xa50>
 8011212:	f1ba 0f00 	cmp.w	sl, #0
 8011216:	d158      	bne.n	80112ca <_strtod_l+0xa12>
 8011218:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801121a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801121e:	2b00      	cmp	r3, #0
 8011220:	d15a      	bne.n	80112d8 <_strtod_l+0xa20>
 8011222:	4b64      	ldr	r3, [pc, #400]	@ (80113b4 <_strtod_l+0xafc>)
 8011224:	2200      	movs	r2, #0
 8011226:	4630      	mov	r0, r6
 8011228:	4639      	mov	r1, r7
 801122a:	f7ef fc8f 	bl	8000b4c <__aeabi_dcmplt>
 801122e:	2800      	cmp	r0, #0
 8011230:	d159      	bne.n	80112e6 <_strtod_l+0xa2e>
 8011232:	4630      	mov	r0, r6
 8011234:	4639      	mov	r1, r7
 8011236:	4b60      	ldr	r3, [pc, #384]	@ (80113b8 <_strtod_l+0xb00>)
 8011238:	2200      	movs	r2, #0
 801123a:	f7ef fa15 	bl	8000668 <__aeabi_dmul>
 801123e:	4606      	mov	r6, r0
 8011240:	460f      	mov	r7, r1
 8011242:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011246:	9606      	str	r6, [sp, #24]
 8011248:	9307      	str	r3, [sp, #28]
 801124a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801124e:	4d57      	ldr	r5, [pc, #348]	@ (80113ac <_strtod_l+0xaf4>)
 8011250:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011256:	401d      	ands	r5, r3
 8011258:	4b58      	ldr	r3, [pc, #352]	@ (80113bc <_strtod_l+0xb04>)
 801125a:	429d      	cmp	r5, r3
 801125c:	f040 80b2 	bne.w	80113c4 <_strtod_l+0xb0c>
 8011260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011262:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011266:	ec4b ab10 	vmov	d0, sl, fp
 801126a:	f7ff f9c7 	bl	80105fc <__ulp>
 801126e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011272:	ec51 0b10 	vmov	r0, r1, d0
 8011276:	f7ef f9f7 	bl	8000668 <__aeabi_dmul>
 801127a:	4652      	mov	r2, sl
 801127c:	465b      	mov	r3, fp
 801127e:	f7ef f83d 	bl	80002fc <__adddf3>
 8011282:	460b      	mov	r3, r1
 8011284:	4949      	ldr	r1, [pc, #292]	@ (80113ac <_strtod_l+0xaf4>)
 8011286:	4a4e      	ldr	r2, [pc, #312]	@ (80113c0 <_strtod_l+0xb08>)
 8011288:	4019      	ands	r1, r3
 801128a:	4291      	cmp	r1, r2
 801128c:	4682      	mov	sl, r0
 801128e:	d942      	bls.n	8011316 <_strtod_l+0xa5e>
 8011290:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011292:	4b47      	ldr	r3, [pc, #284]	@ (80113b0 <_strtod_l+0xaf8>)
 8011294:	429a      	cmp	r2, r3
 8011296:	d103      	bne.n	80112a0 <_strtod_l+0x9e8>
 8011298:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801129a:	3301      	adds	r3, #1
 801129c:	f43f ad2b 	beq.w	8010cf6 <_strtod_l+0x43e>
 80112a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80113b0 <_strtod_l+0xaf8>
 80112a4:	f04f 3aff 	mov.w	sl, #4294967295
 80112a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80112aa:	9805      	ldr	r0, [sp, #20]
 80112ac:	f7fe fe72 	bl	800ff94 <_Bfree>
 80112b0:	9805      	ldr	r0, [sp, #20]
 80112b2:	4649      	mov	r1, r9
 80112b4:	f7fe fe6e 	bl	800ff94 <_Bfree>
 80112b8:	9805      	ldr	r0, [sp, #20]
 80112ba:	4641      	mov	r1, r8
 80112bc:	f7fe fe6a 	bl	800ff94 <_Bfree>
 80112c0:	9805      	ldr	r0, [sp, #20]
 80112c2:	4621      	mov	r1, r4
 80112c4:	f7fe fe66 	bl	800ff94 <_Bfree>
 80112c8:	e618      	b.n	8010efc <_strtod_l+0x644>
 80112ca:	f1ba 0f01 	cmp.w	sl, #1
 80112ce:	d103      	bne.n	80112d8 <_strtod_l+0xa20>
 80112d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	f43f ada5 	beq.w	8010e22 <_strtod_l+0x56a>
 80112d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011388 <_strtod_l+0xad0>
 80112dc:	4f35      	ldr	r7, [pc, #212]	@ (80113b4 <_strtod_l+0xafc>)
 80112de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80112e2:	2600      	movs	r6, #0
 80112e4:	e7b1      	b.n	801124a <_strtod_l+0x992>
 80112e6:	4f34      	ldr	r7, [pc, #208]	@ (80113b8 <_strtod_l+0xb00>)
 80112e8:	2600      	movs	r6, #0
 80112ea:	e7aa      	b.n	8011242 <_strtod_l+0x98a>
 80112ec:	4b32      	ldr	r3, [pc, #200]	@ (80113b8 <_strtod_l+0xb00>)
 80112ee:	4630      	mov	r0, r6
 80112f0:	4639      	mov	r1, r7
 80112f2:	2200      	movs	r2, #0
 80112f4:	f7ef f9b8 	bl	8000668 <__aeabi_dmul>
 80112f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112fa:	4606      	mov	r6, r0
 80112fc:	460f      	mov	r7, r1
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d09f      	beq.n	8011242 <_strtod_l+0x98a>
 8011302:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011306:	e7a0      	b.n	801124a <_strtod_l+0x992>
 8011308:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011390 <_strtod_l+0xad8>
 801130c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011310:	ec57 6b17 	vmov	r6, r7, d7
 8011314:	e799      	b.n	801124a <_strtod_l+0x992>
 8011316:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801131a:	9b08      	ldr	r3, [sp, #32]
 801131c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011320:	2b00      	cmp	r3, #0
 8011322:	d1c1      	bne.n	80112a8 <_strtod_l+0x9f0>
 8011324:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011328:	0d1b      	lsrs	r3, r3, #20
 801132a:	051b      	lsls	r3, r3, #20
 801132c:	429d      	cmp	r5, r3
 801132e:	d1bb      	bne.n	80112a8 <_strtod_l+0x9f0>
 8011330:	4630      	mov	r0, r6
 8011332:	4639      	mov	r1, r7
 8011334:	f7ef fcf8 	bl	8000d28 <__aeabi_d2lz>
 8011338:	f7ef f968 	bl	800060c <__aeabi_l2d>
 801133c:	4602      	mov	r2, r0
 801133e:	460b      	mov	r3, r1
 8011340:	4630      	mov	r0, r6
 8011342:	4639      	mov	r1, r7
 8011344:	f7ee ffd8 	bl	80002f8 <__aeabi_dsub>
 8011348:	460b      	mov	r3, r1
 801134a:	4602      	mov	r2, r0
 801134c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011350:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011356:	ea46 060a 	orr.w	r6, r6, sl
 801135a:	431e      	orrs	r6, r3
 801135c:	d06f      	beq.n	801143e <_strtod_l+0xb86>
 801135e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011398 <_strtod_l+0xae0>)
 8011360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011364:	f7ef fbf2 	bl	8000b4c <__aeabi_dcmplt>
 8011368:	2800      	cmp	r0, #0
 801136a:	f47f accf 	bne.w	8010d0c <_strtod_l+0x454>
 801136e:	a30c      	add	r3, pc, #48	@ (adr r3, 80113a0 <_strtod_l+0xae8>)
 8011370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011378:	f7ef fc06 	bl	8000b88 <__aeabi_dcmpgt>
 801137c:	2800      	cmp	r0, #0
 801137e:	d093      	beq.n	80112a8 <_strtod_l+0x9f0>
 8011380:	e4c4      	b.n	8010d0c <_strtod_l+0x454>
 8011382:	bf00      	nop
 8011384:	f3af 8000 	nop.w
 8011388:	00000000 	.word	0x00000000
 801138c:	bff00000 	.word	0xbff00000
 8011390:	00000000 	.word	0x00000000
 8011394:	3ff00000 	.word	0x3ff00000
 8011398:	94a03595 	.word	0x94a03595
 801139c:	3fdfffff 	.word	0x3fdfffff
 80113a0:	35afe535 	.word	0x35afe535
 80113a4:	3fe00000 	.word	0x3fe00000
 80113a8:	000fffff 	.word	0x000fffff
 80113ac:	7ff00000 	.word	0x7ff00000
 80113b0:	7fefffff 	.word	0x7fefffff
 80113b4:	3ff00000 	.word	0x3ff00000
 80113b8:	3fe00000 	.word	0x3fe00000
 80113bc:	7fe00000 	.word	0x7fe00000
 80113c0:	7c9fffff 	.word	0x7c9fffff
 80113c4:	9b08      	ldr	r3, [sp, #32]
 80113c6:	b323      	cbz	r3, 8011412 <_strtod_l+0xb5a>
 80113c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80113cc:	d821      	bhi.n	8011412 <_strtod_l+0xb5a>
 80113ce:	a328      	add	r3, pc, #160	@ (adr r3, 8011470 <_strtod_l+0xbb8>)
 80113d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d4:	4630      	mov	r0, r6
 80113d6:	4639      	mov	r1, r7
 80113d8:	f7ef fbc2 	bl	8000b60 <__aeabi_dcmple>
 80113dc:	b1a0      	cbz	r0, 8011408 <_strtod_l+0xb50>
 80113de:	4639      	mov	r1, r7
 80113e0:	4630      	mov	r0, r6
 80113e2:	f7ef fc19 	bl	8000c18 <__aeabi_d2uiz>
 80113e6:	2801      	cmp	r0, #1
 80113e8:	bf38      	it	cc
 80113ea:	2001      	movcc	r0, #1
 80113ec:	f7ef f8c2 	bl	8000574 <__aeabi_ui2d>
 80113f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113f2:	4606      	mov	r6, r0
 80113f4:	460f      	mov	r7, r1
 80113f6:	b9fb      	cbnz	r3, 8011438 <_strtod_l+0xb80>
 80113f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80113fc:	9014      	str	r0, [sp, #80]	@ 0x50
 80113fe:	9315      	str	r3, [sp, #84]	@ 0x54
 8011400:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011404:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011408:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801140a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801140e:	1b5b      	subs	r3, r3, r5
 8011410:	9311      	str	r3, [sp, #68]	@ 0x44
 8011412:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011416:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801141a:	f7ff f8ef 	bl	80105fc <__ulp>
 801141e:	4650      	mov	r0, sl
 8011420:	ec53 2b10 	vmov	r2, r3, d0
 8011424:	4659      	mov	r1, fp
 8011426:	f7ef f91f 	bl	8000668 <__aeabi_dmul>
 801142a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801142e:	f7ee ff65 	bl	80002fc <__adddf3>
 8011432:	4682      	mov	sl, r0
 8011434:	468b      	mov	fp, r1
 8011436:	e770      	b.n	801131a <_strtod_l+0xa62>
 8011438:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801143c:	e7e0      	b.n	8011400 <_strtod_l+0xb48>
 801143e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011478 <_strtod_l+0xbc0>)
 8011440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011444:	f7ef fb82 	bl	8000b4c <__aeabi_dcmplt>
 8011448:	e798      	b.n	801137c <_strtod_l+0xac4>
 801144a:	2300      	movs	r3, #0
 801144c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801144e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011450:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011452:	6013      	str	r3, [r2, #0]
 8011454:	f7ff ba6d 	b.w	8010932 <_strtod_l+0x7a>
 8011458:	2a65      	cmp	r2, #101	@ 0x65
 801145a:	f43f ab66 	beq.w	8010b2a <_strtod_l+0x272>
 801145e:	2a45      	cmp	r2, #69	@ 0x45
 8011460:	f43f ab63 	beq.w	8010b2a <_strtod_l+0x272>
 8011464:	2301      	movs	r3, #1
 8011466:	f7ff bb9e 	b.w	8010ba6 <_strtod_l+0x2ee>
 801146a:	bf00      	nop
 801146c:	f3af 8000 	nop.w
 8011470:	ffc00000 	.word	0xffc00000
 8011474:	41dfffff 	.word	0x41dfffff
 8011478:	94a03595 	.word	0x94a03595
 801147c:	3fcfffff 	.word	0x3fcfffff

08011480 <_strtod_r>:
 8011480:	4b01      	ldr	r3, [pc, #4]	@ (8011488 <_strtod_r+0x8>)
 8011482:	f7ff ba19 	b.w	80108b8 <_strtod_l>
 8011486:	bf00      	nop
 8011488:	20000068 	.word	0x20000068

0801148c <_strtol_l.constprop.0>:
 801148c:	2b24      	cmp	r3, #36	@ 0x24
 801148e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011492:	4686      	mov	lr, r0
 8011494:	4690      	mov	r8, r2
 8011496:	d801      	bhi.n	801149c <_strtol_l.constprop.0+0x10>
 8011498:	2b01      	cmp	r3, #1
 801149a:	d106      	bne.n	80114aa <_strtol_l.constprop.0+0x1e>
 801149c:	f7fd fe62 	bl	800f164 <__errno>
 80114a0:	2316      	movs	r3, #22
 80114a2:	6003      	str	r3, [r0, #0]
 80114a4:	2000      	movs	r0, #0
 80114a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114aa:	4834      	ldr	r0, [pc, #208]	@ (801157c <_strtol_l.constprop.0+0xf0>)
 80114ac:	460d      	mov	r5, r1
 80114ae:	462a      	mov	r2, r5
 80114b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80114b4:	5d06      	ldrb	r6, [r0, r4]
 80114b6:	f016 0608 	ands.w	r6, r6, #8
 80114ba:	d1f8      	bne.n	80114ae <_strtol_l.constprop.0+0x22>
 80114bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80114be:	d12d      	bne.n	801151c <_strtol_l.constprop.0+0x90>
 80114c0:	782c      	ldrb	r4, [r5, #0]
 80114c2:	2601      	movs	r6, #1
 80114c4:	1c95      	adds	r5, r2, #2
 80114c6:	f033 0210 	bics.w	r2, r3, #16
 80114ca:	d109      	bne.n	80114e0 <_strtol_l.constprop.0+0x54>
 80114cc:	2c30      	cmp	r4, #48	@ 0x30
 80114ce:	d12a      	bne.n	8011526 <_strtol_l.constprop.0+0x9a>
 80114d0:	782a      	ldrb	r2, [r5, #0]
 80114d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80114d6:	2a58      	cmp	r2, #88	@ 0x58
 80114d8:	d125      	bne.n	8011526 <_strtol_l.constprop.0+0x9a>
 80114da:	786c      	ldrb	r4, [r5, #1]
 80114dc:	2310      	movs	r3, #16
 80114de:	3502      	adds	r5, #2
 80114e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80114e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80114e8:	2200      	movs	r2, #0
 80114ea:	fbbc f9f3 	udiv	r9, ip, r3
 80114ee:	4610      	mov	r0, r2
 80114f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80114f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80114f8:	2f09      	cmp	r7, #9
 80114fa:	d81b      	bhi.n	8011534 <_strtol_l.constprop.0+0xa8>
 80114fc:	463c      	mov	r4, r7
 80114fe:	42a3      	cmp	r3, r4
 8011500:	dd27      	ble.n	8011552 <_strtol_l.constprop.0+0xc6>
 8011502:	1c57      	adds	r7, r2, #1
 8011504:	d007      	beq.n	8011516 <_strtol_l.constprop.0+0x8a>
 8011506:	4581      	cmp	r9, r0
 8011508:	d320      	bcc.n	801154c <_strtol_l.constprop.0+0xc0>
 801150a:	d101      	bne.n	8011510 <_strtol_l.constprop.0+0x84>
 801150c:	45a2      	cmp	sl, r4
 801150e:	db1d      	blt.n	801154c <_strtol_l.constprop.0+0xc0>
 8011510:	fb00 4003 	mla	r0, r0, r3, r4
 8011514:	2201      	movs	r2, #1
 8011516:	f815 4b01 	ldrb.w	r4, [r5], #1
 801151a:	e7eb      	b.n	80114f4 <_strtol_l.constprop.0+0x68>
 801151c:	2c2b      	cmp	r4, #43	@ 0x2b
 801151e:	bf04      	itt	eq
 8011520:	782c      	ldrbeq	r4, [r5, #0]
 8011522:	1c95      	addeq	r5, r2, #2
 8011524:	e7cf      	b.n	80114c6 <_strtol_l.constprop.0+0x3a>
 8011526:	2b00      	cmp	r3, #0
 8011528:	d1da      	bne.n	80114e0 <_strtol_l.constprop.0+0x54>
 801152a:	2c30      	cmp	r4, #48	@ 0x30
 801152c:	bf0c      	ite	eq
 801152e:	2308      	moveq	r3, #8
 8011530:	230a      	movne	r3, #10
 8011532:	e7d5      	b.n	80114e0 <_strtol_l.constprop.0+0x54>
 8011534:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011538:	2f19      	cmp	r7, #25
 801153a:	d801      	bhi.n	8011540 <_strtol_l.constprop.0+0xb4>
 801153c:	3c37      	subs	r4, #55	@ 0x37
 801153e:	e7de      	b.n	80114fe <_strtol_l.constprop.0+0x72>
 8011540:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011544:	2f19      	cmp	r7, #25
 8011546:	d804      	bhi.n	8011552 <_strtol_l.constprop.0+0xc6>
 8011548:	3c57      	subs	r4, #87	@ 0x57
 801154a:	e7d8      	b.n	80114fe <_strtol_l.constprop.0+0x72>
 801154c:	f04f 32ff 	mov.w	r2, #4294967295
 8011550:	e7e1      	b.n	8011516 <_strtol_l.constprop.0+0x8a>
 8011552:	1c53      	adds	r3, r2, #1
 8011554:	d108      	bne.n	8011568 <_strtol_l.constprop.0+0xdc>
 8011556:	2322      	movs	r3, #34	@ 0x22
 8011558:	f8ce 3000 	str.w	r3, [lr]
 801155c:	4660      	mov	r0, ip
 801155e:	f1b8 0f00 	cmp.w	r8, #0
 8011562:	d0a0      	beq.n	80114a6 <_strtol_l.constprop.0+0x1a>
 8011564:	1e69      	subs	r1, r5, #1
 8011566:	e006      	b.n	8011576 <_strtol_l.constprop.0+0xea>
 8011568:	b106      	cbz	r6, 801156c <_strtol_l.constprop.0+0xe0>
 801156a:	4240      	negs	r0, r0
 801156c:	f1b8 0f00 	cmp.w	r8, #0
 8011570:	d099      	beq.n	80114a6 <_strtol_l.constprop.0+0x1a>
 8011572:	2a00      	cmp	r2, #0
 8011574:	d1f6      	bne.n	8011564 <_strtol_l.constprop.0+0xd8>
 8011576:	f8c8 1000 	str.w	r1, [r8]
 801157a:	e794      	b.n	80114a6 <_strtol_l.constprop.0+0x1a>
 801157c:	080131c9 	.word	0x080131c9

08011580 <_strtol_r>:
 8011580:	f7ff bf84 	b.w	801148c <_strtol_l.constprop.0>

08011584 <__ssputs_r>:
 8011584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011588:	688e      	ldr	r6, [r1, #8]
 801158a:	461f      	mov	r7, r3
 801158c:	42be      	cmp	r6, r7
 801158e:	680b      	ldr	r3, [r1, #0]
 8011590:	4682      	mov	sl, r0
 8011592:	460c      	mov	r4, r1
 8011594:	4690      	mov	r8, r2
 8011596:	d82d      	bhi.n	80115f4 <__ssputs_r+0x70>
 8011598:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801159c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80115a0:	d026      	beq.n	80115f0 <__ssputs_r+0x6c>
 80115a2:	6965      	ldr	r5, [r4, #20]
 80115a4:	6909      	ldr	r1, [r1, #16]
 80115a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80115aa:	eba3 0901 	sub.w	r9, r3, r1
 80115ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80115b2:	1c7b      	adds	r3, r7, #1
 80115b4:	444b      	add	r3, r9
 80115b6:	106d      	asrs	r5, r5, #1
 80115b8:	429d      	cmp	r5, r3
 80115ba:	bf38      	it	cc
 80115bc:	461d      	movcc	r5, r3
 80115be:	0553      	lsls	r3, r2, #21
 80115c0:	d527      	bpl.n	8011612 <__ssputs_r+0x8e>
 80115c2:	4629      	mov	r1, r5
 80115c4:	f7fc fbda 	bl	800dd7c <_malloc_r>
 80115c8:	4606      	mov	r6, r0
 80115ca:	b360      	cbz	r0, 8011626 <__ssputs_r+0xa2>
 80115cc:	6921      	ldr	r1, [r4, #16]
 80115ce:	464a      	mov	r2, r9
 80115d0:	f7fd fdf5 	bl	800f1be <memcpy>
 80115d4:	89a3      	ldrh	r3, [r4, #12]
 80115d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80115da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80115de:	81a3      	strh	r3, [r4, #12]
 80115e0:	6126      	str	r6, [r4, #16]
 80115e2:	6165      	str	r5, [r4, #20]
 80115e4:	444e      	add	r6, r9
 80115e6:	eba5 0509 	sub.w	r5, r5, r9
 80115ea:	6026      	str	r6, [r4, #0]
 80115ec:	60a5      	str	r5, [r4, #8]
 80115ee:	463e      	mov	r6, r7
 80115f0:	42be      	cmp	r6, r7
 80115f2:	d900      	bls.n	80115f6 <__ssputs_r+0x72>
 80115f4:	463e      	mov	r6, r7
 80115f6:	6820      	ldr	r0, [r4, #0]
 80115f8:	4632      	mov	r2, r6
 80115fa:	4641      	mov	r1, r8
 80115fc:	f000 fef7 	bl	80123ee <memmove>
 8011600:	68a3      	ldr	r3, [r4, #8]
 8011602:	1b9b      	subs	r3, r3, r6
 8011604:	60a3      	str	r3, [r4, #8]
 8011606:	6823      	ldr	r3, [r4, #0]
 8011608:	4433      	add	r3, r6
 801160a:	6023      	str	r3, [r4, #0]
 801160c:	2000      	movs	r0, #0
 801160e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011612:	462a      	mov	r2, r5
 8011614:	f001 fac1 	bl	8012b9a <_realloc_r>
 8011618:	4606      	mov	r6, r0
 801161a:	2800      	cmp	r0, #0
 801161c:	d1e0      	bne.n	80115e0 <__ssputs_r+0x5c>
 801161e:	6921      	ldr	r1, [r4, #16]
 8011620:	4650      	mov	r0, sl
 8011622:	f7fe fc2d 	bl	800fe80 <_free_r>
 8011626:	230c      	movs	r3, #12
 8011628:	f8ca 3000 	str.w	r3, [sl]
 801162c:	89a3      	ldrh	r3, [r4, #12]
 801162e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011632:	81a3      	strh	r3, [r4, #12]
 8011634:	f04f 30ff 	mov.w	r0, #4294967295
 8011638:	e7e9      	b.n	801160e <__ssputs_r+0x8a>
	...

0801163c <_svfiprintf_r>:
 801163c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011640:	4698      	mov	r8, r3
 8011642:	898b      	ldrh	r3, [r1, #12]
 8011644:	061b      	lsls	r3, r3, #24
 8011646:	b09d      	sub	sp, #116	@ 0x74
 8011648:	4607      	mov	r7, r0
 801164a:	460d      	mov	r5, r1
 801164c:	4614      	mov	r4, r2
 801164e:	d510      	bpl.n	8011672 <_svfiprintf_r+0x36>
 8011650:	690b      	ldr	r3, [r1, #16]
 8011652:	b973      	cbnz	r3, 8011672 <_svfiprintf_r+0x36>
 8011654:	2140      	movs	r1, #64	@ 0x40
 8011656:	f7fc fb91 	bl	800dd7c <_malloc_r>
 801165a:	6028      	str	r0, [r5, #0]
 801165c:	6128      	str	r0, [r5, #16]
 801165e:	b930      	cbnz	r0, 801166e <_svfiprintf_r+0x32>
 8011660:	230c      	movs	r3, #12
 8011662:	603b      	str	r3, [r7, #0]
 8011664:	f04f 30ff 	mov.w	r0, #4294967295
 8011668:	b01d      	add	sp, #116	@ 0x74
 801166a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801166e:	2340      	movs	r3, #64	@ 0x40
 8011670:	616b      	str	r3, [r5, #20]
 8011672:	2300      	movs	r3, #0
 8011674:	9309      	str	r3, [sp, #36]	@ 0x24
 8011676:	2320      	movs	r3, #32
 8011678:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801167c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011680:	2330      	movs	r3, #48	@ 0x30
 8011682:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011820 <_svfiprintf_r+0x1e4>
 8011686:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801168a:	f04f 0901 	mov.w	r9, #1
 801168e:	4623      	mov	r3, r4
 8011690:	469a      	mov	sl, r3
 8011692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011696:	b10a      	cbz	r2, 801169c <_svfiprintf_r+0x60>
 8011698:	2a25      	cmp	r2, #37	@ 0x25
 801169a:	d1f9      	bne.n	8011690 <_svfiprintf_r+0x54>
 801169c:	ebba 0b04 	subs.w	fp, sl, r4
 80116a0:	d00b      	beq.n	80116ba <_svfiprintf_r+0x7e>
 80116a2:	465b      	mov	r3, fp
 80116a4:	4622      	mov	r2, r4
 80116a6:	4629      	mov	r1, r5
 80116a8:	4638      	mov	r0, r7
 80116aa:	f7ff ff6b 	bl	8011584 <__ssputs_r>
 80116ae:	3001      	adds	r0, #1
 80116b0:	f000 80a7 	beq.w	8011802 <_svfiprintf_r+0x1c6>
 80116b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80116b6:	445a      	add	r2, fp
 80116b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80116ba:	f89a 3000 	ldrb.w	r3, [sl]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	f000 809f 	beq.w	8011802 <_svfiprintf_r+0x1c6>
 80116c4:	2300      	movs	r3, #0
 80116c6:	f04f 32ff 	mov.w	r2, #4294967295
 80116ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116ce:	f10a 0a01 	add.w	sl, sl, #1
 80116d2:	9304      	str	r3, [sp, #16]
 80116d4:	9307      	str	r3, [sp, #28]
 80116d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80116da:	931a      	str	r3, [sp, #104]	@ 0x68
 80116dc:	4654      	mov	r4, sl
 80116de:	2205      	movs	r2, #5
 80116e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116e4:	484e      	ldr	r0, [pc, #312]	@ (8011820 <_svfiprintf_r+0x1e4>)
 80116e6:	f7ee fdab 	bl	8000240 <memchr>
 80116ea:	9a04      	ldr	r2, [sp, #16]
 80116ec:	b9d8      	cbnz	r0, 8011726 <_svfiprintf_r+0xea>
 80116ee:	06d0      	lsls	r0, r2, #27
 80116f0:	bf44      	itt	mi
 80116f2:	2320      	movmi	r3, #32
 80116f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80116f8:	0711      	lsls	r1, r2, #28
 80116fa:	bf44      	itt	mi
 80116fc:	232b      	movmi	r3, #43	@ 0x2b
 80116fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011702:	f89a 3000 	ldrb.w	r3, [sl]
 8011706:	2b2a      	cmp	r3, #42	@ 0x2a
 8011708:	d015      	beq.n	8011736 <_svfiprintf_r+0xfa>
 801170a:	9a07      	ldr	r2, [sp, #28]
 801170c:	4654      	mov	r4, sl
 801170e:	2000      	movs	r0, #0
 8011710:	f04f 0c0a 	mov.w	ip, #10
 8011714:	4621      	mov	r1, r4
 8011716:	f811 3b01 	ldrb.w	r3, [r1], #1
 801171a:	3b30      	subs	r3, #48	@ 0x30
 801171c:	2b09      	cmp	r3, #9
 801171e:	d94b      	bls.n	80117b8 <_svfiprintf_r+0x17c>
 8011720:	b1b0      	cbz	r0, 8011750 <_svfiprintf_r+0x114>
 8011722:	9207      	str	r2, [sp, #28]
 8011724:	e014      	b.n	8011750 <_svfiprintf_r+0x114>
 8011726:	eba0 0308 	sub.w	r3, r0, r8
 801172a:	fa09 f303 	lsl.w	r3, r9, r3
 801172e:	4313      	orrs	r3, r2
 8011730:	9304      	str	r3, [sp, #16]
 8011732:	46a2      	mov	sl, r4
 8011734:	e7d2      	b.n	80116dc <_svfiprintf_r+0xa0>
 8011736:	9b03      	ldr	r3, [sp, #12]
 8011738:	1d19      	adds	r1, r3, #4
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	9103      	str	r1, [sp, #12]
 801173e:	2b00      	cmp	r3, #0
 8011740:	bfbb      	ittet	lt
 8011742:	425b      	neglt	r3, r3
 8011744:	f042 0202 	orrlt.w	r2, r2, #2
 8011748:	9307      	strge	r3, [sp, #28]
 801174a:	9307      	strlt	r3, [sp, #28]
 801174c:	bfb8      	it	lt
 801174e:	9204      	strlt	r2, [sp, #16]
 8011750:	7823      	ldrb	r3, [r4, #0]
 8011752:	2b2e      	cmp	r3, #46	@ 0x2e
 8011754:	d10a      	bne.n	801176c <_svfiprintf_r+0x130>
 8011756:	7863      	ldrb	r3, [r4, #1]
 8011758:	2b2a      	cmp	r3, #42	@ 0x2a
 801175a:	d132      	bne.n	80117c2 <_svfiprintf_r+0x186>
 801175c:	9b03      	ldr	r3, [sp, #12]
 801175e:	1d1a      	adds	r2, r3, #4
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	9203      	str	r2, [sp, #12]
 8011764:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011768:	3402      	adds	r4, #2
 801176a:	9305      	str	r3, [sp, #20]
 801176c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011830 <_svfiprintf_r+0x1f4>
 8011770:	7821      	ldrb	r1, [r4, #0]
 8011772:	2203      	movs	r2, #3
 8011774:	4650      	mov	r0, sl
 8011776:	f7ee fd63 	bl	8000240 <memchr>
 801177a:	b138      	cbz	r0, 801178c <_svfiprintf_r+0x150>
 801177c:	9b04      	ldr	r3, [sp, #16]
 801177e:	eba0 000a 	sub.w	r0, r0, sl
 8011782:	2240      	movs	r2, #64	@ 0x40
 8011784:	4082      	lsls	r2, r0
 8011786:	4313      	orrs	r3, r2
 8011788:	3401      	adds	r4, #1
 801178a:	9304      	str	r3, [sp, #16]
 801178c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011790:	4824      	ldr	r0, [pc, #144]	@ (8011824 <_svfiprintf_r+0x1e8>)
 8011792:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011796:	2206      	movs	r2, #6
 8011798:	f7ee fd52 	bl	8000240 <memchr>
 801179c:	2800      	cmp	r0, #0
 801179e:	d036      	beq.n	801180e <_svfiprintf_r+0x1d2>
 80117a0:	4b21      	ldr	r3, [pc, #132]	@ (8011828 <_svfiprintf_r+0x1ec>)
 80117a2:	bb1b      	cbnz	r3, 80117ec <_svfiprintf_r+0x1b0>
 80117a4:	9b03      	ldr	r3, [sp, #12]
 80117a6:	3307      	adds	r3, #7
 80117a8:	f023 0307 	bic.w	r3, r3, #7
 80117ac:	3308      	adds	r3, #8
 80117ae:	9303      	str	r3, [sp, #12]
 80117b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117b2:	4433      	add	r3, r6
 80117b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80117b6:	e76a      	b.n	801168e <_svfiprintf_r+0x52>
 80117b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80117bc:	460c      	mov	r4, r1
 80117be:	2001      	movs	r0, #1
 80117c0:	e7a8      	b.n	8011714 <_svfiprintf_r+0xd8>
 80117c2:	2300      	movs	r3, #0
 80117c4:	3401      	adds	r4, #1
 80117c6:	9305      	str	r3, [sp, #20]
 80117c8:	4619      	mov	r1, r3
 80117ca:	f04f 0c0a 	mov.w	ip, #10
 80117ce:	4620      	mov	r0, r4
 80117d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117d4:	3a30      	subs	r2, #48	@ 0x30
 80117d6:	2a09      	cmp	r2, #9
 80117d8:	d903      	bls.n	80117e2 <_svfiprintf_r+0x1a6>
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d0c6      	beq.n	801176c <_svfiprintf_r+0x130>
 80117de:	9105      	str	r1, [sp, #20]
 80117e0:	e7c4      	b.n	801176c <_svfiprintf_r+0x130>
 80117e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80117e6:	4604      	mov	r4, r0
 80117e8:	2301      	movs	r3, #1
 80117ea:	e7f0      	b.n	80117ce <_svfiprintf_r+0x192>
 80117ec:	ab03      	add	r3, sp, #12
 80117ee:	9300      	str	r3, [sp, #0]
 80117f0:	462a      	mov	r2, r5
 80117f2:	4b0e      	ldr	r3, [pc, #56]	@ (801182c <_svfiprintf_r+0x1f0>)
 80117f4:	a904      	add	r1, sp, #16
 80117f6:	4638      	mov	r0, r7
 80117f8:	f7fc fbec 	bl	800dfd4 <_printf_float>
 80117fc:	1c42      	adds	r2, r0, #1
 80117fe:	4606      	mov	r6, r0
 8011800:	d1d6      	bne.n	80117b0 <_svfiprintf_r+0x174>
 8011802:	89ab      	ldrh	r3, [r5, #12]
 8011804:	065b      	lsls	r3, r3, #25
 8011806:	f53f af2d 	bmi.w	8011664 <_svfiprintf_r+0x28>
 801180a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801180c:	e72c      	b.n	8011668 <_svfiprintf_r+0x2c>
 801180e:	ab03      	add	r3, sp, #12
 8011810:	9300      	str	r3, [sp, #0]
 8011812:	462a      	mov	r2, r5
 8011814:	4b05      	ldr	r3, [pc, #20]	@ (801182c <_svfiprintf_r+0x1f0>)
 8011816:	a904      	add	r1, sp, #16
 8011818:	4638      	mov	r0, r7
 801181a:	f7fc fe73 	bl	800e504 <_printf_i>
 801181e:	e7ed      	b.n	80117fc <_svfiprintf_r+0x1c0>
 8011820:	080132c9 	.word	0x080132c9
 8011824:	080132d3 	.word	0x080132d3
 8011828:	0800dfd5 	.word	0x0800dfd5
 801182c:	08011585 	.word	0x08011585
 8011830:	080132cf 	.word	0x080132cf

08011834 <_sungetc_r>:
 8011834:	b538      	push	{r3, r4, r5, lr}
 8011836:	1c4b      	adds	r3, r1, #1
 8011838:	4614      	mov	r4, r2
 801183a:	d103      	bne.n	8011844 <_sungetc_r+0x10>
 801183c:	f04f 35ff 	mov.w	r5, #4294967295
 8011840:	4628      	mov	r0, r5
 8011842:	bd38      	pop	{r3, r4, r5, pc}
 8011844:	8993      	ldrh	r3, [r2, #12]
 8011846:	f023 0320 	bic.w	r3, r3, #32
 801184a:	8193      	strh	r3, [r2, #12]
 801184c:	6853      	ldr	r3, [r2, #4]
 801184e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8011850:	b2cd      	uxtb	r5, r1
 8011852:	b18a      	cbz	r2, 8011878 <_sungetc_r+0x44>
 8011854:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011856:	429a      	cmp	r2, r3
 8011858:	dd08      	ble.n	801186c <_sungetc_r+0x38>
 801185a:	6823      	ldr	r3, [r4, #0]
 801185c:	1e5a      	subs	r2, r3, #1
 801185e:	6022      	str	r2, [r4, #0]
 8011860:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011864:	6863      	ldr	r3, [r4, #4]
 8011866:	3301      	adds	r3, #1
 8011868:	6063      	str	r3, [r4, #4]
 801186a:	e7e9      	b.n	8011840 <_sungetc_r+0xc>
 801186c:	4621      	mov	r1, r4
 801186e:	f000 fd84 	bl	801237a <__submore>
 8011872:	2800      	cmp	r0, #0
 8011874:	d0f1      	beq.n	801185a <_sungetc_r+0x26>
 8011876:	e7e1      	b.n	801183c <_sungetc_r+0x8>
 8011878:	6921      	ldr	r1, [r4, #16]
 801187a:	6822      	ldr	r2, [r4, #0]
 801187c:	b141      	cbz	r1, 8011890 <_sungetc_r+0x5c>
 801187e:	4291      	cmp	r1, r2
 8011880:	d206      	bcs.n	8011890 <_sungetc_r+0x5c>
 8011882:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011886:	42a9      	cmp	r1, r5
 8011888:	d102      	bne.n	8011890 <_sungetc_r+0x5c>
 801188a:	3a01      	subs	r2, #1
 801188c:	6022      	str	r2, [r4, #0]
 801188e:	e7ea      	b.n	8011866 <_sungetc_r+0x32>
 8011890:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8011894:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011898:	6363      	str	r3, [r4, #52]	@ 0x34
 801189a:	2303      	movs	r3, #3
 801189c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801189e:	4623      	mov	r3, r4
 80118a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80118a4:	6023      	str	r3, [r4, #0]
 80118a6:	2301      	movs	r3, #1
 80118a8:	e7de      	b.n	8011868 <_sungetc_r+0x34>

080118aa <__ssrefill_r>:
 80118aa:	b510      	push	{r4, lr}
 80118ac:	460c      	mov	r4, r1
 80118ae:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80118b0:	b169      	cbz	r1, 80118ce <__ssrefill_r+0x24>
 80118b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80118b6:	4299      	cmp	r1, r3
 80118b8:	d001      	beq.n	80118be <__ssrefill_r+0x14>
 80118ba:	f7fe fae1 	bl	800fe80 <_free_r>
 80118be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80118c0:	6063      	str	r3, [r4, #4]
 80118c2:	2000      	movs	r0, #0
 80118c4:	6360      	str	r0, [r4, #52]	@ 0x34
 80118c6:	b113      	cbz	r3, 80118ce <__ssrefill_r+0x24>
 80118c8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80118ca:	6023      	str	r3, [r4, #0]
 80118cc:	bd10      	pop	{r4, pc}
 80118ce:	6923      	ldr	r3, [r4, #16]
 80118d0:	6023      	str	r3, [r4, #0]
 80118d2:	2300      	movs	r3, #0
 80118d4:	6063      	str	r3, [r4, #4]
 80118d6:	89a3      	ldrh	r3, [r4, #12]
 80118d8:	f043 0320 	orr.w	r3, r3, #32
 80118dc:	81a3      	strh	r3, [r4, #12]
 80118de:	f04f 30ff 	mov.w	r0, #4294967295
 80118e2:	e7f3      	b.n	80118cc <__ssrefill_r+0x22>

080118e4 <__ssvfiscanf_r>:
 80118e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118e8:	460c      	mov	r4, r1
 80118ea:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80118ee:	2100      	movs	r1, #0
 80118f0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80118f4:	49a5      	ldr	r1, [pc, #660]	@ (8011b8c <__ssvfiscanf_r+0x2a8>)
 80118f6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80118f8:	f10d 0804 	add.w	r8, sp, #4
 80118fc:	49a4      	ldr	r1, [pc, #656]	@ (8011b90 <__ssvfiscanf_r+0x2ac>)
 80118fe:	4fa5      	ldr	r7, [pc, #660]	@ (8011b94 <__ssvfiscanf_r+0x2b0>)
 8011900:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011904:	4606      	mov	r6, r0
 8011906:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011908:	9300      	str	r3, [sp, #0]
 801190a:	7813      	ldrb	r3, [r2, #0]
 801190c:	2b00      	cmp	r3, #0
 801190e:	f000 8158 	beq.w	8011bc2 <__ssvfiscanf_r+0x2de>
 8011912:	5cf9      	ldrb	r1, [r7, r3]
 8011914:	f011 0108 	ands.w	r1, r1, #8
 8011918:	f102 0501 	add.w	r5, r2, #1
 801191c:	d019      	beq.n	8011952 <__ssvfiscanf_r+0x6e>
 801191e:	6863      	ldr	r3, [r4, #4]
 8011920:	2b00      	cmp	r3, #0
 8011922:	dd0f      	ble.n	8011944 <__ssvfiscanf_r+0x60>
 8011924:	6823      	ldr	r3, [r4, #0]
 8011926:	781a      	ldrb	r2, [r3, #0]
 8011928:	5cba      	ldrb	r2, [r7, r2]
 801192a:	0712      	lsls	r2, r2, #28
 801192c:	d401      	bmi.n	8011932 <__ssvfiscanf_r+0x4e>
 801192e:	462a      	mov	r2, r5
 8011930:	e7eb      	b.n	801190a <__ssvfiscanf_r+0x26>
 8011932:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011934:	3201      	adds	r2, #1
 8011936:	9245      	str	r2, [sp, #276]	@ 0x114
 8011938:	6862      	ldr	r2, [r4, #4]
 801193a:	3301      	adds	r3, #1
 801193c:	3a01      	subs	r2, #1
 801193e:	6062      	str	r2, [r4, #4]
 8011940:	6023      	str	r3, [r4, #0]
 8011942:	e7ec      	b.n	801191e <__ssvfiscanf_r+0x3a>
 8011944:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011946:	4621      	mov	r1, r4
 8011948:	4630      	mov	r0, r6
 801194a:	4798      	blx	r3
 801194c:	2800      	cmp	r0, #0
 801194e:	d0e9      	beq.n	8011924 <__ssvfiscanf_r+0x40>
 8011950:	e7ed      	b.n	801192e <__ssvfiscanf_r+0x4a>
 8011952:	2b25      	cmp	r3, #37	@ 0x25
 8011954:	d012      	beq.n	801197c <__ssvfiscanf_r+0x98>
 8011956:	4699      	mov	r9, r3
 8011958:	6863      	ldr	r3, [r4, #4]
 801195a:	2b00      	cmp	r3, #0
 801195c:	f340 8093 	ble.w	8011a86 <__ssvfiscanf_r+0x1a2>
 8011960:	6822      	ldr	r2, [r4, #0]
 8011962:	7813      	ldrb	r3, [r2, #0]
 8011964:	454b      	cmp	r3, r9
 8011966:	f040 812c 	bne.w	8011bc2 <__ssvfiscanf_r+0x2de>
 801196a:	6863      	ldr	r3, [r4, #4]
 801196c:	3b01      	subs	r3, #1
 801196e:	6063      	str	r3, [r4, #4]
 8011970:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011972:	3201      	adds	r2, #1
 8011974:	3301      	adds	r3, #1
 8011976:	6022      	str	r2, [r4, #0]
 8011978:	9345      	str	r3, [sp, #276]	@ 0x114
 801197a:	e7d8      	b.n	801192e <__ssvfiscanf_r+0x4a>
 801197c:	9141      	str	r1, [sp, #260]	@ 0x104
 801197e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011980:	7853      	ldrb	r3, [r2, #1]
 8011982:	2b2a      	cmp	r3, #42	@ 0x2a
 8011984:	bf02      	ittt	eq
 8011986:	2310      	moveq	r3, #16
 8011988:	1c95      	addeq	r5, r2, #2
 801198a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801198c:	220a      	movs	r2, #10
 801198e:	46a9      	mov	r9, r5
 8011990:	f819 1b01 	ldrb.w	r1, [r9], #1
 8011994:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011998:	2b09      	cmp	r3, #9
 801199a:	d91e      	bls.n	80119da <__ssvfiscanf_r+0xf6>
 801199c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8011b98 <__ssvfiscanf_r+0x2b4>
 80119a0:	2203      	movs	r2, #3
 80119a2:	4650      	mov	r0, sl
 80119a4:	f7ee fc4c 	bl	8000240 <memchr>
 80119a8:	b138      	cbz	r0, 80119ba <__ssvfiscanf_r+0xd6>
 80119aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80119ac:	eba0 000a 	sub.w	r0, r0, sl
 80119b0:	2301      	movs	r3, #1
 80119b2:	4083      	lsls	r3, r0
 80119b4:	4313      	orrs	r3, r2
 80119b6:	9341      	str	r3, [sp, #260]	@ 0x104
 80119b8:	464d      	mov	r5, r9
 80119ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80119be:	2b78      	cmp	r3, #120	@ 0x78
 80119c0:	d806      	bhi.n	80119d0 <__ssvfiscanf_r+0xec>
 80119c2:	2b57      	cmp	r3, #87	@ 0x57
 80119c4:	d810      	bhi.n	80119e8 <__ssvfiscanf_r+0x104>
 80119c6:	2b25      	cmp	r3, #37	@ 0x25
 80119c8:	d0c5      	beq.n	8011956 <__ssvfiscanf_r+0x72>
 80119ca:	d857      	bhi.n	8011a7c <__ssvfiscanf_r+0x198>
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d065      	beq.n	8011a9c <__ssvfiscanf_r+0x1b8>
 80119d0:	2303      	movs	r3, #3
 80119d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80119d4:	230a      	movs	r3, #10
 80119d6:	9342      	str	r3, [sp, #264]	@ 0x108
 80119d8:	e078      	b.n	8011acc <__ssvfiscanf_r+0x1e8>
 80119da:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80119dc:	fb02 1103 	mla	r1, r2, r3, r1
 80119e0:	3930      	subs	r1, #48	@ 0x30
 80119e2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80119e4:	464d      	mov	r5, r9
 80119e6:	e7d2      	b.n	801198e <__ssvfiscanf_r+0xaa>
 80119e8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80119ec:	2a20      	cmp	r2, #32
 80119ee:	d8ef      	bhi.n	80119d0 <__ssvfiscanf_r+0xec>
 80119f0:	a101      	add	r1, pc, #4	@ (adr r1, 80119f8 <__ssvfiscanf_r+0x114>)
 80119f2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80119f6:	bf00      	nop
 80119f8:	08011aab 	.word	0x08011aab
 80119fc:	080119d1 	.word	0x080119d1
 8011a00:	080119d1 	.word	0x080119d1
 8011a04:	08011b05 	.word	0x08011b05
 8011a08:	080119d1 	.word	0x080119d1
 8011a0c:	080119d1 	.word	0x080119d1
 8011a10:	080119d1 	.word	0x080119d1
 8011a14:	080119d1 	.word	0x080119d1
 8011a18:	080119d1 	.word	0x080119d1
 8011a1c:	080119d1 	.word	0x080119d1
 8011a20:	080119d1 	.word	0x080119d1
 8011a24:	08011b1b 	.word	0x08011b1b
 8011a28:	08011b01 	.word	0x08011b01
 8011a2c:	08011a83 	.word	0x08011a83
 8011a30:	08011a83 	.word	0x08011a83
 8011a34:	08011a83 	.word	0x08011a83
 8011a38:	080119d1 	.word	0x080119d1
 8011a3c:	08011abd 	.word	0x08011abd
 8011a40:	080119d1 	.word	0x080119d1
 8011a44:	080119d1 	.word	0x080119d1
 8011a48:	080119d1 	.word	0x080119d1
 8011a4c:	080119d1 	.word	0x080119d1
 8011a50:	08011b2b 	.word	0x08011b2b
 8011a54:	08011ac5 	.word	0x08011ac5
 8011a58:	08011aa3 	.word	0x08011aa3
 8011a5c:	080119d1 	.word	0x080119d1
 8011a60:	080119d1 	.word	0x080119d1
 8011a64:	08011b27 	.word	0x08011b27
 8011a68:	080119d1 	.word	0x080119d1
 8011a6c:	08011b01 	.word	0x08011b01
 8011a70:	080119d1 	.word	0x080119d1
 8011a74:	080119d1 	.word	0x080119d1
 8011a78:	08011aab 	.word	0x08011aab
 8011a7c:	3b45      	subs	r3, #69	@ 0x45
 8011a7e:	2b02      	cmp	r3, #2
 8011a80:	d8a6      	bhi.n	80119d0 <__ssvfiscanf_r+0xec>
 8011a82:	2305      	movs	r3, #5
 8011a84:	e021      	b.n	8011aca <__ssvfiscanf_r+0x1e6>
 8011a86:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011a88:	4621      	mov	r1, r4
 8011a8a:	4630      	mov	r0, r6
 8011a8c:	4798      	blx	r3
 8011a8e:	2800      	cmp	r0, #0
 8011a90:	f43f af66 	beq.w	8011960 <__ssvfiscanf_r+0x7c>
 8011a94:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011a96:	2800      	cmp	r0, #0
 8011a98:	f040 808b 	bne.w	8011bb2 <__ssvfiscanf_r+0x2ce>
 8011a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011aa0:	e08b      	b.n	8011bba <__ssvfiscanf_r+0x2d6>
 8011aa2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011aa4:	f042 0220 	orr.w	r2, r2, #32
 8011aa8:	9241      	str	r2, [sp, #260]	@ 0x104
 8011aaa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011aac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011ab0:	9241      	str	r2, [sp, #260]	@ 0x104
 8011ab2:	2210      	movs	r2, #16
 8011ab4:	2b6e      	cmp	r3, #110	@ 0x6e
 8011ab6:	9242      	str	r2, [sp, #264]	@ 0x108
 8011ab8:	d902      	bls.n	8011ac0 <__ssvfiscanf_r+0x1dc>
 8011aba:	e005      	b.n	8011ac8 <__ssvfiscanf_r+0x1e4>
 8011abc:	2300      	movs	r3, #0
 8011abe:	9342      	str	r3, [sp, #264]	@ 0x108
 8011ac0:	2303      	movs	r3, #3
 8011ac2:	e002      	b.n	8011aca <__ssvfiscanf_r+0x1e6>
 8011ac4:	2308      	movs	r3, #8
 8011ac6:	9342      	str	r3, [sp, #264]	@ 0x108
 8011ac8:	2304      	movs	r3, #4
 8011aca:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011acc:	6863      	ldr	r3, [r4, #4]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	dd39      	ble.n	8011b46 <__ssvfiscanf_r+0x262>
 8011ad2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011ad4:	0659      	lsls	r1, r3, #25
 8011ad6:	d404      	bmi.n	8011ae2 <__ssvfiscanf_r+0x1fe>
 8011ad8:	6823      	ldr	r3, [r4, #0]
 8011ada:	781a      	ldrb	r2, [r3, #0]
 8011adc:	5cba      	ldrb	r2, [r7, r2]
 8011ade:	0712      	lsls	r2, r2, #28
 8011ae0:	d438      	bmi.n	8011b54 <__ssvfiscanf_r+0x270>
 8011ae2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011ae4:	2b02      	cmp	r3, #2
 8011ae6:	dc47      	bgt.n	8011b78 <__ssvfiscanf_r+0x294>
 8011ae8:	466b      	mov	r3, sp
 8011aea:	4622      	mov	r2, r4
 8011aec:	a941      	add	r1, sp, #260	@ 0x104
 8011aee:	4630      	mov	r0, r6
 8011af0:	f000 f9ae 	bl	8011e50 <_scanf_chars>
 8011af4:	2801      	cmp	r0, #1
 8011af6:	d064      	beq.n	8011bc2 <__ssvfiscanf_r+0x2de>
 8011af8:	2802      	cmp	r0, #2
 8011afa:	f47f af18 	bne.w	801192e <__ssvfiscanf_r+0x4a>
 8011afe:	e7c9      	b.n	8011a94 <__ssvfiscanf_r+0x1b0>
 8011b00:	220a      	movs	r2, #10
 8011b02:	e7d7      	b.n	8011ab4 <__ssvfiscanf_r+0x1d0>
 8011b04:	4629      	mov	r1, r5
 8011b06:	4640      	mov	r0, r8
 8011b08:	f000 fbfe 	bl	8012308 <__sccl>
 8011b0c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b12:	9341      	str	r3, [sp, #260]	@ 0x104
 8011b14:	4605      	mov	r5, r0
 8011b16:	2301      	movs	r3, #1
 8011b18:	e7d7      	b.n	8011aca <__ssvfiscanf_r+0x1e6>
 8011b1a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b20:	9341      	str	r3, [sp, #260]	@ 0x104
 8011b22:	2300      	movs	r3, #0
 8011b24:	e7d1      	b.n	8011aca <__ssvfiscanf_r+0x1e6>
 8011b26:	2302      	movs	r3, #2
 8011b28:	e7cf      	b.n	8011aca <__ssvfiscanf_r+0x1e6>
 8011b2a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011b2c:	06c3      	lsls	r3, r0, #27
 8011b2e:	f53f aefe 	bmi.w	801192e <__ssvfiscanf_r+0x4a>
 8011b32:	9b00      	ldr	r3, [sp, #0]
 8011b34:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011b36:	1d19      	adds	r1, r3, #4
 8011b38:	9100      	str	r1, [sp, #0]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	07c0      	lsls	r0, r0, #31
 8011b3e:	bf4c      	ite	mi
 8011b40:	801a      	strhmi	r2, [r3, #0]
 8011b42:	601a      	strpl	r2, [r3, #0]
 8011b44:	e6f3      	b.n	801192e <__ssvfiscanf_r+0x4a>
 8011b46:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011b48:	4621      	mov	r1, r4
 8011b4a:	4630      	mov	r0, r6
 8011b4c:	4798      	blx	r3
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	d0bf      	beq.n	8011ad2 <__ssvfiscanf_r+0x1ee>
 8011b52:	e79f      	b.n	8011a94 <__ssvfiscanf_r+0x1b0>
 8011b54:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011b56:	3201      	adds	r2, #1
 8011b58:	9245      	str	r2, [sp, #276]	@ 0x114
 8011b5a:	6862      	ldr	r2, [r4, #4]
 8011b5c:	3a01      	subs	r2, #1
 8011b5e:	2a00      	cmp	r2, #0
 8011b60:	6062      	str	r2, [r4, #4]
 8011b62:	dd02      	ble.n	8011b6a <__ssvfiscanf_r+0x286>
 8011b64:	3301      	adds	r3, #1
 8011b66:	6023      	str	r3, [r4, #0]
 8011b68:	e7b6      	b.n	8011ad8 <__ssvfiscanf_r+0x1f4>
 8011b6a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011b6c:	4621      	mov	r1, r4
 8011b6e:	4630      	mov	r0, r6
 8011b70:	4798      	blx	r3
 8011b72:	2800      	cmp	r0, #0
 8011b74:	d0b0      	beq.n	8011ad8 <__ssvfiscanf_r+0x1f4>
 8011b76:	e78d      	b.n	8011a94 <__ssvfiscanf_r+0x1b0>
 8011b78:	2b04      	cmp	r3, #4
 8011b7a:	dc0f      	bgt.n	8011b9c <__ssvfiscanf_r+0x2b8>
 8011b7c:	466b      	mov	r3, sp
 8011b7e:	4622      	mov	r2, r4
 8011b80:	a941      	add	r1, sp, #260	@ 0x104
 8011b82:	4630      	mov	r0, r6
 8011b84:	f000 f9be 	bl	8011f04 <_scanf_i>
 8011b88:	e7b4      	b.n	8011af4 <__ssvfiscanf_r+0x210>
 8011b8a:	bf00      	nop
 8011b8c:	08011835 	.word	0x08011835
 8011b90:	080118ab 	.word	0x080118ab
 8011b94:	080131c9 	.word	0x080131c9
 8011b98:	080132cf 	.word	0x080132cf
 8011b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8011bc8 <__ssvfiscanf_r+0x2e4>)
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	f43f aec5 	beq.w	801192e <__ssvfiscanf_r+0x4a>
 8011ba4:	466b      	mov	r3, sp
 8011ba6:	4622      	mov	r2, r4
 8011ba8:	a941      	add	r1, sp, #260	@ 0x104
 8011baa:	4630      	mov	r0, r6
 8011bac:	f7fc fdca 	bl	800e744 <_scanf_float>
 8011bb0:	e7a0      	b.n	8011af4 <__ssvfiscanf_r+0x210>
 8011bb2:	89a3      	ldrh	r3, [r4, #12]
 8011bb4:	065b      	lsls	r3, r3, #25
 8011bb6:	f53f af71 	bmi.w	8011a9c <__ssvfiscanf_r+0x1b8>
 8011bba:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8011bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bc2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011bc4:	e7f9      	b.n	8011bba <__ssvfiscanf_r+0x2d6>
 8011bc6:	bf00      	nop
 8011bc8:	0800e745 	.word	0x0800e745

08011bcc <__sfputc_r>:
 8011bcc:	6893      	ldr	r3, [r2, #8]
 8011bce:	3b01      	subs	r3, #1
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	b410      	push	{r4}
 8011bd4:	6093      	str	r3, [r2, #8]
 8011bd6:	da08      	bge.n	8011bea <__sfputc_r+0x1e>
 8011bd8:	6994      	ldr	r4, [r2, #24]
 8011bda:	42a3      	cmp	r3, r4
 8011bdc:	db01      	blt.n	8011be2 <__sfputc_r+0x16>
 8011bde:	290a      	cmp	r1, #10
 8011be0:	d103      	bne.n	8011bea <__sfputc_r+0x1e>
 8011be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011be6:	f7fd b982 	b.w	800eeee <__swbuf_r>
 8011bea:	6813      	ldr	r3, [r2, #0]
 8011bec:	1c58      	adds	r0, r3, #1
 8011bee:	6010      	str	r0, [r2, #0]
 8011bf0:	7019      	strb	r1, [r3, #0]
 8011bf2:	4608      	mov	r0, r1
 8011bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bf8:	4770      	bx	lr

08011bfa <__sfputs_r>:
 8011bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bfc:	4606      	mov	r6, r0
 8011bfe:	460f      	mov	r7, r1
 8011c00:	4614      	mov	r4, r2
 8011c02:	18d5      	adds	r5, r2, r3
 8011c04:	42ac      	cmp	r4, r5
 8011c06:	d101      	bne.n	8011c0c <__sfputs_r+0x12>
 8011c08:	2000      	movs	r0, #0
 8011c0a:	e007      	b.n	8011c1c <__sfputs_r+0x22>
 8011c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c10:	463a      	mov	r2, r7
 8011c12:	4630      	mov	r0, r6
 8011c14:	f7ff ffda 	bl	8011bcc <__sfputc_r>
 8011c18:	1c43      	adds	r3, r0, #1
 8011c1a:	d1f3      	bne.n	8011c04 <__sfputs_r+0xa>
 8011c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011c20 <_vfiprintf_r>:
 8011c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c24:	460d      	mov	r5, r1
 8011c26:	b09d      	sub	sp, #116	@ 0x74
 8011c28:	4614      	mov	r4, r2
 8011c2a:	4698      	mov	r8, r3
 8011c2c:	4606      	mov	r6, r0
 8011c2e:	b118      	cbz	r0, 8011c38 <_vfiprintf_r+0x18>
 8011c30:	6a03      	ldr	r3, [r0, #32]
 8011c32:	b90b      	cbnz	r3, 8011c38 <_vfiprintf_r+0x18>
 8011c34:	f7fd f826 	bl	800ec84 <__sinit>
 8011c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c3a:	07d9      	lsls	r1, r3, #31
 8011c3c:	d405      	bmi.n	8011c4a <_vfiprintf_r+0x2a>
 8011c3e:	89ab      	ldrh	r3, [r5, #12]
 8011c40:	059a      	lsls	r2, r3, #22
 8011c42:	d402      	bmi.n	8011c4a <_vfiprintf_r+0x2a>
 8011c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c46:	f7fd fab8 	bl	800f1ba <__retarget_lock_acquire_recursive>
 8011c4a:	89ab      	ldrh	r3, [r5, #12]
 8011c4c:	071b      	lsls	r3, r3, #28
 8011c4e:	d501      	bpl.n	8011c54 <_vfiprintf_r+0x34>
 8011c50:	692b      	ldr	r3, [r5, #16]
 8011c52:	b99b      	cbnz	r3, 8011c7c <_vfiprintf_r+0x5c>
 8011c54:	4629      	mov	r1, r5
 8011c56:	4630      	mov	r0, r6
 8011c58:	f7fd f988 	bl	800ef6c <__swsetup_r>
 8011c5c:	b170      	cbz	r0, 8011c7c <_vfiprintf_r+0x5c>
 8011c5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c60:	07dc      	lsls	r4, r3, #31
 8011c62:	d504      	bpl.n	8011c6e <_vfiprintf_r+0x4e>
 8011c64:	f04f 30ff 	mov.w	r0, #4294967295
 8011c68:	b01d      	add	sp, #116	@ 0x74
 8011c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c6e:	89ab      	ldrh	r3, [r5, #12]
 8011c70:	0598      	lsls	r0, r3, #22
 8011c72:	d4f7      	bmi.n	8011c64 <_vfiprintf_r+0x44>
 8011c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c76:	f7fd faa1 	bl	800f1bc <__retarget_lock_release_recursive>
 8011c7a:	e7f3      	b.n	8011c64 <_vfiprintf_r+0x44>
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c80:	2320      	movs	r3, #32
 8011c82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c8a:	2330      	movs	r3, #48	@ 0x30
 8011c8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011e3c <_vfiprintf_r+0x21c>
 8011c90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011c94:	f04f 0901 	mov.w	r9, #1
 8011c98:	4623      	mov	r3, r4
 8011c9a:	469a      	mov	sl, r3
 8011c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ca0:	b10a      	cbz	r2, 8011ca6 <_vfiprintf_r+0x86>
 8011ca2:	2a25      	cmp	r2, #37	@ 0x25
 8011ca4:	d1f9      	bne.n	8011c9a <_vfiprintf_r+0x7a>
 8011ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8011caa:	d00b      	beq.n	8011cc4 <_vfiprintf_r+0xa4>
 8011cac:	465b      	mov	r3, fp
 8011cae:	4622      	mov	r2, r4
 8011cb0:	4629      	mov	r1, r5
 8011cb2:	4630      	mov	r0, r6
 8011cb4:	f7ff ffa1 	bl	8011bfa <__sfputs_r>
 8011cb8:	3001      	adds	r0, #1
 8011cba:	f000 80a7 	beq.w	8011e0c <_vfiprintf_r+0x1ec>
 8011cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011cc0:	445a      	add	r2, fp
 8011cc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8011cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	f000 809f 	beq.w	8011e0c <_vfiprintf_r+0x1ec>
 8011cce:	2300      	movs	r3, #0
 8011cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8011cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cd8:	f10a 0a01 	add.w	sl, sl, #1
 8011cdc:	9304      	str	r3, [sp, #16]
 8011cde:	9307      	str	r3, [sp, #28]
 8011ce0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ce4:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ce6:	4654      	mov	r4, sl
 8011ce8:	2205      	movs	r2, #5
 8011cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cee:	4853      	ldr	r0, [pc, #332]	@ (8011e3c <_vfiprintf_r+0x21c>)
 8011cf0:	f7ee faa6 	bl	8000240 <memchr>
 8011cf4:	9a04      	ldr	r2, [sp, #16]
 8011cf6:	b9d8      	cbnz	r0, 8011d30 <_vfiprintf_r+0x110>
 8011cf8:	06d1      	lsls	r1, r2, #27
 8011cfa:	bf44      	itt	mi
 8011cfc:	2320      	movmi	r3, #32
 8011cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d02:	0713      	lsls	r3, r2, #28
 8011d04:	bf44      	itt	mi
 8011d06:	232b      	movmi	r3, #43	@ 0x2b
 8011d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8011d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d12:	d015      	beq.n	8011d40 <_vfiprintf_r+0x120>
 8011d14:	9a07      	ldr	r2, [sp, #28]
 8011d16:	4654      	mov	r4, sl
 8011d18:	2000      	movs	r0, #0
 8011d1a:	f04f 0c0a 	mov.w	ip, #10
 8011d1e:	4621      	mov	r1, r4
 8011d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d24:	3b30      	subs	r3, #48	@ 0x30
 8011d26:	2b09      	cmp	r3, #9
 8011d28:	d94b      	bls.n	8011dc2 <_vfiprintf_r+0x1a2>
 8011d2a:	b1b0      	cbz	r0, 8011d5a <_vfiprintf_r+0x13a>
 8011d2c:	9207      	str	r2, [sp, #28]
 8011d2e:	e014      	b.n	8011d5a <_vfiprintf_r+0x13a>
 8011d30:	eba0 0308 	sub.w	r3, r0, r8
 8011d34:	fa09 f303 	lsl.w	r3, r9, r3
 8011d38:	4313      	orrs	r3, r2
 8011d3a:	9304      	str	r3, [sp, #16]
 8011d3c:	46a2      	mov	sl, r4
 8011d3e:	e7d2      	b.n	8011ce6 <_vfiprintf_r+0xc6>
 8011d40:	9b03      	ldr	r3, [sp, #12]
 8011d42:	1d19      	adds	r1, r3, #4
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	9103      	str	r1, [sp, #12]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	bfbb      	ittet	lt
 8011d4c:	425b      	neglt	r3, r3
 8011d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8011d52:	9307      	strge	r3, [sp, #28]
 8011d54:	9307      	strlt	r3, [sp, #28]
 8011d56:	bfb8      	it	lt
 8011d58:	9204      	strlt	r2, [sp, #16]
 8011d5a:	7823      	ldrb	r3, [r4, #0]
 8011d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d5e:	d10a      	bne.n	8011d76 <_vfiprintf_r+0x156>
 8011d60:	7863      	ldrb	r3, [r4, #1]
 8011d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d64:	d132      	bne.n	8011dcc <_vfiprintf_r+0x1ac>
 8011d66:	9b03      	ldr	r3, [sp, #12]
 8011d68:	1d1a      	adds	r2, r3, #4
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	9203      	str	r2, [sp, #12]
 8011d6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011d72:	3402      	adds	r4, #2
 8011d74:	9305      	str	r3, [sp, #20]
 8011d76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011e4c <_vfiprintf_r+0x22c>
 8011d7a:	7821      	ldrb	r1, [r4, #0]
 8011d7c:	2203      	movs	r2, #3
 8011d7e:	4650      	mov	r0, sl
 8011d80:	f7ee fa5e 	bl	8000240 <memchr>
 8011d84:	b138      	cbz	r0, 8011d96 <_vfiprintf_r+0x176>
 8011d86:	9b04      	ldr	r3, [sp, #16]
 8011d88:	eba0 000a 	sub.w	r0, r0, sl
 8011d8c:	2240      	movs	r2, #64	@ 0x40
 8011d8e:	4082      	lsls	r2, r0
 8011d90:	4313      	orrs	r3, r2
 8011d92:	3401      	adds	r4, #1
 8011d94:	9304      	str	r3, [sp, #16]
 8011d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d9a:	4829      	ldr	r0, [pc, #164]	@ (8011e40 <_vfiprintf_r+0x220>)
 8011d9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011da0:	2206      	movs	r2, #6
 8011da2:	f7ee fa4d 	bl	8000240 <memchr>
 8011da6:	2800      	cmp	r0, #0
 8011da8:	d03f      	beq.n	8011e2a <_vfiprintf_r+0x20a>
 8011daa:	4b26      	ldr	r3, [pc, #152]	@ (8011e44 <_vfiprintf_r+0x224>)
 8011dac:	bb1b      	cbnz	r3, 8011df6 <_vfiprintf_r+0x1d6>
 8011dae:	9b03      	ldr	r3, [sp, #12]
 8011db0:	3307      	adds	r3, #7
 8011db2:	f023 0307 	bic.w	r3, r3, #7
 8011db6:	3308      	adds	r3, #8
 8011db8:	9303      	str	r3, [sp, #12]
 8011dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dbc:	443b      	add	r3, r7
 8011dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011dc0:	e76a      	b.n	8011c98 <_vfiprintf_r+0x78>
 8011dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8011dc6:	460c      	mov	r4, r1
 8011dc8:	2001      	movs	r0, #1
 8011dca:	e7a8      	b.n	8011d1e <_vfiprintf_r+0xfe>
 8011dcc:	2300      	movs	r3, #0
 8011dce:	3401      	adds	r4, #1
 8011dd0:	9305      	str	r3, [sp, #20]
 8011dd2:	4619      	mov	r1, r3
 8011dd4:	f04f 0c0a 	mov.w	ip, #10
 8011dd8:	4620      	mov	r0, r4
 8011dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dde:	3a30      	subs	r2, #48	@ 0x30
 8011de0:	2a09      	cmp	r2, #9
 8011de2:	d903      	bls.n	8011dec <_vfiprintf_r+0x1cc>
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d0c6      	beq.n	8011d76 <_vfiprintf_r+0x156>
 8011de8:	9105      	str	r1, [sp, #20]
 8011dea:	e7c4      	b.n	8011d76 <_vfiprintf_r+0x156>
 8011dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8011df0:	4604      	mov	r4, r0
 8011df2:	2301      	movs	r3, #1
 8011df4:	e7f0      	b.n	8011dd8 <_vfiprintf_r+0x1b8>
 8011df6:	ab03      	add	r3, sp, #12
 8011df8:	9300      	str	r3, [sp, #0]
 8011dfa:	462a      	mov	r2, r5
 8011dfc:	4b12      	ldr	r3, [pc, #72]	@ (8011e48 <_vfiprintf_r+0x228>)
 8011dfe:	a904      	add	r1, sp, #16
 8011e00:	4630      	mov	r0, r6
 8011e02:	f7fc f8e7 	bl	800dfd4 <_printf_float>
 8011e06:	4607      	mov	r7, r0
 8011e08:	1c78      	adds	r0, r7, #1
 8011e0a:	d1d6      	bne.n	8011dba <_vfiprintf_r+0x19a>
 8011e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e0e:	07d9      	lsls	r1, r3, #31
 8011e10:	d405      	bmi.n	8011e1e <_vfiprintf_r+0x1fe>
 8011e12:	89ab      	ldrh	r3, [r5, #12]
 8011e14:	059a      	lsls	r2, r3, #22
 8011e16:	d402      	bmi.n	8011e1e <_vfiprintf_r+0x1fe>
 8011e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e1a:	f7fd f9cf 	bl	800f1bc <__retarget_lock_release_recursive>
 8011e1e:	89ab      	ldrh	r3, [r5, #12]
 8011e20:	065b      	lsls	r3, r3, #25
 8011e22:	f53f af1f 	bmi.w	8011c64 <_vfiprintf_r+0x44>
 8011e26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e28:	e71e      	b.n	8011c68 <_vfiprintf_r+0x48>
 8011e2a:	ab03      	add	r3, sp, #12
 8011e2c:	9300      	str	r3, [sp, #0]
 8011e2e:	462a      	mov	r2, r5
 8011e30:	4b05      	ldr	r3, [pc, #20]	@ (8011e48 <_vfiprintf_r+0x228>)
 8011e32:	a904      	add	r1, sp, #16
 8011e34:	4630      	mov	r0, r6
 8011e36:	f7fc fb65 	bl	800e504 <_printf_i>
 8011e3a:	e7e4      	b.n	8011e06 <_vfiprintf_r+0x1e6>
 8011e3c:	080132c9 	.word	0x080132c9
 8011e40:	080132d3 	.word	0x080132d3
 8011e44:	0800dfd5 	.word	0x0800dfd5
 8011e48:	08011bfb 	.word	0x08011bfb
 8011e4c:	080132cf 	.word	0x080132cf

08011e50 <_scanf_chars>:
 8011e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e54:	4615      	mov	r5, r2
 8011e56:	688a      	ldr	r2, [r1, #8]
 8011e58:	4680      	mov	r8, r0
 8011e5a:	460c      	mov	r4, r1
 8011e5c:	b932      	cbnz	r2, 8011e6c <_scanf_chars+0x1c>
 8011e5e:	698a      	ldr	r2, [r1, #24]
 8011e60:	2a00      	cmp	r2, #0
 8011e62:	bf14      	ite	ne
 8011e64:	f04f 32ff 	movne.w	r2, #4294967295
 8011e68:	2201      	moveq	r2, #1
 8011e6a:	608a      	str	r2, [r1, #8]
 8011e6c:	6822      	ldr	r2, [r4, #0]
 8011e6e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011f00 <_scanf_chars+0xb0>
 8011e72:	06d1      	lsls	r1, r2, #27
 8011e74:	bf5f      	itttt	pl
 8011e76:	681a      	ldrpl	r2, [r3, #0]
 8011e78:	1d11      	addpl	r1, r2, #4
 8011e7a:	6019      	strpl	r1, [r3, #0]
 8011e7c:	6816      	ldrpl	r6, [r2, #0]
 8011e7e:	2700      	movs	r7, #0
 8011e80:	69a0      	ldr	r0, [r4, #24]
 8011e82:	b188      	cbz	r0, 8011ea8 <_scanf_chars+0x58>
 8011e84:	2801      	cmp	r0, #1
 8011e86:	d107      	bne.n	8011e98 <_scanf_chars+0x48>
 8011e88:	682b      	ldr	r3, [r5, #0]
 8011e8a:	781a      	ldrb	r2, [r3, #0]
 8011e8c:	6963      	ldr	r3, [r4, #20]
 8011e8e:	5c9b      	ldrb	r3, [r3, r2]
 8011e90:	b953      	cbnz	r3, 8011ea8 <_scanf_chars+0x58>
 8011e92:	2f00      	cmp	r7, #0
 8011e94:	d031      	beq.n	8011efa <_scanf_chars+0xaa>
 8011e96:	e022      	b.n	8011ede <_scanf_chars+0x8e>
 8011e98:	2802      	cmp	r0, #2
 8011e9a:	d120      	bne.n	8011ede <_scanf_chars+0x8e>
 8011e9c:	682b      	ldr	r3, [r5, #0]
 8011e9e:	781b      	ldrb	r3, [r3, #0]
 8011ea0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011ea4:	071b      	lsls	r3, r3, #28
 8011ea6:	d41a      	bmi.n	8011ede <_scanf_chars+0x8e>
 8011ea8:	6823      	ldr	r3, [r4, #0]
 8011eaa:	06da      	lsls	r2, r3, #27
 8011eac:	bf5e      	ittt	pl
 8011eae:	682b      	ldrpl	r3, [r5, #0]
 8011eb0:	781b      	ldrbpl	r3, [r3, #0]
 8011eb2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011eb6:	682a      	ldr	r2, [r5, #0]
 8011eb8:	686b      	ldr	r3, [r5, #4]
 8011eba:	3201      	adds	r2, #1
 8011ebc:	602a      	str	r2, [r5, #0]
 8011ebe:	68a2      	ldr	r2, [r4, #8]
 8011ec0:	3b01      	subs	r3, #1
 8011ec2:	3a01      	subs	r2, #1
 8011ec4:	606b      	str	r3, [r5, #4]
 8011ec6:	3701      	adds	r7, #1
 8011ec8:	60a2      	str	r2, [r4, #8]
 8011eca:	b142      	cbz	r2, 8011ede <_scanf_chars+0x8e>
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	dcd7      	bgt.n	8011e80 <_scanf_chars+0x30>
 8011ed0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011ed4:	4629      	mov	r1, r5
 8011ed6:	4640      	mov	r0, r8
 8011ed8:	4798      	blx	r3
 8011eda:	2800      	cmp	r0, #0
 8011edc:	d0d0      	beq.n	8011e80 <_scanf_chars+0x30>
 8011ede:	6823      	ldr	r3, [r4, #0]
 8011ee0:	f013 0310 	ands.w	r3, r3, #16
 8011ee4:	d105      	bne.n	8011ef2 <_scanf_chars+0xa2>
 8011ee6:	68e2      	ldr	r2, [r4, #12]
 8011ee8:	3201      	adds	r2, #1
 8011eea:	60e2      	str	r2, [r4, #12]
 8011eec:	69a2      	ldr	r2, [r4, #24]
 8011eee:	b102      	cbz	r2, 8011ef2 <_scanf_chars+0xa2>
 8011ef0:	7033      	strb	r3, [r6, #0]
 8011ef2:	6923      	ldr	r3, [r4, #16]
 8011ef4:	443b      	add	r3, r7
 8011ef6:	6123      	str	r3, [r4, #16]
 8011ef8:	2000      	movs	r0, #0
 8011efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011efe:	bf00      	nop
 8011f00:	080131c9 	.word	0x080131c9

08011f04 <_scanf_i>:
 8011f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f08:	4698      	mov	r8, r3
 8011f0a:	4b74      	ldr	r3, [pc, #464]	@ (80120dc <_scanf_i+0x1d8>)
 8011f0c:	460c      	mov	r4, r1
 8011f0e:	4682      	mov	sl, r0
 8011f10:	4616      	mov	r6, r2
 8011f12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011f16:	b087      	sub	sp, #28
 8011f18:	ab03      	add	r3, sp, #12
 8011f1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011f1e:	4b70      	ldr	r3, [pc, #448]	@ (80120e0 <_scanf_i+0x1dc>)
 8011f20:	69a1      	ldr	r1, [r4, #24]
 8011f22:	4a70      	ldr	r2, [pc, #448]	@ (80120e4 <_scanf_i+0x1e0>)
 8011f24:	2903      	cmp	r1, #3
 8011f26:	bf08      	it	eq
 8011f28:	461a      	moveq	r2, r3
 8011f2a:	68a3      	ldr	r3, [r4, #8]
 8011f2c:	9201      	str	r2, [sp, #4]
 8011f2e:	1e5a      	subs	r2, r3, #1
 8011f30:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011f34:	bf88      	it	hi
 8011f36:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011f3a:	4627      	mov	r7, r4
 8011f3c:	bf82      	ittt	hi
 8011f3e:	eb03 0905 	addhi.w	r9, r3, r5
 8011f42:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011f46:	60a3      	strhi	r3, [r4, #8]
 8011f48:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011f4c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011f50:	bf98      	it	ls
 8011f52:	f04f 0900 	movls.w	r9, #0
 8011f56:	6023      	str	r3, [r4, #0]
 8011f58:	463d      	mov	r5, r7
 8011f5a:	f04f 0b00 	mov.w	fp, #0
 8011f5e:	6831      	ldr	r1, [r6, #0]
 8011f60:	ab03      	add	r3, sp, #12
 8011f62:	7809      	ldrb	r1, [r1, #0]
 8011f64:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011f68:	2202      	movs	r2, #2
 8011f6a:	f7ee f969 	bl	8000240 <memchr>
 8011f6e:	b328      	cbz	r0, 8011fbc <_scanf_i+0xb8>
 8011f70:	f1bb 0f01 	cmp.w	fp, #1
 8011f74:	d159      	bne.n	801202a <_scanf_i+0x126>
 8011f76:	6862      	ldr	r2, [r4, #4]
 8011f78:	b92a      	cbnz	r2, 8011f86 <_scanf_i+0x82>
 8011f7a:	6822      	ldr	r2, [r4, #0]
 8011f7c:	2108      	movs	r1, #8
 8011f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011f82:	6061      	str	r1, [r4, #4]
 8011f84:	6022      	str	r2, [r4, #0]
 8011f86:	6822      	ldr	r2, [r4, #0]
 8011f88:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8011f8c:	6022      	str	r2, [r4, #0]
 8011f8e:	68a2      	ldr	r2, [r4, #8]
 8011f90:	1e51      	subs	r1, r2, #1
 8011f92:	60a1      	str	r1, [r4, #8]
 8011f94:	b192      	cbz	r2, 8011fbc <_scanf_i+0xb8>
 8011f96:	6832      	ldr	r2, [r6, #0]
 8011f98:	1c51      	adds	r1, r2, #1
 8011f9a:	6031      	str	r1, [r6, #0]
 8011f9c:	7812      	ldrb	r2, [r2, #0]
 8011f9e:	f805 2b01 	strb.w	r2, [r5], #1
 8011fa2:	6872      	ldr	r2, [r6, #4]
 8011fa4:	3a01      	subs	r2, #1
 8011fa6:	2a00      	cmp	r2, #0
 8011fa8:	6072      	str	r2, [r6, #4]
 8011faa:	dc07      	bgt.n	8011fbc <_scanf_i+0xb8>
 8011fac:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011fb0:	4631      	mov	r1, r6
 8011fb2:	4650      	mov	r0, sl
 8011fb4:	4790      	blx	r2
 8011fb6:	2800      	cmp	r0, #0
 8011fb8:	f040 8085 	bne.w	80120c6 <_scanf_i+0x1c2>
 8011fbc:	f10b 0b01 	add.w	fp, fp, #1
 8011fc0:	f1bb 0f03 	cmp.w	fp, #3
 8011fc4:	d1cb      	bne.n	8011f5e <_scanf_i+0x5a>
 8011fc6:	6863      	ldr	r3, [r4, #4]
 8011fc8:	b90b      	cbnz	r3, 8011fce <_scanf_i+0xca>
 8011fca:	230a      	movs	r3, #10
 8011fcc:	6063      	str	r3, [r4, #4]
 8011fce:	6863      	ldr	r3, [r4, #4]
 8011fd0:	4945      	ldr	r1, [pc, #276]	@ (80120e8 <_scanf_i+0x1e4>)
 8011fd2:	6960      	ldr	r0, [r4, #20]
 8011fd4:	1ac9      	subs	r1, r1, r3
 8011fd6:	f000 f997 	bl	8012308 <__sccl>
 8011fda:	f04f 0b00 	mov.w	fp, #0
 8011fde:	68a3      	ldr	r3, [r4, #8]
 8011fe0:	6822      	ldr	r2, [r4, #0]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d03d      	beq.n	8012062 <_scanf_i+0x15e>
 8011fe6:	6831      	ldr	r1, [r6, #0]
 8011fe8:	6960      	ldr	r0, [r4, #20]
 8011fea:	f891 c000 	ldrb.w	ip, [r1]
 8011fee:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011ff2:	2800      	cmp	r0, #0
 8011ff4:	d035      	beq.n	8012062 <_scanf_i+0x15e>
 8011ff6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011ffa:	d124      	bne.n	8012046 <_scanf_i+0x142>
 8011ffc:	0510      	lsls	r0, r2, #20
 8011ffe:	d522      	bpl.n	8012046 <_scanf_i+0x142>
 8012000:	f10b 0b01 	add.w	fp, fp, #1
 8012004:	f1b9 0f00 	cmp.w	r9, #0
 8012008:	d003      	beq.n	8012012 <_scanf_i+0x10e>
 801200a:	3301      	adds	r3, #1
 801200c:	f109 39ff 	add.w	r9, r9, #4294967295
 8012010:	60a3      	str	r3, [r4, #8]
 8012012:	6873      	ldr	r3, [r6, #4]
 8012014:	3b01      	subs	r3, #1
 8012016:	2b00      	cmp	r3, #0
 8012018:	6073      	str	r3, [r6, #4]
 801201a:	dd1b      	ble.n	8012054 <_scanf_i+0x150>
 801201c:	6833      	ldr	r3, [r6, #0]
 801201e:	3301      	adds	r3, #1
 8012020:	6033      	str	r3, [r6, #0]
 8012022:	68a3      	ldr	r3, [r4, #8]
 8012024:	3b01      	subs	r3, #1
 8012026:	60a3      	str	r3, [r4, #8]
 8012028:	e7d9      	b.n	8011fde <_scanf_i+0xda>
 801202a:	f1bb 0f02 	cmp.w	fp, #2
 801202e:	d1ae      	bne.n	8011f8e <_scanf_i+0x8a>
 8012030:	6822      	ldr	r2, [r4, #0]
 8012032:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012036:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801203a:	d1bf      	bne.n	8011fbc <_scanf_i+0xb8>
 801203c:	2110      	movs	r1, #16
 801203e:	6061      	str	r1, [r4, #4]
 8012040:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012044:	e7a2      	b.n	8011f8c <_scanf_i+0x88>
 8012046:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801204a:	6022      	str	r2, [r4, #0]
 801204c:	780b      	ldrb	r3, [r1, #0]
 801204e:	f805 3b01 	strb.w	r3, [r5], #1
 8012052:	e7de      	b.n	8012012 <_scanf_i+0x10e>
 8012054:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012058:	4631      	mov	r1, r6
 801205a:	4650      	mov	r0, sl
 801205c:	4798      	blx	r3
 801205e:	2800      	cmp	r0, #0
 8012060:	d0df      	beq.n	8012022 <_scanf_i+0x11e>
 8012062:	6823      	ldr	r3, [r4, #0]
 8012064:	05d9      	lsls	r1, r3, #23
 8012066:	d50d      	bpl.n	8012084 <_scanf_i+0x180>
 8012068:	42bd      	cmp	r5, r7
 801206a:	d909      	bls.n	8012080 <_scanf_i+0x17c>
 801206c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012070:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012074:	4632      	mov	r2, r6
 8012076:	4650      	mov	r0, sl
 8012078:	4798      	blx	r3
 801207a:	f105 39ff 	add.w	r9, r5, #4294967295
 801207e:	464d      	mov	r5, r9
 8012080:	42bd      	cmp	r5, r7
 8012082:	d028      	beq.n	80120d6 <_scanf_i+0x1d2>
 8012084:	6822      	ldr	r2, [r4, #0]
 8012086:	f012 0210 	ands.w	r2, r2, #16
 801208a:	d113      	bne.n	80120b4 <_scanf_i+0x1b0>
 801208c:	702a      	strb	r2, [r5, #0]
 801208e:	6863      	ldr	r3, [r4, #4]
 8012090:	9e01      	ldr	r6, [sp, #4]
 8012092:	4639      	mov	r1, r7
 8012094:	4650      	mov	r0, sl
 8012096:	47b0      	blx	r6
 8012098:	f8d8 3000 	ldr.w	r3, [r8]
 801209c:	6821      	ldr	r1, [r4, #0]
 801209e:	1d1a      	adds	r2, r3, #4
 80120a0:	f8c8 2000 	str.w	r2, [r8]
 80120a4:	f011 0f20 	tst.w	r1, #32
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	d00f      	beq.n	80120cc <_scanf_i+0x1c8>
 80120ac:	6018      	str	r0, [r3, #0]
 80120ae:	68e3      	ldr	r3, [r4, #12]
 80120b0:	3301      	adds	r3, #1
 80120b2:	60e3      	str	r3, [r4, #12]
 80120b4:	6923      	ldr	r3, [r4, #16]
 80120b6:	1bed      	subs	r5, r5, r7
 80120b8:	445d      	add	r5, fp
 80120ba:	442b      	add	r3, r5
 80120bc:	6123      	str	r3, [r4, #16]
 80120be:	2000      	movs	r0, #0
 80120c0:	b007      	add	sp, #28
 80120c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120c6:	f04f 0b00 	mov.w	fp, #0
 80120ca:	e7ca      	b.n	8012062 <_scanf_i+0x15e>
 80120cc:	07ca      	lsls	r2, r1, #31
 80120ce:	bf4c      	ite	mi
 80120d0:	8018      	strhmi	r0, [r3, #0]
 80120d2:	6018      	strpl	r0, [r3, #0]
 80120d4:	e7eb      	b.n	80120ae <_scanf_i+0x1aa>
 80120d6:	2001      	movs	r0, #1
 80120d8:	e7f2      	b.n	80120c0 <_scanf_i+0x1bc>
 80120da:	bf00      	nop
 80120dc:	08012efc 	.word	0x08012efc
 80120e0:	08011581 	.word	0x08011581
 80120e4:	08012cd5 	.word	0x08012cd5
 80120e8:	080132ea 	.word	0x080132ea

080120ec <__sflush_r>:
 80120ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80120f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120f4:	0716      	lsls	r6, r2, #28
 80120f6:	4605      	mov	r5, r0
 80120f8:	460c      	mov	r4, r1
 80120fa:	d454      	bmi.n	80121a6 <__sflush_r+0xba>
 80120fc:	684b      	ldr	r3, [r1, #4]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	dc02      	bgt.n	8012108 <__sflush_r+0x1c>
 8012102:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012104:	2b00      	cmp	r3, #0
 8012106:	dd48      	ble.n	801219a <__sflush_r+0xae>
 8012108:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801210a:	2e00      	cmp	r6, #0
 801210c:	d045      	beq.n	801219a <__sflush_r+0xae>
 801210e:	2300      	movs	r3, #0
 8012110:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012114:	682f      	ldr	r7, [r5, #0]
 8012116:	6a21      	ldr	r1, [r4, #32]
 8012118:	602b      	str	r3, [r5, #0]
 801211a:	d030      	beq.n	801217e <__sflush_r+0x92>
 801211c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801211e:	89a3      	ldrh	r3, [r4, #12]
 8012120:	0759      	lsls	r1, r3, #29
 8012122:	d505      	bpl.n	8012130 <__sflush_r+0x44>
 8012124:	6863      	ldr	r3, [r4, #4]
 8012126:	1ad2      	subs	r2, r2, r3
 8012128:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801212a:	b10b      	cbz	r3, 8012130 <__sflush_r+0x44>
 801212c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801212e:	1ad2      	subs	r2, r2, r3
 8012130:	2300      	movs	r3, #0
 8012132:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012134:	6a21      	ldr	r1, [r4, #32]
 8012136:	4628      	mov	r0, r5
 8012138:	47b0      	blx	r6
 801213a:	1c43      	adds	r3, r0, #1
 801213c:	89a3      	ldrh	r3, [r4, #12]
 801213e:	d106      	bne.n	801214e <__sflush_r+0x62>
 8012140:	6829      	ldr	r1, [r5, #0]
 8012142:	291d      	cmp	r1, #29
 8012144:	d82b      	bhi.n	801219e <__sflush_r+0xb2>
 8012146:	4a2a      	ldr	r2, [pc, #168]	@ (80121f0 <__sflush_r+0x104>)
 8012148:	410a      	asrs	r2, r1
 801214a:	07d6      	lsls	r6, r2, #31
 801214c:	d427      	bmi.n	801219e <__sflush_r+0xb2>
 801214e:	2200      	movs	r2, #0
 8012150:	6062      	str	r2, [r4, #4]
 8012152:	04d9      	lsls	r1, r3, #19
 8012154:	6922      	ldr	r2, [r4, #16]
 8012156:	6022      	str	r2, [r4, #0]
 8012158:	d504      	bpl.n	8012164 <__sflush_r+0x78>
 801215a:	1c42      	adds	r2, r0, #1
 801215c:	d101      	bne.n	8012162 <__sflush_r+0x76>
 801215e:	682b      	ldr	r3, [r5, #0]
 8012160:	b903      	cbnz	r3, 8012164 <__sflush_r+0x78>
 8012162:	6560      	str	r0, [r4, #84]	@ 0x54
 8012164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012166:	602f      	str	r7, [r5, #0]
 8012168:	b1b9      	cbz	r1, 801219a <__sflush_r+0xae>
 801216a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801216e:	4299      	cmp	r1, r3
 8012170:	d002      	beq.n	8012178 <__sflush_r+0x8c>
 8012172:	4628      	mov	r0, r5
 8012174:	f7fd fe84 	bl	800fe80 <_free_r>
 8012178:	2300      	movs	r3, #0
 801217a:	6363      	str	r3, [r4, #52]	@ 0x34
 801217c:	e00d      	b.n	801219a <__sflush_r+0xae>
 801217e:	2301      	movs	r3, #1
 8012180:	4628      	mov	r0, r5
 8012182:	47b0      	blx	r6
 8012184:	4602      	mov	r2, r0
 8012186:	1c50      	adds	r0, r2, #1
 8012188:	d1c9      	bne.n	801211e <__sflush_r+0x32>
 801218a:	682b      	ldr	r3, [r5, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d0c6      	beq.n	801211e <__sflush_r+0x32>
 8012190:	2b1d      	cmp	r3, #29
 8012192:	d001      	beq.n	8012198 <__sflush_r+0xac>
 8012194:	2b16      	cmp	r3, #22
 8012196:	d11e      	bne.n	80121d6 <__sflush_r+0xea>
 8012198:	602f      	str	r7, [r5, #0]
 801219a:	2000      	movs	r0, #0
 801219c:	e022      	b.n	80121e4 <__sflush_r+0xf8>
 801219e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121a2:	b21b      	sxth	r3, r3
 80121a4:	e01b      	b.n	80121de <__sflush_r+0xf2>
 80121a6:	690f      	ldr	r7, [r1, #16]
 80121a8:	2f00      	cmp	r7, #0
 80121aa:	d0f6      	beq.n	801219a <__sflush_r+0xae>
 80121ac:	0793      	lsls	r3, r2, #30
 80121ae:	680e      	ldr	r6, [r1, #0]
 80121b0:	bf08      	it	eq
 80121b2:	694b      	ldreq	r3, [r1, #20]
 80121b4:	600f      	str	r7, [r1, #0]
 80121b6:	bf18      	it	ne
 80121b8:	2300      	movne	r3, #0
 80121ba:	eba6 0807 	sub.w	r8, r6, r7
 80121be:	608b      	str	r3, [r1, #8]
 80121c0:	f1b8 0f00 	cmp.w	r8, #0
 80121c4:	dde9      	ble.n	801219a <__sflush_r+0xae>
 80121c6:	6a21      	ldr	r1, [r4, #32]
 80121c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80121ca:	4643      	mov	r3, r8
 80121cc:	463a      	mov	r2, r7
 80121ce:	4628      	mov	r0, r5
 80121d0:	47b0      	blx	r6
 80121d2:	2800      	cmp	r0, #0
 80121d4:	dc08      	bgt.n	80121e8 <__sflush_r+0xfc>
 80121d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121de:	81a3      	strh	r3, [r4, #12]
 80121e0:	f04f 30ff 	mov.w	r0, #4294967295
 80121e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121e8:	4407      	add	r7, r0
 80121ea:	eba8 0800 	sub.w	r8, r8, r0
 80121ee:	e7e7      	b.n	80121c0 <__sflush_r+0xd4>
 80121f0:	dfbffffe 	.word	0xdfbffffe

080121f4 <_fflush_r>:
 80121f4:	b538      	push	{r3, r4, r5, lr}
 80121f6:	690b      	ldr	r3, [r1, #16]
 80121f8:	4605      	mov	r5, r0
 80121fa:	460c      	mov	r4, r1
 80121fc:	b913      	cbnz	r3, 8012204 <_fflush_r+0x10>
 80121fe:	2500      	movs	r5, #0
 8012200:	4628      	mov	r0, r5
 8012202:	bd38      	pop	{r3, r4, r5, pc}
 8012204:	b118      	cbz	r0, 801220e <_fflush_r+0x1a>
 8012206:	6a03      	ldr	r3, [r0, #32]
 8012208:	b90b      	cbnz	r3, 801220e <_fflush_r+0x1a>
 801220a:	f7fc fd3b 	bl	800ec84 <__sinit>
 801220e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d0f3      	beq.n	80121fe <_fflush_r+0xa>
 8012216:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012218:	07d0      	lsls	r0, r2, #31
 801221a:	d404      	bmi.n	8012226 <_fflush_r+0x32>
 801221c:	0599      	lsls	r1, r3, #22
 801221e:	d402      	bmi.n	8012226 <_fflush_r+0x32>
 8012220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012222:	f7fc ffca 	bl	800f1ba <__retarget_lock_acquire_recursive>
 8012226:	4628      	mov	r0, r5
 8012228:	4621      	mov	r1, r4
 801222a:	f7ff ff5f 	bl	80120ec <__sflush_r>
 801222e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012230:	07da      	lsls	r2, r3, #31
 8012232:	4605      	mov	r5, r0
 8012234:	d4e4      	bmi.n	8012200 <_fflush_r+0xc>
 8012236:	89a3      	ldrh	r3, [r4, #12]
 8012238:	059b      	lsls	r3, r3, #22
 801223a:	d4e1      	bmi.n	8012200 <_fflush_r+0xc>
 801223c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801223e:	f7fc ffbd 	bl	800f1bc <__retarget_lock_release_recursive>
 8012242:	e7dd      	b.n	8012200 <_fflush_r+0xc>

08012244 <__swhatbuf_r>:
 8012244:	b570      	push	{r4, r5, r6, lr}
 8012246:	460c      	mov	r4, r1
 8012248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801224c:	2900      	cmp	r1, #0
 801224e:	b096      	sub	sp, #88	@ 0x58
 8012250:	4615      	mov	r5, r2
 8012252:	461e      	mov	r6, r3
 8012254:	da0d      	bge.n	8012272 <__swhatbuf_r+0x2e>
 8012256:	89a3      	ldrh	r3, [r4, #12]
 8012258:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801225c:	f04f 0100 	mov.w	r1, #0
 8012260:	bf14      	ite	ne
 8012262:	2340      	movne	r3, #64	@ 0x40
 8012264:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012268:	2000      	movs	r0, #0
 801226a:	6031      	str	r1, [r6, #0]
 801226c:	602b      	str	r3, [r5, #0]
 801226e:	b016      	add	sp, #88	@ 0x58
 8012270:	bd70      	pop	{r4, r5, r6, pc}
 8012272:	466a      	mov	r2, sp
 8012274:	f000 f8e8 	bl	8012448 <_fstat_r>
 8012278:	2800      	cmp	r0, #0
 801227a:	dbec      	blt.n	8012256 <__swhatbuf_r+0x12>
 801227c:	9901      	ldr	r1, [sp, #4]
 801227e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012282:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012286:	4259      	negs	r1, r3
 8012288:	4159      	adcs	r1, r3
 801228a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801228e:	e7eb      	b.n	8012268 <__swhatbuf_r+0x24>

08012290 <__smakebuf_r>:
 8012290:	898b      	ldrh	r3, [r1, #12]
 8012292:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012294:	079d      	lsls	r5, r3, #30
 8012296:	4606      	mov	r6, r0
 8012298:	460c      	mov	r4, r1
 801229a:	d507      	bpl.n	80122ac <__smakebuf_r+0x1c>
 801229c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80122a0:	6023      	str	r3, [r4, #0]
 80122a2:	6123      	str	r3, [r4, #16]
 80122a4:	2301      	movs	r3, #1
 80122a6:	6163      	str	r3, [r4, #20]
 80122a8:	b003      	add	sp, #12
 80122aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122ac:	ab01      	add	r3, sp, #4
 80122ae:	466a      	mov	r2, sp
 80122b0:	f7ff ffc8 	bl	8012244 <__swhatbuf_r>
 80122b4:	9f00      	ldr	r7, [sp, #0]
 80122b6:	4605      	mov	r5, r0
 80122b8:	4639      	mov	r1, r7
 80122ba:	4630      	mov	r0, r6
 80122bc:	f7fb fd5e 	bl	800dd7c <_malloc_r>
 80122c0:	b948      	cbnz	r0, 80122d6 <__smakebuf_r+0x46>
 80122c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122c6:	059a      	lsls	r2, r3, #22
 80122c8:	d4ee      	bmi.n	80122a8 <__smakebuf_r+0x18>
 80122ca:	f023 0303 	bic.w	r3, r3, #3
 80122ce:	f043 0302 	orr.w	r3, r3, #2
 80122d2:	81a3      	strh	r3, [r4, #12]
 80122d4:	e7e2      	b.n	801229c <__smakebuf_r+0xc>
 80122d6:	89a3      	ldrh	r3, [r4, #12]
 80122d8:	6020      	str	r0, [r4, #0]
 80122da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80122de:	81a3      	strh	r3, [r4, #12]
 80122e0:	9b01      	ldr	r3, [sp, #4]
 80122e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80122e6:	b15b      	cbz	r3, 8012300 <__smakebuf_r+0x70>
 80122e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122ec:	4630      	mov	r0, r6
 80122ee:	f000 f8bd 	bl	801246c <_isatty_r>
 80122f2:	b128      	cbz	r0, 8012300 <__smakebuf_r+0x70>
 80122f4:	89a3      	ldrh	r3, [r4, #12]
 80122f6:	f023 0303 	bic.w	r3, r3, #3
 80122fa:	f043 0301 	orr.w	r3, r3, #1
 80122fe:	81a3      	strh	r3, [r4, #12]
 8012300:	89a3      	ldrh	r3, [r4, #12]
 8012302:	431d      	orrs	r5, r3
 8012304:	81a5      	strh	r5, [r4, #12]
 8012306:	e7cf      	b.n	80122a8 <__smakebuf_r+0x18>

08012308 <__sccl>:
 8012308:	b570      	push	{r4, r5, r6, lr}
 801230a:	780b      	ldrb	r3, [r1, #0]
 801230c:	4604      	mov	r4, r0
 801230e:	2b5e      	cmp	r3, #94	@ 0x5e
 8012310:	bf0b      	itete	eq
 8012312:	784b      	ldrbeq	r3, [r1, #1]
 8012314:	1c4a      	addne	r2, r1, #1
 8012316:	1c8a      	addeq	r2, r1, #2
 8012318:	2100      	movne	r1, #0
 801231a:	bf08      	it	eq
 801231c:	2101      	moveq	r1, #1
 801231e:	3801      	subs	r0, #1
 8012320:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012324:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012328:	42a8      	cmp	r0, r5
 801232a:	d1fb      	bne.n	8012324 <__sccl+0x1c>
 801232c:	b90b      	cbnz	r3, 8012332 <__sccl+0x2a>
 801232e:	1e50      	subs	r0, r2, #1
 8012330:	bd70      	pop	{r4, r5, r6, pc}
 8012332:	f081 0101 	eor.w	r1, r1, #1
 8012336:	54e1      	strb	r1, [r4, r3]
 8012338:	4610      	mov	r0, r2
 801233a:	4602      	mov	r2, r0
 801233c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012340:	2d2d      	cmp	r5, #45	@ 0x2d
 8012342:	d005      	beq.n	8012350 <__sccl+0x48>
 8012344:	2d5d      	cmp	r5, #93	@ 0x5d
 8012346:	d016      	beq.n	8012376 <__sccl+0x6e>
 8012348:	2d00      	cmp	r5, #0
 801234a:	d0f1      	beq.n	8012330 <__sccl+0x28>
 801234c:	462b      	mov	r3, r5
 801234e:	e7f2      	b.n	8012336 <__sccl+0x2e>
 8012350:	7846      	ldrb	r6, [r0, #1]
 8012352:	2e5d      	cmp	r6, #93	@ 0x5d
 8012354:	d0fa      	beq.n	801234c <__sccl+0x44>
 8012356:	42b3      	cmp	r3, r6
 8012358:	dcf8      	bgt.n	801234c <__sccl+0x44>
 801235a:	3002      	adds	r0, #2
 801235c:	461a      	mov	r2, r3
 801235e:	3201      	adds	r2, #1
 8012360:	4296      	cmp	r6, r2
 8012362:	54a1      	strb	r1, [r4, r2]
 8012364:	dcfb      	bgt.n	801235e <__sccl+0x56>
 8012366:	1af2      	subs	r2, r6, r3
 8012368:	3a01      	subs	r2, #1
 801236a:	1c5d      	adds	r5, r3, #1
 801236c:	42b3      	cmp	r3, r6
 801236e:	bfa8      	it	ge
 8012370:	2200      	movge	r2, #0
 8012372:	18ab      	adds	r3, r5, r2
 8012374:	e7e1      	b.n	801233a <__sccl+0x32>
 8012376:	4610      	mov	r0, r2
 8012378:	e7da      	b.n	8012330 <__sccl+0x28>

0801237a <__submore>:
 801237a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801237e:	460c      	mov	r4, r1
 8012380:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012382:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012386:	4299      	cmp	r1, r3
 8012388:	d11d      	bne.n	80123c6 <__submore+0x4c>
 801238a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801238e:	f7fb fcf5 	bl	800dd7c <_malloc_r>
 8012392:	b918      	cbnz	r0, 801239c <__submore+0x22>
 8012394:	f04f 30ff 	mov.w	r0, #4294967295
 8012398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801239c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80123a0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80123a2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80123a6:	6360      	str	r0, [r4, #52]	@ 0x34
 80123a8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80123ac:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80123b0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80123b4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80123b8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80123bc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80123c0:	6020      	str	r0, [r4, #0]
 80123c2:	2000      	movs	r0, #0
 80123c4:	e7e8      	b.n	8012398 <__submore+0x1e>
 80123c6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80123c8:	0077      	lsls	r7, r6, #1
 80123ca:	463a      	mov	r2, r7
 80123cc:	f000 fbe5 	bl	8012b9a <_realloc_r>
 80123d0:	4605      	mov	r5, r0
 80123d2:	2800      	cmp	r0, #0
 80123d4:	d0de      	beq.n	8012394 <__submore+0x1a>
 80123d6:	eb00 0806 	add.w	r8, r0, r6
 80123da:	4601      	mov	r1, r0
 80123dc:	4632      	mov	r2, r6
 80123de:	4640      	mov	r0, r8
 80123e0:	f7fc feed 	bl	800f1be <memcpy>
 80123e4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80123e8:	f8c4 8000 	str.w	r8, [r4]
 80123ec:	e7e9      	b.n	80123c2 <__submore+0x48>

080123ee <memmove>:
 80123ee:	4288      	cmp	r0, r1
 80123f0:	b510      	push	{r4, lr}
 80123f2:	eb01 0402 	add.w	r4, r1, r2
 80123f6:	d902      	bls.n	80123fe <memmove+0x10>
 80123f8:	4284      	cmp	r4, r0
 80123fa:	4623      	mov	r3, r4
 80123fc:	d807      	bhi.n	801240e <memmove+0x20>
 80123fe:	1e43      	subs	r3, r0, #1
 8012400:	42a1      	cmp	r1, r4
 8012402:	d008      	beq.n	8012416 <memmove+0x28>
 8012404:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012408:	f803 2f01 	strb.w	r2, [r3, #1]!
 801240c:	e7f8      	b.n	8012400 <memmove+0x12>
 801240e:	4402      	add	r2, r0
 8012410:	4601      	mov	r1, r0
 8012412:	428a      	cmp	r2, r1
 8012414:	d100      	bne.n	8012418 <memmove+0x2a>
 8012416:	bd10      	pop	{r4, pc}
 8012418:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801241c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012420:	e7f7      	b.n	8012412 <memmove+0x24>

08012422 <strncmp>:
 8012422:	b510      	push	{r4, lr}
 8012424:	b16a      	cbz	r2, 8012442 <strncmp+0x20>
 8012426:	3901      	subs	r1, #1
 8012428:	1884      	adds	r4, r0, r2
 801242a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801242e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012432:	429a      	cmp	r2, r3
 8012434:	d103      	bne.n	801243e <strncmp+0x1c>
 8012436:	42a0      	cmp	r0, r4
 8012438:	d001      	beq.n	801243e <strncmp+0x1c>
 801243a:	2a00      	cmp	r2, #0
 801243c:	d1f5      	bne.n	801242a <strncmp+0x8>
 801243e:	1ad0      	subs	r0, r2, r3
 8012440:	bd10      	pop	{r4, pc}
 8012442:	4610      	mov	r0, r2
 8012444:	e7fc      	b.n	8012440 <strncmp+0x1e>
	...

08012448 <_fstat_r>:
 8012448:	b538      	push	{r3, r4, r5, lr}
 801244a:	4d07      	ldr	r5, [pc, #28]	@ (8012468 <_fstat_r+0x20>)
 801244c:	2300      	movs	r3, #0
 801244e:	4604      	mov	r4, r0
 8012450:	4608      	mov	r0, r1
 8012452:	4611      	mov	r1, r2
 8012454:	602b      	str	r3, [r5, #0]
 8012456:	f7f1 fe21 	bl	800409c <_fstat>
 801245a:	1c43      	adds	r3, r0, #1
 801245c:	d102      	bne.n	8012464 <_fstat_r+0x1c>
 801245e:	682b      	ldr	r3, [r5, #0]
 8012460:	b103      	cbz	r3, 8012464 <_fstat_r+0x1c>
 8012462:	6023      	str	r3, [r4, #0]
 8012464:	bd38      	pop	{r3, r4, r5, pc}
 8012466:	bf00      	nop
 8012468:	2001e338 	.word	0x2001e338

0801246c <_isatty_r>:
 801246c:	b538      	push	{r3, r4, r5, lr}
 801246e:	4d06      	ldr	r5, [pc, #24]	@ (8012488 <_isatty_r+0x1c>)
 8012470:	2300      	movs	r3, #0
 8012472:	4604      	mov	r4, r0
 8012474:	4608      	mov	r0, r1
 8012476:	602b      	str	r3, [r5, #0]
 8012478:	f7f1 fe20 	bl	80040bc <_isatty>
 801247c:	1c43      	adds	r3, r0, #1
 801247e:	d102      	bne.n	8012486 <_isatty_r+0x1a>
 8012480:	682b      	ldr	r3, [r5, #0]
 8012482:	b103      	cbz	r3, 8012486 <_isatty_r+0x1a>
 8012484:	6023      	str	r3, [r4, #0]
 8012486:	bd38      	pop	{r3, r4, r5, pc}
 8012488:	2001e338 	.word	0x2001e338
 801248c:	00000000 	.word	0x00000000

08012490 <nan>:
 8012490:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012498 <nan+0x8>
 8012494:	4770      	bx	lr
 8012496:	bf00      	nop
 8012498:	00000000 	.word	0x00000000
 801249c:	7ff80000 	.word	0x7ff80000

080124a0 <__assert_func>:
 80124a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80124a2:	4614      	mov	r4, r2
 80124a4:	461a      	mov	r2, r3
 80124a6:	4b09      	ldr	r3, [pc, #36]	@ (80124cc <__assert_func+0x2c>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	4605      	mov	r5, r0
 80124ac:	68d8      	ldr	r0, [r3, #12]
 80124ae:	b954      	cbnz	r4, 80124c6 <__assert_func+0x26>
 80124b0:	4b07      	ldr	r3, [pc, #28]	@ (80124d0 <__assert_func+0x30>)
 80124b2:	461c      	mov	r4, r3
 80124b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80124b8:	9100      	str	r1, [sp, #0]
 80124ba:	462b      	mov	r3, r5
 80124bc:	4905      	ldr	r1, [pc, #20]	@ (80124d4 <__assert_func+0x34>)
 80124be:	f000 fc19 	bl	8012cf4 <fiprintf>
 80124c2:	f7fb fc21 	bl	800dd08 <abort>
 80124c6:	4b04      	ldr	r3, [pc, #16]	@ (80124d8 <__assert_func+0x38>)
 80124c8:	e7f4      	b.n	80124b4 <__assert_func+0x14>
 80124ca:	bf00      	nop
 80124cc:	20000018 	.word	0x20000018
 80124d0:	08013338 	.word	0x08013338
 80124d4:	0801330a 	.word	0x0801330a
 80124d8:	080132fd 	.word	0x080132fd

080124dc <_calloc_r>:
 80124dc:	b570      	push	{r4, r5, r6, lr}
 80124de:	fba1 5402 	umull	r5, r4, r1, r2
 80124e2:	b93c      	cbnz	r4, 80124f4 <_calloc_r+0x18>
 80124e4:	4629      	mov	r1, r5
 80124e6:	f7fb fc49 	bl	800dd7c <_malloc_r>
 80124ea:	4606      	mov	r6, r0
 80124ec:	b928      	cbnz	r0, 80124fa <_calloc_r+0x1e>
 80124ee:	2600      	movs	r6, #0
 80124f0:	4630      	mov	r0, r6
 80124f2:	bd70      	pop	{r4, r5, r6, pc}
 80124f4:	220c      	movs	r2, #12
 80124f6:	6002      	str	r2, [r0, #0]
 80124f8:	e7f9      	b.n	80124ee <_calloc_r+0x12>
 80124fa:	462a      	mov	r2, r5
 80124fc:	4621      	mov	r1, r4
 80124fe:	f7fc fd8b 	bl	800f018 <memset>
 8012502:	e7f5      	b.n	80124f0 <_calloc_r+0x14>

08012504 <rshift>:
 8012504:	6903      	ldr	r3, [r0, #16]
 8012506:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801250a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801250e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012512:	f100 0414 	add.w	r4, r0, #20
 8012516:	dd45      	ble.n	80125a4 <rshift+0xa0>
 8012518:	f011 011f 	ands.w	r1, r1, #31
 801251c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012520:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012524:	d10c      	bne.n	8012540 <rshift+0x3c>
 8012526:	f100 0710 	add.w	r7, r0, #16
 801252a:	4629      	mov	r1, r5
 801252c:	42b1      	cmp	r1, r6
 801252e:	d334      	bcc.n	801259a <rshift+0x96>
 8012530:	1a9b      	subs	r3, r3, r2
 8012532:	009b      	lsls	r3, r3, #2
 8012534:	1eea      	subs	r2, r5, #3
 8012536:	4296      	cmp	r6, r2
 8012538:	bf38      	it	cc
 801253a:	2300      	movcc	r3, #0
 801253c:	4423      	add	r3, r4
 801253e:	e015      	b.n	801256c <rshift+0x68>
 8012540:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012544:	f1c1 0820 	rsb	r8, r1, #32
 8012548:	40cf      	lsrs	r7, r1
 801254a:	f105 0e04 	add.w	lr, r5, #4
 801254e:	46a1      	mov	r9, r4
 8012550:	4576      	cmp	r6, lr
 8012552:	46f4      	mov	ip, lr
 8012554:	d815      	bhi.n	8012582 <rshift+0x7e>
 8012556:	1a9a      	subs	r2, r3, r2
 8012558:	0092      	lsls	r2, r2, #2
 801255a:	3a04      	subs	r2, #4
 801255c:	3501      	adds	r5, #1
 801255e:	42ae      	cmp	r6, r5
 8012560:	bf38      	it	cc
 8012562:	2200      	movcc	r2, #0
 8012564:	18a3      	adds	r3, r4, r2
 8012566:	50a7      	str	r7, [r4, r2]
 8012568:	b107      	cbz	r7, 801256c <rshift+0x68>
 801256a:	3304      	adds	r3, #4
 801256c:	1b1a      	subs	r2, r3, r4
 801256e:	42a3      	cmp	r3, r4
 8012570:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012574:	bf08      	it	eq
 8012576:	2300      	moveq	r3, #0
 8012578:	6102      	str	r2, [r0, #16]
 801257a:	bf08      	it	eq
 801257c:	6143      	streq	r3, [r0, #20]
 801257e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012582:	f8dc c000 	ldr.w	ip, [ip]
 8012586:	fa0c fc08 	lsl.w	ip, ip, r8
 801258a:	ea4c 0707 	orr.w	r7, ip, r7
 801258e:	f849 7b04 	str.w	r7, [r9], #4
 8012592:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012596:	40cf      	lsrs	r7, r1
 8012598:	e7da      	b.n	8012550 <rshift+0x4c>
 801259a:	f851 cb04 	ldr.w	ip, [r1], #4
 801259e:	f847 cf04 	str.w	ip, [r7, #4]!
 80125a2:	e7c3      	b.n	801252c <rshift+0x28>
 80125a4:	4623      	mov	r3, r4
 80125a6:	e7e1      	b.n	801256c <rshift+0x68>

080125a8 <__hexdig_fun>:
 80125a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80125ac:	2b09      	cmp	r3, #9
 80125ae:	d802      	bhi.n	80125b6 <__hexdig_fun+0xe>
 80125b0:	3820      	subs	r0, #32
 80125b2:	b2c0      	uxtb	r0, r0
 80125b4:	4770      	bx	lr
 80125b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80125ba:	2b05      	cmp	r3, #5
 80125bc:	d801      	bhi.n	80125c2 <__hexdig_fun+0x1a>
 80125be:	3847      	subs	r0, #71	@ 0x47
 80125c0:	e7f7      	b.n	80125b2 <__hexdig_fun+0xa>
 80125c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80125c6:	2b05      	cmp	r3, #5
 80125c8:	d801      	bhi.n	80125ce <__hexdig_fun+0x26>
 80125ca:	3827      	subs	r0, #39	@ 0x27
 80125cc:	e7f1      	b.n	80125b2 <__hexdig_fun+0xa>
 80125ce:	2000      	movs	r0, #0
 80125d0:	4770      	bx	lr
	...

080125d4 <__gethex>:
 80125d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125d8:	b085      	sub	sp, #20
 80125da:	468a      	mov	sl, r1
 80125dc:	9302      	str	r3, [sp, #8]
 80125de:	680b      	ldr	r3, [r1, #0]
 80125e0:	9001      	str	r0, [sp, #4]
 80125e2:	4690      	mov	r8, r2
 80125e4:	1c9c      	adds	r4, r3, #2
 80125e6:	46a1      	mov	r9, r4
 80125e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80125ec:	2830      	cmp	r0, #48	@ 0x30
 80125ee:	d0fa      	beq.n	80125e6 <__gethex+0x12>
 80125f0:	eba9 0303 	sub.w	r3, r9, r3
 80125f4:	f1a3 0b02 	sub.w	fp, r3, #2
 80125f8:	f7ff ffd6 	bl	80125a8 <__hexdig_fun>
 80125fc:	4605      	mov	r5, r0
 80125fe:	2800      	cmp	r0, #0
 8012600:	d168      	bne.n	80126d4 <__gethex+0x100>
 8012602:	49a0      	ldr	r1, [pc, #640]	@ (8012884 <__gethex+0x2b0>)
 8012604:	2201      	movs	r2, #1
 8012606:	4648      	mov	r0, r9
 8012608:	f7ff ff0b 	bl	8012422 <strncmp>
 801260c:	4607      	mov	r7, r0
 801260e:	2800      	cmp	r0, #0
 8012610:	d167      	bne.n	80126e2 <__gethex+0x10e>
 8012612:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012616:	4626      	mov	r6, r4
 8012618:	f7ff ffc6 	bl	80125a8 <__hexdig_fun>
 801261c:	2800      	cmp	r0, #0
 801261e:	d062      	beq.n	80126e6 <__gethex+0x112>
 8012620:	4623      	mov	r3, r4
 8012622:	7818      	ldrb	r0, [r3, #0]
 8012624:	2830      	cmp	r0, #48	@ 0x30
 8012626:	4699      	mov	r9, r3
 8012628:	f103 0301 	add.w	r3, r3, #1
 801262c:	d0f9      	beq.n	8012622 <__gethex+0x4e>
 801262e:	f7ff ffbb 	bl	80125a8 <__hexdig_fun>
 8012632:	fab0 f580 	clz	r5, r0
 8012636:	096d      	lsrs	r5, r5, #5
 8012638:	f04f 0b01 	mov.w	fp, #1
 801263c:	464a      	mov	r2, r9
 801263e:	4616      	mov	r6, r2
 8012640:	3201      	adds	r2, #1
 8012642:	7830      	ldrb	r0, [r6, #0]
 8012644:	f7ff ffb0 	bl	80125a8 <__hexdig_fun>
 8012648:	2800      	cmp	r0, #0
 801264a:	d1f8      	bne.n	801263e <__gethex+0x6a>
 801264c:	498d      	ldr	r1, [pc, #564]	@ (8012884 <__gethex+0x2b0>)
 801264e:	2201      	movs	r2, #1
 8012650:	4630      	mov	r0, r6
 8012652:	f7ff fee6 	bl	8012422 <strncmp>
 8012656:	2800      	cmp	r0, #0
 8012658:	d13f      	bne.n	80126da <__gethex+0x106>
 801265a:	b944      	cbnz	r4, 801266e <__gethex+0x9a>
 801265c:	1c74      	adds	r4, r6, #1
 801265e:	4622      	mov	r2, r4
 8012660:	4616      	mov	r6, r2
 8012662:	3201      	adds	r2, #1
 8012664:	7830      	ldrb	r0, [r6, #0]
 8012666:	f7ff ff9f 	bl	80125a8 <__hexdig_fun>
 801266a:	2800      	cmp	r0, #0
 801266c:	d1f8      	bne.n	8012660 <__gethex+0x8c>
 801266e:	1ba4      	subs	r4, r4, r6
 8012670:	00a7      	lsls	r7, r4, #2
 8012672:	7833      	ldrb	r3, [r6, #0]
 8012674:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012678:	2b50      	cmp	r3, #80	@ 0x50
 801267a:	d13e      	bne.n	80126fa <__gethex+0x126>
 801267c:	7873      	ldrb	r3, [r6, #1]
 801267e:	2b2b      	cmp	r3, #43	@ 0x2b
 8012680:	d033      	beq.n	80126ea <__gethex+0x116>
 8012682:	2b2d      	cmp	r3, #45	@ 0x2d
 8012684:	d034      	beq.n	80126f0 <__gethex+0x11c>
 8012686:	1c71      	adds	r1, r6, #1
 8012688:	2400      	movs	r4, #0
 801268a:	7808      	ldrb	r0, [r1, #0]
 801268c:	f7ff ff8c 	bl	80125a8 <__hexdig_fun>
 8012690:	1e43      	subs	r3, r0, #1
 8012692:	b2db      	uxtb	r3, r3
 8012694:	2b18      	cmp	r3, #24
 8012696:	d830      	bhi.n	80126fa <__gethex+0x126>
 8012698:	f1a0 0210 	sub.w	r2, r0, #16
 801269c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80126a0:	f7ff ff82 	bl	80125a8 <__hexdig_fun>
 80126a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80126a8:	fa5f fc8c 	uxtb.w	ip, ip
 80126ac:	f1bc 0f18 	cmp.w	ip, #24
 80126b0:	f04f 030a 	mov.w	r3, #10
 80126b4:	d91e      	bls.n	80126f4 <__gethex+0x120>
 80126b6:	b104      	cbz	r4, 80126ba <__gethex+0xe6>
 80126b8:	4252      	negs	r2, r2
 80126ba:	4417      	add	r7, r2
 80126bc:	f8ca 1000 	str.w	r1, [sl]
 80126c0:	b1ed      	cbz	r5, 80126fe <__gethex+0x12a>
 80126c2:	f1bb 0f00 	cmp.w	fp, #0
 80126c6:	bf0c      	ite	eq
 80126c8:	2506      	moveq	r5, #6
 80126ca:	2500      	movne	r5, #0
 80126cc:	4628      	mov	r0, r5
 80126ce:	b005      	add	sp, #20
 80126d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126d4:	2500      	movs	r5, #0
 80126d6:	462c      	mov	r4, r5
 80126d8:	e7b0      	b.n	801263c <__gethex+0x68>
 80126da:	2c00      	cmp	r4, #0
 80126dc:	d1c7      	bne.n	801266e <__gethex+0x9a>
 80126de:	4627      	mov	r7, r4
 80126e0:	e7c7      	b.n	8012672 <__gethex+0x9e>
 80126e2:	464e      	mov	r6, r9
 80126e4:	462f      	mov	r7, r5
 80126e6:	2501      	movs	r5, #1
 80126e8:	e7c3      	b.n	8012672 <__gethex+0x9e>
 80126ea:	2400      	movs	r4, #0
 80126ec:	1cb1      	adds	r1, r6, #2
 80126ee:	e7cc      	b.n	801268a <__gethex+0xb6>
 80126f0:	2401      	movs	r4, #1
 80126f2:	e7fb      	b.n	80126ec <__gethex+0x118>
 80126f4:	fb03 0002 	mla	r0, r3, r2, r0
 80126f8:	e7ce      	b.n	8012698 <__gethex+0xc4>
 80126fa:	4631      	mov	r1, r6
 80126fc:	e7de      	b.n	80126bc <__gethex+0xe8>
 80126fe:	eba6 0309 	sub.w	r3, r6, r9
 8012702:	3b01      	subs	r3, #1
 8012704:	4629      	mov	r1, r5
 8012706:	2b07      	cmp	r3, #7
 8012708:	dc0a      	bgt.n	8012720 <__gethex+0x14c>
 801270a:	9801      	ldr	r0, [sp, #4]
 801270c:	f7fd fc02 	bl	800ff14 <_Balloc>
 8012710:	4604      	mov	r4, r0
 8012712:	b940      	cbnz	r0, 8012726 <__gethex+0x152>
 8012714:	4b5c      	ldr	r3, [pc, #368]	@ (8012888 <__gethex+0x2b4>)
 8012716:	4602      	mov	r2, r0
 8012718:	21e4      	movs	r1, #228	@ 0xe4
 801271a:	485c      	ldr	r0, [pc, #368]	@ (801288c <__gethex+0x2b8>)
 801271c:	f7ff fec0 	bl	80124a0 <__assert_func>
 8012720:	3101      	adds	r1, #1
 8012722:	105b      	asrs	r3, r3, #1
 8012724:	e7ef      	b.n	8012706 <__gethex+0x132>
 8012726:	f100 0a14 	add.w	sl, r0, #20
 801272a:	2300      	movs	r3, #0
 801272c:	4655      	mov	r5, sl
 801272e:	469b      	mov	fp, r3
 8012730:	45b1      	cmp	r9, r6
 8012732:	d337      	bcc.n	80127a4 <__gethex+0x1d0>
 8012734:	f845 bb04 	str.w	fp, [r5], #4
 8012738:	eba5 050a 	sub.w	r5, r5, sl
 801273c:	10ad      	asrs	r5, r5, #2
 801273e:	6125      	str	r5, [r4, #16]
 8012740:	4658      	mov	r0, fp
 8012742:	f7fd fcd9 	bl	80100f8 <__hi0bits>
 8012746:	016d      	lsls	r5, r5, #5
 8012748:	f8d8 6000 	ldr.w	r6, [r8]
 801274c:	1a2d      	subs	r5, r5, r0
 801274e:	42b5      	cmp	r5, r6
 8012750:	dd54      	ble.n	80127fc <__gethex+0x228>
 8012752:	1bad      	subs	r5, r5, r6
 8012754:	4629      	mov	r1, r5
 8012756:	4620      	mov	r0, r4
 8012758:	f7fe f86d 	bl	8010836 <__any_on>
 801275c:	4681      	mov	r9, r0
 801275e:	b178      	cbz	r0, 8012780 <__gethex+0x1ac>
 8012760:	1e6b      	subs	r3, r5, #1
 8012762:	1159      	asrs	r1, r3, #5
 8012764:	f003 021f 	and.w	r2, r3, #31
 8012768:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801276c:	f04f 0901 	mov.w	r9, #1
 8012770:	fa09 f202 	lsl.w	r2, r9, r2
 8012774:	420a      	tst	r2, r1
 8012776:	d003      	beq.n	8012780 <__gethex+0x1ac>
 8012778:	454b      	cmp	r3, r9
 801277a:	dc36      	bgt.n	80127ea <__gethex+0x216>
 801277c:	f04f 0902 	mov.w	r9, #2
 8012780:	4629      	mov	r1, r5
 8012782:	4620      	mov	r0, r4
 8012784:	f7ff febe 	bl	8012504 <rshift>
 8012788:	442f      	add	r7, r5
 801278a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801278e:	42bb      	cmp	r3, r7
 8012790:	da42      	bge.n	8012818 <__gethex+0x244>
 8012792:	9801      	ldr	r0, [sp, #4]
 8012794:	4621      	mov	r1, r4
 8012796:	f7fd fbfd 	bl	800ff94 <_Bfree>
 801279a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801279c:	2300      	movs	r3, #0
 801279e:	6013      	str	r3, [r2, #0]
 80127a0:	25a3      	movs	r5, #163	@ 0xa3
 80127a2:	e793      	b.n	80126cc <__gethex+0xf8>
 80127a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80127a8:	2a2e      	cmp	r2, #46	@ 0x2e
 80127aa:	d012      	beq.n	80127d2 <__gethex+0x1fe>
 80127ac:	2b20      	cmp	r3, #32
 80127ae:	d104      	bne.n	80127ba <__gethex+0x1e6>
 80127b0:	f845 bb04 	str.w	fp, [r5], #4
 80127b4:	f04f 0b00 	mov.w	fp, #0
 80127b8:	465b      	mov	r3, fp
 80127ba:	7830      	ldrb	r0, [r6, #0]
 80127bc:	9303      	str	r3, [sp, #12]
 80127be:	f7ff fef3 	bl	80125a8 <__hexdig_fun>
 80127c2:	9b03      	ldr	r3, [sp, #12]
 80127c4:	f000 000f 	and.w	r0, r0, #15
 80127c8:	4098      	lsls	r0, r3
 80127ca:	ea4b 0b00 	orr.w	fp, fp, r0
 80127ce:	3304      	adds	r3, #4
 80127d0:	e7ae      	b.n	8012730 <__gethex+0x15c>
 80127d2:	45b1      	cmp	r9, r6
 80127d4:	d8ea      	bhi.n	80127ac <__gethex+0x1d8>
 80127d6:	492b      	ldr	r1, [pc, #172]	@ (8012884 <__gethex+0x2b0>)
 80127d8:	9303      	str	r3, [sp, #12]
 80127da:	2201      	movs	r2, #1
 80127dc:	4630      	mov	r0, r6
 80127de:	f7ff fe20 	bl	8012422 <strncmp>
 80127e2:	9b03      	ldr	r3, [sp, #12]
 80127e4:	2800      	cmp	r0, #0
 80127e6:	d1e1      	bne.n	80127ac <__gethex+0x1d8>
 80127e8:	e7a2      	b.n	8012730 <__gethex+0x15c>
 80127ea:	1ea9      	subs	r1, r5, #2
 80127ec:	4620      	mov	r0, r4
 80127ee:	f7fe f822 	bl	8010836 <__any_on>
 80127f2:	2800      	cmp	r0, #0
 80127f4:	d0c2      	beq.n	801277c <__gethex+0x1a8>
 80127f6:	f04f 0903 	mov.w	r9, #3
 80127fa:	e7c1      	b.n	8012780 <__gethex+0x1ac>
 80127fc:	da09      	bge.n	8012812 <__gethex+0x23e>
 80127fe:	1b75      	subs	r5, r6, r5
 8012800:	4621      	mov	r1, r4
 8012802:	9801      	ldr	r0, [sp, #4]
 8012804:	462a      	mov	r2, r5
 8012806:	f7fd fddd 	bl	80103c4 <__lshift>
 801280a:	1b7f      	subs	r7, r7, r5
 801280c:	4604      	mov	r4, r0
 801280e:	f100 0a14 	add.w	sl, r0, #20
 8012812:	f04f 0900 	mov.w	r9, #0
 8012816:	e7b8      	b.n	801278a <__gethex+0x1b6>
 8012818:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801281c:	42bd      	cmp	r5, r7
 801281e:	dd6f      	ble.n	8012900 <__gethex+0x32c>
 8012820:	1bed      	subs	r5, r5, r7
 8012822:	42ae      	cmp	r6, r5
 8012824:	dc34      	bgt.n	8012890 <__gethex+0x2bc>
 8012826:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801282a:	2b02      	cmp	r3, #2
 801282c:	d022      	beq.n	8012874 <__gethex+0x2a0>
 801282e:	2b03      	cmp	r3, #3
 8012830:	d024      	beq.n	801287c <__gethex+0x2a8>
 8012832:	2b01      	cmp	r3, #1
 8012834:	d115      	bne.n	8012862 <__gethex+0x28e>
 8012836:	42ae      	cmp	r6, r5
 8012838:	d113      	bne.n	8012862 <__gethex+0x28e>
 801283a:	2e01      	cmp	r6, #1
 801283c:	d10b      	bne.n	8012856 <__gethex+0x282>
 801283e:	9a02      	ldr	r2, [sp, #8]
 8012840:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012844:	6013      	str	r3, [r2, #0]
 8012846:	2301      	movs	r3, #1
 8012848:	6123      	str	r3, [r4, #16]
 801284a:	f8ca 3000 	str.w	r3, [sl]
 801284e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012850:	2562      	movs	r5, #98	@ 0x62
 8012852:	601c      	str	r4, [r3, #0]
 8012854:	e73a      	b.n	80126cc <__gethex+0xf8>
 8012856:	1e71      	subs	r1, r6, #1
 8012858:	4620      	mov	r0, r4
 801285a:	f7fd ffec 	bl	8010836 <__any_on>
 801285e:	2800      	cmp	r0, #0
 8012860:	d1ed      	bne.n	801283e <__gethex+0x26a>
 8012862:	9801      	ldr	r0, [sp, #4]
 8012864:	4621      	mov	r1, r4
 8012866:	f7fd fb95 	bl	800ff94 <_Bfree>
 801286a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801286c:	2300      	movs	r3, #0
 801286e:	6013      	str	r3, [r2, #0]
 8012870:	2550      	movs	r5, #80	@ 0x50
 8012872:	e72b      	b.n	80126cc <__gethex+0xf8>
 8012874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012876:	2b00      	cmp	r3, #0
 8012878:	d1f3      	bne.n	8012862 <__gethex+0x28e>
 801287a:	e7e0      	b.n	801283e <__gethex+0x26a>
 801287c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801287e:	2b00      	cmp	r3, #0
 8012880:	d1dd      	bne.n	801283e <__gethex+0x26a>
 8012882:	e7ee      	b.n	8012862 <__gethex+0x28e>
 8012884:	08013170 	.word	0x08013170
 8012888:	08013005 	.word	0x08013005
 801288c:	08013339 	.word	0x08013339
 8012890:	1e6f      	subs	r7, r5, #1
 8012892:	f1b9 0f00 	cmp.w	r9, #0
 8012896:	d130      	bne.n	80128fa <__gethex+0x326>
 8012898:	b127      	cbz	r7, 80128a4 <__gethex+0x2d0>
 801289a:	4639      	mov	r1, r7
 801289c:	4620      	mov	r0, r4
 801289e:	f7fd ffca 	bl	8010836 <__any_on>
 80128a2:	4681      	mov	r9, r0
 80128a4:	117a      	asrs	r2, r7, #5
 80128a6:	2301      	movs	r3, #1
 80128a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80128ac:	f007 071f 	and.w	r7, r7, #31
 80128b0:	40bb      	lsls	r3, r7
 80128b2:	4213      	tst	r3, r2
 80128b4:	4629      	mov	r1, r5
 80128b6:	4620      	mov	r0, r4
 80128b8:	bf18      	it	ne
 80128ba:	f049 0902 	orrne.w	r9, r9, #2
 80128be:	f7ff fe21 	bl	8012504 <rshift>
 80128c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80128c6:	1b76      	subs	r6, r6, r5
 80128c8:	2502      	movs	r5, #2
 80128ca:	f1b9 0f00 	cmp.w	r9, #0
 80128ce:	d047      	beq.n	8012960 <__gethex+0x38c>
 80128d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80128d4:	2b02      	cmp	r3, #2
 80128d6:	d015      	beq.n	8012904 <__gethex+0x330>
 80128d8:	2b03      	cmp	r3, #3
 80128da:	d017      	beq.n	801290c <__gethex+0x338>
 80128dc:	2b01      	cmp	r3, #1
 80128de:	d109      	bne.n	80128f4 <__gethex+0x320>
 80128e0:	f019 0f02 	tst.w	r9, #2
 80128e4:	d006      	beq.n	80128f4 <__gethex+0x320>
 80128e6:	f8da 3000 	ldr.w	r3, [sl]
 80128ea:	ea49 0903 	orr.w	r9, r9, r3
 80128ee:	f019 0f01 	tst.w	r9, #1
 80128f2:	d10e      	bne.n	8012912 <__gethex+0x33e>
 80128f4:	f045 0510 	orr.w	r5, r5, #16
 80128f8:	e032      	b.n	8012960 <__gethex+0x38c>
 80128fa:	f04f 0901 	mov.w	r9, #1
 80128fe:	e7d1      	b.n	80128a4 <__gethex+0x2d0>
 8012900:	2501      	movs	r5, #1
 8012902:	e7e2      	b.n	80128ca <__gethex+0x2f6>
 8012904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012906:	f1c3 0301 	rsb	r3, r3, #1
 801290a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801290c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801290e:	2b00      	cmp	r3, #0
 8012910:	d0f0      	beq.n	80128f4 <__gethex+0x320>
 8012912:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012916:	f104 0314 	add.w	r3, r4, #20
 801291a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801291e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012922:	f04f 0c00 	mov.w	ip, #0
 8012926:	4618      	mov	r0, r3
 8012928:	f853 2b04 	ldr.w	r2, [r3], #4
 801292c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012930:	d01b      	beq.n	801296a <__gethex+0x396>
 8012932:	3201      	adds	r2, #1
 8012934:	6002      	str	r2, [r0, #0]
 8012936:	2d02      	cmp	r5, #2
 8012938:	f104 0314 	add.w	r3, r4, #20
 801293c:	d13c      	bne.n	80129b8 <__gethex+0x3e4>
 801293e:	f8d8 2000 	ldr.w	r2, [r8]
 8012942:	3a01      	subs	r2, #1
 8012944:	42b2      	cmp	r2, r6
 8012946:	d109      	bne.n	801295c <__gethex+0x388>
 8012948:	1171      	asrs	r1, r6, #5
 801294a:	2201      	movs	r2, #1
 801294c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012950:	f006 061f 	and.w	r6, r6, #31
 8012954:	fa02 f606 	lsl.w	r6, r2, r6
 8012958:	421e      	tst	r6, r3
 801295a:	d13a      	bne.n	80129d2 <__gethex+0x3fe>
 801295c:	f045 0520 	orr.w	r5, r5, #32
 8012960:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012962:	601c      	str	r4, [r3, #0]
 8012964:	9b02      	ldr	r3, [sp, #8]
 8012966:	601f      	str	r7, [r3, #0]
 8012968:	e6b0      	b.n	80126cc <__gethex+0xf8>
 801296a:	4299      	cmp	r1, r3
 801296c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012970:	d8d9      	bhi.n	8012926 <__gethex+0x352>
 8012972:	68a3      	ldr	r3, [r4, #8]
 8012974:	459b      	cmp	fp, r3
 8012976:	db17      	blt.n	80129a8 <__gethex+0x3d4>
 8012978:	6861      	ldr	r1, [r4, #4]
 801297a:	9801      	ldr	r0, [sp, #4]
 801297c:	3101      	adds	r1, #1
 801297e:	f7fd fac9 	bl	800ff14 <_Balloc>
 8012982:	4681      	mov	r9, r0
 8012984:	b918      	cbnz	r0, 801298e <__gethex+0x3ba>
 8012986:	4b1a      	ldr	r3, [pc, #104]	@ (80129f0 <__gethex+0x41c>)
 8012988:	4602      	mov	r2, r0
 801298a:	2184      	movs	r1, #132	@ 0x84
 801298c:	e6c5      	b.n	801271a <__gethex+0x146>
 801298e:	6922      	ldr	r2, [r4, #16]
 8012990:	3202      	adds	r2, #2
 8012992:	f104 010c 	add.w	r1, r4, #12
 8012996:	0092      	lsls	r2, r2, #2
 8012998:	300c      	adds	r0, #12
 801299a:	f7fc fc10 	bl	800f1be <memcpy>
 801299e:	4621      	mov	r1, r4
 80129a0:	9801      	ldr	r0, [sp, #4]
 80129a2:	f7fd faf7 	bl	800ff94 <_Bfree>
 80129a6:	464c      	mov	r4, r9
 80129a8:	6923      	ldr	r3, [r4, #16]
 80129aa:	1c5a      	adds	r2, r3, #1
 80129ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80129b0:	6122      	str	r2, [r4, #16]
 80129b2:	2201      	movs	r2, #1
 80129b4:	615a      	str	r2, [r3, #20]
 80129b6:	e7be      	b.n	8012936 <__gethex+0x362>
 80129b8:	6922      	ldr	r2, [r4, #16]
 80129ba:	455a      	cmp	r2, fp
 80129bc:	dd0b      	ble.n	80129d6 <__gethex+0x402>
 80129be:	2101      	movs	r1, #1
 80129c0:	4620      	mov	r0, r4
 80129c2:	f7ff fd9f 	bl	8012504 <rshift>
 80129c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80129ca:	3701      	adds	r7, #1
 80129cc:	42bb      	cmp	r3, r7
 80129ce:	f6ff aee0 	blt.w	8012792 <__gethex+0x1be>
 80129d2:	2501      	movs	r5, #1
 80129d4:	e7c2      	b.n	801295c <__gethex+0x388>
 80129d6:	f016 061f 	ands.w	r6, r6, #31
 80129da:	d0fa      	beq.n	80129d2 <__gethex+0x3fe>
 80129dc:	4453      	add	r3, sl
 80129de:	f1c6 0620 	rsb	r6, r6, #32
 80129e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80129e6:	f7fd fb87 	bl	80100f8 <__hi0bits>
 80129ea:	42b0      	cmp	r0, r6
 80129ec:	dbe7      	blt.n	80129be <__gethex+0x3ea>
 80129ee:	e7f0      	b.n	80129d2 <__gethex+0x3fe>
 80129f0:	08013005 	.word	0x08013005

080129f4 <L_shift>:
 80129f4:	f1c2 0208 	rsb	r2, r2, #8
 80129f8:	0092      	lsls	r2, r2, #2
 80129fa:	b570      	push	{r4, r5, r6, lr}
 80129fc:	f1c2 0620 	rsb	r6, r2, #32
 8012a00:	6843      	ldr	r3, [r0, #4]
 8012a02:	6804      	ldr	r4, [r0, #0]
 8012a04:	fa03 f506 	lsl.w	r5, r3, r6
 8012a08:	432c      	orrs	r4, r5
 8012a0a:	40d3      	lsrs	r3, r2
 8012a0c:	6004      	str	r4, [r0, #0]
 8012a0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012a12:	4288      	cmp	r0, r1
 8012a14:	d3f4      	bcc.n	8012a00 <L_shift+0xc>
 8012a16:	bd70      	pop	{r4, r5, r6, pc}

08012a18 <__match>:
 8012a18:	b530      	push	{r4, r5, lr}
 8012a1a:	6803      	ldr	r3, [r0, #0]
 8012a1c:	3301      	adds	r3, #1
 8012a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a22:	b914      	cbnz	r4, 8012a2a <__match+0x12>
 8012a24:	6003      	str	r3, [r0, #0]
 8012a26:	2001      	movs	r0, #1
 8012a28:	bd30      	pop	{r4, r5, pc}
 8012a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a2e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012a32:	2d19      	cmp	r5, #25
 8012a34:	bf98      	it	ls
 8012a36:	3220      	addls	r2, #32
 8012a38:	42a2      	cmp	r2, r4
 8012a3a:	d0f0      	beq.n	8012a1e <__match+0x6>
 8012a3c:	2000      	movs	r0, #0
 8012a3e:	e7f3      	b.n	8012a28 <__match+0x10>

08012a40 <__hexnan>:
 8012a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a44:	680b      	ldr	r3, [r1, #0]
 8012a46:	6801      	ldr	r1, [r0, #0]
 8012a48:	115e      	asrs	r6, r3, #5
 8012a4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012a4e:	f013 031f 	ands.w	r3, r3, #31
 8012a52:	b087      	sub	sp, #28
 8012a54:	bf18      	it	ne
 8012a56:	3604      	addne	r6, #4
 8012a58:	2500      	movs	r5, #0
 8012a5a:	1f37      	subs	r7, r6, #4
 8012a5c:	4682      	mov	sl, r0
 8012a5e:	4690      	mov	r8, r2
 8012a60:	9301      	str	r3, [sp, #4]
 8012a62:	f846 5c04 	str.w	r5, [r6, #-4]
 8012a66:	46b9      	mov	r9, r7
 8012a68:	463c      	mov	r4, r7
 8012a6a:	9502      	str	r5, [sp, #8]
 8012a6c:	46ab      	mov	fp, r5
 8012a6e:	784a      	ldrb	r2, [r1, #1]
 8012a70:	1c4b      	adds	r3, r1, #1
 8012a72:	9303      	str	r3, [sp, #12]
 8012a74:	b342      	cbz	r2, 8012ac8 <__hexnan+0x88>
 8012a76:	4610      	mov	r0, r2
 8012a78:	9105      	str	r1, [sp, #20]
 8012a7a:	9204      	str	r2, [sp, #16]
 8012a7c:	f7ff fd94 	bl	80125a8 <__hexdig_fun>
 8012a80:	2800      	cmp	r0, #0
 8012a82:	d151      	bne.n	8012b28 <__hexnan+0xe8>
 8012a84:	9a04      	ldr	r2, [sp, #16]
 8012a86:	9905      	ldr	r1, [sp, #20]
 8012a88:	2a20      	cmp	r2, #32
 8012a8a:	d818      	bhi.n	8012abe <__hexnan+0x7e>
 8012a8c:	9b02      	ldr	r3, [sp, #8]
 8012a8e:	459b      	cmp	fp, r3
 8012a90:	dd13      	ble.n	8012aba <__hexnan+0x7a>
 8012a92:	454c      	cmp	r4, r9
 8012a94:	d206      	bcs.n	8012aa4 <__hexnan+0x64>
 8012a96:	2d07      	cmp	r5, #7
 8012a98:	dc04      	bgt.n	8012aa4 <__hexnan+0x64>
 8012a9a:	462a      	mov	r2, r5
 8012a9c:	4649      	mov	r1, r9
 8012a9e:	4620      	mov	r0, r4
 8012aa0:	f7ff ffa8 	bl	80129f4 <L_shift>
 8012aa4:	4544      	cmp	r4, r8
 8012aa6:	d952      	bls.n	8012b4e <__hexnan+0x10e>
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	f1a4 0904 	sub.w	r9, r4, #4
 8012aae:	f844 3c04 	str.w	r3, [r4, #-4]
 8012ab2:	f8cd b008 	str.w	fp, [sp, #8]
 8012ab6:	464c      	mov	r4, r9
 8012ab8:	461d      	mov	r5, r3
 8012aba:	9903      	ldr	r1, [sp, #12]
 8012abc:	e7d7      	b.n	8012a6e <__hexnan+0x2e>
 8012abe:	2a29      	cmp	r2, #41	@ 0x29
 8012ac0:	d157      	bne.n	8012b72 <__hexnan+0x132>
 8012ac2:	3102      	adds	r1, #2
 8012ac4:	f8ca 1000 	str.w	r1, [sl]
 8012ac8:	f1bb 0f00 	cmp.w	fp, #0
 8012acc:	d051      	beq.n	8012b72 <__hexnan+0x132>
 8012ace:	454c      	cmp	r4, r9
 8012ad0:	d206      	bcs.n	8012ae0 <__hexnan+0xa0>
 8012ad2:	2d07      	cmp	r5, #7
 8012ad4:	dc04      	bgt.n	8012ae0 <__hexnan+0xa0>
 8012ad6:	462a      	mov	r2, r5
 8012ad8:	4649      	mov	r1, r9
 8012ada:	4620      	mov	r0, r4
 8012adc:	f7ff ff8a 	bl	80129f4 <L_shift>
 8012ae0:	4544      	cmp	r4, r8
 8012ae2:	d936      	bls.n	8012b52 <__hexnan+0x112>
 8012ae4:	f1a8 0204 	sub.w	r2, r8, #4
 8012ae8:	4623      	mov	r3, r4
 8012aea:	f853 1b04 	ldr.w	r1, [r3], #4
 8012aee:	f842 1f04 	str.w	r1, [r2, #4]!
 8012af2:	429f      	cmp	r7, r3
 8012af4:	d2f9      	bcs.n	8012aea <__hexnan+0xaa>
 8012af6:	1b3b      	subs	r3, r7, r4
 8012af8:	f023 0303 	bic.w	r3, r3, #3
 8012afc:	3304      	adds	r3, #4
 8012afe:	3401      	adds	r4, #1
 8012b00:	3e03      	subs	r6, #3
 8012b02:	42b4      	cmp	r4, r6
 8012b04:	bf88      	it	hi
 8012b06:	2304      	movhi	r3, #4
 8012b08:	4443      	add	r3, r8
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	f843 2b04 	str.w	r2, [r3], #4
 8012b10:	429f      	cmp	r7, r3
 8012b12:	d2fb      	bcs.n	8012b0c <__hexnan+0xcc>
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	b91b      	cbnz	r3, 8012b20 <__hexnan+0xe0>
 8012b18:	4547      	cmp	r7, r8
 8012b1a:	d128      	bne.n	8012b6e <__hexnan+0x12e>
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	603b      	str	r3, [r7, #0]
 8012b20:	2005      	movs	r0, #5
 8012b22:	b007      	add	sp, #28
 8012b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b28:	3501      	adds	r5, #1
 8012b2a:	2d08      	cmp	r5, #8
 8012b2c:	f10b 0b01 	add.w	fp, fp, #1
 8012b30:	dd06      	ble.n	8012b40 <__hexnan+0x100>
 8012b32:	4544      	cmp	r4, r8
 8012b34:	d9c1      	bls.n	8012aba <__hexnan+0x7a>
 8012b36:	2300      	movs	r3, #0
 8012b38:	f844 3c04 	str.w	r3, [r4, #-4]
 8012b3c:	2501      	movs	r5, #1
 8012b3e:	3c04      	subs	r4, #4
 8012b40:	6822      	ldr	r2, [r4, #0]
 8012b42:	f000 000f 	and.w	r0, r0, #15
 8012b46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012b4a:	6020      	str	r0, [r4, #0]
 8012b4c:	e7b5      	b.n	8012aba <__hexnan+0x7a>
 8012b4e:	2508      	movs	r5, #8
 8012b50:	e7b3      	b.n	8012aba <__hexnan+0x7a>
 8012b52:	9b01      	ldr	r3, [sp, #4]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d0dd      	beq.n	8012b14 <__hexnan+0xd4>
 8012b58:	f1c3 0320 	rsb	r3, r3, #32
 8012b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8012b60:	40da      	lsrs	r2, r3
 8012b62:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012b66:	4013      	ands	r3, r2
 8012b68:	f846 3c04 	str.w	r3, [r6, #-4]
 8012b6c:	e7d2      	b.n	8012b14 <__hexnan+0xd4>
 8012b6e:	3f04      	subs	r7, #4
 8012b70:	e7d0      	b.n	8012b14 <__hexnan+0xd4>
 8012b72:	2004      	movs	r0, #4
 8012b74:	e7d5      	b.n	8012b22 <__hexnan+0xe2>

08012b76 <__ascii_mbtowc>:
 8012b76:	b082      	sub	sp, #8
 8012b78:	b901      	cbnz	r1, 8012b7c <__ascii_mbtowc+0x6>
 8012b7a:	a901      	add	r1, sp, #4
 8012b7c:	b142      	cbz	r2, 8012b90 <__ascii_mbtowc+0x1a>
 8012b7e:	b14b      	cbz	r3, 8012b94 <__ascii_mbtowc+0x1e>
 8012b80:	7813      	ldrb	r3, [r2, #0]
 8012b82:	600b      	str	r3, [r1, #0]
 8012b84:	7812      	ldrb	r2, [r2, #0]
 8012b86:	1e10      	subs	r0, r2, #0
 8012b88:	bf18      	it	ne
 8012b8a:	2001      	movne	r0, #1
 8012b8c:	b002      	add	sp, #8
 8012b8e:	4770      	bx	lr
 8012b90:	4610      	mov	r0, r2
 8012b92:	e7fb      	b.n	8012b8c <__ascii_mbtowc+0x16>
 8012b94:	f06f 0001 	mvn.w	r0, #1
 8012b98:	e7f8      	b.n	8012b8c <__ascii_mbtowc+0x16>

08012b9a <_realloc_r>:
 8012b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b9e:	4680      	mov	r8, r0
 8012ba0:	4615      	mov	r5, r2
 8012ba2:	460c      	mov	r4, r1
 8012ba4:	b921      	cbnz	r1, 8012bb0 <_realloc_r+0x16>
 8012ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012baa:	4611      	mov	r1, r2
 8012bac:	f7fb b8e6 	b.w	800dd7c <_malloc_r>
 8012bb0:	b92a      	cbnz	r2, 8012bbe <_realloc_r+0x24>
 8012bb2:	f7fd f965 	bl	800fe80 <_free_r>
 8012bb6:	2400      	movs	r4, #0
 8012bb8:	4620      	mov	r0, r4
 8012bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bbe:	f000 f8ab 	bl	8012d18 <_malloc_usable_size_r>
 8012bc2:	4285      	cmp	r5, r0
 8012bc4:	4606      	mov	r6, r0
 8012bc6:	d802      	bhi.n	8012bce <_realloc_r+0x34>
 8012bc8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012bcc:	d8f4      	bhi.n	8012bb8 <_realloc_r+0x1e>
 8012bce:	4629      	mov	r1, r5
 8012bd0:	4640      	mov	r0, r8
 8012bd2:	f7fb f8d3 	bl	800dd7c <_malloc_r>
 8012bd6:	4607      	mov	r7, r0
 8012bd8:	2800      	cmp	r0, #0
 8012bda:	d0ec      	beq.n	8012bb6 <_realloc_r+0x1c>
 8012bdc:	42b5      	cmp	r5, r6
 8012bde:	462a      	mov	r2, r5
 8012be0:	4621      	mov	r1, r4
 8012be2:	bf28      	it	cs
 8012be4:	4632      	movcs	r2, r6
 8012be6:	f7fc faea 	bl	800f1be <memcpy>
 8012bea:	4621      	mov	r1, r4
 8012bec:	4640      	mov	r0, r8
 8012bee:	f7fd f947 	bl	800fe80 <_free_r>
 8012bf2:	463c      	mov	r4, r7
 8012bf4:	e7e0      	b.n	8012bb8 <_realloc_r+0x1e>
	...

08012bf8 <_strtoul_l.constprop.0>:
 8012bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bfc:	4e34      	ldr	r6, [pc, #208]	@ (8012cd0 <_strtoul_l.constprop.0+0xd8>)
 8012bfe:	4686      	mov	lr, r0
 8012c00:	460d      	mov	r5, r1
 8012c02:	4628      	mov	r0, r5
 8012c04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012c08:	5d37      	ldrb	r7, [r6, r4]
 8012c0a:	f017 0708 	ands.w	r7, r7, #8
 8012c0e:	d1f8      	bne.n	8012c02 <_strtoul_l.constprop.0+0xa>
 8012c10:	2c2d      	cmp	r4, #45	@ 0x2d
 8012c12:	d12f      	bne.n	8012c74 <_strtoul_l.constprop.0+0x7c>
 8012c14:	782c      	ldrb	r4, [r5, #0]
 8012c16:	2701      	movs	r7, #1
 8012c18:	1c85      	adds	r5, r0, #2
 8012c1a:	f033 0010 	bics.w	r0, r3, #16
 8012c1e:	d109      	bne.n	8012c34 <_strtoul_l.constprop.0+0x3c>
 8012c20:	2c30      	cmp	r4, #48	@ 0x30
 8012c22:	d12c      	bne.n	8012c7e <_strtoul_l.constprop.0+0x86>
 8012c24:	7828      	ldrb	r0, [r5, #0]
 8012c26:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012c2a:	2858      	cmp	r0, #88	@ 0x58
 8012c2c:	d127      	bne.n	8012c7e <_strtoul_l.constprop.0+0x86>
 8012c2e:	786c      	ldrb	r4, [r5, #1]
 8012c30:	2310      	movs	r3, #16
 8012c32:	3502      	adds	r5, #2
 8012c34:	f04f 38ff 	mov.w	r8, #4294967295
 8012c38:	2600      	movs	r6, #0
 8012c3a:	fbb8 f8f3 	udiv	r8, r8, r3
 8012c3e:	fb03 f908 	mul.w	r9, r3, r8
 8012c42:	ea6f 0909 	mvn.w	r9, r9
 8012c46:	4630      	mov	r0, r6
 8012c48:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012c4c:	f1bc 0f09 	cmp.w	ip, #9
 8012c50:	d81c      	bhi.n	8012c8c <_strtoul_l.constprop.0+0x94>
 8012c52:	4664      	mov	r4, ip
 8012c54:	42a3      	cmp	r3, r4
 8012c56:	dd2a      	ble.n	8012cae <_strtoul_l.constprop.0+0xb6>
 8012c58:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012c5c:	d007      	beq.n	8012c6e <_strtoul_l.constprop.0+0x76>
 8012c5e:	4580      	cmp	r8, r0
 8012c60:	d322      	bcc.n	8012ca8 <_strtoul_l.constprop.0+0xb0>
 8012c62:	d101      	bne.n	8012c68 <_strtoul_l.constprop.0+0x70>
 8012c64:	45a1      	cmp	r9, r4
 8012c66:	db1f      	blt.n	8012ca8 <_strtoul_l.constprop.0+0xb0>
 8012c68:	fb00 4003 	mla	r0, r0, r3, r4
 8012c6c:	2601      	movs	r6, #1
 8012c6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012c72:	e7e9      	b.n	8012c48 <_strtoul_l.constprop.0+0x50>
 8012c74:	2c2b      	cmp	r4, #43	@ 0x2b
 8012c76:	bf04      	itt	eq
 8012c78:	782c      	ldrbeq	r4, [r5, #0]
 8012c7a:	1c85      	addeq	r5, r0, #2
 8012c7c:	e7cd      	b.n	8012c1a <_strtoul_l.constprop.0+0x22>
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d1d8      	bne.n	8012c34 <_strtoul_l.constprop.0+0x3c>
 8012c82:	2c30      	cmp	r4, #48	@ 0x30
 8012c84:	bf0c      	ite	eq
 8012c86:	2308      	moveq	r3, #8
 8012c88:	230a      	movne	r3, #10
 8012c8a:	e7d3      	b.n	8012c34 <_strtoul_l.constprop.0+0x3c>
 8012c8c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012c90:	f1bc 0f19 	cmp.w	ip, #25
 8012c94:	d801      	bhi.n	8012c9a <_strtoul_l.constprop.0+0xa2>
 8012c96:	3c37      	subs	r4, #55	@ 0x37
 8012c98:	e7dc      	b.n	8012c54 <_strtoul_l.constprop.0+0x5c>
 8012c9a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012c9e:	f1bc 0f19 	cmp.w	ip, #25
 8012ca2:	d804      	bhi.n	8012cae <_strtoul_l.constprop.0+0xb6>
 8012ca4:	3c57      	subs	r4, #87	@ 0x57
 8012ca6:	e7d5      	b.n	8012c54 <_strtoul_l.constprop.0+0x5c>
 8012ca8:	f04f 36ff 	mov.w	r6, #4294967295
 8012cac:	e7df      	b.n	8012c6e <_strtoul_l.constprop.0+0x76>
 8012cae:	1c73      	adds	r3, r6, #1
 8012cb0:	d106      	bne.n	8012cc0 <_strtoul_l.constprop.0+0xc8>
 8012cb2:	2322      	movs	r3, #34	@ 0x22
 8012cb4:	f8ce 3000 	str.w	r3, [lr]
 8012cb8:	4630      	mov	r0, r6
 8012cba:	b932      	cbnz	r2, 8012cca <_strtoul_l.constprop.0+0xd2>
 8012cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012cc0:	b107      	cbz	r7, 8012cc4 <_strtoul_l.constprop.0+0xcc>
 8012cc2:	4240      	negs	r0, r0
 8012cc4:	2a00      	cmp	r2, #0
 8012cc6:	d0f9      	beq.n	8012cbc <_strtoul_l.constprop.0+0xc4>
 8012cc8:	b106      	cbz	r6, 8012ccc <_strtoul_l.constprop.0+0xd4>
 8012cca:	1e69      	subs	r1, r5, #1
 8012ccc:	6011      	str	r1, [r2, #0]
 8012cce:	e7f5      	b.n	8012cbc <_strtoul_l.constprop.0+0xc4>
 8012cd0:	080131c9 	.word	0x080131c9

08012cd4 <_strtoul_r>:
 8012cd4:	f7ff bf90 	b.w	8012bf8 <_strtoul_l.constprop.0>

08012cd8 <__ascii_wctomb>:
 8012cd8:	4603      	mov	r3, r0
 8012cda:	4608      	mov	r0, r1
 8012cdc:	b141      	cbz	r1, 8012cf0 <__ascii_wctomb+0x18>
 8012cde:	2aff      	cmp	r2, #255	@ 0xff
 8012ce0:	d904      	bls.n	8012cec <__ascii_wctomb+0x14>
 8012ce2:	228a      	movs	r2, #138	@ 0x8a
 8012ce4:	601a      	str	r2, [r3, #0]
 8012ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8012cea:	4770      	bx	lr
 8012cec:	700a      	strb	r2, [r1, #0]
 8012cee:	2001      	movs	r0, #1
 8012cf0:	4770      	bx	lr
	...

08012cf4 <fiprintf>:
 8012cf4:	b40e      	push	{r1, r2, r3}
 8012cf6:	b503      	push	{r0, r1, lr}
 8012cf8:	4601      	mov	r1, r0
 8012cfa:	ab03      	add	r3, sp, #12
 8012cfc:	4805      	ldr	r0, [pc, #20]	@ (8012d14 <fiprintf+0x20>)
 8012cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d02:	6800      	ldr	r0, [r0, #0]
 8012d04:	9301      	str	r3, [sp, #4]
 8012d06:	f7fe ff8b 	bl	8011c20 <_vfiprintf_r>
 8012d0a:	b002      	add	sp, #8
 8012d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d10:	b003      	add	sp, #12
 8012d12:	4770      	bx	lr
 8012d14:	20000018 	.word	0x20000018

08012d18 <_malloc_usable_size_r>:
 8012d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d1c:	1f18      	subs	r0, r3, #4
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	bfbc      	itt	lt
 8012d22:	580b      	ldrlt	r3, [r1, r0]
 8012d24:	18c0      	addlt	r0, r0, r3
 8012d26:	4770      	bx	lr

08012d28 <_init>:
 8012d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d2a:	bf00      	nop
 8012d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d2e:	bc08      	pop	{r3}
 8012d30:	469e      	mov	lr, r3
 8012d32:	4770      	bx	lr

08012d34 <_fini>:
 8012d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d36:	bf00      	nop
 8012d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d3a:	bc08      	pop	{r3}
 8012d3c:	469e      	mov	lr, r3
 8012d3e:	4770      	bx	lr
